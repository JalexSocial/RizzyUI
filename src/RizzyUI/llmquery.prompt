This file is a merged representation of a subset of the codebase, containing specifically included files and files not matching ignore patterns, combined into a single document. The content has been processed where comments have been removed, empty lines have been removed.
Generated by Repomix on: 2025-04-07T18:34:45.999Z

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

- Pay special attention to the Repository Instruction. These contain important context and guidelines specific to this project.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Only files matching these patterns are included: **/*.razor, **/*.razor.cs, **/*.cs, **/js/rizzyui.js
- Files matching these patterns are excluded: obj/, bin/
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Code comments have been removed from supported file types
- Empty lines have been removed from all files
</notes>

<additional_info>

</additional_info>

</file_summary>

<directory_structure>
_Imports.razor
Colors.cs
ColorScale.cs
Components/Divider/Divider.razor
Components/Document/Browser.razor
Components/Document/CodeLanguage.cs
Components/Document/CodeViewer.razor
Components/Document/EmbeddedPreview.razor
Components/Document/Models/HeadingItem.cs
Components/Document/QuickReference.razor
Components/Document/QuickReferenceContainer.razor
Components/Form/_Imports.razor
Components/Form/CheckboxGroup.razor
Components/Form/CheckboxGroup.razor.cs
Components/Form/CheckboxGroupField.razor
Components/Form/CheckboxGroupField.razor.cs
Components/Form/CheckboxGroupItem.razor
Components/Form/CheckboxGroupItem.razor.cs
Components/Form/DateEdit.razor
Components/Form/DateEdit.razor.cs
Components/Form/Enum/Orientation.cs
Components/Form/Enum/SectionLayout.cs
Components/Form/Enum/TextRole.cs
Components/Form/Field.razor
Components/Form/FieldHelp.razor
Components/Form/FieldLabel.razor
Components/Form/FormSection.razor
Components/Form/InitialValidator.cs
Components/Form/InputBase.cs
Components/Form/Models/FlatpickrOptions.cs
Components/Form/NumberEdit.razor
Components/Form/NumberField.razor
Components/Form/RadioGroup.razor
Components/Form/RadioGroupField.razor
Components/Form/RadioGroupItem.razor
Components/Form/TextEdit.razor
Components/Form/TextField.razor
Components/Form/Toggle.razor
Components/Form/ToggleField.razor
Components/FragmentComponent.cs
Components/HtmlElement.cs
Components/RzAccordion/RzAccordion.razor
Components/RzAccordion/RzAccordion.razor.cs
Components/RzAccordion/RzAccordionSection.razor
Components/RzAccordion/RzAccordionSection.razor.cs
Components/RzAccordion/Styling/DefaultRzAccordionSectionStyles.cs
Components/RzAccordion/Styling/DefaultRzAccordionStyles.cs
Components/RzAlert/RzAlert.razor
Components/RzAlert/RzAlert.razor.cs
Components/RzAlert/Styling/DefaultRzAlertStyles.cs
Components/RzArticle/RzArticle.razor
Components/RzArticle/RzArticle.razor.cs
Components/RzArticle/Styling/DefaultRzArticleStyles.cs
Components/RzAvatar/RzAvatar.razor
Components/RzAvatar/RzAvatar.razor.cs
Components/RzAvatar/Styling/DefaultRzAvatarStyles.cs
Components/RzBadge/RzBadge.razor
Components/RzBadge/RzBadge.razor.cs
Components/RzBadge/Styling/DefaultRzBadgeStyles.cs
Components/RzBreadcrumb/RzBreadcrumb.razor
Components/RzBreadcrumb/RzBreadcrumb.razor.cs
Components/RzBreadcrumb/RzBreadcrumbItem.cs
Components/RzBreadcrumb/Styling/DefaultRzBreadcrumbStyles.cs
Components/RzButton/RzButton.razor
Components/RzButton/RzButton.razor.cs
Components/RzButton/RzButtonGroup.razor
Components/RzButton/RzButtonGroup.razor.cs
Components/RzButton/Styling/DefaultRzButtonGroupStyles.cs
Components/RzButton/Styling/DefaultRzButtonStyles.cs
Components/RzCard/RzCard.razor
Components/RzCard/RzCard.razor.cs
Components/RzCard/RzCardBody.razor
Components/RzCard/RzCardBody.razor.cs
Components/RzCard/RzCardButtons.razor
Components/RzCard/RzCardButtons.razor.cs
Components/RzCard/RzCardFooter.razor
Components/RzCard/RzCardFooter.razor.cs
Components/RzCard/RzCardHeader.razor
Components/RzCard/RzCardHeader.razor.cs
Components/RzCard/RzCardSubtitle.razor
Components/RzCard/RzCardSubtitle.razor.cs
Components/RzCard/RzCardTitle.razor
Components/RzCard/RzCardTitle.razor.cs
Components/RzCard/Styling/DefaultRzCardStyles.cs
Components/RzCheckbox/RzCheckboxGroup.razor
Components/RzCheckbox/RzCheckboxGroup.razor.cs
Components/RzCheckbox/RzCheckboxGroupField.razor
Components/RzCheckbox/RzCheckboxGroupField.razor.cs
Components/RzCheckbox/RzCheckboxGroupItem.razor
Components/RzCheckbox/RzCheckboxGroupItem.razor.cs
Components/RzCheckbox/Styling/DefaultRzCheckboxStyles.cs
Components/RzCodeViewer/RzCodeViewer.razor
Components/RzCodeViewer/RzCodeViewer.razor.cs
Components/RzCodeViewer/Styling/DefaultRzCodeViewerStyles.cs
Components/RzDarkMode/RzDarkModeToggle.razor
Components/RzDarkMode/RzDarkModeToggle.razor.cs
Components/RzDarkMode/Styling/RzDarkmodeToggleStyles.cs
Components/RzDateEdit/RzDateEdit.razor
Components/RzDateEdit/RzDateEdit.razor.cs
Components/RzDateEdit/Styling/DefaultRzDateEditStyles.cs
Components/RzDivider/Styling/DefaultRzDividerStyles.cs
Components/RzDropdown/RzDropdown.razor
Components/RzDropdown/RzDropdown.razor.cs
Components/RzDropdown/RzDropdownMenuItem.razor
Components/RzDropdown/RzDropdownMenuItem.razor.cs
Components/RzDropdown/RzDropdownSection.razor
Components/RzDropdown/RzDropdownSection.razor.cs
Components/RzDropdown/Styling/DefaultRzDropdownStyles.cs
Components/RzEmbeddedPreview/RzEmbeddedPreview.razor
Components/RzEmbeddedPreview/RzEmbeddedPreview.razor.cs
Components/RzEmbeddedPreview/Styling/DefaultRzEmbeddedPreviewStyles.cs
Components/RzField/RzField.razor
Components/RzField/RzField.razor.cs
Components/RzField/RzFieldHelp.razor
Components/RzField/RzFieldHelp.razor.cs
Components/RzField/RzFieldLabel.razor
Components/RzField/RzFieldLabel.razor.cs
Components/RzField/Styling/DefaultRzFieldStyles.cs
Components/RzFormSection/RzFormSection.razor
Components/RzFormSection/RzFormSection.razor.cs
Components/RzFormSection/Styling/DefaultRzFormSectionStyles.cs
Components/RzLink/RzLink.razor
Components/RzLink/RzLink.razor.cs
Components/RzLink/Styling/DefaultRzLinkStyles.cs
Components/RzMarkdown/RzMarkdown.razor
Components/RzMarkdown/RzMarkdown.razor.cs
Components/RzMarkdown/Styling/DefaultRzMarkdownStyles.cs
Components/RzNavbar/RzNavbar.razor
Components/RzNavbar/RzNavbar.razor.cs
Components/RzNavbar/Styling/DefaultRzNavbarStyles.cs
Components/RzNumber/RzNumberEdit.razor
Components/RzNumber/RzNumberEdit.razor.cs
Components/RzNumber/RzNumberField.razor
Components/RzNumber/RzNumberField.razor.cs
Components/RzNumber/Styling/DefaultRzNumberStyles.cs
Components/RzProgress/RzProgress.razor
Components/RzProgress/RzProgress.razor.cs
Components/RzProgress/Styling/DefaultRzProgressStyles.cs
Components/RzQuickReference/RzQuickReference.razor
Components/RzQuickReference/RzQuickReference.razor.cs
Components/RzQuickReference/RzQuickReferenceContainer.razor
Components/RzQuickReference/RzQuickReferenceContainer.razor.cs
Components/RzQuickReference/Styling/DefaultRzQuickReferenceStyles.cs
Components/RzRadio/RzRadioGroup.razor
Components/RzRadio/RzRadioGroup.razor.cs
Components/RzRadio/RzRadioGroupField.razor
Components/RzRadio/RzRadioGroupField.razor.cs
Components/RzRadio/RzRadioGroupItem.razor
Components/RzRadio/RzRadioGroupItem.razor.cs
Components/RzRadio/Styling/DefaultRzRadioStyles.cs
Components/RzSearchButton/RzSearchButton.razor
Components/RzSearchButton/RzSearchButton.razor.cs
Components/RzSearchButton/Styling/DefaultRzSearchButtonStyles.cs
Components/RzSidebar/RzSidebar.razor
Components/RzSidebar/RzSidebar.razor.cs
Components/RzSidebar/RzSidebarLinkItem.razor
Components/RzSidebar/RzSidebarLinkItem.razor.cs
Components/RzSidebar/RzSidebarLinks.razor
Components/RzSidebar/RzSidebarLinks.razor.cs
Components/RzSidebar/Styling/DefaultRzSidebarStyles.cs
Components/RzStep/RzSteps.razor
Components/RzStep/RzSteps.razor.cs
Components/RzStep/StepData.cs
Components/RzStep/StepStatus.cs
Components/RzStep/Styling/DefaultRzStepsStyles.cs
Components/RzTab/RzTab.razor
Components/RzTab/RzTab.razor.cs
Components/RzTab/RzTabPanel.razor
Components/RzTab/RzTabPanel.razor.cs
Components/RzTab/RzTabs.razor
Components/RzTab/RzTabs.razor.cs
Components/RzTab/RzTabStrip.razor
Components/RzTab/RzTabStrip.razor.cs
Components/RzTab/Styling/DefaultRzTabStyles.cs
Components/RzText/RzTextEdit.razor
Components/RzText/RzTextEdit.razor.cs
Components/RzText/RzTextField.razor
Components/RzText/RzTextField.razor.cs
Components/RzText/Styling/DefaultRzTextStyles.cs
Components/RzToggle/RzToggle.razor
Components/RzToggle/RzToggle.razor.cs
Components/RzToggle/RzToggleField.razor
Components/RzToggle/RzToggleField.razor.cs
Components/RzToggle/Styling/DefaultRzToggleStyles.cs
Components/RzTypography/RzHeading.razor
Components/RzTypography/RzHeading.razor.cs
Components/RzTypography/RzParagraph.razor.cs
Components/RzTypography/RzTypographyBase.razor.cs
Components/RzTypography/Styling/DefaultRzTypographyStyles.cs
Components/Theme/RizzyThemeProvider.cs
Components/Theme/Themes/ArcticTheme.cs
Components/Theme/Themes/Code/CodeThemes.cs
Components/Theme/Themes/Code/RizzyCodeTheme.cs
Components/Theme/Themes/HighContrastTheme.cs
Components/Theme/Themes/ModernTheme.cs
Components/Theme/Themes/NewsTheme.cs
Components/Typography/Heading.razor
Components/Typography/Paragraph.razor
Components/Typography/Styles.cs
Components/Typography/TypographyBase.razor
Components/Utility/ColorUtil.cs
Components/Variants.cs
Constants.cs
Extensions/MarkdigExtensions.cs
Extensions/ServiceCollectionExtensions.cs
Extensions/StringExtensions.cs
Extensions/TwMergeExtensions.cs
GlobalSuppressions.cs
GlobalUsings.cs
Oklch.cs
RizzyUIConfig.cs
RzComponent.cs
RzStylesBase.cs
RzTheme.cs
RzThemeVariant.cs
Utility/Serialization/Converters/CalendarPositionConverter.cs
Utility/Serialization/Converters/RawStringConverter.cs
Utility/Serialization/Converters/SingleQuoteStringConverter.cs
wwwroot/js/rizzyui.js
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path="_Imports.razor">
@using Microsoft.AspNetCore.Components.Web
@using RizzyUI.Extensions
</file>

<file path="Colors.cs">
namespace RizzyUI;
public static class Colors
{
	public static readonly Color Transparent = new(new Oklch(0, 0, 0, 0));
	public static readonly Color White = new("--color-white", "white");
	public static readonly Color Black = new("--color-black", "black");
	public static readonly ColorScale Red = new Red();
	public static readonly ColorScale Orange = new Orange();
	public static readonly ColorScale Amber = new Amber();
	public static readonly ColorScale Yellow = new Yellow();
	public static readonly ColorScale Lime = new Lime();
	public static readonly ColorScale Green = new Green();
	public static readonly ColorScale Emerald = new Emerald();
	public static readonly ColorScale Teal = new Teal();
	public static readonly ColorScale Cyan = new Cyan();
	public static readonly ColorScale Sky = new Sky();
	public static readonly ColorScale Blue = new Blue();
	public static readonly ColorScale Indigo = new Indigo();
	public static readonly ColorScale Violet = new Violet();
	public static readonly ColorScale Purple = new Purple();
	public static readonly ColorScale Fuchsia = new Fuchsia();
	public static readonly ColorScale Pink = new Pink();
	public static readonly ColorScale Rose = new Rose();
	public static readonly ColorScale Stone = new Stone();
	public static readonly ColorScale Neutral = new Neutral();
	public static readonly ColorScale Zinc = new Zinc();
	public static readonly ColorScale Gray = new Gray();
	public static readonly ColorScale Slate = new Slate();
}
</file>

<file path="ColorScale.cs">
namespace RizzyUI;
public abstract class ColorScale
{
    public abstract Color L50 { get; }
    public abstract Color L100 { get; }
    public abstract Color L200 { get; }
    public abstract Color L300 { get; }
    public abstract Color L400 { get; }
    public abstract Color L500 { get; }
    public abstract Color L600 { get; }
    public abstract Color L700 { get; }
    public abstract Color L800 { get; }
    public abstract Color L900 { get; }
    public abstract Color L950 { get; }
}
public sealed class Red : ColorScale
{
    public override Color L50 => new("--color-red-50", "red-50");
    public override Color L100 => new("--color-red-100", "red-100");
    public override Color L200 => new("--color-red-200", "red-200");
    public override Color L300 => new("--color-red-300", "red-300");
    public override Color L400 => new("--color-red-400", "red-400");
    public override Color L500 => new("--color-red-500", "red-500");
    public override Color L600 => new("--color-red-600", "red-600");
    public override Color L700 => new("--color-red-700", "red-700");
    public override Color L800 => new("--color-red-800", "red-800");
    public override Color L900 => new("--color-red-900", "red-900");
    public override Color L950 => new("--color-red-950", "red-950");
}
public sealed class Orange : ColorScale
{
    public override Color L50 => new("--color-orange-50", "orange-50");
    public override Color L100 => new("--color-orange-100", "orange-100");
    public override Color L200 => new("--color-orange-200", "orange-200");
    public override Color L300 => new("--color-orange-300", "orange-300");
    public override Color L400 => new("--color-orange-400", "orange-400");
    public override Color L500 => new("--color-orange-500", "orange-500");
    public override Color L600 => new("--color-orange-600", "orange-600");
    public override Color L700 => new("--color-orange-700", "orange-700");
    public override Color L800 => new("--color-orange-800", "orange-800");
    public override Color L900 => new("--color-orange-900", "orange-900");
    public override Color L950 => new("--color-orange-950", "orange-950");
}
public sealed class Amber : ColorScale
{
    public override Color L50 => new("--color-amber-50", "amber-50");
    public override Color L100 => new("--color-amber-100", "amber-100");
    public override Color L200 => new("--color-amber-200", "amber-200");
    public override Color L300 => new("--color-amber-300", "amber-300");
    public override Color L400 => new("--color-amber-400", "amber-400");
    public override Color L500 => new("--color-amber-500", "amber-500");
    public override Color L600 => new("--color-amber-600", "amber-600");
    public override Color L700 => new("--color-amber-700", "amber-700");
    public override Color L800 => new("--color-amber-800", "amber-800");
    public override Color L900 => new("--color-amber-900", "amber-900");
    public override Color L950 => new("--color-amber-950", "amber-950");
}
public sealed class Yellow : ColorScale
{
    public override Color L50 => new("--color-yellow-50", "yellow-50");
    public override Color L100 => new("--color-yellow-100", "yellow-100");
    public override Color L200 => new("--color-yellow-200", "yellow-200");
    public override Color L300 => new("--color-yellow-300", "yellow-300");
    public override Color L400 => new("--color-yellow-400", "yellow-400");
    public override Color L500 => new("--color-yellow-500", "yellow-500");
    public override Color L600 => new("--color-yellow-600", "yellow-600");
    public override Color L700 => new("--color-yellow-700", "yellow-700");
    public override Color L800 => new("--color-yellow-800", "yellow-800");
    public override Color L900 => new("--color-yellow-900", "yellow-900");
    public override Color L950 => new("--color-yellow-950", "yellow-950");
}
public sealed class Lime : ColorScale
{
    public override Color L50 => new("--color-lime-50", "lime-50");
    public override Color L100 => new("--color-lime-100", "lime-100");
    public override Color L200 => new("--color-lime-200", "lime-200");
    public override Color L300 => new("--color-lime-300", "lime-300");
    public override Color L400 => new("--color-lime-400", "lime-400");
    public override Color L500 => new("--color-lime-500", "lime-500");
    public override Color L600 => new("--color-lime-600", "lime-600");
    public override Color L700 => new("--color-lime-700", "lime-700");
    public override Color L800 => new("--color-lime-800", "lime-800");
    public override Color L900 => new("--color-lime-900", "lime-900");
    public override Color L950 => new("--color-lime-950", "lime-950");
}
public sealed class Green : ColorScale
{
    public override Color L50 => new("--color-green-50", "green-50");
    public override Color L100 => new("--color-green-100", "green-100");
    public override Color L200 => new("--color-green-200", "green-200");
    public override Color L300 => new("--color-green-300", "green-300");
    public override Color L400 => new("--color-green-400", "green-400");
    public override Color L500 => new("--color-green-500", "green-500");
    public override Color L600 => new("--color-green-600", "green-600");
    public override Color L700 => new("--color-green-700", "green-700");
    public override Color L800 => new("--color-green-800", "green-800");
    public override Color L900 => new("--color-green-900", "green-900");
    public override Color L950 => new("--color-green-950", "green-950");
}
public sealed class Emerald : ColorScale
{
    public override Color L50 => new("--color-emerald-50", "emerald-50");
    public override Color L100 => new("--color-emerald-100", "emerald-100");
    public override Color L200 => new("--color-emerald-200", "emerald-200");
    public override Color L300 => new("--color-emerald-300", "emerald-300");
    public override Color L400 => new("--color-emerald-400", "emerald-400");
    public override Color L500 => new("--color-emerald-500", "emerald-500");
    public override Color L600 => new("--color-emerald-600", "emerald-600");
    public override Color L700 => new("--color-emerald-700", "emerald-700");
    public override Color L800 => new("--color-emerald-800", "emerald-800");
    public override Color L900 => new("--color-emerald-900", "emerald-900");
    public override Color L950 => new("--color-emerald-950", "emerald-950");
}
public sealed class Teal : ColorScale
{
    public override Color L50 => new("--color-teal-50", "teal-50");
    public override Color L100 => new("--color-teal-100", "teal-100");
    public override Color L200 => new("--color-teal-200", "teal-200");
    public override Color L300 => new("--color-teal-300", "teal-300");
    public override Color L400 => new("--color-teal-400", "teal-400");
    public override Color L500 => new("--color-teal-500", "teal-500");
    public override Color L600 => new("--color-teal-600", "teal-600");
    public override Color L700 => new("--color-teal-700", "teal-700");
    public override Color L800 => new("--color-teal-800", "teal-800");
    public override Color L900 => new("--color-teal-900", "teal-900");
    public override Color L950 => new("--color-teal-950", "teal-950");
}
public sealed class Cyan : ColorScale
{
    public override Color L50 => new("--color-cyan-50", "cyan-50");
    public override Color L100 => new("--color-cyan-100", "cyan-100");
    public override Color L200 => new("--color-cyan-200", "cyan-200");
    public override Color L300 => new("--color-cyan-300", "cyan-300");
    public override Color L400 => new("--color-cyan-400", "cyan-400");
    public override Color L500 => new("--color-cyan-500", "cyan-500");
    public override Color L600 => new("--color-cyan-600", "cyan-600");
    public override Color L700 => new("--color-cyan-700", "cyan-700");
    public override Color L800 => new("--color-cyan-800", "cyan-800");
    public override Color L900 => new("--color-cyan-900", "cyan-900");
    public override Color L950 => new("--color-cyan-950", "cyan-950");
}
public sealed class Sky : ColorScale
{
    public override Color L50 => new("--color-sky-50", "sky-50");
    public override Color L100 => new("--color-sky-100", "sky-100");
    public override Color L200 => new("--color-sky-200", "sky-200");
    public override Color L300 => new("--color-sky-300", "sky-300");
    public override Color L400 => new("--color-sky-400", "sky-400");
    public override Color L500 => new("--color-sky-500", "sky-500");
    public override Color L600 => new("--color-sky-600", "sky-600");
    public override Color L700 => new("--color-sky-700", "sky-700");
    public override Color L800 => new("--color-sky-800", "sky-800");
    public override Color L900 => new("--color-sky-900", "sky-900");
    public override Color L950 => new("--color-sky-950", "sky-950");
}
public sealed class Blue : ColorScale
{
    public override Color L50 => new("--color-blue-50", "blue-50");
    public override Color L100 => new("--color-blue-100", "blue-100");
    public override Color L200 => new("--color-blue-200", "blue-200");
    public override Color L300 => new("--color-blue-300", "blue-300");
    public override Color L400 => new("--color-blue-400", "blue-400");
    public override Color L500 => new("--color-blue-500", "blue-500");
    public override Color L600 => new("--color-blue-600", "blue-600");
    public override Color L700 => new("--color-blue-700", "blue-700");
    public override Color L800 => new("--color-blue-800", "blue-800");
    public override Color L900 => new("--color-blue-900", "blue-900");
    public override Color L950 => new("--color-blue-950", "blue-950");
}
public sealed class Indigo : ColorScale
{
    public override Color L50 => new("--color-indigo-50", "indigo-50");
    public override Color L100 => new("--color-indigo-100", "indigo-100");
    public override Color L200 => new("--color-indigo-200", "indigo-200");
    public override Color L300 => new("--color-indigo-300", "indigo-300");
    public override Color L400 => new("--color-indigo-400", "indigo-400");
    public override Color L500 => new("--color-indigo-500", "indigo-500");
    public override Color L600 => new("--color-indigo-600", "indigo-600");
    public override Color L700 => new("--color-indigo-700", "indigo-700");
    public override Color L800 => new("--color-indigo-800", "indigo-800");
    public override Color L900 => new("--color-indigo-900", "indigo-900");
    public override Color L950 => new("--color-indigo-950", "indigo-950");
}
public sealed class Violet : ColorScale
{
    public override Color L50 => new("--color-violet-50", "violet-50");
    public override Color L100 => new("--color-violet-100", "violet-100");
    public override Color L200 => new("--color-violet-200", "violet-200");
    public override Color L300 => new("--color-violet-300", "violet-300");
    public override Color L400 => new("--color-violet-400", "violet-400");
    public override Color L500 => new("--color-violet-500", "violet-500");
    public override Color L600 => new("--color-violet-600", "violet-600");
    public override Color L700 => new("--color-violet-700", "violet-700");
    public override Color L800 => new("--color-violet-800", "violet-800");
    public override Color L900 => new("--color-violet-900", "violet-900");
    public override Color L950 => new("--color-violet-950", "violet-950");
}
public sealed class Purple : ColorScale
{
    public override Color L50 => new("--color-purple-50", "purple-50");
    public override Color L100 => new("--color-purple-100", "purple-100");
    public override Color L200 => new("--color-purple-200", "purple-200");
    public override Color L300 => new("--color-purple-300", "purple-300");
    public override Color L400 => new("--color-purple-400", "purple-400");
    public override Color L500 => new("--color-purple-500", "purple-500");
    public override Color L600 => new("--color-purple-600", "purple-600");
    public override Color L700 => new("--color-purple-700", "purple-700");
    public override Color L800 => new("--color-purple-800", "purple-800");
    public override Color L900 => new("--color-purple-900", "purple-900");
    public override Color L950 => new("--color-purple-950", "purple-950");
}
public sealed class Fuchsia : ColorScale
{
    public override Color L50 => new("--color-fuchsia-50", "fuchsia-50");
    public override Color L100 => new("--color-fuchsia-100", "fuchsia-100");
    public override Color L200 => new("--color-fuchsia-200", "fuchsia-200");
    public override Color L300 => new("--color-fuchsia-300", "fuchsia-300");
    public override Color L400 => new("--color-fuchsia-400", "fuchsia-400");
    public override Color L500 => new("--color-fuchsia-500", "fuchsia-500");
    public override Color L600 => new("--color-fuchsia-600", "fuchsia-600");
    public override Color L700 => new("--color-fuchsia-700", "fuchsia-700");
    public override Color L800 => new("--color-fuchsia-800", "fuchsia-800");
    public override Color L900 => new("--color-fuchsia-900", "fuchsia-900");
    public override Color L950 => new("--color-fuchsia-950", "fuchsia-950");
}
public sealed class Pink : ColorScale
{
    public override Color L50 => new("--color-pink-50", "pink-50");
    public override Color L100 => new("--color-pink-100", "pink-100");
    public override Color L200 => new("--color-pink-200", "pink-200");
    public override Color L300 => new("--color-pink-300", "pink-300");
    public override Color L400 => new("--color-pink-400", "pink-400");
    public override Color L500 => new("--color-pink-500", "pink-500");
    public override Color L600 => new("--color-pink-600", "pink-600");
    public override Color L700 => new("--color-pink-700", "pink-700");
    public override Color L800 => new("--color-pink-800", "pink-800");
    public override Color L900 => new("--color-pink-900", "pink-900");
    public override Color L950 => new("--color-pink-950", "pink-950");
}
public sealed class Rose : ColorScale
{
    public override Color L50 => new("--color-rose-50", "rose-50");
    public override Color L100 => new("--color-rose-100", "rose-100");
    public override Color L200 => new("--color-rose-200", "rose-200");
    public override Color L300 => new("--color-rose-300", "rose-300");
    public override Color L400 => new("--color-rose-400", "rose-400");
    public override Color L500 => new("--color-rose-500", "rose-500");
    public override Color L600 => new("--color-rose-600", "rose-600");
    public override Color L700 => new("--color-rose-700", "rose-700");
    public override Color L800 => new("--color-rose-800", "rose-800");
    public override Color L900 => new("--color-rose-900", "rose-900");
    public override Color L950 => new("--color-rose-950", "rose-950");
}
public sealed class Slate : ColorScale
{
    public override Color L50 => new("--color-slate-50", "slate-50");
    public override Color L100 => new("--color-slate-100", "slate-100");
    public override Color L200 => new("--color-slate-200", "slate-200");
    public override Color L300 => new("--color-slate-300", "slate-300");
    public override Color L400 => new("--color-slate-400", "slate-400");
    public override Color L500 => new("--color-slate-500", "slate-500");
    public override Color L600 => new("--color-slate-600", "slate-600");
    public override Color L700 => new("--color-slate-700", "slate-700");
    public override Color L800 => new("--color-slate-800", "slate-800");
    public override Color L900 => new("--color-slate-900", "slate-900");
    public override Color L950 => new("--color-slate-950", "slate-950");
}
public sealed class Gray : ColorScale
{
    public override Color L50 => new("--color-gray-50", "gray-50");
    public override Color L100 => new("--color-gray-100", "gray-100");
    public override Color L200 => new("--color-gray-200", "gray-200");
    public override Color L300 => new("--color-gray-300", "gray-300");
    public override Color L400 => new("--color-gray-400", "gray-400");
    public override Color L500 => new("--color-gray-500", "gray-500");
    public override Color L600 => new("--color-gray-600", "gray-600");
    public override Color L700 => new("--color-gray-700", "gray-700");
    public override Color L800 => new("--color-gray-800", "gray-800");
    public override Color L900 => new("--color-gray-900", "gray-900");
    public override Color L950 => new("--color-gray-950", "gray-950");
}
public sealed class Zinc : ColorScale
{
    public override Color L50 => new("--color-zinc-50", "zinc-50");
    public override Color L100 => new("--color-zinc-100", "zinc-100");
    public override Color L200 => new("--color-zinc-200", "zinc-200");
    public override Color L300 => new("--color-zinc-300", "zinc-300");
    public override Color L400 => new("--color-zinc-400", "zinc-400");
    public override Color L500 => new("--color-zinc-500", "zinc-500");
    public override Color L600 => new("--color-zinc-600", "zinc-600");
    public override Color L700 => new("--color-zinc-700", "zinc-700");
    public override Color L800 => new("--color-zinc-800", "zinc-800");
    public override Color L900 => new("--color-zinc-900", "zinc-900");
    public override Color L950 => new("--color-zinc-950", "zinc-950");
}
public sealed class Neutral : ColorScale
{
    public override Color L50 => new("--color-neutral-50", "neutral-50");
    public override Color L100 => new("--color-neutral-100", "neutral-100");
    public override Color L200 => new("--color-neutral-200", "neutral-200");
    public override Color L300 => new("--color-neutral-300", "neutral-300");
    public override Color L400 => new("--color-neutral-400", "neutral-400");
    public override Color L500 => new("--color-neutral-500", "neutral-500");
    public override Color L600 => new("--color-neutral-600", "neutral-600");
    public override Color L700 => new("--color-neutral-700", "neutral-700");
    public override Color L800 => new("--color-neutral-800", "neutral-800");
    public override Color L900 => new("--color-neutral-900", "neutral-900");
    public override Color L950 => new("--color-neutral-950", "neutral-950");
}
public sealed class Stone : ColorScale
{
    public override Color L50 => new("--color-stone-50", "stone-50");
    public override Color L100 => new("--color-stone-100", "stone-100");
    public override Color L200 => new("--color-stone-200", "stone-200");
    public override Color L300 => new("--color-stone-300", "stone-300");
    public override Color L400 => new("--color-stone-400", "stone-400");
    public override Color L500 => new("--color-stone-500", "stone-500");
    public override Color L600 => new("--color-stone-600", "stone-600");
    public override Color L700 => new("--color-stone-700", "stone-700");
    public override Color L800 => new("--color-stone-800", "stone-800");
    public override Color L900 => new("--color-stone-900", "stone-900");
    public override Color L950 => new("--color-stone-950", "stone-950");
}
</file>

<file path="Components/Divider/Divider.razor">
@namespace RizzyUI
@inherits RzComponent

<HtmlElement Element="@Element" @attributes="AdditionalAttributes" class="@RootClass()">
    @ChildContent
</HtmlElement>

@code {
    private static readonly string BaseStyle = "my-8 py-3 flex items-center text-sm text-outline";

    // Used for Tailwind class discovery
#pragma warning disable CS0414 // Field is assigned but its value is never used
    private static readonly string TwDiscovery = "after:border-solid after:border-dashed after:border-dotted before:border-solid before:border-dashed before:border-dotted";
#pragma warning restore CS0414 // Field is assigned but its value is never used

    /// <summary>
    ///     Style for dividing line
    /// </summary>
    [Parameter]
    public DividerStyle Style { get; set; } = DividerStyle.Solid;

    /// <summary>
    ///     Text alignment for label
    /// </summary>
    [Parameter]
    public Align LabelAlignment { get; set; } = Align.Center;

    /// <summary>
    ///     Child content to display in the divider
    /// </summary>
    [Parameter]
    public RenderFragment? ChildContent { get; set; }

    /// <summary>
    ///     Initialize Element parameter
    /// </summary>
    protected override void OnParametersSet()
    {
        base.OnParametersSet();

        if (ChildContent == null)
            Element = "hr";
    }

    /// <inheritdoc cref="RzComponent" />
    protected override string? RootClass()
    {
        return TwMerge.Merge(AdditionalAttributes, BaseStyle,
            ChildContent is null ? GetDividerStyleCss(Style) : GetAlignmentCss(LabelAlignment, Style));
    }

    private static string GetDividerStyleCss(DividerStyle style)
    {
        return style switch
        {
            DividerStyle.Solid => "border-solid",
            DividerStyle.Dashed => "border-dashed",
            DividerStyle.Dotted => "border-dotted",
            _ => "border-solid"
        };
    }

    private static string GetAlignmentCss(Align alignment, DividerStyle style)
    {
        var styleCss = GetDividerStyleCss(style);

        return alignment switch
        {
            Align.Start => $"after:flex-1 after:border-t after:{styleCss} after:border-outline after:ms-6 dark:after:border-outline",
            Align.Center => $"before:flex-1 before:border-t before:{styleCss} before:border-outline before:me-6 after:flex-1 after:border-t after:border-outline after:ms-6 dark:before:border-outline dark:after:border-outline after:{styleCss}",
            Align.End => $"before:flex-1 before:border-t before:{styleCss} before:border-outline before:me-6 dark:before:border-outline",
            _ => ""
        };
    }

}
</file>

<file path="Components/Document/Browser.razor">
@namespace RizzyUI

@inherits RzComponent

<div x-data="rzBrowser" @attributes="@AdditionalAttributes" class="@RootClass()">
    <div
        class="bg-surface-alt  w-full px-4 py-3 lg:py-1.5 pr-0 flex items-center justify-between border-outline  border-b">
        <div class="flex gap-1.5">
            <div class="size-3 rounded-full bg-red-500"></div>
            <div class="size-3 rounded-full bg-yellow-500"></div>
            <div class="size-3 rounded-full bg-green-500"></div>
        </div>
        <div class="text-on-surface hidden items-center justify-center gap-4  lg:flex">
            <div class="bg-surface-alt border-outline flex items-center gap-1 rounded-full px-4  ">
                <button title="Desktop Screen" x-on:click="setDesktopScreenSize"
                        class="rounded-full p-1 transition hover:bg-surface-dark/10 focus:outline-none focus-visible:bg-surface-dark/10 dark:hover:bg-surface/10 dark:focus-visible:bg-surface/10">
                    <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" fill="currentColor"
                         :class="getDesktopScreenCss" viewBox="0 0 16 16"
                         class="text-on-surface-strong forced-color-adjust-auto ">
                        <title>Desktop</title>
                        <path
                            d="M0 4s0-2 2-2h12s2 0 2 2v6s0 2-2 2h-4c0 .667.083 1.167.25 1.5H11a.5.5 0 0 1 0 1H5a.5.5 0 0 1 0-1h.75c.167-.333.25-.833.25-1.5H2s-2 0-2-2V4zm1.398-.855a.758.758 0 0 0-.254.302A1.46 1.46 0 0 0 1 4.01V10c0 .325.078.502.145.602.07.105.17.188.302.254a1.464 1.464 0 0 0 .538.143L2.01 11H14c.325 0 .502-.078.602-.145a.758.758 0 0 0 .254-.302 1.464 1.464 0 0 0 .143-.538L15 9.99V4c0-.325-.078-.502-.145-.602a.757.757 0 0 0-.302-.254A1.46 1.46 0 0 0 13.99 3H2c-.325 0-.502.078-.602.145z"></path>
                    </svg>
                </button>
                <button x-on:click="setTabletScreenSize" title="Tablet Screen"
                        class="rounded-full p-1 transition hover:bg-surface-dark/10 focus:outline-none focus-visible:bg-surface-dark/10 dark:hover:bg-surface/10 dark:focus-visible:bg-surface/10">
                    <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" fill="currentColor"
                         :class="getTabletScreenCss" viewBox="0 0 16 16" class="opacity-60">
                        <title>Tablet</title>
                        <path
                            d="M12 1a1 1 0 0 1 1 1v12a1 1 0 0 1-1 1H4a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1h8zM4 0a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h8a2 2 0 0 0 2-2V2a2 2 0 0 0-2-2H4z"></path>
                        <path d="M8 14a1 1 0 1 0 0-2 1 1 0 0 0 0 2z"></path>
                    </svg>
                </button>
                <button x-on:click="setPhoneScreenSize" title="Phone Screen"
                        class="rounded-full p-1 transition hover:bg-surface-dark/10 focus:outline-none focus-visible:bg-surface-dark/10 dark:hover:bg-surface/10 dark:focus-visible:bg-surface/10">
                    <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" fill="currentColor"
                         :class="getPhoneScreenCss" viewBox="0 0 16 16" class="opacity-60">
                        <title>Phone</title>
                        <path
                            d="M11 1a1 1 0 0 1 1 1v12a1 1 0 0 1-1 1H5a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1h6zM5 0a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h6a2 2 0 0 0 2-2V2a2 2 0 0 0-2-2H5z"></path>
                        <path d="M8 14a1 1 0 1 0 0-2 1 1 0 0 0 0 2z"></path>
                    </svg>
                </button>
            </div>
        </div>
    </div>
    <div class="grid-pattern bg-surface flex justify-center ">
        <div class="container bg-surface border-outline relative w-full overflow-hidden transition-all border-none  "
             :class="getBrowserBorderCss">

            @if (Layout != null)
            {
                <EmbeddedPreview Layout="@Layout">
                    @ChildContent
                </EmbeddedPreview>
            }
            else
            {
                @ChildContent
            }

        </div>
    </div>
</div>

@code {
    private static readonly string BaseStyle = "overflow-hidden border border-outline  rounded-theme";

    /// <summary>
    ///     Child content for the responsive browser
    /// </summary>
    [Parameter]
    public RenderFragment? ChildContent { get; set; }

    /// <summary>
    ///     Optional Layout for content - If present then content will be rendered to an iframe using
    ///     the layout
    /// </summary>
    [Parameter]
    public Type? Layout { get; set; }

    protected override string? RootClass()
    {
        return TwMerge.Merge(AdditionalAttributes, BaseStyle);
    }

}
</file>

<file path="Components/Document/CodeLanguage.cs">
namespace RizzyUI;
public static class CodeLanguage
{
    public const string OneC = "1c";
    public const string FourD = "4d";
    public const string Abap = "sap-abap";
    public const string Abnf = "abnf";
    public const string AccessLog = "accesslog";
    public const string Ada = "ada";
    public const string Apex = "apex";
    public const string Arduino = "arduino";
    public const string ArmAsm = "armasm";
    public const string AvrAsm = "avrasm";
    public const string ActionScript = "actionscript";
    public const string AlanIf = "alan";
    public const string Alan = "ln";
    public const string AngelScript = "angelscript";
    public const string Apache = "apache";
    public const string AppleScript = "applescript";
    public const string Arcade = "arcade";
    public const string AsciiDoc = "asciidoc";
    public const string AspectJ = "aspectj";
    public const string AutoHotkey = "autohotkey";
    public const string AutoIt = "autoit";
    public const string Awk = "awk";
    public const string Ballerina = "ballerina";
    public const string Bash = "bash";
    public const string Basic = "basic";
    public const string BBCode = "bbcode";
    public const string Blade = "blade";
    public const string Bnf = "bnf";
    public const string Bqn = "bqn";
    public const string Brainfuck = "brainfuck";
    public const string CSharp = "csharp";
    public const string C = "c";
    public const string Cpp = "cpp";
    public const string CAL = "cal";
    public const string C3 = "c3";
    public const string CacheObjectScript = "cos";
    public const string Candid = "candid";
    public const string CMake = "cmake";
    public const string Cobol = "cobol";
    public const string Codeowners = "codeowners";
    public const string Coq = "coq";
    public const string Csp = "csp";
    public const string Css = "css";
    public const string CapnProto = "capnproto";
    public const string Chaos = "chaos";
    public const string Chapel = "chapel";
    public const string CiscoCli = "cisco";
    public const string Clojure = "clojure";
    public const string CoffeeScript = "coffeescript";
    public const string CpcdosCPlus = "cpc";
    public const string Crmsh = "crmsh";
    public const string Crystal = "crystal";
    public const string Curl = "curl";
    public const string Cypher = "cypher";
    public const string D = "d";
    public const string Dafny = "dafny";
    public const string Dart = "dart";
    public const string Delphi = "dpr";
    public const string Diff = "diff";
    public const string Django = "django";
    public const string DnsZoneFile = "dns";
    public const string Dockerfile = "dockerfile";
    public const string Dos = "dos";
    public const string Dsconfig = "dsconfig";
    public const string Dts = "dts";
    public const string Dust = "dust";
    public const string Dylan = "dylan";
    public const string Ebnf = "ebnf";
    public const string Elixir = "elixir";
    public const string Elm = "elm";
    public const string Erlang = "erlang";
    public const string Excel = "excel";
    public const string Extempore = "extempore";
    public const string FSharp = "fsharp";
    public const string Fix = "fix";
    public const string Flix = "flix";
    public const string Fortran = "fortran";
    public const string FunC = "func";
    public const string GCode = "gcode";
    public const string Gams = "gams";
    public const string Gauss = "gauss";
    public const string GdScript = "godot";
    public const string Gherkin = "gherkin";
    public const string Glimmer = "hbs";
    public const string Gn = "gn";
    public const string Go = "go";
    public const string GrammaticalFramework = "gf";
    public const string Golo = "golo";
    public const string Gradle = "gradle";
    public const string GraphQL = "graphql";
    public const string Groovy = "groovy";
    public const string GSQL = "gsql";
    public const string Html = "xml";
    public const string Http = "http";
    public const string Haml = "haml";
    public const string Handlebars = "handlebars";
    public const string Haskell = "haskell";
    public const string Haxe = "haxe";
    public const string Hlsl = "hlsl";
    public const string Hy = "hy";
    public const string Ini = "ini";
    public const string Inform7 = "inform7";
    public const string Irpf90 = "irpf90";
    public const string Iptables = "iptables";
    public const string Json = "json";
    public const string Jsonata = "jsonata";
    public const string Java = "java";
    public const string JavaScript = "javascript";
    public const string Jolie = "jolie";
    public const string Julia = "julia";
    public const string JuliaRepl = "julia-repl";
    public const string Kotlin = "kotlin";
    public const string Latex = "tex";
    public const string Leaf = "leaf";
    public const string Lean = "lean";
    public const string Lasso = "lasso";
    public const string Less = "less";
    public const string Ldif = "ldif";
    public const string Lisp = "lisp";
    public const string LiveCodeServer = "livecodeserver";
    public const string LiveScript = "livescript";
    public const string LookMl = "lookml";
    public const string Lua = "lua";
    public const string Luau = "luau";
    public const string Macaulay2 = "macaulay2";
    public const string Makefile = "makefile";
    public const string Markdown = "markdown";
    public const string Mathematica = "mathematica";
    public const string Matlab = "matlab";
    public const string Maxima = "maxima";
    public const string MayaEmbeddedLanguage = "mel";
    public const string Mercury = "mercury";
    public const string MetaPost = "metapost";
    public const string MipsAsm = "mips";
    public const string Mint = "mint";
    public const string Mirth = "mirth";
    public const string Mirc = "mirc";
    public const string Mizar = "mizar";
    public const string Mkb = "mkb";
    public const string Mlir = "mlir";
    public const string Mojolicious = "mojolicious";
    public const string Monkey = "monkey";
    public const string MoonScript = "moonscript";
    public const string Motoko = "motoko";
    public const string N1ql = "n1ql";
    public const string Nsis = "nsis";
    public const string Never = "never";
    public const string Nginx = "nginx";
    public const string Nim = "nim";
    public const string Nix = "nix";
    public const string Oak = "oak";
    public const string Ocl = "ocl";
    public const string OCaml = "ocaml";
    public const string ObjectiveC = "objectivec";
    public const string Odin = "odin";
    public const string OpenGLShadingLanguage = "glsl";
    public const string OpenScad = "openscad";
    public const string OracleRulesLanguage = "ruleslanguage";
    public const string Oxygene = "oxygene";
    public const string Pf = "pf";
    public const string Php = "php";
    public const string Papyrus = "papyrus";
    public const string Parser3 = "parser3";
    public const string Perl = "perl";
    public const string Phix = "phix";
    public const string PineScript = "pine";
    public const string Plaintext = "plaintext";
    public const string Pony = "pony";
    public const string PostgreSQL = "pgsql";
    public const string PowerOn = "poweron";
    public const string PowerShell = "powershell";
    public const string Processing = "processing";
    public const string Prolog = "prolog";
    public const string Properties = "properties";
    public const string ProtocolBuffers = "proto";
    public const string Puppet = "puppet";
    public const string Python = "python";
    public const string PythonRepl = "python-repl";
    public const string QSharp = "qsharp";
    public const string Q = "k";
    public const string Qml = "qml";
    public const string R = "r";
    public const string Raku = "raku";
    public const string RakuDoc = "pod6";
    public const string RakuQuoting = "rakuquoting";
    public const string RakuRegexe = "rakuregexe";
    public const string Razor = "cshtml-razor";
    public const string Reasonml = "reasonml";
    public const string RebolAndRed = "redbol";
    public const string RenderManRib = "rib";
    public const string RenderManRsl = "rsl";
    public const string Rescript = "rescript";
    public const string RiScript = "risc";
    public const string RiscVAssembly = "riscv";
    public const string Roboconf = "graph";
    public const string RobotFramework = "robot";
    public const string RpmSpecfile = "rpm-specfile";
    public const string Ruby = "ruby";
    public const string Rust = "rust";
    public const string RvtScript = "rvt";
    public const string SAS = "SAS";
    public const string Scss = "scss";
    public const string Sql = "sql";
    public const string StepPart21 = "p21";
    public const string Scala = "scala";
    public const string Scheme = "scheme";
    public const string Scilab = "scilab";
    public const string Sfz = "sfz";
    public const string ShapeExpressions = "shexc";
    public const string Shell = "shell";
    public const string Smali = "smali";
    public const string Smalltalk = "smalltalk";
    public const string Sml = "sml";
    public const string Solidity = "solidity";
    public const string SplunkSpl = "spl";
    public const string Stan = "stan";
    public const string Stata = "stata";
    public const string StructuredText = "iecst";
    public const string Stylus = "stylus";
    public const string SubUnit = "subunit";
    public const string Supercollider = "supercollider";
    public const string Svelte = "svelte";
    public const string Swift = "swift";
    public const string Tcl = "tcl";
    public const string Terraform = "terraform";
    public const string Tap = "tap";
    public const string Thrift = "thrift";
    public const string Toit = "toit";
    public const string Tp = "tp";
    public const string TransactSql = "tsql";
    public const string TtcnThree = "ttcn";
    public const string Twig = "twig";
    public const string TypeScript = "typescript";
    public const string UnicornRailsLog = "unicorn-rails-log";
    public const string Unison = "unison";
    public const string VbNet = "vbnet";
    public const string Vba = "vba";
    public const string VbScript = "vbscript";
    public const string Vhdl = "vhdl";
    public const string Vala = "vala";
    public const string Verilog = "verilog";
    public const string VimScript = "vim";
    public const string Wgsl = "wgsl";
    public const string XSharp = "xsharp";
    public const string Axapta = "axapta";
    public const string X86Asm = "x86asm";
    public const string X86AsmAtt = "x86asmatt";
    public const string Xl = "xl";
    public const string XQuery = "xquery";
    public const string Yaml = "yml";
    public const string ZenScript = "zenscript";
    public const string Zephir = "zephir";
    public const string Zig = "zig";
    public static string GetLanguageClass(string language)
    {
        return $"language-{language}";
    }
}
</file>

<file path="Components/Document/CodeViewer.razor">
@namespace RizzyUI

@using System.Text.Json
@using System.Web
@using Rizzy.Utility
@inherits RzComponent

<div @attributes="@AdditionalAttributes" class="@RootClass()"
     data-assets="@_assets"
     data-codeid="@CodeId"
     data-nonce="@Nonce"
     x-data="rzCodeViewer">
    <!-- Code Config -->
    <div
        class="border-b-0 border-outline bg-surface-alt flex flex-col items-start justify-between gap-4 rounded-theme rounded-b-none border p-4 text-sm text-slate-400   md:flex-row md:items-center md:gap-2"
        :class="getBorderCss">
        <span class="text-on-surface ">@ViewerTitle</span>
    </div>
    <!-- /Code Config -->

    <div class="border-outline w-full overflow-y-auto transition-all !rounded-b-none rounded-b-xl border"
         :class="getExpandMaxHeightCss">
        <!-- code  -->
        <div>
            <div
                class="border-surface-tertiary/70 bg-surface-tertiary text-on-surface-tertiary flex h-11 items-center justify-between border-b"
                :class="getBorderCss">
                <button aria-label="copy code" role="button" :title="getCopiedTitle" x-on:click="copyHTML"
                        class="my-auto ml-auto mr-2 overflow-hidden rounded-full p-1 hover:bg-surface/10 focus:outline-none focus:outline-offset-0 focus-visible:outline-2 focus-visible:outline-on-surface-dark active:-outline-offset-2"
                        :class="getCopiedCss" x-on:click.away="disableCopied" data-target="cardDefault" title="copy">
                    <svg x-show="notCopied" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24"
                         stroke-width="1.5" stroke="currentColor" class="text-on-surface-dark size-6 cursor-pointer"
                         x-transition:enter="transition duration-200 ease-out" x-transition:enter-start="opacity-0"
                         x-transition:enter-end="opacity-100">
                        <path stroke-linecap="round" stroke-linejoin="round"
                              d="M15.666 3.888A2.25 2.25 0 0013.5 2.25h-3c-1.03 0-1.9.693-2.166 1.638m7.332 0c.055.194.084.4.084.612v0a.75.75 0 01-.75.75H9a.75.75 0 01-.75-.75v0c0-.212.03-.418.084-.612m7.332 0c.646.049 1.288.11 1.927.184 1.1.128 1.907 1.077 1.907 2.185V19.5a2.25 2.25 0 01-2.25 2.25H6.75A2.25 2.25 0 014.5 19.5V6.257c0-1.108.806-2.057 1.907-2.185a48.208 48.208 0 011.927-.184"></path>
                    </svg>
                    <svg x-show="copied" x-transition:enter="transition duration-200 ease-out"
                         x-transition:enter-start="translate-y-2 opacity-0"
                         x-transition:enter-end="translate-y-0 opacity-100" xmlns="http://www.w3.org/2000/svg"
                         fill="none" viewBox="0 0 24 24" stroke-width="1.3" stroke="currentColor"
                         class="size-6 text-emerald-500">
                        <path stroke-linecap="round" stroke-linejoin="round"
                              d="M11.35 3.836c-.065.21-.1.433-.1.664 0 .414.336.75.75.75h4.5a.75.75 0 00.75-.75 2.25 2.25 0 00-.1-.664m-5.8 0A2.251 2.251 0 0113.5 2.25H15c1.012 0 1.867.668 2.15 1.586m-5.8 0c-.376.023-.75.05-1.124.08C9.095 4.01 8.25 4.973 8.25 6.108V8.25m8.9-4.414c.376.023.75.05 1.124.08 1.131.094 1.976 1.057 1.976 2.192V16.5A2.25 2.25 0 0118 18.75h-2.25m-7.5-10.5H4.875c-.621 0-1.125.504-1.125 1.125v11.25c0 .621.504 1.125 1.125 1.125h9.75c.621 0 1.125-.504 1.125-1.125V18.75m-7.5-10.5h6.375c.621 0 1.125.504 1.125 1.125v9.375m-8.25-3l1.5 1.5 3-3.75"></path>
                    </svg>
                </button>
            </div>

            <div class="relative overflow-y-auto" :class="getExpandCss">
                <pre x-ref="codeBlock" class="text-on-surface/60 overflow-x-auto text-sm p-8 border-none" tabindex="0">
                    <code class="@CodeLanguage.GetLanguageClass(Language)" id="@CodeId">@CodeContent</code>
                </pre>
            </div>
        </div>
        <!-- /code  -->
    </div>
    <button aria-label="expand the code container"
            class="border-t-0 border-outline bg-surface-alt text-on-surface flex w-full items-center justify-center gap-2 rounded-theme rounded-t-none border p-2 focus:outline-none focus-visible:rounded-t-none focus-visible:border-2 focus-visible:border-primary    dark:focus-visible:border-primary-dark"
            x-on:click="toggleExpand">
        <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="2.5" stroke="currentColor"
             class="rotate-0 h-5 w-5 transition" :class="getExpandButtonCss">
            <path stroke-linecap="round" stroke-linejoin="round" d="M19.5 8.25l-7.5 7.5-7.5-7.5"></path>
        </svg>
    </button>
</div>

@code {
    private static readonly string BaseStyle = "mt-2 overflow-auto";
    private string CodeId { get; set; } = IdGenerator.UniqueId("code");
    private string CodeContent { get; set; } = string.Empty;
    private string _assets = string.Empty;

    /// <summary>
    ///     Default assets loaded for CodeViewer
    /// </summary>
    public static string[] DefaultAssets =
    [
        Constants.ContentUrl("js/vendor/highlightjs/highlight.js"),
        Constants.ContentUrl("js/vendor/highlightjs-plugin/cshtml-razor.min.js")
    ];

    /// <summary>
    ///     ServiceProvider for razor html rendering
    /// </summary>
    [Inject]
    private IServiceProvider ServiceProvider { get; set; } = default!;

    /// <summary>
    ///     (optional) Javascript and CSS assets that are loaded when component is instantiated.  Assets are requested
    ///     in parallel but loaded sequentially
    /// </summary>
    [Parameter]
    public string[] ComponentAssets { get; set; } = DefaultAssets;

    /// <summary>
    ///     Language string for highlight.js. Uses constants defined in CodeLanguage
    /// </summary>
    [Parameter]
    public string Language { get; set; } = "html";

    /// <summary>
    ///     HTML escaped source code for the code viewer
    /// </summary>
    [Parameter]
    public RenderFragment? ChildContent { get; set; }

    /// <summary>
    ///     Optional string representation of the code viewer source.  Note that if unset the code between the
    ///     &lt;CodeViewer&gt; tags is used
    /// </summary>
    [Parameter]
    public string? Source { get; set; }

    /// <summary>
    ///     Title for the CodeViewer card
    /// </summary>
    [Parameter]
    public string ViewerTitle { get; set; } = "Source";

    /// <inheritdoc />
    protected override string? RootClass()
    {
        return TwMerge.Merge(AdditionalAttributes, BaseStyle);
    }

    /// <inheritdoc />
    protected override void OnParametersSet()
    {
        if (Source != null)
        {
            CodeContent = Source.Trim();
        }
        else
        {
            CodeContent = RenderSource();
            CodeContent = HttpUtility.HtmlDecode(CodeContent.TrimEmptyLines());
        }

        CodeContent = CodeContent.Outdent();

        _assets = JsonSerializer.Serialize(ComponentAssets);
    }

    private string RenderSource()
    {
        if (Source != null) return Source.TrimEmptyLines();

        return ChildContent.AsMarkupString();
    }

}
</file>

<file path="Components/Document/EmbeddedPreview.razor">
@namespace RizzyUI

@using Rizzy.Utility
@inherits RzComponent

<HtmlElement class="w-full">
	<iframe x-data="rzEmbeddedPreview"
	        id="@Id"
	        class="w-full transition-all min-h-28"
	        srcdoc="@_content"
	        x-ref="iframe">
	</iframe>
</HtmlElement>


@code {
	private string? _content;
	private string Id { get; set; } = IdGenerator.UniqueId("preview");

	/// <summary>
	///     ServiceProvider reference needed to render any components to string correctly
	/// </summary>
	[Inject]
	private IServiceProvider ServiceProvider { get; set; } = default!;

	/// <summary>
	///     Markup to render into an iframe
	/// </summary>
	[Parameter]
	public required RenderFragment ChildContent { get; set; }

	/// <summary>
	///     Optional layout for content
	/// </summary>
	[Parameter]
	public Type? Layout { get; set; }

	/// <inheritdoc cref="ComponentBase" />
	protected override void OnParametersSet()
	{
		// Wrap the ChildContent inside the Layout
		RenderFragment fragment = builder =>
		{
			if (Layout != null)
			{
				builder.OpenComponent(0, Layout);
				builder.AddAttribute(1, nameof(LayoutComponentBase.Body), ChildContent);
				builder.CloseComponent();
			}
			else
			{
				builder.AddContent(2, ChildContent);
			}
		};

		// Use the async RenderHtml extension method to render the fragment
		_content = fragment.RenderHtmlAsync(ServiceProvider).Result;
	}

}
</file>

<file path="Components/Document/Models/HeadingItem.cs">
namespace RizzyUI;
public class HeadingItem
{
    public HeadingItem(HeadingLevel level, string title, string id)
    {
        Level = level;
        Title = title;
        Id = id;
    }
    public HeadingLevel Level { get; }
    public string Title { get; }
    public string Id { get; }
}
</file>

<file path="Components/Document/QuickReference.razor">
@namespace RizzyUI
@inherits RzComponent

<div class="@RootClass()">
    <p class="mb-4 font-bold">
        @Title
    </p>
    <ul class="flex flex-col gap-2">
        @foreach (var heading in QuickReferenceContainer.GetHeadingItems())
        {
            <li class="@GetIndentation(heading.Level)">
                <a href="#@heading.Id" data-headingid="@heading.Id" :class="getSelectedCss"
                   x-on:click="handleHeadingClick">
                    @heading.Title
                </a>
            </li>
        }
    </ul>
</div>


@code {

    /// <summary>
    ///     Reference to the QuickReferenceContainer.
    /// </summary>
    [CascadingParameter]
    private QuickReferenceContainer QuickReferenceContainer { get; set; } = default!;

    /// <summary>
    ///     Title that appears above quick reference outline
    /// </summary>
    [Parameter]
    public string Title { get; set; } = "On this page";

    /// <summary>
    ///     Throws an exception if not placed within a QuickReferenceContainer.
    /// </summary>
    protected override void OnInitialized()
    {
        if (QuickReferenceContainer == null)
        {
            throw new InvalidOperationException("QuickReference must be placed within a QuickReferenceContainer.");
        }
    }

    /// <summary>
    ///     Builds the root CSS class string for the QuickReference.
    /// </summary>
    /// <returns>A string containing the combined CSS classes.</returns>
    protected override string? RootClass()
    {
        return TwMerge.Merge(AdditionalAttributes, BaseStyle);
    }

    private static readonly string BaseStyle = "text-on-surface-strong ";

    /// <summary>
    ///     Gets the Tailwind CSS class for indentation based on the heading level.
    /// </summary>
    /// <param name="level">The heading level.</param>
    /// <returns>A string containing the Tailwind CSS class for margin-left.</returns>
    private string GetIndentation(HeadingLevel level)
    {
        level -= QuickReferenceContainer.MinimumHeadingLevel;

        return level switch
        {
            HeadingLevel.H1 => "ml-0",
            HeadingLevel.H2 => "ml-4",
            HeadingLevel.H3 => "ml-8",
            HeadingLevel.H4 => "ml-12",
            _ => "ml-0"
        };
    }

}
</file>

<file path="Components/Document/QuickReferenceContainer.razor">
@namespace RizzyUI
@using System.Text.Json
@inherits RzComponent

<HtmlElement Element="@Element" @attributes="@AdditionalAttributes" class="@RootClass()"
             data-headings="@_headingItemsSerialized"
             data-currentheadingid="@(_headingItems.FirstOrDefault()?.Id ?? string.Empty)"
             x-data="rzQuickReferenceContainer">
    <CascadingValue Value="this">
        @ChildContent
    </CascadingValue>
</HtmlElement>

@code {
    private readonly List<HeadingItem> _headingItems = new();
    private string _headingItemsSerialized = "[]";

    /// <summary>
    ///     Lowest heading level (H1 is lowest) to include in the quick reference
    /// </summary>
    [Parameter]
    public HeadingLevel MinimumHeadingLevel { get; set; } = HeadingLevel.H2;

    /// <summary>
    ///     Greatest heading level (h4 is greatest) to include in the quick reference
    /// </summary>
    [Parameter]
    public HeadingLevel MaximumHeadingLevel { get; set; } = HeadingLevel.H4;

    /// <summary>
    ///     Child content of the QuickReferenceContainer.
    /// </summary>
    [Parameter]
    public RenderFragment? ChildContent { get; set; }

    /// <summary>
    ///     Registers a heading with the QuickReferenceContainer.
    /// </summary>
    /// <param name="level">The heading level.</param>
    /// <param name="title">The title of the heading.</param>
    /// <param name="id">The unique ID of the heading element.</param>
    internal void RegisterHeading(HeadingLevel level, string title, string id)
    {
        if (level >= MinimumHeadingLevel && level <= MaximumHeadingLevel)
            _headingItems.Add(new HeadingItem(level, title, id));

        _headingItemsSerialized = JsonSerializer.Serialize(_headingItems?.Select(x => x.Id));

        StateHasChanged();
    }

    /// <summary>
    ///     Gets the list of registered heading items.
    /// </summary>
    /// <returns>A read-only list of heading items.</returns>
    public IReadOnlyList<HeadingItem> GetHeadingItems()
    {
        return _headingItems.AsReadOnly();
    }

}
</file>

<file path="Components/Form/_Imports.razor">
@using System.Net.Http
@using System.Net.Http.Json
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Components.Routing
@using Microsoft.AspNetCore.Components.Web
@using static Microsoft.AspNetCore.Components.Web.RenderMode
@using Microsoft.AspNetCore.Components.Web.Virtualization
@using Microsoft.JSInterop
@using Rizzy.Configuration;
@using Rizzy.Components
</file>

<file path="Components/Form/CheckboxGroup.razor">
@namespace RizzyUI
@typeparam TValue
@inherits RzComponent

<CascadingValue Value="this">
	<HtmlElement Element="div" @attributes="AdditionalAttributes" class="@RootClass()">
		@ChildContent
	</HtmlElement>
</CascadingValue>
</file>

<file path="Components/Form/CheckboxGroup.razor.cs">
using System.Linq.Expressions;
using Blazicons;
using Microsoft.AspNetCore.Components;
using RizzyUI.Extensions;
namespace RizzyUI;
public partial class CheckboxGroup<TValue> : RzComponent
{
    private static readonly string BaseStyle = "flex flex-wrap gap-4";
    [Parameter]
    public IList<TValue> Values { get; set; } = new List<TValue>();
    [Parameter]
    public EventCallback<IList<TValue>> ValuesChanged { get; set; }
    [Parameter]
    public Expression<Func<IList<TValue>>>? For { get; set; }
    [Parameter]
    public Orientation Orientation { get; set; } = Orientation.Vertical;
    [Parameter]
    public RenderFragment? ChildContent { get; set; }
    [Parameter]
    public SvgIcon CheckedIcon { get; set; } = MdiIcon.CheckBold;
    public bool IsSelected(TValue value)
    {
        return Values.Any(x => EqualityComparer<TValue>.Default.Equals(x, value));
    }
    public async Task ToggleValueAsync(TValue value, bool isChecked)
    {
        if (isChecked)
        {
            if (!Values.Any(x => EqualityComparer<TValue>.Default.Equals(x, value))) Values.Add(value);
        }
        else
        {
            var existing = Values.FirstOrDefault(x => EqualityComparer<TValue>.Default.Equals(x, value));
            if (existing != null && Values.Contains(existing)) Values.Remove(existing);
        }
        if (ValuesChanged.HasDelegate) await ValuesChanged.InvokeAsync(Values);
        StateHasChanged();
    }
    protected override string? RootClass()
    {
        var layoutClass = Orientation == Orientation.Horizontal
            ? "flex flex-row items-center gap-4"
            : "flex flex-col gap-2";
        return TwMerge.Merge(AdditionalAttributes, BaseStyle, layoutClass);
    }
}
</file>

<file path="Components/Form/CheckboxGroupField.razor">
@namespace RizzyUI
@typeparam TValue
@inherits RzComponent

<Field @attributes="AdditionalAttributes" class="@RootClass()">
	<FieldLabel DisplayName="@DisplayName" For="@For"></FieldLabel>
	@if (FieldHelp != null)
	{
		<FieldHelp>@FieldHelp</FieldHelp>
	}
	<CheckboxGroup TValue="TValue" For="@For" Values="@Values" ValuesChanged="@ValuesChanged" Orientation="@Orientation"
	               class="my-3">
		@CheckboxGroupContent
	</CheckboxGroup>
	<RzValidationMessage For="@For"/>
</Field>
</file>

<file path="Components/Form/CheckboxGroupField.razor.cs">
using System.Linq.Expressions;
using Microsoft.AspNetCore.Components;
using RizzyUI.Extensions;
namespace RizzyUI;
public partial class CheckboxGroupField<TValue> : RzComponent
{
    private static readonly string BaseStyle = "";
    [Parameter]
    public string? DisplayName { get; set; }
    [Parameter]
    [EditorRequired]
    public Expression<Func<IList<TValue>>>? For { get; set; }
    [Parameter]
    public IList<TValue>? Values { get; set; }
    [Parameter]
    public EventCallback<IList<TValue>> ValuesChanged { get; set; }
    [Parameter]
    public Orientation Orientation { get; set; } = Orientation.Vertical;
    [Parameter]
    public RenderFragment? CheckboxGroupContent { get; set; }
    [Parameter]
    public RenderFragment? FieldHelp { get; set; }
    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        if (For != null)
            if (Values == null || !Values.Any())
                Values = For.Compile().Invoke();
    }
    protected override string? RootClass()
    {
        return TwMerge.Merge(AdditionalAttributes, BaseStyle);
    }
}
</file>

<file path="Components/Form/CheckboxGroupItem.razor">
@namespace RizzyUI

@typeparam TValue
@using Blazicons
@inherits RzComponent

<HtmlElement Element="@Element" x-data="rzCheckboxGroupItem" @attributes="AdditionalAttributes" class="@RootClass()">
	<div class="relative">
		<RzInputCheckbox @bind-Value="IsChecked" class="@CheckboxClass" x-on:change="toggleCheckbox" x-ref="chk"/>
		<div class="absolute inset-0 flex items-center justify-center text-on-primary " :class="getIconCss">
			<Blazicon Svg="CheckedIcon"/>
		</div>
	</div>
	<span class="ml-2">@Title</span>
	@ChildContent
</HtmlElement>
</file>

<file path="Components/Form/CheckboxGroupItem.razor.cs">
using Blazicons;
using Microsoft.AspNetCore.Components;
using RizzyUI.Extensions;
namespace RizzyUI;
public partial class CheckboxGroupItem<TValue> : RzComponent
{
    private static readonly string BaseStyle = "inline-flex items-center";
    private static readonly string CheckboxBaseClass =
        "size-4 rounded-sm border border-outline text-primary-500 focus:border-primary-500 focus:ring-3 focus:ring-primary-500/50  dark:bg-gray-800 dark:ring-offset-gray-900 dark:checked:border-transparent dark:checked:bg-primary-500 dark:focus:border-primary-500";
    [CascadingParameter]
    public CheckboxGroup<TValue>? Parent { get; set; }
    [Parameter]
    [EditorRequired]
    public TValue? Value { get; set; }
    [Parameter]
    [EditorRequired]
    public string Title { get; set; } = string.Empty;
    [Parameter]
    public RenderFragment? ChildContent { get; set; }
    [Parameter]
    public SvgIcon? CheckedIcon { get; set; }
    private bool IsChecked
    {
        get => Parent != null && Parent.IsSelected(Value!);
        set => Parent?.ToggleValueAsync(Value!, value);
    }
    public string CheckboxClass => CheckboxBaseClass;
    protected override void OnInitialized()
    {
        base.OnInitialized();
        Element = "label";
    }
    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        CheckedIcon = Parent?.CheckedIcon ?? MdiIcon.CheckBold;
    }
    protected override string? RootClass()
    {
        return TwMerge.Merge(AdditionalAttributes, BaseStyle);
    }
}
</file>

<file path="Components/Form/DateEdit.razor">
@namespace RizzyUI

@using Blazicons
@inherits RzComponent

<HtmlElement Element="div"
             @attributes="AdditionalAttributes"
             class="@RootClass()"
             x-data="rzDateEdit"
             data-config="@_serializedConfig"
             data-uid="@_uid"
             data-assets="@_assets"
             data-nonce="@Nonce"
             role="group" aria-label="Date picker">

	<div class="relative" x-data="rzPrependInput" x-ref="pickerWrapper">
		@if (!string.IsNullOrEmpty(PrependText) || PrependIcon != null)
		{
			<div x-ref="prependContainer"
			     class="pointer-events-none absolute inset-y-0 left-0 my-px ml-px flex items-center rounded-l-theme border-r border-outline bg-surface-alt px-3 text-on-surface   ">
				@if (!string.IsNullOrEmpty(PrependText))
				{
					@PrependText
				}
				else
				{
					<div class="text-xl">
						<Blazicon Svg="PrependIcon"/>
					</div>
				}
			</div>
		}

		<input x-ref="textInput"
		       id="@_uid-input"
		       type="text"
		       class="@_inputStyle"
		       aria-label="Select date"/>
	</div>

</HtmlElement>
</file>

<file path="Components/Form/DateEdit.razor.cs">
using System.Globalization;
using System.Linq.Expressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using Blazicons;
using Microsoft.AspNetCore.Components;
using Rizzy.Utility;
using RizzyUI.Extensions;
namespace RizzyUI;
public sealed partial class DateEdit : RzComponent
{
    private static readonly string BaseStyle = "w-full";
    private static readonly string InputBaseStyle =
        "block w-full rounded-theme border border-outline px-3 py-2 leading-6 " +
        "placeholder-on-surface focus:border-primary focus:ring focus:ring-primary " +
        "focus:ring-opacity-50   " +
        "dark:placeholder-on-surface-dark dark:focus:border-primary-dark";
    private static readonly string[] DefaultAssets =
    [
        "https://cdn.jsdelivr.net/npm/flatpickr/dist/flatpickr.min.js"
    ];
    private string _assets = string.Empty;
    private string _inputStyle = string.Empty;
    private string _serializedConfig = string.Empty;
    private string _uid = IdGenerator.UniqueId("frmDate");
    private DateTime? _value;
    private string PrependStyle { get; set; } = string.Empty;
    public Expression<Func<DateTime?>>? For { get; set; }
    [Parameter]
    public FlatpickrOptions Options { get; set; } = new()
    {
        Locale = "en"
    };
    [Parameter]
    public string Placeholder { get; set; } = string.Empty;
    [Parameter]
    public string? PrependText { get; set; }
    [Parameter]
    public SvgIcon? PrependIcon { get; set; }
    [Parameter]
    public string[] ComponentAssets { get; set; } = DefaultAssets;
    protected override string? RootClass()
    {
        return TwMerge.Merge(AdditionalAttributes, BaseStyle);
    }
    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        if (For is not null)
        {
            _value = For.Compile().Invoke();
            if (_value.HasValue)
                Options.DefaultDate = _value.Value.ToString("yyyy-MM-dd", CultureInfo.InvariantCulture);
        }
        var hasPrepend = !string.IsNullOrEmpty(PrependText);
        _inputStyle = hasPrepend
            ? $"{InputBaseStyle} plch-{PrependText!.Length + 3}"
            : InputBaseStyle;
        var alpineData = new FlatpickrDataOptions(Options, Placeholder, PrependText ?? string.Empty);
        _serializedConfig = JsonSerializer.Serialize(alpineData,
            new JsonSerializerOptions { DefaultIgnoreCondition = JsonIgnoreCondition.WhenWritingNull });
        _assets = JsonSerializer.Serialize(ComponentAssets);
    }
    internal record FlatpickrDataOptions(FlatpickrOptions options, string placeholder, string prependText);
}
</file>

<file path="Components/Form/Enum/Orientation.cs">
namespace RizzyUI;
public enum Orientation
{
	Horizontal,
	Vertical
}
</file>

<file path="Components/Form/Enum/SectionLayout.cs">
namespace RizzyUI;
public enum SectionLayout
{
    Stacked,
    TwoColumn
}
</file>

<file path="Components/Form/Enum/TextRole.cs">
namespace RizzyUI;
public enum TextRole
{
	Text,
	Password,
	Email,
	Url,
	Search,
	Tel
}
</file>

<file path="Components/Form/Field.razor">
@namespace RizzyUI

@inherits RzComponent

<HtmlElement Element="@Element" @attributes="AdditionalAttributes" class="@RootClass()">
    @ChildContent
</HtmlElement>

@code
{
    private static readonly string BaseStyle = "space-y-1";

    /// <summary>
    ///     Child content for the field
    /// </summary>
    [Parameter]
    public RenderFragment? ChildContent { get; set; }

    /// <inheritdoc cref="RzComponent" />
    protected override string? RootClass()
    {
        return TwMerge.Merge(AdditionalAttributes, BaseStyle);
    }

}
</file>

<file path="Components/Form/FieldHelp.razor">
@namespace RizzyUI
@inherits RzComponent

<p @attributes="AdditionalAttributes" class="@RootClass()">
	@ChildContent
</p>

@code
{
	private static readonly string BaseStyle = "text-sm text-on-surface ";

	/// <summary>
	///     Child content for the field help
	/// </summary>
	[Parameter]
	public RenderFragment? ChildContent { get; set; }

	protected override string? RootClass()
	{
		return TwMerge.Merge(AdditionalAttributes, BaseStyle);
	}
}
</file>

<file path="Components/Form/FieldLabel.razor">
@namespace RizzyUI
@inherits RzComponent
@using System.ComponentModel
@using System.ComponentModel.DataAnnotations
@using System.Linq.Expressions
@using Microsoft.AspNetCore.Http
@using Rizzy.Htmx
@typeparam TValue

@if (DisplayName != null)
{
    <label for="@_for" @attributes="AdditionalAttributes" class="@RootClass()">
        @DisplayName
        @ChildContent
    </label>
}

@code {
    private static readonly string BaseStyle = "font-medium";
    private string _for = string.Empty;

    [CascadingParameter] private HttpContext? HttpContext { get; set; }

    [CascadingParameter] private EditContext? EditContext { get; set; } = default!;

    /// <summary>
    ///     Child content for the field label
    /// </summary>
    [Parameter]
    public RenderFragment? ChildContent { get; set; }

    /// <summary>
    ///     Specifies the field for which validation messages should be displayed.
    /// </summary>
    [Parameter]
    public Expression<Func<TValue>>? For { get; set; }

    /// <summary>
    ///     Name to display in the field label
    /// </summary>
    [Parameter]
    public string? DisplayName { get; set; }

    /// <summary>
    ///     Initialize the field label, ideally using For to detect field information
    /// </summary>
    /// <exception cref="InvalidEnumArgumentException"></exception>
    protected override void OnParametersSet()
    {
        if (EditContext is null)
            throw new InvalidEnumArgumentException("FieldLabel must be part of an EditForm");

        SetDisplayName();

        if (For != null)
        {
            var field = FieldIdentifier.Create(For);

            var fieldMap = HttpContext?.GetOrAddFieldMapping(EditContext);

            if (fieldMap != null && fieldMap.TryGetValue(field, out var map))
            {
                _for = map.Id;
            }
        }

        base.OnParametersSet();
    }

    private void SetDisplayName()
    {
        // Display name is set, nothing more to do
        if (!string.IsNullOrEmpty(DisplayName))
            return;

        if (For == null)
        {
            throw new InvalidOperationException($"{nameof(For)} is required if display name is not set.");
        }

        //FieldIdentifier _fieldIdentifier = FieldIdentifier.Create(For);

        if (For.Body is MemberExpression memberExpression)
        {
            var displayAttribute = memberExpression.Member.GetCustomAttributes(typeof(DisplayAttribute), true)
                .FirstOrDefault() as DisplayAttribute;

            // If DisplayAttribute is not present, use the field name
            DisplayName = displayAttribute?.Name ?? memberExpression.Member.Name;
        }
    }

    /// <inheritdoc cref="RzComponent.RootClass" />
    protected override string? RootClass()
    {
        return TwMerge.Merge(AdditionalAttributes, BaseStyle);
    }

}
</file>

<file path="Components/Form/FormSection.razor">
@namespace RizzyUI
@inherits RzComponent

<div class="@RootClass()">
	<div class="@GetDescriptionCss(Layout)">
		@if (!string.IsNullOrEmpty(Title))
		{
			<h2 class="text-base/7 font-semibold text-on-surface-strong ">Profile</h2>
		}
		@if (Description != null)
		{
			<p class="text-sm text-on-surface ">
				@Description
			</p>
		}
	</div>
	<div class="@GetContentCss(Layout)">
		@Content
	</div>
</div>

@code {
	private static readonly string BaseStyle = "";

	[Parameter][EditorRequired] public string Title { get; set; } = string.Empty;

	[Parameter] public RenderFragment? Description { get; set; }

	[Parameter] public RenderFragment? Content { get; set; }

	[Parameter] public SectionLayout Layout { get; set; } = SectionLayout.TwoColumn;

	protected override string? RootClass()
	{
		return TwMerge.Merge(AdditionalAttributes, BaseStyle, Layout == SectionLayout.TwoColumn ? "md:flex md:space-x-5" : "mb-5");
	}

	private static string GetDescriptionCss(SectionLayout layout)
	{
		return layout switch
		{
			SectionLayout.TwoColumn => "md:w-1/3 md:flex-none",
			SectionLayout.Stacked => "pb-5 mb-10 border-b-1 border-outline ",
			_ => ""
		};
	}

	private static string GetContentCss(SectionLayout layout)
	{
		return layout switch
		{
			SectionLayout.TwoColumn => "space-y-6 md:w-1/2",
			SectionLayout.Stacked => "",
			_ => ""
		};
	}

}
</file>

<file path="Components/Form/InitialValidator.cs">
using Microsoft.AspNetCore.Components;
using Microsoft.AspNetCore.Components.Forms;
namespace RizzyUI;
public class InitialValidator : ComponentBase
{
    [CascadingParameter] private EditContext? CurrentEditContext { get; set; }
    protected override void OnParametersSet()
    {
        CurrentEditContext?.Validate();
    }
}
</file>

<file path="Components/Form/InputBase.cs">
using System.Linq.Expressions;
using Microsoft.AspNetCore.Components;
namespace RizzyUI;
public class InputBase<TValue> : RzComponent
{
    [Parameter]
    [EditorRequired]
    public required Expression<Func<TValue>> For { get; set; }
    protected TValue GetParameterValue(string parameterName, TValue defaultValue)
    {
        if (AdditionalAttributes is not null &&
            AdditionalAttributes.TryGetValue(parameterName, out var attributeValue) &&
            attributeValue is TValue typedValue)
            return typedValue;
        return defaultValue;
    }
}
</file>

<file path="Components/Form/Models/FlatpickrOptions.cs">
using System.Text.Json.Serialization;
using Jalex.UI.Components.Form.Converters;
namespace RizzyUI;
[JsonConverter(typeof(JsonStringEnumConverter))]
public enum Mode
{
    Single,
    Multiple,
    Range,
    Time
}
[JsonConverter(typeof(JsonStringEnumConverter))]
public enum MonthSelectorType
{
    Dropdown,
    Static
}
[JsonConverter(typeof(CalendarPositionConverter))]
public enum CalendarPosition
{
    Auto,
    Above,
    Below,
    AutoLeft,
    AutoCenter,
    AutoRight,
    AboveLeft,
    AboveCenter,
    AboveRight,
    BelowLeft,
    BelowCenter,
    BelowRight
}
public class CalendarDateRange
{
    public DateTime From { get; set; }
    public DateTime? To { get; set; }
}
public class FlatpickrOptions
{
    [JsonPropertyName("allowInput")]
    public bool? AllowInput { get; set; }
    [JsonPropertyName("allowInvalidPreload")]
    public bool? AllowInvalidPreload { get; set; }
    [JsonPropertyName("altFormat")]
    public string? AltFormat { get; set; }
    [JsonPropertyName("altInput")]
    public bool? AltInput { get; set; }
    [JsonPropertyName("altInputClass")]
    public string? AltInputClass { get; set; }
    [JsonPropertyName("animate")]
    public bool? Animate { get; set; }
    [JsonPropertyName("ariaDateFormat")]
    public string? AriaDateFormat { get; set; }
    [JsonPropertyName("autoFillDefaultTime")]
    public bool? AutoFillDefaultTime { get; set; }
    [JsonPropertyName("clickOpens")]
    public bool? ClickOpens { get; set; }
    [JsonPropertyName("closeOnSelect")]
    public bool? CloseOnSelect { get; set; }
    [JsonPropertyName("conjunction")]
    public string? Conjunction { get; set; }
    [JsonPropertyName("dateFormat")]
    public string? DateFormat { get; set; }
    [JsonPropertyName("defaultDate")]
    public string? DefaultDate { get; set; }
    [JsonPropertyName("defaultHour")]
    public int? DefaultHour { get; set; }
    [JsonPropertyName("defaultMinute")]
    public int? DefaultMinute { get; set; }
    [JsonPropertyName("defaultSeconds")]
    public int? DefaultSeconds { get; set; }
    [JsonPropertyName("disable")]
    public List<CalendarDateRange>? Disable { get; set; }
    [JsonPropertyName("disableMobile")]
    public bool? DisableMobile { get; set; }
    [JsonPropertyName("enable")]
    public List<CalendarDateRange>? Enable { get; set; }
    [JsonPropertyName("enableSeconds")]
    public bool? EnableSeconds { get; set; }
    [JsonPropertyName("enableTime")]
    public bool? EnableTime { get; set; }
    [JsonPropertyName("hourIncrement")]
    public int? HourIncrement { get; set; }
    [JsonPropertyName("inline")]
    public bool? Inline { get; set; }
    [JsonPropertyName("locale")]
    public string? Locale { get; set; }
    [JsonPropertyName("maxDate")]
    public DateTime? MaxDate { get; set; }
    [JsonPropertyName("maxTime")]
    public DateTime? MaxTime { get; set; }
    [JsonPropertyName("minDate")]
    public DateTime? MinDate { get; set; }
    [JsonPropertyName("minTime")]
    public DateTime? MinTime { get; set; }
    [JsonPropertyName("minuteIncrement")]
    public int? MinuteIncrement { get; set; }
    [JsonPropertyName("mode")]
    public Mode? Mode { get; set; }
    [JsonPropertyName("monthSelectorType")]
    public MonthSelectorType? MonthSelectorType { get; set; }
    [JsonPropertyName("nextArrow")]
    public string? NextArrow { get; set; }
    [JsonPropertyName("noCalendar")]
    public bool? NoCalendar { get; set; }
    [JsonPropertyName("position")]
    public CalendarPosition? CalendarPosition { get; set; }
    [JsonPropertyName("prevArrow")]
    public string? PrevArrow { get; set; }
    [JsonPropertyName("shorthandCurrentMonth")]
    public bool? ShorthandCurrentMonth { get; set; }
    [JsonPropertyName("static")]
    public bool? Static { get; set; }
    [JsonPropertyName("showMonths")]
    public int? ShowMonths { get; set; }
    [JsonPropertyName("time_24hr")]
    public bool? Time24Hr { get; set; }
    [JsonPropertyName("weekNumbers")]
    public bool? WeekNumbers { get; set; }
    [JsonPropertyName("wrap")]
    public bool? Wrap { get; set; }
}
</file>

<file path="Components/Form/NumberEdit.razor">
@typeparam TValue

@namespace RizzyUI
@using Blazicons
@using Rizzy
@inherits InputBase<TValue>

<div class="relative" x-data="rzPrependInput">
    @if (!string.IsNullOrEmpty(PrependText) || PrependIcon != null)
    {
        <div x-ref="prependContainer"
             class="pointer-events-none absolute inset-y-0 left-0 my-px ml-px flex items-center rounded-l-lg border-r border-outline bg-surface-alt pl-3 pr-1 text-on-surface   ">
            @if (!string.IsNullOrEmpty(PrependText))
            {
                @PrependText
            }
            else
            {
                <div class="text-xl">
                    <Blazicon Svg="PrependIcon"/>
                </div>
            }
        </div>
    }
    <RzInputNumber x-ref="textInput" TValue="TValue" @ref="_elem" Value="@_value" ValueExpression="For"
                   placeholder="@_placeholder" @attributes="AdditionalAttributes" class="@RootClass()"/>
</div>

@code {

    // Base CSS classes for the input element.
    private static readonly string BaseStyle = "block w-full rounded-lg border border-outline px-3 py-2 leading-6 placeholder-on-surface   dark:placeholder-on-surface-dark focus:border-primary focus:ring focus:ring-primary focus:ring-opacity-50 transition-opacity text-transparent";

    private TValue _value = default!;
    private RzInputNumber<TValue>? _elem;
    private string _placeholder = string.Empty;

    /// <summary>
    ///     Gets or sets the placeholder text.
    /// </summary>
    [Parameter]
    public string Placeholder { get; set; } = string.Empty;

    /// <summary>
    ///     Gets or sets the text to prepend inside the input field.
    /// </summary>
    [Parameter]
    public string? PrependText { get; set; }

    /// <summary>
    ///     Gets or sets the text to prepend icon inside the input field.
    /// </summary>
    /// <remarks>Only one of PrependText or PrependIcon can be defined</remarks>
    [Parameter]
    public SvgIcon? PrependIcon { get; set; }

    /// <summary>
    ///     Gets the ID attribute from the underlying input, if provided.
    /// </summary>
    public string Id
    {
        get
        {
            if (_elem?.AdditionalAttributes != null && _elem.AdditionalAttributes.TryGetValue("id", out var attr))
            {
                return attr as string ?? string.Empty;
            }

            return string.Empty;
        }
    }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();

        // Determine placeholder: prefer AdditionalAttributes value if provided.
        _placeholder = Placeholder;
        if (AdditionalAttributes is not null && AdditionalAttributes.TryGetValue("placeholder", out var ph) && ph is string phStr)
        {
            _placeholder = phStr;
        }

        // Compile the field expression to get the initial value.
        _value = For.Compile().Invoke();
    }

    /// <inheritdoc />
    protected override string? RootClass()
    {
        return TwMerge.Merge(AdditionalAttributes, BaseStyle);
    }

}
</file>

<file path="Components/Form/NumberField.razor">
@typeparam TValue
@namespace RizzyUI
@using System.Linq.Expressions
@using Blazicons
@inherits RzComponent

<Field @attributes="AdditionalAttributes" class="@RootClass()">
	<FieldLabel DisplayName="@DisplayName" For="@For"></FieldLabel>
	<NumberEdit TValue="TValue" For="@For" Placeholder="@Placeholder" PrependIcon="@PrependIcon"
	            PrependText="@PrependText"/>
	@if (FieldHelp != null)
	{
		<FieldHelp>@FieldHelp</FieldHelp>
	}
	<RzValidationMessage For="@For"/>
</Field>

@code {
	private static readonly string BaseStyle = ""; // Optionally add additional container styling.

	/// <summary>
	///     Gets or sets the field for which validation messages should be displayed.
	/// </summary>
	[Parameter][EditorRequired]
	public Expression<Func<TValue>> For { get; set; } = default!;

	/// <summary>
	///     Gets or sets the text to prepend inside the input field.
	/// </summary>
	[Parameter]
	public string? PrependText { get; set; }

	/// <summary>
	///     Gets or sets the text to prepend icon inside the input field.
	/// </summary>
	/// <remarks>Only one of PrependText or PrependIcon can be defined</remarks>
	[Parameter]
	public SvgIcon? PrependIcon { get; set; }

	/// <summary>
	///     Gets or sets the placeholder text.
	/// </summary>
	[Parameter]
	public string Placeholder { get; set; } = string.Empty;

	/// <summary>
	///     Gets or sets the display name for the field.
	/// </summary>
	[Parameter]
	public string? DisplayName { get; set; }

	/// <summary>
	///     Gets or sets the field help content.
	/// </summary>
	[Parameter]
	public RenderFragment? FieldHelp { get; set; }

	protected override void OnParametersSet()
	{
		base.OnParametersSet();
	}

	/// <inheritdoc />
	protected override string? RootClass()
	{
		return TwMerge.Merge(AdditionalAttributes, BaseStyle);
	}

}
</file>

<file path="Components/Form/RadioGroup.razor">
@typeparam TValue
@namespace RizzyUI
@using System.Linq.Expressions
@using Blazicons
@using Rizzy
@inherits RzComponent

<CascadingValue Value="this">
    <RzInputRadioGroup TValue="TValue" ValueExpression="@For" Value="@Value">
        <div @attributes="AdditionalAttributes"
             class="@RootClass() @(Orientation == Orientation.Vertical ? "grid-cols-1" : $"grid-cols-{_items.Count}") grid gap-2 pt-3">
            @ChildContent
        </div>
    </RzInputRadioGroup>
</CascadingValue>

@code {
    private List<RadioGroupItem<TValue>> _items = new();

    private static readonly string BaseStyle = ""; // Optionally add grid container base styles.

    /// <summary>
    ///     Gets or sets the display name for the radio group.
    /// </summary>
    [Parameter]
    public string? DisplayName { get; set; } = string.Empty;

    /// <summary>
    ///     Gets or sets the orientation of the radio items.
    /// </summary>
    [Parameter]
    public Orientation Orientation { get; set; } = Orientation.Vertical;

    /// <summary>
    ///     Specifies the field for which validation messages should be displayed.
    /// </summary>
    [Parameter][EditorRequired]
    public Expression<Func<TValue>>? For { get; set; }

    /// <summary>
    ///     Gets or sets the name attribute for the radio group.
    /// </summary>
    [Parameter]
    public string Name { get; set; } = string.Empty;

    /// <summary>
    ///     Gets or sets the name of the icon (if any) displayed alongside the label.
    /// </summary>
    [Parameter]
    public SvgIcon CheckboxIcon { get; set; } = MdiIcon.CheckboxMarkedCircle;

    /// <summary>
    ///     Gets or sets the current selected value.
    /// </summary>
    [Parameter]
    public TValue? Value { get; set; } = default!;

    /// <summary>
    ///     Gets or sets the child content to render inside the radio group.
    /// </summary>
    [Parameter]
    public RenderFragment? ChildContent { get; set; }

    /// <summary>
    ///     Adds a radio group item to this group.
    /// </summary>
    /// <param name="item">The radio group item.</param>
    public void AddRadioItem(RadioGroupItem<TValue> item)
    {
        if (!_items.Contains(item))
        {
            _items.Add(item);
            StateHasChanged();
        }
    }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();

        if (For != null && Value == null)
        {
            Value = For.Compile().Invoke();
        }
    }

    /// <inheritdoc />
    protected override string? RootClass()
    {
        return TwMerge.Merge(AdditionalAttributes, BaseStyle);
    }

}
</file>

<file path="Components/Form/RadioGroupField.razor">
@typeparam TValue
@namespace RizzyUI
@using System.Linq.Expressions
@using Blazicons
@inherits RzComponent

<Field @attributes="AdditionalAttributes" class="@RootClass()">
    <FieldLabel DisplayName="@DisplayName" For="@For"></FieldLabel>
    <RadioGroup TValue="TValue" DisplayName="@DisplayName" Name="@Name" For="@For" Value="@Value"
                Orientation="@Orientation" CheckboxIcon="@CheckboxIcon">
        @ChildContent
    </RadioGroup>
    <RzValidationMessage For="@For"/>
</Field>

@code {
    private static readonly string BaseStyle = ""; // Optionally, include any additional styling for the Field container.

    /// <summary>
    ///     Gets or sets the display name for the field.
    /// </summary>
    [Parameter]
    public string? DisplayName { get; set; } = string.Empty;

    /// <summary>
    ///     Gets or sets the orientation of the radio group.
    /// </summary>
    [Parameter]
    public Orientation Orientation { get; set; } = Orientation.Vertical;

    /// <summary>
    ///     Gets or sets the name of the icon (if any) displayed alongside the label.
    /// </summary>
    [Parameter]
    public SvgIcon CheckboxIcon { get; set; } = MdiIcon.CheckboxMarkedCircle;

    /// <summary>
    ///     Specifies the field for which validation messages should be displayed.
    /// </summary>
    [Parameter][EditorRequired]
    public required Expression<Func<TValue>>? For { get; set; }

    /// <summary>
    ///     Gets or sets the current value of the radio group.
    /// </summary>
    [Parameter]
    public TValue? Value { get; set; }

    /// <summary>
    ///     Gets or sets the name attribute for the group.
    /// </summary>
    [Parameter]
    public string Name { get; set; } = string.Empty;

    /// <summary>
    ///     Gets or sets the child content to be rendered inside the radio group.
    /// </summary>
    [Parameter]
    public RenderFragment? ChildContent { get; set; }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        if (For != null)
        {
            Value = For.Compile().Invoke();
        }
    }

    /// <inheritdoc />
    protected override string? RootClass()
    {
        return TwMerge.Merge(AdditionalAttributes, BaseStyle);
    }

}
</file>

<file path="Components/Form/RadioGroupItem.razor">
@typeparam TValue
@namespace RizzyUI
@using Blazicons
@inherits RzComponent

<label @attributes="AdditionalAttributes" class="group relative flex">
    <RzInputRadio TValue="TValue" class="opacity-0 peer absolute left-0 top-0 appearance-none"
                  Name="@ParentRadioGroup?.Name" Id="@Id" Value="@Value"/>
    <span
        class="z-1 text-primary text-xl opacity-0 absolute bottom-0 right-0 top-0 flex scale-50 cursor-pointer items-center px-4 transition peer-checked:scale-100 peer-checked:opacity-100">
	    <Blazicon Svg="CheckboxIcon"/>
    </span>
    <span
        class="group-hover:border-primary relative flex grow cursor-pointer rounded-lg border p-4 peer-checked:bg-surface-alt  peer-checked:border-primary dark:peer-checked:border-primary dark:peer-checked:bg-surface-dark-alt dark:peer-checked:bg-opacity-10 peer-focus:ring peer-focus:ring-primary">
        <div class="flex">
            @if (Icon != null)
            {
                <div class="mr-2 text-2xl content-center">
	                <Blazicon Svg="Icon"/>
                </div>
            }
            <span class="grow pr-8 text-sm">
                <span class="mb-1 block font-bold">@Label</span>
                @if (Description != null)
                {
                    <span class="block text-on-surface ">@Description</span>
                }
                @ChildContent
            </span>
        </div>
    </span>
</label>

@code {
    private SvgIcon CheckboxIcon { get; set; } = MdiIcon.CheckboxMarkedCircle;

    /// <summary>
    ///     Gets or sets the parent radio group.
    /// </summary>
    [CascadingParameter]
    public RadioGroup<TValue>? ParentRadioGroup { get; set; }

    /// <summary>
    ///     Gets or sets the name of the icon (if any) displayed alongside the label.
    /// </summary>
    [Parameter]
    public SvgIcon? Icon { get; set; }

    /// <summary>
    ///     Gets or sets the label of the radio item.
    /// </summary>
    [Parameter][EditorRequired]
    public string Label { get; set; } = string.Empty;

    /// <summary>
    ///     Gets or sets the value associated with this radio item.
    /// </summary>
    [Parameter]
    public TValue? Value { get; set; } = default!;

    /// <summary>
    ///     Gets or sets the description content.
    /// </summary>
    [Parameter]
    public RenderFragment? Description { get; set; }

    /// <summary>
    ///     Gets or sets the ID of the radio item.
    /// </summary>
    [Parameter]
    public string Id { get; set; } = "rd" + Guid.NewGuid();

    /// <summary>
    ///     Optional additional child content.
    /// </summary>
    [Parameter]
    public RenderFragment? ChildContent { get; set; }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        ParentRadioGroup?.AddRadioItem(this);

        if (ParentRadioGroup != null)
            CheckboxIcon = ParentRadioGroup.CheckboxIcon;
    }

}
</file>

<file path="Components/Form/TextEdit.razor">
@namespace RizzyUI

@using Blazicons
@using Rizzy
@inherits InputBase<string>

<div class="relative" x-data="rzPrependInput">
    @if (!string.IsNullOrEmpty(PrependText) || PrependIcon != null)
    {
        <div x-ref="prependContainer"
             class="pointer-events-none absolute inset-y-0 left-0 my-px ml-px flex items-center rounded-l-lg border-r border-gray-200 bg-gray-100 pl-2 pr-2 text-gray-700 dark:border-gray-600 dark:bg-gray-900/50 dark:text-gray-300">
            @if (!string.IsNullOrEmpty(PrependText))
            {
                @PrependText
            }
            else
            {
                <div class="text-xl">
                    <Blazicon Svg="PrependIcon"/>
                </div>
            }
        </div>
    }
    <RzInputText x-ref="textInput" @ref="_elem" type="@_role" Value="@_value" ValueExpression="For"
                 placeholder="@_placeholder" @attributes="@AdditionalAttributes" class="@RootClass()"/>
</div>

@code {

    /// <summary>
    ///     Base CSS classes applied to the input element.
    /// </summary>
    private static readonly string BaseStyle = "block w-full rounded-theme border border-outline px-3 py-2 leading-6 placeholder-gray-500 focus:border-primary focus:ring focus:ring-primary focus:ring-opacity-50 dark:border-gray-600 dark:bg-gray-800 dark:placeholder-gray-400 dark:focus:border-primary transition-opacity text-transparent";

    private string PrependStyle { get; set; } = string.Empty;
    private RzInputText? _elem;
    private string _value = string.Empty;
    private string _role = "text";
    private string _placeholder = string.Empty;

    /// <summary>
    ///     Gets or sets the current edit context.
    /// </summary>
    [CascadingParameter]
    public EditContext EditContext { get; set; } = default!;

    /// <summary>
    ///     Gets or sets the associated text field.
    /// </summary>
    [CascadingParameter]
    public TextField? TextField { get; set; }

    /// <summary>
    ///     Gets or sets the role of the text input, determining its behavior and appearance.
    /// </summary>
    [Parameter]
    public TextRole Role { get; set; } = TextRole.Text;

    /// <summary>
    ///     Gets or sets the placeholder text for the input field.
    /// </summary>
    [Parameter]
    public string Placeholder { get; set; } = string.Empty;

    /// <summary>
    ///     Gets or sets the text to prepend inside the input field.
    /// </summary>
    [Parameter]
    public string? PrependText { get; set; }

    /// <summary>
    ///     Gets or sets the text to prepend icon inside the input field.
    /// </summary>
    /// <remarks>Only one of PrependText or PrependIcon can be defined</remarks>
    [Parameter]
    public SvgIcon? PrependIcon { get; set; }

    /// <summary>
    ///     Gets the ID attribute of the input element, if provided.
    /// </summary>
    public string Id
    {
        get
        {
            if (_elem?.AdditionalAttributes != null && _elem.AdditionalAttributes.TryGetValue("id", out var attribute))
            {
                return attribute as string ?? string.Empty;
            }

            return string.Empty;
        }
    }

    /// <summary>
    ///     Called when component parameters have been set. Initializes internal state based on parameters.
    /// </summary>
    protected override void OnParametersSet()
    {
        base.OnParametersSet();

        _role = GetParameterValue("type", Role.ToString().ToLowerInvariant());
        _placeholder = GetParameterValue("placeholder", Placeholder);
        _value = For.Compile().Invoke();

        if (!string.IsNullOrEmpty(PrependText) && PrependIcon != null)
        {
            throw new InvalidOperationException($"{nameof(PrependText)} and {nameof(PrependIcon)} cannot both be set at the same time.");
        }
    }

    /// <summary>
    ///     Computes the root CSS classes by merging additional attributes with the base style.
    /// </summary>
    /// <returns>A string containing the merged CSS classes.</returns>
    protected override string? RootClass()
    {
        return TwMerge.Merge(AdditionalAttributes, BaseStyle, PrependStyle);
    }

}
</file>

<file path="Components/Form/TextField.razor">
@namespace RizzyUI
@using System.ComponentModel
@using System.Linq.Expressions
@using Blazicons
@inherits RzComponent

<Field class="@RootClass()">
    <FieldLabel DisplayName="@DisplayName" For="@For">
        @if (Required)
        {
            <span class="text-sm text-red-600 dark:text-red-400">*</span>
        }
    </FieldLabel>
    <TextEdit For="@For" Role="@Role" Placeholder="@Placeholder" PrependIcon="@PrependIcon" PrependText="@PrependText"
              @attributes="AdditionalAttributes"/>
    @if (FieldHelp != null)
    {
        <FieldHelp>@FieldHelp</FieldHelp>
    }
    <RzValidationMessage For="@For"/>
</Field>

@code {

    /// <summary>
    ///     Gets or sets the current edit context.
    /// </summary>
    [CascadingParameter]
    public EditContext? EditContext { get; set; }

    /// <summary>
    ///     Gets or sets the role of the text input.
    /// </summary>
    [Parameter]
    public TextRole Role { get; set; } = TextRole.Text;

    /// <summary>
    ///     Gets or sets the placeholder text for the input.
    /// </summary>
    [Parameter]
    public string Placeholder { get; set; } = string.Empty;

    /// <summary>
    ///     Gets or sets the display name for the field label.
    /// </summary>
    [Parameter]
    public string? DisplayName { get; set; }

    /// <summary>
    ///     Gets or sets a value indicating whether the field is required.
    /// </summary>
    [Parameter]
    public bool Required { get; set; } = false;

    /// <summary>
    ///     Gets or sets the render fragment for additional field help content.
    /// </summary>
    [Parameter]
    public RenderFragment? FieldHelp { get; set; }

    /// <summary>
    ///     Specifies the field for which validation messages should be displayed.
    /// </summary>
    [Parameter][EditorRequired]
    public Expression<Func<string>>? For { get; set; }

    /// <summary>
    ///     Gets or sets the text to prepend inside the input field.
    /// </summary>
    [Parameter]
    public string? PrependText { get; set; }

    /// <summary>
    ///     Gets or sets the text to prepend icon inside the input field.
    /// </summary>
    /// <remarks>Only one of PrependText or PrependIcon can be defined</remarks>
    [Parameter]
    public SvgIcon? PrependIcon { get; set; }

    /// <summary>
    ///     Called when component parameters have been set.
    /// </summary>
    protected override void OnParametersSet()
    {
        if (EditContext is null)
            throw new InvalidEnumArgumentException("This field must be part of an EditForm");

        base.OnParametersSet();
    }

}
</file>

<file path="Components/Form/Toggle.razor">
@namespace RizzyUI
@using System.Linq.Expressions
@inherits RzComponent

<RzInputCheckbox ValueExpression="@For"
                 Value="@(Value ?? false)"
                 @attributes="AdditionalAttributes" class="@RootClass()" role="switch" tabindex="0"
                 aria-checked="@(Value ?? false ? "true" : "false")"/>

@code {

    /// <summary>
    ///     Base CSS classes for the toggle.
    ///     Uses semantic colors: "bg-outline " represents the background color in light and dark mode, respectively.
    /// </summary>
    private static readonly string BaseStyle = "relative w-[3.25rem] h-7 p-px bg-outline border-transparent text-transparent rounded-full cursor-pointer transition-colors ease-in-out duration-200 focus:ring-primary disabled:opacity-50 disabled:pointer-events-none checked:bg-none checked:bg-primary checked:text-primary checked:border-primary focus:checked:border-primary   dark:checked:bg-primary-dark dark:checked:border-primary-dark dark:focus:ring-offset-neutral-600 before:inline-block before:size-6 before:bg-on-primary checked:before:bg-on-primary before:translate-x-0 checked:before:translate-x-full before:rounded-full before:shadow before:transform before:ring-0 before:transition before:ease-in-out before:duration-200 dark:before:bg-on-primary-dark dark:checked:before:bg-on-primary-dark";

    /// <summary>
    ///     Gets or sets the current value of the toggle.
    /// </summary>
    [Parameter]
    public bool? Value { get; set; }

    /// <summary>
    ///     Gets or sets the expression used for binding the boolean value.
    ///     This is used for validation.
    /// </summary>
    [Parameter]
    public Expression<Func<bool>>? For { get; set; }

    /// <summary>
    ///     Builds the final CSS class string for the component’s root element.
    ///     This method merges any additional classes provided by the user with the component’s base style.
    /// </summary>
    /// <returns>A string representing the merged Tailwind CSS classes.</returns>
    protected override string? RootClass()
    {
        return TwMerge.Merge(AdditionalAttributes, BaseStyle);
    }

}
</file>

<file path="Components/Form/ToggleField.razor">
@namespace RizzyUI
@using System.Linq.Expressions
@using Rizzy.Utility
@inherits RzComponent

<Field @attributes="AdditionalAttributes" class="@RootClass()">
    <div class="space-x-2">
        <div class="flex items-center justify-between space-x-3">
            <FieldLabel DisplayName="@DisplayName" For="@For" class="font-medium leading-relaxed">
                @if (Description != null)
                {
                    <span class="block text-sm text-on-surface ">
                        @Description
                    </span>
                }
            </FieldLabel>

            <Toggle For="@For" Value="@Value"/>
        </div>
    </div>
</Field>

@code {

    // Generate a unique id for the toggle control once.

    /// <summary>
    ///     Gets the id used for the checkbox input.
    /// </summary>
    protected string SwitchId { get; } = IdGenerator.UniqueId("toggleSwitch");

    private static readonly string BaseStyle = ""; // Add any container styling if needed.

    /// <summary>
    ///     Gets or sets the display name for the field.
    /// </summary>
    [Parameter]
    public string? DisplayName { get; set; }

    /// <summary>
    ///     Gets or sets the description displayed beneath the field label.
    /// </summary>
    [Parameter]
    public RenderFragment? Description { get; set; }

    /// <summary>
    ///     Specifies the field for which validation messages should be displayed.
    /// </summary>
    [Parameter][EditorRequired]
    public Expression<Func<bool>>? For { get; set; }

    /// <summary>
    ///     Gets or sets the current value of the switch.
    /// </summary>
    [Parameter]
    public bool? Value { get; set; }

    protected override void OnParametersSet()
    {
        if (For != null && Value == null)
        {
            Value = For.Compile().Invoke();
        }

        base.OnParametersSet();
    }

    /// <inheritdoc />
    protected override string? RootClass()
    {
        return TwMerge.Merge(AdditionalAttributes, BaseStyle);
    }

}
</file>

<file path="Components/FragmentComponent.cs">
using Microsoft.AspNetCore.Components;
using Microsoft.AspNetCore.Components.Rendering;
namespace RizzyUI;
public class FragmentComponent : ComponentBase
{
    [Parameter]
    public RenderFragment? Fragment { get; set; }
    protected override void BuildRenderTree(RenderTreeBuilder builder)
    {
        if (Fragment != null) builder.AddContent(0, Fragment);
    }
}
</file>

<file path="Components/HtmlElement.cs">
using Microsoft.AspNetCore.Components;
using Microsoft.AspNetCore.Components.Rendering;
namespace RizzyUI;
public sealed class HtmlElement : ComponentBase
{
    [Parameter]
    public string Element { get; set; } = "div";
    [Parameter]
    public RenderFragment? ChildContent { get; set; }
    [Parameter(CaptureUnmatchedValues = true)]
    public IDictionary<string, object>? AdditionalAttributes { get; set; }
    protected override void BuildRenderTree(RenderTreeBuilder builder)
    {
        var elementName = Element ?? "div";
        builder.OpenElement(0, elementName);
        builder.AddMultipleAttributes(1, AdditionalAttributes);
        builder.AddContent(3, ChildContent);
        builder.CloseElement();
    }
}
</file>

<file path="Components/RzAccordion/RzAccordion.razor">
@namespace RizzyUI
@inherits RzComponent

<HtmlElement Element="div"
             x-data="rzAccordion" @* Alpine component for interactivity *@
             @attributes="AdditionalAttributes"
             class="@RootClass()"
             data-multiple="@AllowMultipleOpen.ToString().ToLowerInvariant()"> @* Pass setting to Alpine *@
	@ChildContent
</HtmlElement>
</file>

<file path="Components/RzAccordion/RzAccordion.razor.cs">
using Microsoft.AspNetCore.Components;
using Microsoft.Extensions.Options;
using RizzyUI.Extensions;
namespace RizzyUI;
public partial class RzAccordion : RzComponent
{
    [Parameter]
    public bool AllowMultipleOpen { get; set; }
    [Parameter]
    public RenderFragment? ChildContent { get; set; }
    protected override string? RootClass()
    {
        return TwMerge.Merge(AdditionalAttributes, Theme.RzAccordion.Container);
    }
}
</file>

<file path="Components/RzAccordion/RzAccordionSection.razor">
@namespace RizzyUI
@inherits RzComponent

@* Injecting the specific style class type isn't necessary here as we access styles via Theme *@

<div x-data="rzAccordionSection" x-ref="@SectionId" data-is-open="@((!Collapsed).ToString().ToLowerInvariant())"
     data-section-id="@SectionId">
	<button id="@ButtonId" type="button" class="@ButtonClass" aria-controls="@ContentId"
	        x-on:click="toggle" x-bind:aria-expanded="open">
		@Title
		<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke-width="2"
		     stroke="currentColor" class="@ChevronIconClass" aria-hidden="true"
		     x-bind:class="open ? '@ChevronIconExpandedClass' : ''"> @* Dynamically add expanded class *@
			<path stroke-linecap="round" stroke-linejoin="round" d="M19.5 8.25l-7.5 7.5-7.5-7.5"/>
		</svg>
	</button>
	<div id="@ContentId" role="region" aria-labelledby="@ButtonId"
	     x-cloak x-show="open" x-collapse>
		<div class="@ContentContainerClass">
			@ChildContent
		</div>
	</div>
</div>
</file>

<file path="Components/RzAccordion/RzAccordionSection.razor.cs">
using Microsoft.AspNetCore.Components;
using Microsoft.Extensions.Options;
using Rizzy.Utility;
using RizzyUI.Extensions;
namespace RizzyUI;
public partial class RzAccordionSection : RzComponent
{
    private string SectionId { get; } = IdGenerator.UniqueId("rzaccsec");
    protected string ButtonId => $"rzaccordion-button-{SectionId}";
    protected string ContentId => $"rzaccordion-content-{SectionId}";
    [Parameter]
    public string Title { get; set; } = string.Empty;
    [Parameter]
    public bool Collapsed { get; set; } = true;
    [Parameter]
    public RenderFragment? ChildContent { get; set; }
    protected string? ButtonClass => TwMerge.Merge(AdditionalAttributes, Theme.RzAccordionSection.Button);
    protected string ContentContainerClass => Theme.RzAccordionSection.ContentContainer;
    protected string ChevronIconClass => Theme.RzAccordionSection.ChevronIcon;
    protected string ChevronIconExpandedClass => Theme.RzAccordionSection.ChevronIconExpanded;
}
</file>

<file path="Components/RzAccordion/Styling/DefaultRzAccordionSectionStyles.cs">
namespace RizzyUI;
public class DefaultRzAccordionSectionStyles : RzStylesBase.RzAccordionSectionStylesBase
{
    public DefaultRzAccordionSectionStyles(RzTheme theme) : base(theme)
    {
    }
    public override string Button =>
        "flex w-full items-center justify-between gap-4 bg-surface-alt p-4 text-left underline-offset-2 hover:bg-surface-alt/75 focus-visible:bg-surface-alt/75 focus-visible:underline focus-visible:outline-hidden dark:hover:bg-surface-alt/75 dark:focus-visible:bg-surface-alt/75 text-on-surface font-medium";
    public override string ContentContainer => "p-4 text-sm sm:text-base text-pretty";
    public override string ChevronIcon => "size-5 shrink-0 transition";
    public override string ChevronIconExpanded => "rotate-180";
}
</file>

<file path="Components/RzAccordion/Styling/DefaultRzAccordionStyles.cs">
namespace RizzyUI;
public class DefaultRzAccordionStyles : RzStylesBase.RzAccordionStylesBase
{
    public DefaultRzAccordionStyles(RzTheme theme) : base(theme)
    {
    }
    public override string Container =>
        "w-full divide-y divide-outline overflow-hidden rounded-borderRadius border border-outline bg-surface-alt/40 text-on-surface dark:divide-outline";
}
</file>

<file path="Components/RzAlert/RzAlert.razor">
@* src/RizzyUI/Components/RzAlert/RzAlert.razor *@
@using Blazicons
@namespace RizzyUI
@inherits RzComponent

<CascadingValue Value="this" IsFixed="true">
	<HtmlElement Element="@Element"
	             @attributes="@AdditionalAttributes"
	             class="@RootClass()"
	             role="alert"
	             aria-live="assertive"
	             aria-labelledby="rzalert-title"
	             aria-describedby="rzalert-description"
	             x-cloak
	             x-show="showAlert"
	             x-data="rzAlert"
	             x-transition:enter="transition ease-out duration-200"
	             x-transition:enter-start="opacity-0"
	             x-transition:enter-end="opacity-100"
	             x-transition:leave="transition ease-in duration-100"
	             x-transition:leave-start="opacity-100"
	             x-transition:leave-end="opacity-0">

		<div class="@InnerContainerClass">
			@if (Icon != null)
			{
				<div class="@IconContainerClass" aria-hidden="true">
					@if (Pulse)
					{
						<div class="@IconPulseClass"></div>
					}
					<Blazicon Svg="Icon"></Blazicon>
				</div>
			}
			<div class="@ContentContainerClass">
				@ChildContent
			</div>

			@if (Dismissable)
			{
				<button
					type="button"
					x-on:click="dismiss"
					aria-label="Close alert"
					class="@CloseButtonClass">
					<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" aria-hidden="true" stroke="currentColor" fill="none" stroke-width="2.5" class="@CloseButtonIconClass">
						<path stroke-linecap="round" stroke-linejoin="round" d="M6 18L18 6M6 6l12 12"/>
					</svg>
				</button>
			}
		</div>
	</HtmlElement>
</CascadingValue>
</file>

<file path="Components/RzAlert/RzAlert.razor.cs">
using Blazicons;
using Microsoft.AspNetCore.Components;
using Microsoft.Extensions.Options;
using RizzyUI.Extensions;
namespace RizzyUI;
public partial class RzAlert : RzComponent
{
    private string _bgLight = string.Empty;
    private string _bgLighter = string.Empty;
    private string _iconColor = string.Empty;
    [Parameter]
    public AlertVariant Variant { get; set; } = AlertVariant.Information;
    [Parameter]
    public SvgIcon? Icon { get; set; }
    [Parameter]
    public bool Dismissable { get; set; }
    [Parameter]
    public RenderFragment? ChildContent { get; set; }
    [Parameter]
    public bool Pulse { get; set; }
    internal string InnerContainerClass => Theme.RzAlert.InnerContainer + " " + _bgLight;
    internal string IconContainerClass =>
        Theme.RzAlert.IconContainer + (Pulse ? "" : " " + _bgLighter) + " " + _iconColor;
    internal string IconPulseClass => Pulse ? Theme.RzAlert.IconPulse + " " + _bgLighter : "";
    internal string ContentContainerClass => Theme.RzAlert.ContentContainer;
    internal string CloseButtonClass => Theme.RzAlert.CloseButton;
    internal string CloseButtonIconClass => Theme.RzAlert.CloseButtonIcon;
    protected override void OnInitialized()
    {
        base.OnInitialized();
        SetVariantStyles();
        SetDefaultIcon();
    }
    protected override void OnParametersSet()
    {
        if (Theme != null)
        {
            SetVariantStyles();
            SetDefaultIcon();
        }
        base.OnParametersSet();
    }
    private void SetVariantStyles()
    {
        var styles = Theme.RzAlert;
        _bgLight = styles.GetVariantBackgroundLightCss(Variant);
        _bgLighter = styles.GetVariantBackgroundLighterCss(Variant);
        _iconColor = styles.GetVariantIconColorCss(Variant);
    }
    private void SetDefaultIcon()
    {
        if (Icon == null)
            Icon = Variant switch
            {
                AlertVariant.Information => MdiIcon.InformationSlabCircle,
                AlertVariant.Success => MdiIcon.CheckCircle,
                AlertVariant.Warning => MdiIcon.AlertCircle,
                AlertVariant.Danger => MdiIcon.CloseCircle,
                AlertVariant.Alternate => null,
                _ => MdiIcon.InformationSlabCircle
            };
    }
    protected override string? RootClass()
    {
        return TwMerge.Merge(AdditionalAttributes, Theme.RzAlert.Container, Theme.RzAlert.GetVariantCss(Variant));
    }
}
</file>

<file path="Components/RzAlert/Styling/DefaultRzAlertStyles.cs">
namespace RizzyUI;
public class DefaultRzAlertStyles : RzStylesBase.RzAlertStylesBase
{
    public DefaultRzAlertStyles(RzTheme theme) : base(theme)
    {
    }
    public override string Container => "relative w-full overflow-hidden rounded-borderRadius border";
    public override string InnerContainer => "flex w-full items-center gap-2 p-4";
    public override string IconContainer => "relative flex rounded-full p-1 text-2xl justify-center";
    public override string IconPulse =>
        "absolute animate-ping motion-reduce:animate-none size-6 aspect-square rounded-full";
    public override string ContentContainer => "ml-2";
    public override string CloseButton => "ml-auto";
    public override string CloseButtonIcon => "shrink-0 h-4 w-4";
    public override string GetVariantCss(AlertVariant variant)
    {
        return variant switch
        {
            AlertVariant.Alternate => $"border-outline bg-surface text-on-surface",
            AlertVariant.Information =>
                $"border-info bg-surface text-on-surface",
            AlertVariant.Success =>
                $"border-success bg-surface text-on-surface",
            AlertVariant.Warning =>
                $"border-warning bg-surface text-on-surface",
            AlertVariant.Danger =>
                $"border-danger bg-surface text-on-surface",
            _ => GetVariantCss(AlertVariant.Information)
        };
    }
    public override string GetVariantBackgroundLightCss(AlertVariant variant)
    {
        return variant switch
        {
            AlertVariant.Alternate => "bg-surface-alt/10",
            AlertVariant.Information => $"bg-info/10",
            AlertVariant.Success => $"bg-success/10",
            AlertVariant.Warning => $"bg-warning/10",
            AlertVariant.Danger => $"bg-danger/10",
            _ => GetVariantBackgroundLightCss(AlertVariant.Information)
        };
    }
    public override string GetVariantBackgroundLighterCss(AlertVariant variant)
    {
        return variant switch
        {
            AlertVariant.Alternate => "bg-surface-alt/15",
            AlertVariant.Information => $"bg-info/15",
            AlertVariant.Success => $"bg-success/15",
            AlertVariant.Warning => $"bg-warning/15",
            AlertVariant.Danger => $"bg-danger/15",
            _ => GetVariantBackgroundLighterCss(AlertVariant.Information)
        };
    }
    public override string GetVariantIconColorCss(AlertVariant variant)
    {
        return variant switch
        {
            AlertVariant.Alternate => "text-on-surface",
            AlertVariant.Information => $"text-info",
            AlertVariant.Success => $"text-success",
            AlertVariant.Warning => $"text-warning",
            AlertVariant.Danger => $"text-danger",
            _ => GetVariantIconColorCss(AlertVariant.Information)
        };
    }
}
public class DefaultRzAlertTitleStyles : RzStylesBase.RzAlertTitleStylesBase
{
    public DefaultRzAlertTitleStyles(RzTheme theme) : base(theme)
    {
    }
    public override string Title => "text-sm font-semibold pb-1";
    public override string GetVariantTextColorCss(AlertVariant? variant)
    {
        return variant switch
        {
            AlertVariant.Alternate =>
                $"text-{Theme.Light.OnSurfaceStrong.TailwindClassName}",
            AlertVariant.Information => $"text-info",
            AlertVariant.Success => $"text-success",
            AlertVariant.Warning => $"text-warning",
            AlertVariant.Danger => $"text-danger",
            _ => $"text-info"
        };
    }
}
public class DefaultRzAlertDescriptionStyles : RzStylesBase.RzAlertDescriptionStylesBase
{
    public DefaultRzAlertDescriptionStyles(RzTheme theme) : base(theme)
    {
    }
    public override string Description => "text-xs font-medium sm:text-sm";
}
</file>

<file path="Components/RzArticle/RzArticle.razor">
@namespace RizzyUI
@inherits RzComponent

<HtmlElement Element="@Element" @attributes="@AdditionalAttributes" class="@RootClass()">
    <div class="@InnerContainerClass">
        <article class="@ArticleClass @ArticleProseClass">
            @MainContent
        </article>

        <aside class="@AsideClass">
            @SideContent
        </aside>
    </div>
</HtmlElement>
</file>

<file path="Components/RzArticle/RzArticle.razor.cs">
using Microsoft.AspNetCore.Components;
using Microsoft.Extensions.Options;
using RizzyUI.Extensions;
namespace RizzyUI;
public partial class RzArticle : RzComponent
{
    [Parameter]
    public ProseWidth ProseWidth { get; set; } = ProseWidth.Full;
    [Parameter]
    public Size ColumnWidth { get; set; } = Size.Large;
    [Parameter]
    public RenderFragment? SideContent { get; set; }
    [Parameter]
    [EditorRequired]
    public required RenderFragment MainContent { get; set; }
    [Parameter]
    public bool IsSideFixed { get; set; } = true;
    protected string InnerContainerClass => Theme.RzArticle.InnerContainer;
    protected string ArticleClass => Theme.RzArticle.Article;
    protected string ArticleProseClass => Theme.RzArticle.GetArticleProseCss(ProseWidth);
    protected string AsideClass => Theme.RzArticle.GetAsideCss(ColumnWidth, IsSideFixed);
    protected override string? RootClass()
    {
        return TwMerge.Merge(AdditionalAttributes, Theme.RzArticle.Container,
            Theme.RzArticle.GetContainerPaddingCss(ColumnWidth));
    }
}
</file>

<file path="Components/RzArticle/Styling/DefaultRzArticleStyles.cs">
namespace RizzyUI;
public class DefaultRzArticleStyles : RzStylesBase.RzArticleStylesBase
{
    public DefaultRzArticleStyles(RzTheme theme) : base(theme)
    {
    }
    public override string Container =>
        $"flex w-full justify-between pr-0 text-on-surface dark:text-on-surface";
    public override string InnerContainer => "mx-auto flex max-w-7xl grow flex-col overflow-x-auto overflow-y-hidden";
    public override string Article => ""; // Base article element, prose width added by method
    /// <inheritdoc />
    public override string Aside =>
        "hidden shrink-0 flex-col gap-2 overflow-y-auto p-8 pl-0 text-sm xl:flex";
    public override string GetArticleProseCss(ProseWidth width)
    {
        return width switch
        {
            ProseWidth.Compact => "prose-compact",
            ProseWidth.Comfortable => "prose-comfortable",
            ProseWidth.Relaxed => "prose-relaxed",
            ProseWidth.Wide => "prose-wide",
            ProseWidth.UltraWide => "prose-ultrawide",
            ProseWidth.Full => "prose-full",
            _ => GetArticleProseCss(ProseWidth.Comfortable)
        };
    }
    public override string GetAsideCss(Size columnWidth, bool isFixed)
    {
        var fixedCss =
            isFixed
                ? "h-fill fixed right-0 top-16 z-0"
                : ""; // Fixed positioning + top offset (adjust if navbar height changes)
        var widthCss = columnWidth switch
        {
            Size.ExtraSmall => "w-48",
            Size.Small => "w-56",
            Size.Medium => "w-64",
            Size.Large => "w-72",
            Size.ExtraLarge => "w-80",
            _ => GetAsideCss(Size.Large, isFixed)
        };
        return $"{Aside} {fixedCss} {widthCss}";
    }
    public override string GetContainerPaddingCss(Size columnWidth)
    {
        return columnWidth switch
        {
            Size.ExtraSmall => "xl:pr-48",
            Size.Small => "xl:pr-56",
            Size.Medium => "xl:pr-64",
            Size.Large => "xl:pr-72",
            Size.ExtraLarge => "xl:pr-80",
            _ => GetContainerPaddingCss(Size.Large)
        };
    }
}
</file>

<file path="Components/RzAvatar/RzAvatar.razor">
@namespace RizzyUI
@inherits RzComponent

<HtmlElement Element="@Element" @attributes="@AdditionalAttributes" class="@RootClass()" role="img"
             aria-label="@AlternateText">
    @if (IndicatorVisible)
    {
        <div class="@IndicatorClass @IndicatorSizeClass @IndicatorColorClass"></div>
    }
    @if (!string.IsNullOrEmpty(ImageSource))
    {
        <img src="@ImageSource" alt="@AlternateText" class="@ImageClass @ImageSizeClass @ImageShapeClass"/>
    }
    else if (!string.IsNullOrEmpty(Initials))
    {
        <div
            class="@InitialsContainerClass @InitialsContainerSizeClass @InitialsContainerShapeClass @InitialsTextSizeClass">
            @Initials
        </div>
    }
    else
    {
        <div class="@PlaceholderContainerClass @PlaceholderContainerSizeClass @PlaceholderContainerShapeClass">
            <svg class="@PlaceholderIconClass @PlaceholderIconSizeClass"
                 fill="currentColor"
                 viewBox="0 0 20 20"
                 xmlns="http://www.w3.org/2000/svg">
                <path
                    fill-rule="evenodd"
                    d="M10 9a3 3 0 100-6 3 3 0 000 6zm-7 9a7 7 0 1114 0H3z"
                    clip-rule="evenodd"/>
            </svg>
        </div>
    }
</HtmlElement>
</file>

<file path="Components/RzAvatar/RzAvatar.razor.cs">
using Microsoft.AspNetCore.Components;
using Microsoft.Extensions.Options;
using RizzyUI.Extensions;
namespace RizzyUI;
public partial class RzAvatar : RzComponent
{
    private string _initials = string.Empty;
    [Parameter]
    public string ImageSource { get; set; } = string.Empty;
    [Parameter]
    public string DisplayName { get; set; } = string.Empty;
    [Parameter]
#pragma warning disable BL0007
    public string Initials
#pragma warning restore BL0007
    {
        get => _initials;
        set => _initials = value != null && value.Length > 2
            ? value.Substring(0, 2).ToUpperInvariant()
            : (value ?? string.Empty).ToUpperInvariant();
    }
    [Parameter]
    public AvatarShape Shape { get; set; } = AvatarShape.Circle;
    [Parameter]
    public Size Size { get; set; } = Size.Medium;
    [Parameter]
    public bool IndicatorVisible { get; set; }
    [Parameter]
    public AccentColor IndicatorColor { get; set; } = AccentColor.Emerald;
    [Parameter]
    public bool Border { get; set; }
    private string AlternateText => string.IsNullOrEmpty(DisplayName) ? "User Avatar" : $"{DisplayName}";
    protected string? ContainerClass => Theme.RzAvatar.Container;
    protected string IndicatorClass => Theme.RzAvatar.Indicator;
    protected string IndicatorSizeClass => Theme.RzAvatar.GetIndicatorSizeCss(Size);
    protected string IndicatorColorClass => Theme.RzAvatar.GetIndicatorColorCss(IndicatorColor);
    protected string ImageClass => Theme.RzAvatar.Image;
    protected string ImageSizeClass => Theme.RzAvatar.GetSizeCss(Size);
    protected string ImageShapeClass => Theme.RzAvatar.GetShapeCss(Shape);
    protected string InitialsContainerClass => Theme.RzAvatar.InitialsContainer;
    protected string InitialsContainerSizeClass => Theme.RzAvatar.GetSizeCss(Size);
    protected string InitialsContainerShapeClass => Theme.RzAvatar.GetShapeCss(Shape);
    protected string InitialsTextSizeClass => Theme.RzAvatar.GetInitialsSizeCss(Size);
    protected string PlaceholderContainerClass => Theme.RzAvatar.PlaceholderContainer;
    protected string PlaceholderContainerSizeClass => Theme.RzAvatar.GetSizeCss(Size);
    protected string PlaceholderContainerShapeClass => Theme.RzAvatar.GetShapeCss(Shape);
    protected string PlaceholderIconClass => Theme.RzAvatar.PlaceholderIcon;
    protected string PlaceholderIconSizeClass => Theme.RzAvatar.GetPlaceholderSizeCss(Size);
    protected override string? RootClass()
    {
        return TwMerge.Merge(AdditionalAttributes, ContainerClass, Theme.RzAvatar.GetSizeCss(Size));
    }
}
</file>

<file path="Components/RzAvatar/Styling/DefaultRzAvatarStyles.cs">
namespace RizzyUI;
public class DefaultRzAvatarStyles : RzStylesBase.RzAvatarStylesBase
{
    public DefaultRzAvatarStyles(RzTheme theme) : base(theme)
    {
    }
    public override string Container =>
        "relative inline-block aspect-square object-cover";
    public override string Indicator =>
        $"border-2 absolute right-0 top-0 rounded-full border-surface";
    public override string Image => "inline-block aspect-square";
    public override string InitialsContainer =>
        $"inline-flex items-center justify-center bg-surface-alt text-on-surface-muted dark:bg-surface-alt dark:text-on-surface-muted";
    public override string PlaceholderContainer =>
        $"inline-flex items-center justify-center bg-surface-alt text-outline dark:bg-surface-alt dark:text-outline";
    public override string PlaceholderIcon => "inline-block";
    public override string GetShapeCss(AvatarShape shape)
    {
        return shape switch
        {
            AvatarShape.Circle => "rounded-borderRadius-full",
            AvatarShape.Square => "rounded-borderRadius",
            _ => "rounded-borderRadius-full"
        };
    }
    public override string GetSizeCss(Size size)
    {
        return size switch
        {
            Size.ExtraSmall => "size-6",
            Size.Small => "size-8",
            Size.Medium => "size-10",
            Size.Large => "size-14",
            Size.ExtraLarge => "size-20",
            _ => GetSizeCss(Size.Medium)
        };
    }
    public override string GetInitialsSizeCss(Size size)
    {
        return size switch
        {
            Size.ExtraSmall => "text-xs",
            Size.Small => "text-sm",
            Size.Medium => "text-base",
            Size.Large => "text-2xl",
            Size.ExtraLarge => "text-4xl",
            _ => GetInitialsSizeCss(Size.Medium)
        };
    }
    public override string GetPlaceholderSizeCss(Size size)
    {
        return size switch
        {
            Size.ExtraSmall => "size-4",
            Size.Small => "size-5",
            Size.Medium => "size-6",
            Size.Large => "size-8",
            Size.ExtraLarge => "size-10",
            _ => GetPlaceholderSizeCss(Size.Medium)
        };
    }
    public override string GetIndicatorSizeCss(Size size)
    {
        return size switch
        {
            Size.ExtraSmall => "size-3",
            Size.Small => "size-3",
            Size.Medium => "size-3",
            Size.Large => "size-4",
            Size.ExtraLarge => "size-5",
            _ => GetIndicatorSizeCss(Size.Medium)
        };
    }
    public override string GetIndicatorColorCss(AccentColor color)
    {
        return color.ToLightBackgroundClass() + " " + color.ToDarkBackgroundClass();
    }
}
</file>

<file path="Components/RzBadge/RzBadge.razor">
@namespace RizzyUI
@using Blazicons
@inherits RzComponent

<HtmlElement Element="span" @attributes="AdditionalAttributes" class="@RootClass()">
    <span class="@InnerSpanClass">
	    <span class="flex items-center gap-1"> @* Keep inner flex for alignment *@
		    @if (Icon != null)
		    {
			    <Blazicon Svg="Icon"/>
		    }
		    @ChildContent @Label
	    </span>
	</span>
</HtmlElement>
</file>

<file path="Components/RzBadge/RzBadge.razor.cs">
using Blazicons;
using Microsoft.AspNetCore.Components;
using Microsoft.Extensions.Options;
using RizzyUI.Extensions;
namespace RizzyUI;
public partial class RzBadge : RzComponent
{
    [Parameter]
    public SemanticColor Color { get; set; } = SemanticColor.SurfaceAlt;
    [Parameter]
    public bool Soft { get; set; }
    [Parameter]
    public SvgIcon? Icon { get; set; }
    [Parameter]
    public string Label { get; set; } = string.Empty;
    [Parameter]
    public RenderFragment? ChildContent { get; set; }
    protected string InnerSpanClass => Theme.RzBadge.InnerSpan;
    protected override string? RootClass()
    {
        var styles = Theme.RzBadge;
        return TwMerge.Merge(AdditionalAttributes,
            styles.Badge,
            Soft ? styles.GetVariantSoftCss(Color) : styles.GetVariantCss(Color));
    }
}
</file>

<file path="Components/RzBadge/Styling/DefaultRzBadgeStyles.cs">
namespace RizzyUI;
public class DefaultRzBadgeStyles : RzStylesBase.RzBadgeStylesBase
{
    public DefaultRzBadgeStyles(RzTheme theme) : base(theme)
    {
    }
    public override string Badge =>
        "w-fit inline-flex overflow-hidden rounded-borderRadius-2xl border text-xs font-medium";
    public override string InnerSpan => "flex items-center gap-1 px-2 py-1";
    public override string GetVariantCss(SemanticColor color)
    {
        return color switch
        {
            SemanticColor.Surface => $"border-outline bg-surface text-on-surface",
            SemanticColor.SurfaceAlt => "border-on-surface bg-surface-alt text-on-surface",
            SemanticColor.Primary => "border-primary bg-primary text-on-primary",
            SemanticColor.Secondary => "border-secondary bg-secondary text-on-secondary",
            SemanticColor.Info =>
                $"border-info bg-info text-on-info dark:border-info dark:bg-info dark:text-on-info",
            SemanticColor.Success =>
                $"border-success bg-success text-on-success dark:border-success dark:bg-success dark:text-on-success",
            SemanticColor.Warning =>
                $"border-warning bg-warning text-on-warning dark:border-warning dark:bg-warning dark:text-on-warning",
            SemanticColor.Danger =>
                $"border-danger bg-danger text-on-danger dark:border-danger dark:bg-danger dark:text-on-danger",
            SemanticColor.Outline => "border-outline bg-transparent text-outline",
            SemanticColor.OnSurface => GetVariantCss(SemanticColor.Surface),
            SemanticColor.OnSurfaceStrong => GetVariantCss(SemanticColor.Surface),
            SemanticColor.OnPrimary => GetVariantCss(SemanticColor.Primary),
            SemanticColor.OnSecondary => GetVariantCss(SemanticColor.Secondary),
            SemanticColor.OnInfo => GetVariantCss(SemanticColor.Info),
            SemanticColor.OnSuccess => GetVariantCss(SemanticColor.Success),
            SemanticColor.OnWarning => GetVariantCss(SemanticColor.Warning),
            SemanticColor.OnDanger => GetVariantCss(SemanticColor.Danger),
            SemanticColor.OutlineStrong => GetVariantCss(SemanticColor.Outline),
            SemanticColor.None => "",
            _ => GetVariantCss(SemanticColor.SurfaceAlt) // Default
        };
    }
    /// <inheritdoc />
    public override string GetVariantSoftCss(SemanticColor color)
    {
        return color switch
        {
            SemanticColor.Surface => $"border-outline bg-surface text-on-surface",
            SemanticColor.SurfaceAlt => "border-on-surface bg-surface-alt text-on-surface",
            SemanticColor.Primary => "border-primary bg-primary/10 text-primary",
            SemanticColor.Secondary => "border-secondary bg-secondary/10 text-secondary",
            SemanticColor.Info =>
                $"border-info bg-info/10 dark:bg-info/10 text-info dark:border-info dark:text-on-info",
            SemanticColor.Success =>
                $"border-success bg-success/10 dark:bg-success/10 text-success dark:border-success dark:text-on-success",
            SemanticColor.Warning =>
                $"border-warning bg-warning/10 dark:bg-warning/10 text-warning dark:border-warning dark:text-on-warning",
            SemanticColor.Danger =>
                $"border-danger bg-danger/10 dark:bg-danger/10 text-danger dark:border-danger dark:text-on-danger",
            SemanticColor.Outline => "border-outline bg-outline/10 text-on-surface",
            SemanticColor.OnSurface => GetVariantSoftCss(SemanticColor.Surface),
            SemanticColor.OnSurfaceStrong => GetVariantSoftCss(SemanticColor.Surface),
            SemanticColor.OnPrimary => GetVariantSoftCss(SemanticColor.Primary),
            SemanticColor.OnSecondary => GetVariantSoftCss(SemanticColor.Secondary),
            SemanticColor.OnInfo => GetVariantSoftCss(SemanticColor.Info),
            SemanticColor.OnSuccess => GetVariantSoftCss(SemanticColor.Success),
            SemanticColor.OnWarning => GetVariantSoftCss(SemanticColor.Warning),
            SemanticColor.OnDanger => GetVariantSoftCss(SemanticColor.Danger),
            SemanticColor.OutlineStrong => GetVariantSoftCss(SemanticColor.Outline),
            SemanticColor.None => "",
            _ => GetVariantSoftCss(SemanticColor.SurfaceAlt)
        };
    }
}
</file>

<file path="Components/RzBreadcrumb/RzBreadcrumb.razor">
@namespace RizzyUI
@using Blazicons
@inherits RzComponent

<CascadingValue Value="this">
	<HtmlElement Element="nav" @attributes="@AdditionalAttributes" class="@RootClass()" aria-label="breadcrumb">
		@* Allow child RzBreadcrumbItems to register themselves *@
		@ChildContent
		<ol class="@ListClass">
			@foreach (var item in Items)
			{
				<li class="@ItemClass">
					@* Render the item's content which handles link vs span *@
					@item.Content
					@if (item != Items.Last())
					{
						@* Use the Separator property for the Blazicon *@
						<Blazicon Svg="Separator"/>
					}
				</li>
			}
		</ol>
	</HtmlElement>
</CascadingValue>
</file>

<file path="Components/RzBreadcrumb/RzBreadcrumb.razor.cs">
using Blazicons;
using Microsoft.AspNetCore.Components;
using Microsoft.Extensions.Options;
using RizzyUI.Extensions;
namespace RizzyUI;
public partial class RzBreadcrumb : RzComponent
{
    protected readonly List<RzBreadcrumbItem> Items = new();
    [CascadingParameter]
    protected RzTheme? CascadedTheme { get; set; }
    [Inject]
    private IOptions<RizzyUIConfig>? Config { get; set; }
    protected RzTheme Theme { get; set; } = default!;
    [Parameter]
    public SvgIcon Separator { get; set; } = MdiIcon.ChevronRight;
    [Parameter]
    public RenderFragment? ChildContent { get; set; }
    protected string ListClass => Theme.RzBreadcrumb.List;
    protected string ItemClass => Theme.RzBreadcrumbItem.ListItem;
    protected override void OnInitialized()
    {
        base.OnInitialized();
        Theme = CascadedTheme ?? Config?.Value.DefaultTheme ?? RzTheme.Default;
        if (Theme == null)
            throw new InvalidOperationException(
                $"{GetType()} requires a cascading RzTheme or a default theme configured.");
    }
    protected override string? RootClass()
    {
        return TwMerge.Merge(AdditionalAttributes, Theme.RzBreadcrumb.Container);
    }
    internal void RegisterItem(RzBreadcrumbItem item)
    {
        if (!Items.Contains(item))
        {
            Items.Add(item);
            InvokeAsync(StateHasChanged);
        }
    }
}
</file>

<file path="Components/RzBreadcrumb/RzBreadcrumbItem.cs">
using Blazicons;
using Microsoft.AspNetCore.Components;
using Microsoft.AspNetCore.Components.Rendering;
using Microsoft.Extensions.Options;
namespace RizzyUI;
public class RzBreadcrumbItem : RzComponent
{
    [CascadingParameter]
    private RzBreadcrumb? ParentBreadcrumb { get; set; }
    [Parameter]
    public string Href { get; set; } = "#";
    [Parameter]
    [EditorRequired]
    public string Label { get; set; } = string.Empty;
    [Parameter]
    public bool IsActive { get; set; }
    [Parameter]
    public SvgIcon? Icon { get; set; }
    internal RenderFragment Content => builder =>
    {
        var styles = Theme.RzBreadcrumbItem;
        if (!IsActive)
        {
            builder.OpenElement(0, "a");
            builder.AddAttribute(1, "href", Href);
            builder.AddMultipleAttributes(2, AdditionalAttributes);
            builder.AddAttribute(3, "class", styles.Link);
            RenderInnerContent(builder, styles);
            builder.CloseElement();
        }
        else
        {
            builder.OpenElement(0, "span");
            builder.AddAttribute(1, "class", styles.ActiveSpan);
            builder.AddAttribute(2, "aria-current", "page");
            builder.AddMultipleAttributes(3, AdditionalAttributes);
            RenderInnerContent(builder, styles);
            builder.CloseElement();
        }
    };
    protected override void OnInitialized()
    {
        base.OnInitialized();
        if (ParentBreadcrumb == null)
            throw new InvalidOperationException(
                $"{nameof(RzBreadcrumbItem)} must be used within an {nameof(RzBreadcrumb)} component.");
        ParentBreadcrumb.RegisterItem(this);
    }
    private void RenderInnerContent(RenderTreeBuilder builder, RzStylesBase.RzBreadcrumbItemStylesBase styles)
    {
        if (Icon != null)
        {
            builder.OpenElement(4, "span");
            builder.AddAttribute(5, "class", styles.IconSpan);
            builder.OpenComponent<Blazicon>(6);
            builder.AddAttribute(7, "Svg", Icon);
            builder.CloseComponent();
            builder.CloseElement();
        }
        else
        {
            builder.AddContent(8, Label);
        }
    }
}
</file>

<file path="Components/RzBreadcrumb/Styling/DefaultRzBreadcrumbStyles.cs">
namespace RizzyUI;
public class DefaultRzBreadcrumbStyles : RzStylesBase.RzBreadcrumbStylesBase
{
    public DefaultRzBreadcrumbStyles(RzTheme theme) : base(theme)
    {
    }
    public override string Container => "text-sm font-medium text-on-primary mb-4";
    public override string List => "flex flex-wrap items-center gap-1";
}
public class DefaultRzBreadcrumbItemStyles : RzStylesBase.RzBreadcrumbItemStylesBase
{
    public DefaultRzBreadcrumbItemStyles(RzTheme theme) : base(theme)
    {
    }
    public override string ListItem => "flex items-center gap-1 text-on-surface";
    public override string Link =>
        $"text-on-surface hover:text-{Theme.Light.OnSurfaceStrong.TailwindClassName} dark:hover:text-{Theme.Dark.OnSurfaceStrong.TailwindClassName}";
    public override string ActiveSpan => "font-bold text-on-surface";
    public override string IconSpan => "text-xl";
}
</file>

<file path="Components/RzButton/RzButton.razor">
@namespace RizzyUI
@inherits RzComponent

<HtmlElement Element="@Element" @attributes="@AdditionalAttributes" class="@RootClass()" aria-label="@AssistiveLabel">
	@* Render ChildContent first if it exists, otherwise fall back to Label *@
	@if (ChildContent != null)
	{
		@ChildContent
	}
	else
	{
		@Label
	}
</HtmlElement>
</file>

<file path="Components/RzButton/RzButton.razor.cs">
using Microsoft.AspNetCore.Components;
using Microsoft.Extensions.Options;
using RizzyUI.Extensions;
namespace RizzyUI;
public partial class RzButton : RzComponent
{
    [CascadingParameter]
    public RzButtonGroup? Group { get; set; }
    [Parameter]
    public string AssistiveLabel { get; set; } = "Action Button";
    [Parameter]
    public ButtonVariant Variant { get; set; } = ButtonVariant.Primary;
    [Parameter]
    public Size Size { get; set; } = Size.Medium;
    [Parameter]
    public bool Outline { get; set; }
    [Parameter]
    public string Label { get; set; } = string.Empty;
    [Parameter]
    public bool Animate { get; set; } = true;
    [Parameter]
    public RenderFragment? ChildContent { get; set; }
    protected override void OnInitialized()
    {
        base.OnInitialized();
        Element = "button";
    }
    protected override string? RootClass()
    {
        var styles = Theme.RzButton;
        var groupStyles = Theme.RzButtonGroup;
        var groupSpecificClass = string.Empty;
        if (Group != null)
        {
            var idx = Group.Buttons.IndexOf(this);
            if (idx == 0)
                groupSpecificClass = groupStyles.GroupFirst;
            else if (idx == Group.Buttons.Count - 1)
                groupSpecificClass = groupStyles.GroupLast;
            else
                groupSpecificClass = groupStyles.GroupMiddle;
        }
        return TwMerge.Merge(AdditionalAttributes,
            styles.Button,
            Outline ? styles.GetVariantOutlineCss(Variant) : styles.GetVariantCss(Variant),
            Animate ? styles.Animated : "",
            styles.GetSizeCss(Size),
            groupSpecificClass);
    }
    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        Group?.AddButton(this);
    }
}
</file>

<file path="Components/RzButton/RzButtonGroup.razor">
@namespace RizzyUI
@inherits RzComponent

@* Provides this ButtonGroup instance to child RzButton components *@
<CascadingValue Value="this" IsFixed="true">
	<div @attributes="AdditionalAttributes" class="@RootClass()">
		@ChildContent
	</div>
</CascadingValue>
</file>

<file path="Components/RzButton/RzButtonGroup.razor.cs">
using Microsoft.AspNetCore.Components;
using Microsoft.Extensions.Options;
using RizzyUI.Extensions;
namespace RizzyUI;
public partial class RzButtonGroup : RzComponent
{
    private readonly List<RzButton> _buttons = new();
    public List<RzButton> Buttons => _buttons;
    [Parameter]
    public RenderFragment? ChildContent { get; set; }
    protected override string? RootClass()
    {
        return TwMerge.Merge(AdditionalAttributes, Theme.RzButtonGroup.Container);
    }
    internal void AddButton(RzButton button)
    {
        if (!_buttons.Contains(button)) _buttons.Add(button);
    }
}
</file>

<file path="Components/RzButton/Styling/DefaultRzButtonGroupStyles.cs">
namespace RizzyUI;
public class DefaultRzButtonGroupStyles : RzStylesBase.RzButtonGroupStylesBase
{
    public DefaultRzButtonGroupStyles(RzTheme theme) : base(theme)
    {
    }
    public override string Container => "inline-flex";
    public override string GroupFirst => "rounded-none rounded-l-borderRadius";
    public override string GroupLast => "rounded-none rounded-r-borderRadius border-l-0";
    public override string GroupMiddle => "rounded-none border-l-0";
}
</file>

<file path="Components/RzButton/Styling/DefaultRzButtonStyles.cs">
namespace RizzyUI;
public class DefaultRzButtonStyles : RzStylesBase.RzButtonStylesBase
{
    public DefaultRzButtonStyles(RzTheme theme) : base(theme)
    {
    }
    public override string Button =>
        "inline-flex items-center justify-center gap-2 cursor-pointer whitespace-nowrap rounded-borderRadius font-medium tracking-wide text-center transition hover:opacity-75 active:opacity-100 hover:shadow-sm disabled:opacity-75 disabled:cursor-not-allowed";
    public override string Animated => "transform active:scale-90 motion-reduce:transition-none transition-transform";
    public override string GetVariantCss(ButtonVariant variant)
    {
        return variant switch
        {
            ButtonVariant.Primary =>
                "bg-primary text-on-primary focus-visible:outline-primary dark:focus-visible:outline-primary",
            ButtonVariant.Secondary =>
                $"bg-secondary text-on-secondary focus-visible:outline-secondary dark:focus-visible:outline-{Theme.Dark.Secondary.TailwindClassName}",
            ButtonVariant.Alternate =>
                "bg-surface-alt text-on-surface focus-visible:outline-surface-alt dark:focus-visible:outline-surface-alt",
            ButtonVariant.Inverse =>
                $"bg-{Theme.Dark.Surface.TailwindClassName} text-on-surface focus-visible:outline-surface dark:bg-surface dark:text-{Theme.Light.OnSurfaceStrong.TailwindClassName} dark:focus-visible:outline-surface",
            ButtonVariant.Information =>
                $"bg-info text-on-info focus-visible:outline-info dark:bg-info dark:text-on-info dark:focus-visible:outline-info",
            ButtonVariant.Danger =>
                $"bg-danger text-on-danger focus-visible:outline-danger dark:bg-danger dark:text-on-danger dark:focus-visible:outline-danger",
            ButtonVariant.Warning =>
                $"bg-warning text-on-warning focus-visible:outline-warning dark:bg-warning dark:text-on-warning dark:focus-visible:outline-warning",
            ButtonVariant.Success =>
                $"bg-success text-on-success focus-visible:outline-success dark:bg-success dark:text-on-success dark:focus-visible:outline-success",
            ButtonVariant.Ghost => "bg-transparent text-on-surface focus-visible:outline-none",
            _ => GetVariantCss(ButtonVariant.Primary)
        };
    }
    public override string GetVariantOutlineCss(ButtonVariant variant)
    {
        return variant switch
        {
            ButtonVariant.Primary =>
                "bg-transparent border border-primary text-primary focus-visible:outline-primary dark:focus-visible:outline-primary",
            ButtonVariant.Secondary =>
                $"bg-transparent border border-secondary text-secondary focus-visible:outline-secondary dark:focus-visible:outline-{Theme.Dark.Secondary.TailwindClassName}",
            ButtonVariant.Alternate =>
                "bg-transparent border border-outline text-outline focus-visible:outline-outline dark:focus-visible:outline-outline",
            ButtonVariant.Inverse =>
                $"bg-transparent border border-{Theme.Light.OnSurfaceStrong.TailwindClassName} text-{Theme.Light.OnSurfaceStrong.TailwindClassName} focus-visible:outline-{Theme.Light.OnSurfaceStrong.TailwindClassName} dark:focus-visible:outline-{Theme.Dark.OnSurfaceStrong.TailwindClassName}",
            ButtonVariant.Information =>
                $"bg-transparent border border-info text-info focus-visible:outline-info dark:border-info dark:text-info dark:focus-visible:outline-info",
            ButtonVariant.Danger =>
                $"bg-transparent border border-danger text-danger focus-visible:outline-danger dark:border-danger dark:text-danger dark:focus-visible:outline-danger",
            ButtonVariant.Warning =>
                $"bg-transparent border border-warning text-warning focus-visible:outline-warning dark:border-warning dark:text-warning dark:focus-visible:outline-warning",
            ButtonVariant.Success =>
                $"bg-transparent border border-success text-success focus-visible:outline-success dark:border-success dark:text-success dark:focus-visible:outline-success",
            ButtonVariant.Ghost => "bg-transparent border text-on-surface hover:opacity-75 focus-visible:outline-none",
            _ => GetVariantOutlineCss(ButtonVariant.Primary)
        };
    }
    public override string GetSizeCss(Size size)
    {
        return size switch
        {
            Size.ExtraSmall => "px-2 py-1 text-sm",
            Size.Small => "px-3 py-2 text-sm",
            Size.Medium => "px-4 py-2 text-md",
            Size.Large => "px-6 py-3 text-md",
            Size.ExtraLarge => "px-8 py-4 text-md",
            _ => GetSizeCss(Size.Medium)
        };
    }
}
</file>

<file path="Components/RzCard/RzCard.razor">
@namespace RizzyUI
@inherits RzComponent

<HtmlElement Element="@Element" @attributes="@AdditionalAttributes" class="@RootClass()">
    @ChildContent
</HtmlElement>
</file>

<file path="Components/RzCard/RzCard.razor.cs">
using Microsoft.AspNetCore.Components;
using Microsoft.Extensions.Options;
using RizzyUI.Extensions;
namespace RizzyUI;
public partial class RzCard : RzComponent
{
    [CascadingParameter]
    protected RzTheme? CascadedTheme { get; set; }
    [Inject]
    private IOptions<RizzyUIConfig>? Config { get; set; }
    protected RzTheme Theme { get; set; } = default!;
    [Parameter]
    public RenderFragment? ChildContent { get; set; }
    [Parameter]
    public SemanticColor BackgroundColor { get; set; } = SemanticColor.Surface;
    [Parameter]
    public SemanticColor TextColor { get; set; } = SemanticColor.OnSurface;
    protected override void OnInitialized()
    {
        base.OnInitialized();
        Theme = CascadedTheme ?? Config?.Value.DefaultTheme ?? RzTheme.Default;
        if (Theme == null)
            throw new InvalidOperationException(
                $"{GetType()} requires a cascading RzTheme or a default theme configured.");
        Element = "div";
    }
    protected override string? RootClass()
    {
        return TwMerge.Merge(AdditionalAttributes,
            Theme.RzCard.Container,
            BackgroundColor != SemanticColor.None
                ? BackgroundColor.ToBackgroundClass()
                : Theme.Light.Surface.ToCssClassString("bg"),
            TextColor != SemanticColor.None ? TextColor.ToTextClass() : Theme.Light.OnSurface.ToCssClassString("text"));
    }
}
</file>

<file path="Components/RzCard/RzCardBody.razor">
@namespace RizzyUI
@inherits RzComponent

<HtmlElement Element="@Element" @attributes="AdditionalAttributes" class="@RootClass()">
	@ChildContent
</HtmlElement>
</file>

<file path="Components/RzCard/RzCardBody.razor.cs">
using Microsoft.AspNetCore.Components;
using Microsoft.Extensions.Options;
using RizzyUI.Extensions;
namespace RizzyUI;
public partial class RzCardBody : RzComponent
{
    [Parameter]
    public RenderFragment? ChildContent { get; set; }
    [Parameter]
    public SemanticColor BackgroundColor { get; set; } = SemanticColor.None;
    [Parameter]
    public SemanticColor TextColor { get; set; } = SemanticColor.None;
    protected override string? RootClass()
    {
        return TwMerge.Merge(AdditionalAttributes,
            Theme.RzCardBody.Body,
            BackgroundColor != SemanticColor.None ? BackgroundColor.ToBackgroundClass() : "", // Only apply if set
            TextColor != SemanticColor.None ? TextColor.ToTextClass() : "");
    }
}
</file>

<file path="Components/RzCard/RzCardButtons.razor">
@namespace RizzyUI
@inherits RzComponent

<HtmlElement Element="@Element" @attributes="AdditionalAttributes" class="@RootClass()">
	@ChildContent
</HtmlElement>
</file>

<file path="Components/RzCard/RzCardButtons.razor.cs">
using Microsoft.AspNetCore.Components;
using Microsoft.Extensions.Options;
using RizzyUI.Extensions;
namespace RizzyUI;
public partial class RzCardButtons : RzComponent
{
    [Parameter]
    public RenderFragment? ChildContent { get; set; }
    protected override string? RootClass()
    {
        return TwMerge.Merge(AdditionalAttributes, Theme.RzCardButtons.ButtonsContainer);
    }
}
</file>

<file path="Components/RzCard/RzCardFooter.razor">
@namespace RizzyUI
@inherits RzComponent

<HtmlElement Element="@Element" @attributes="AdditionalAttributes" class="@RootClass()">
    @ChildContent
</HtmlElement>
</file>

<file path="Components/RzCard/RzCardFooter.razor.cs">
using Microsoft.AspNetCore.Components;
using Microsoft.Extensions.Options;
using RizzyUI.Extensions;
namespace RizzyUI;
public partial class RzCardFooter : RzComponent
{
    [Parameter]
    public RenderFragment? ChildContent { get; set; }
    [Parameter]
    public SemanticColor BackgroundColor { get; set; } = SemanticColor.SurfaceAlt;
    [Parameter]
    public SemanticColor TextColor { get; set; } = SemanticColor.OnSurface;
    protected override string? RootClass()
    {
        return TwMerge.Merge(AdditionalAttributes,
            Theme.RzCardFooter.Footer,
            BackgroundColor != SemanticColor.None
                ? BackgroundColor.ToBackgroundClass()
                : Theme.Light.SurfaceAlt.ToCssClassString("bg"),
            TextColor != SemanticColor.None ? TextColor.ToTextClass() : Theme.Light.OnSurface.ToCssClassString("text"));
    }
}
</file>

<file path="Components/RzCard/RzCardHeader.razor">
@namespace RizzyUI
@inherits RzComponent

<!-- Card Header -->
<HtmlElement Element="@Element" @attributes="@AdditionalAttributes" role="heading" aria-level="3" class="@RootClass()">
	@ChildContent
</HtmlElement>
<!-- END Card Header -->
</file>

<file path="Components/RzCard/RzCardHeader.razor.cs">
using Microsoft.AspNetCore.Components;
using Microsoft.Extensions.Options;
using RizzyUI.Extensions;
namespace RizzyUI;
public partial class RzCardHeader : RzComponent
{
    [Parameter]
    public RenderFragment? ChildContent { get; set; }
    [Parameter]
    public SemanticColor BackgroundColor { get; set; } = SemanticColor.SurfaceAlt;
    [Parameter]
    public SemanticColor TextColor { get; set; } = SemanticColor.OnSurface;
    protected override string? RootClass()
    {
        return TwMerge.Merge(AdditionalAttributes,
            Theme.RzCardHeader.Header,
            BackgroundColor != SemanticColor.None
                ? BackgroundColor.ToBackgroundClass()
                : Theme.Light.SurfaceAlt.ToCssClassString("bg"),
            TextColor != SemanticColor.None ? TextColor.ToTextClass() : Theme.Light.OnSurface.ToCssClassString("text"));
    }
}
</file>

<file path="Components/RzCard/RzCardSubtitle.razor">
@namespace RizzyUI
@inherits RzComponent

<HtmlElement Element="@Element" @attributes="AdditionalAttributes" class="@RootClass()">
	@ChildContent
</HtmlElement>
</file>

<file path="Components/RzCard/RzCardSubtitle.razor.cs">
using Microsoft.AspNetCore.Components;
using Microsoft.Extensions.Options;
using RizzyUI.Extensions;
namespace RizzyUI;
public partial class RzCardSubtitle : RzComponent
{
    [Parameter]
    public RenderFragment? ChildContent { get; set; }
    protected override void OnInitialized()
    {
        base.OnInitialized();
        Element = "h4";
    }
    protected override string? RootClass()
    {
        return TwMerge.Merge(AdditionalAttributes, Theme.RzCardSubtitle.Subtitle);
    }
}
</file>

<file path="Components/RzCard/RzCardTitle.razor">
@namespace RizzyUI
@inherits RzComponent

<HtmlElement Element="@Element" @attributes="AdditionalAttributes" class="@RootClass()">
	@ChildContent
</HtmlElement>
</file>

<file path="Components/RzCard/RzCardTitle.razor.cs">
using Microsoft.AspNetCore.Components;
using Microsoft.Extensions.Options;
using RizzyUI.Extensions;
namespace RizzyUI;
public partial class RzCardTitle : RzComponent
{
    [Parameter]
    public RenderFragment? ChildContent { get; set; }
    protected override void OnInitialized()
    {
        base.OnInitialized();
        Element = "h3";
    }
    protected override string? RootClass()
    {
        return TwMerge.Merge(AdditionalAttributes, Theme.RzCardTitle.Title);
    }
}
</file>

<file path="Components/RzCard/Styling/DefaultRzCardStyles.cs">
namespace RizzyUI;
public class DefaultRzCardStyles : RzStylesBase.RzCardStylesBase
{
    public DefaultRzCardStyles(RzTheme theme) : base(theme)
    {
    }
    public override string Container =>
        "flex flex-col rounded-borderRadius overflow-hidden shadow-sm border border-outline";
}
public class DefaultRzCardHeaderStyles : RzStylesBase.RzCardHeaderStylesBase
{
    public DefaultRzCardHeaderStyles(RzTheme theme) : base(theme)
    {
    }
    public override string Header =>
        "flex flex-col gap-3 px-5 py-4 text-center sm:flex-row sm:items-center sm:justify-between sm:text-left";
}
public class DefaultRzCardBodyStyles : RzStylesBase.RzCardBodyStylesBase
{
    public DefaultRzCardBodyStyles(RzTheme theme) : base(theme)
    {
    }
    public override string Body => "grow p-5";
}
public class DefaultRzCardFooterStyles : RzStylesBase.RzCardFooterStylesBase
{
    public DefaultRzCardFooterStyles(RzTheme theme) : base(theme)
    {
    }
    public override string Footer => "px-5 py-4 text-sm last:rounded-b-borderRadius";
}
public class DefaultRzCardTitleStyles : RzStylesBase.RzCardTitleStylesBase
{
    public DefaultRzCardTitleStyles(RzTheme theme) : base(theme)
    {
    }
    public override string Title =>
        $"flex items-center mb-1 text-lg font-semibold text-{Theme.Light.OnSurfaceStrong.TailwindClassName}";
}
public class DefaultRzCardSubtitleStyles : RzStylesBase.RzCardSubtitleStylesBase
{
    public DefaultRzCardSubtitleStyles(RzTheme theme) : base(theme)
    {
    }
    public override string Subtitle => "text-sm font-medium text-on-surface";
}
public class DefaultRzCardButtonsStyles : RzStylesBase.RzCardButtonsStylesBase
{
    public DefaultRzCardButtonsStyles(RzTheme theme) : base(theme)
    {
    }
    public override string ButtonsContainer => "md:flex items-center gap-2 md:-my-4";
}
</file>

<file path="Components/RzCheckbox/RzCheckboxGroup.razor">
@namespace RizzyUI
@typeparam TValue
@inherits RzComponent

<CascadingValue Value="this" IsFixed="true"> @* Cascade self to items *@
	<HtmlElement Element="div" @attributes="@AdditionalAttributes" class="@RootClass()">
		@ChildContent
	</HtmlElement>
</CascadingValue>
</file>

<file path="Components/RzCheckbox/RzCheckboxGroup.razor.cs">
using System.Linq.Expressions;
using Blazicons;
using Microsoft.AspNetCore.Components;
using Microsoft.Extensions.Options;
using RizzyUI.Extensions;
namespace RizzyUI;
public partial class RzCheckboxGroup<TValue> : RzComponent
{
    [Parameter]
    public IList<TValue> Values { get; set; } = new List<TValue>();
    [Parameter]
    public EventCallback<IList<TValue>> ValuesChanged { get; set; }
    [Parameter]
    public Expression<Func<IList<TValue>>>? For { get; set; }
    [Parameter]
    public Orientation Orientation { get; set; } = Orientation.Vertical;
    [Parameter]
    public RenderFragment? ChildContent { get; set; }
    [Parameter]
    public SvgIcon CheckedIcon { get; set; } = MdiIcon.CheckBold;
    public bool IsSelected(TValue value)
    {
        return Values.Any(x => EqualityComparer<TValue>.Default.Equals(x, value));
    }
    public async Task ToggleValueAsync(TValue value, bool isChecked)
    {
        var changed = false;
        if (isChecked)
        {
            if (!Values.Any(x => EqualityComparer<TValue>.Default.Equals(x, value)))
            {
                Values.Add(value);
                changed = true;
            }
        }
        else
        {
            var existing = Values.FirstOrDefault(x => EqualityComparer<TValue>.Default.Equals(x, value));
            if (existing != null && Values.Contains(existing))
            {
                var removed = Values.Remove(existing);
                if (removed) changed = true;
            }
        }
        if (changed && ValuesChanged.HasDelegate) await ValuesChanged.InvokeAsync(Values);
    }
    protected override string? RootClass()
    {
        var styles = Theme.RzCheckboxGroup;
        return TwMerge.Merge(AdditionalAttributes, styles.Container, styles.GetOrientationCss(Orientation));
    }
}
</file>

<file path="Components/RzCheckbox/RzCheckboxGroupField.razor">
@namespace RizzyUI
@typeparam TValue
@inherits RzComponent

@* Use the RzField component for the overall structure *@
<RzField @attributes="AdditionalAttributes" class="@RootClass()">
	<RzFieldLabel DisplayName="@DisplayName" For="@For"/>
	@if (FieldHelp != null)
	{
		<RzFieldHelp>@FieldHelp</RzFieldHelp>
	}
	@* Render the CheckboxGroup inside the Field *@
	<RzCheckboxGroup TValue="TValue" For="@For" @bind-Values="CurrentValues" Orientation="@Orientation"
	                 class="@GroupWithinFieldClass">
		@CheckboxGroupContent
	</RzCheckboxGroup>
	<RzValidationMessage For="@For"/>
</RzField>
</file>

<file path="Components/RzCheckbox/RzCheckboxGroupField.razor.cs">
using System.Linq.Expressions;
using Microsoft.AspNetCore.Components;
using Microsoft.AspNetCore.Components.Forms;
using Microsoft.Extensions.Options;
using RizzyUI.Extensions;
namespace RizzyUI;
public partial class RzCheckboxGroupField<TValue> : RzComponent
{
    private IList<TValue> _currentValues = new List<TValue>();
    private FieldIdentifier _fieldIdentifier;
    [CascadingParameter]
    private EditContext? EditContext { get; set; }
    [Parameter]
    public string? DisplayName { get; set; }
    [Parameter]
    [EditorRequired]
    public Expression<Func<IList<TValue>>>? For { get; set; }
    [Parameter]
    public IList<TValue>? Values { get; set; }
    [Parameter]
    public EventCallback<IList<TValue>> ValuesChanged { get; set; }
    [Parameter]
    public Orientation Orientation { get; set; } = Orientation.Vertical;
    [Parameter]
    public RenderFragment? CheckboxGroupContent { get; set; }
    [Parameter]
    public RenderFragment? FieldHelp { get; set; }
    protected IList<TValue> CurrentValues
    {
        get => _currentValues;
        set
        {
            if (!EqualityComparer<IList<TValue>>.Default.Equals(_currentValues, value))
            {
                _currentValues = value;
                EditContext?.NotifyFieldChanged(_fieldIdentifier);
                InvokeAsync(() => ValuesChanged.InvokeAsync(_currentValues));
            }
        }
    }
    protected string GroupWithinFieldClass => Theme.RzCheckboxGroupField.GroupWithinField;
    protected override void OnInitialized()
    {
        base.OnInitialized();
        if (For == null)
            throw new InvalidOperationException($"{GetType()} requires a value for the 'For' parameter.");
        if (EditContext == null)
            throw new InvalidOperationException($"{GetType()} must be used within an EditForm.");
        _fieldIdentifier = FieldIdentifier.Create(For);
        _currentValues = Values ??
                         _fieldIdentifier.Model.GetType()?.GetProperty(_fieldIdentifier.FieldName)
                             ?.GetValue(_fieldIdentifier.Model) as IList<TValue> ?? new List<TValue>();
    }
    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        if (Values != null && !ReferenceEquals(Values, _currentValues) && !Values.SequenceEqual(_currentValues))
            _currentValues = new List<TValue>(Values);
    }
    protected override string? RootClass()
    {
        return TwMerge.Merge(AdditionalAttributes);
    }
}
</file>

<file path="Components/RzCheckbox/RzCheckboxGroupItem.razor">
@namespace RizzyUI
@typeparam TValue
@using Blazicons
@inherits RzComponent

<HtmlElement Element="@Element" x-data="rzCheckboxGroupItem" @attributes="@AdditionalAttributes" class="@LabelClass">
	<div class="@CheckboxWrapperClass">
		<RzInputCheckbox @bind-Value="IsChecked" class="@CheckboxInputClass" x-on:change="toggleCheckbox" x-ref="chk"/>
		<div class="@IconContainerClass" :class="'@(GetIconVisibilityCss(IsChecked))'">
			<Blazicon Svg="EffectiveCheckedIcon"/>
		</div>
	</div>
	<span class="@TitleSpanClass">@Title</span>
	@ChildContent
</HtmlElement>
</file>

<file path="Components/RzCheckbox/RzCheckboxGroupItem.razor.cs">
using Blazicons;
using Microsoft.AspNetCore.Components;
using Microsoft.Extensions.Options;
using RizzyUI.Extensions;
namespace RizzyUI;
public partial class RzCheckboxGroupItem<TValue> : RzComponent
{
    [CascadingParameter]
    public RzCheckboxGroup<TValue>? Parent { get; set; }
    [Parameter]
    [EditorRequired]
    public TValue? Value { get; set; }
    [Parameter]
    [EditorRequired]
    public string Title { get; set; } = string.Empty;
    [Parameter]
    public RenderFragment? ChildContent { get; set; }
    [Parameter]
    public SvgIcon? CheckedIcon { get; set; }
    protected SvgIcon EffectiveCheckedIcon { get; private set; } = default!;
    private bool IsChecked
    {
        get => Parent != null && Parent.IsSelected(Value!);
        set
        {
            if (Parent != null)
                InvokeAsync(() => Parent.ToggleValueAsync(Value!, value));
        }
    }
    protected string LabelClass => Theme.RzCheckboxGroupItem.Label;
    protected string CheckboxWrapperClass => Theme.RzCheckboxGroupItem.CheckboxWrapper;
    protected string CheckboxInputClass => Theme.RzCheckboxGroupItem.CheckboxInput;
    protected string IconContainerClass => Theme.RzCheckboxGroupItem.IconContainer;
    protected string TitleSpanClass => Theme.RzCheckboxGroupItem.TitleSpan;
    protected override void OnInitialized()
    {
        base.OnInitialized();
        if (Parent == null)
            throw new InvalidOperationException($"{GetType()} must be placed within an RzCheckboxGroup.");
        Element = "label";
        SetEffectiveIcon();
    }
    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        if (Theme != null)
            SetEffectiveIcon();
    }
    private void SetEffectiveIcon()
    {
        EffectiveCheckedIcon = CheckedIcon ?? Parent?.CheckedIcon ?? MdiIcon.CheckBold;
    }
    protected override string? RootClass()
    {
        return TwMerge.Merge(AdditionalAttributes, LabelClass);
    }
    protected string GetIconVisibilityCss(bool isChecked)
    {
        return Theme.RzCheckboxGroupItem.GetIconVisibilityCss(isChecked);
    }
}
</file>

<file path="Components/RzCheckbox/Styling/DefaultRzCheckboxStyles.cs">
namespace RizzyUI;
public class DefaultRzCheckboxGroupStyles : RzStylesBase.RzCheckboxGroupStylesBase
{
    public DefaultRzCheckboxGroupStyles(RzTheme theme) : base(theme)
    {
    }
    public override string Container => "flex flex-wrap gap-4";
    public override string GetOrientationCss(Orientation orientation)
    {
        return orientation switch
        {
            Orientation.Horizontal => "flex-row items-center",
            Orientation.Vertical => "flex-col",
            _ => GetOrientationCss(Orientation.Vertical)
        };
    }
}
public class DefaultRzCheckboxGroupItemStyles : RzStylesBase.RzCheckboxGroupItemStylesBase
{
    public DefaultRzCheckboxGroupItemStyles(RzTheme theme) : base(theme)
    {
    }
    public override string Label => "inline-flex items-center cursor-pointer";
    public override string CheckboxWrapper => "relative";
    public override string CheckboxInput =>
        $"size-4 rounded-borderRadius-sm border border-outline text-primary-500 focus:border-primary-500 focus:ring-3 focus:ring-primary/50 dark:bg-surface-alt dark:ring-offset-{Theme.Dark.Surface.TailwindClassName} dark:checked:border-transparent dark:checked:bg-primary dark:focus:border-primary";
    public override string IconContainer =>
        "absolute inset-0 flex items-center justify-center text-on-primary";
    public override string TitleSpan => "ml-2";
    public override string GetIconVisibilityCss(bool isChecked)
    {
        return isChecked ? "" : "hidden";
    }
}
public class DefaultRzCheckboxGroupFieldStyles : RzStylesBase.RzCheckboxGroupFieldStylesBase
{
    public DefaultRzCheckboxGroupFieldStyles(RzTheme theme) : base(theme)
    {
    }
    public override string Field => ""; // Handled by RzFieldStylesBase
    /// <inheritdoc />
    public override string GroupWithinField => "my-3";
}
</file>

<file path="Components/RzCodeViewer/RzCodeViewer.razor">
@namespace RizzyUI
@using System.Text
@using System.Web
@using System.Text.Json
@using Rizzy.Utility
@inherits RzComponent

<div @attributes="AdditionalAttributes" class="@RootClass()"
     data-assets="@_assets"
     data-codeid="@CodeId"
     data-nonce="@Nonce"
     x-data="rzCodeViewer">

    <div class="@HeaderClass">
        <span class="@HeaderTitleClass">@ViewerTitle</span>
    </div>

    <div class="@CodeContainerClass">
        <div class="@CopyButtonContainerClass">
            <button aria-label="copy code" role="button" :title="getCopiedTitle()" x-on:click="copyHTML" class="@CopyButtonClass" :class="getCopiedCss()" x-on:click.away="disableCopied" data-target="cardDefault" title="copy">
                <svg x-show="notCopied()" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="@CopyIconDefaultClass" x-transition:enter="transition duration-200 ease-out" x-transition:enter-start="opacity-0" x-transition:enter-end="opacity-100">
                    <path stroke-linecap="round" stroke-linejoin="round" d="M15.666 3.888A2.25 2.25 0 0013.5 2.25h-3c-1.03 0-1.9.693-2.166 1.638m7.332 0c.055.194.084.4.084.612v0a.75.75 0 01-.75.75H9a.75.75 0 01-.75-.75v0c0-.212.03-.418.084-.612m7.332 0c.646.049 1.288.11 1.927.184 1.1.128 1.907 1.077 1.907 2.185V19.5a2.25 2.25 0 01-2.25 2.25H6.75A2.25 2.25 0 014.5 19.5V6.257c0-1.108.806-2.057 1.907-2.185a48.208 48.208 0 011.927-.184"></path>
                </svg>
                <svg x-show="copied" x-transition:enter="transition duration-200 ease-out" x-transition:enter-start="translate-y-2 opacity-0" x-transition:enter-end="translate-y-0 opacity-100" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.3" stroke="currentColor" class="@CopyIconCopiedClass">
                    <path stroke-linecap="round" stroke-linejoin="round" d="M11.35 3.836c-.065.21-.1.433-.1.664 0 .414.336.75.75.75h4.5a.75.75 0 00.75-.75 2.25 2.25 0 00-.1-.664m-5.8 0A2.251 2.251 0 0113.5 2.25H15c1.012 0 1.867.668 2.15 1.586m-5.8 0c-.376.023-.75.05-1.124.08C9.095 4.01 8.25 4.973 8.25 6.108V8.25m8.9-4.414c.376.023.75.05 1.124.08 1.131.094 1.976 1.057 1.976 2.192V16.5A2.25 2.25 0 0118 18.75h-2.25m-7.5-10.5H4.875c-.621 0-1.125.504-1.125 1.125v11.25c0 .621.504 1.125 1.125 1.125h9.75c.621 0 1.125-.504 1.125-1.125V18.75m-7.5-10.5h6.375c.621 0 1.125.504 1.125 1.125v9.375m-8.25-3l1.5 1.5 3-3.75"></path>
                </svg>
            </button>
        </div>

        <div class="@PreWrapperClass" :class="getExpandCss()">
            <pre x-ref="codeBlock" class="@PreElementClass" tabindex="0">
                <code class="@LanguageClass" id="@CodeId">@CodeContent</code>
            </pre>
        </div>
    </div>

    <button aria-label="expand the code container" class="@ExpandButtonClass" x-on:click="toggleExpand">
        <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="2.5" stroke="currentColor" class="@ExpandIconClass" :class="getExpandButtonCss()">
            <path stroke-linecap="round" stroke-linejoin="round" d="M19.5 8.25l-7.5 7.5-7.5-7.5"></path>
        </svg>
    </button>
</div>
</file>

<file path="Components/RzCodeViewer/RzCodeViewer.razor.cs">
using Microsoft.AspNetCore.Components;
using Microsoft.Extensions.Options;
using System.Text.Json;
using System.Web;
using Rizzy.Utility;
using RizzyUI.Extensions;
namespace RizzyUI;
public partial class RzCodeViewer : RzComponent
{
    private string CodeId { get; } = IdGenerator.UniqueId("rzcode");
    private string CodeContent { get; set; } = string.Empty;
    private string _assets = string.Empty;
    public static string[] DefaultAssets =
    [
        Constants.ContentUrl("js/vendor/highlightjs/highlight.js"),
        Constants.ContentUrl("js/vendor/highlightjs-plugin/cshtml-razor.min.js"),
    ];
    [Parameter] public string[] ComponentAssets { get; set; } = DefaultAssets;
    [Parameter] public string Language { get; set; } = CodeLanguage.Html;
    [Parameter] public RenderFragment? ChildContent { get; set; }
    [Parameter] public string? Source { get; set; }
    [Parameter] public string ViewerTitle { get; set; } = "Source";
    protected string HeaderClass => Theme.RzCodeViewer.Header;
    protected string HeaderTitleClass => Theme.RzCodeViewer.HeaderTitle;
    protected string CodeContainerClass => Theme.RzCodeViewer.CodeContainer;
    protected string CopyButtonContainerClass => Theme.RzCodeViewer.CopyButtonContainer;
    protected string CopyButtonClass => Theme.RzCodeViewer.CopyButton;
    protected string CopyIconDefaultClass => Theme.RzCodeViewer.CopyIconDefault;
    protected string CopyIconCopiedClass => Theme.RzCodeViewer.CopyIconCopied;
    protected string PreWrapperClass => Theme.RzCodeViewer.PreWrapper;
    protected string PreElementClass => Theme.RzCodeViewer.PreElement;
    protected string ExpandButtonClass => Theme.RzCodeViewer.ExpandButton;
    protected string ExpandIconClass => Theme.RzCodeViewer.ExpandIcon;
    protected string LanguageClass => CodeLanguage.GetLanguageClass(Language);
    protected override void OnInitialized()
    {
        base.OnInitialized();
        _assets = JsonSerializer.Serialize(ComponentAssets);
    }
    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        SetCodeContent();
    }
    private void SetCodeContent()
    {
        string rawContent;
        if (!string.IsNullOrEmpty(Source))
        {
            rawContent = Source;
        }
        else if (ChildContent != null)
        {
            rawContent = ChildContent.AsMarkupString();
            rawContent = HttpUtility.HtmlDecode(rawContent);
        }
        else
        {
            rawContent = string.Empty;
        }
        CodeContent = rawContent.TrimEmptyLines().Outdent();
    }
    protected override string? RootClass() =>
        TwMerge.Merge(AdditionalAttributes, Theme.RzCodeViewer.Container);
}
</file>

<file path="Components/RzCodeViewer/Styling/DefaultRzCodeViewerStyles.cs">
namespace RizzyUI;
public class DefaultRzCodeViewerStyles : RzStylesBase.RzCodeViewerStylesBase
{
    public DefaultRzCodeViewerStyles(RzTheme theme) : base(theme) { }
    public override string Container => "mt-2 overflow-auto";
    public override string Header => $"border-b-0 border-outline bg-surface-alt flex flex-col items-start justify-between gap-4 rounded-theme rounded-b-none border p-4 text-sm text-slate-400 md:flex-row md:items-center md:gap-2";
    public override string HeaderTitle => $"text-on-surface";
    public override string CodeContainer => $"border-outline w-full overflow-y-auto transition-all !rounded-b-none rounded-b-xl border";
    public override string CopyButtonContainer => $"border-surface-tertiary/70 bg-surface-tertiary text-on-surface-tertiary flex h-11 items-center justify-between border-b";
    public override string CopyButton => $"my-auto ml-auto mr-2 overflow-hidden rounded-full p-1 hover:bg-surface/10 focus:outline-none focus:outline-offset-0 focus-visible:outline-2 active:-outline-offset-2";
    public override string CopyIconDefault => $"text-on-surface-strong size-6 cursor-pointer";
    public override string CopyIconCopied => "size-6 text-emerald-500";
    public override string PreWrapper => "relative overflow-y-auto";
    public override string PreElement => $"text-on-surface/60 overflow-x-auto text-sm p-8 border-none";
    public override string ExpandButton => $"border-t-0 border-outline bg-surface-alt text-on-surface flex w-full items-center justify-center gap-2 rounded-theme rounded-t-none border p-2 focus:outline-none focus-visible:rounded-t-none focus-visible:border-2 focus-visible:border-primary dark:focus-visible:border-primary";
    public override string ExpandIcon => "rotate-0 h-5 w-5 transition";
    public override string GetExpandContentCss(bool isExpanded) => isExpanded ? "" : "max-h-60";
    public override string GetExpandButtonIconCss(bool isExpanded) => isExpanded ? "rotate-180" : "rotate-0";
    public override string GetCopyButtonStateCss(bool isCopied) => isCopied ? $"focus-visible:outline-success" : $"focus-visible:outline-on-surface-strong";
}
</file>

<file path="Components/RzDarkMode/RzDarkModeToggle.razor">
@using Blazicons
@namespace RizzyUI
@inherits RzComponent

<HtmlElement Element="button"
             @attributes="AdditionalAttributes"
             class="@RootClass()"
             type="button"
             aria-label="Toggle dark mode"
             x-data="rzDarkModeToggle"
             x-on:click="toggle"
             :aria-pressed="isDark()">
	<div x-show="isLight()" x-cloak>
		<Blazicon Svg="@DarkIcon" class="@IconClass" />
	</div>
	<div x-show="isDark()" x-cloak>
		<Blazicon Svg="@LightIcon" class="@IconClass" />
	</div>
</HtmlElement>
</file>

<file path="Components/RzDarkMode/RzDarkModeToggle.razor.cs">
using Blazicons;
using Microsoft.AspNetCore.Components;
using Microsoft.Extensions.Options;
using RizzyUI.Extensions;
namespace RizzyUI;
public partial class RzDarkModeToggle : RzComponent
{
	[Parameter] public SvgIcon DarkIcon { get; set; } = Ionicon.MoonOutline;
	[Parameter] public SvgIcon LightIcon { get; set; } = Ionicon.SunnyOutline;
	protected string IconClass => Theme.RzDarkmodeToggle.Icon;
	protected override string? RootClass() =>
		TwMerge.Merge(AdditionalAttributes, Theme.RzDarkmodeToggle.Button);
}
</file>

<file path="Components/RzDarkMode/Styling/RzDarkmodeToggleStyles.cs">
namespace RizzyUI;
public class DefaultRzDarkmodeToggleStyles : RzStylesBase.RzDarkmodeToggleStylesBase
{
    public DefaultRzDarkmodeToggleStyles(RzTheme theme) : base(theme) { }
    public override string Button => $"inline-flex text-xl items-center justify-center p-2 mr-2 rounded-theme transition-colors ease-in-out duration-300 focus:outline-none text-on-surface bg-surface hover:bg-surface-alt/75 dark:hover:bg-surface-alt/75";
    public override string Icon => "transition-transform duration-300 ease-out";
}
</file>

<file path="Components/RzDateEdit/RzDateEdit.razor">
@using Blazicons
@namespace RizzyUI
@inherits RzComponent

<HtmlElement Element="div"
             @attributes="AdditionalAttributes"
             class="@ContainerClass"
             x-data="rzDateEdit"
             data-config="@_serializedConfig"
             data-uid="@_uid"
             data-assets="@_assets"
             data-nonce="@Nonce"
             role="group" aria-label="Date picker">

	<div class="@InputWrapperClass" x-data="rzPrependInput" x-ref="pickerWrapper">
		@if (!string.IsNullOrEmpty(PrependText) || PrependIcon != null)
		{
			<div x-ref="prependContainer" class="@PrependElementClass">
				@if (!string.IsNullOrEmpty(PrependText))
				{
					@PrependText
				}
				else if (PrependIcon != null)
				{
					<div class="@PrependIconContainerClass"><Blazicon Svg="PrependIcon" /></div>
				}
			</div>
		}

		@* Use a standard input, Flatpickr will enhance it *@
		<input x-ref="textInput"
		       id="@_uidInputId"
		       type="text"
		       @bind="CurrentValue" @* Bind to internal property *@
		       placeholder="@Placeholder"
		       class="@InputClass"
		       data-input @* Flatpickr hook attribute *@
		       aria-label="Select date" />
	</div>
</HtmlElement>
</file>

<file path="Components/RzDateEdit/RzDateEdit.razor.cs">
using Microsoft.AspNetCore.Components;
using Microsoft.Extensions.Options;
using System.Linq.Expressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.Globalization;
using Blazicons;
using Rizzy.Utility;
using RizzyUI.Extensions;
using Microsoft.AspNetCore.Components.Forms;
namespace RizzyUI;
public sealed partial class RzDateEdit : RzComponent
{
    [CascadingParameter] private EditContext? EditContext { get; set; }
    private static readonly string[] DefaultAssets =
    [
        "https://cdn.jsdelivr.net/npm/flatpickr/dist/flatpickr.min.js"
    ];
    private string _serializedConfig = "{}";
    private string _assets = "[]";
    private readonly string _uid = IdGenerator.UniqueId("rzdate");
    private FieldIdentifier _fieldIdentifier;
    private DateTime? _currentValue;
    private string _inputValue = string.Empty;
    protected string _uidInputId => $"{_uid}-input";
    [Parameter, EditorRequired] public Expression<Func<DateTime?>>? For { get; set; }
    [Parameter] public FlatpickrOptions Options { get; set; } = new() { Locale = "en" };
    [Parameter] public string Placeholder { get; set; } = string.Empty;
    [Parameter] public string? PrependText { get; set; }
    [Parameter] public SvgIcon? PrependIcon { get; set; }
    [Parameter] public string[] ComponentAssets { get; set; } = DefaultAssets;
    private string CurrentValue
    {
        get => _inputValue;
        set
        {
            if (_inputValue != value)
            {
                _inputValue = value;
                if (DateTime.TryParseExact(value, GetFlatpickrFormat(), CultureInfo.InvariantCulture, DateTimeStyles.None, out var parsedDate))
                {
                     UpdateValue(parsedDate);
                }
                else if (string.IsNullOrEmpty(value))
                {
                    UpdateValue(null);
                }
            }
        }
    }
    private string ContainerClass => Theme.RzDateEdit.Container;
    private string InputWrapperClass => Theme.RzDateEdit.InputWrapper;
    private string PrependElementClass => Theme.RzDateEdit.PrependElement;
    private string PrependIconContainerClass => Theme.RzDateEdit.PrependIconContainer;
    private string InputClass => Theme.RzDateEdit.Input;
    protected override void OnInitialized()
    {
        base.OnInitialized();
        if (For == null) throw new InvalidOperationException($"{GetType()} requires a 'For' parameter.");
        if (EditContext == null) throw new InvalidOperationException($"{GetType()} must be used within an EditForm.");
        _fieldIdentifier = FieldIdentifier.Create(For);
        _currentValue = For.Compile().Invoke();
        FormatInputValue();
        SerializeConfigAndAssets();
    }
    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        var modelValue = For?.Compile().Invoke();
        if (_currentValue != modelValue)
        {
            _currentValue = modelValue;
            FormatInputValue();
        }
        SerializeConfigAndAssets();
    }
    private void UpdateValue(DateTime? newValue)
    {
        bool valueChanged = _currentValue != newValue;
        _currentValue = newValue;
        if (valueChanged)
        {
            EditContext?.NotifyFieldChanged(_fieldIdentifier);
        }
    }
    private void FormatInputValue()
    {
        if (_currentValue.HasValue)
        {
            _inputValue = _currentValue.Value.ToString(GetFlatpickrFormat(), CultureInfo.InvariantCulture);
        }
        else
        {
            _inputValue = string.Empty;
        }
    }
    private string GetFlatpickrFormat()
    {
        return Options.DateFormat ?? "Y-m-d";
    }
    private void SerializeConfigAndAssets()
    {
        if (string.IsNullOrEmpty(Options.DefaultDate) && _currentValue.HasValue)
        {
            Options.DefaultDate = _currentValue.Value.ToString("yyyy-MM-dd", CultureInfo.InvariantCulture);
        }
        var alpineData = new { options = Options, placeholder = Placeholder, prependText = PrependText ?? string.Empty };
        _serializedConfig = JsonSerializer.Serialize(alpineData, options: new JsonSerializerOptions() { DefaultIgnoreCondition = JsonIgnoreCondition.WhenWritingNull }  );
        _assets = JsonSerializer.Serialize(ComponentAssets);
    }
    protected override string? RootClass() =>
        TwMerge.Merge(AdditionalAttributes, ContainerClass);
}
</file>

<file path="Components/RzDateEdit/Styling/DefaultRzDateEditStyles.cs">
namespace RizzyUI;
public class DefaultRzDateEditStyles : RzStylesBase.RzDateEditStylesBase
{
	public DefaultRzDateEditStyles(RzTheme theme) : base(theme) { }
	public override string Container => "w-full";
	public override string InputWrapper => "relative";
	public override string PrependElement => $"pointer-events-none absolute inset-y-0 left-0 my-px ml-px flex items-center rounded-l-theme border-r border-outline bg-surface-alt px-3 text-on-surface dark:border-outline dark:bg-surface-alt dark:text-on-surface";
	public override string PrependIconContainer => "text-xl";
	public override string Input => $"block w-full rounded-theme border border-outline px-3 py-2 leading-6 placeholder-on-surface-muted focus:border-primary focus:ring focus:ring-primary/50 dark:border-outline dark:bg-surface-alt dark:placeholder-on-surface-muted dark:focus:border-primary flatpickr-input";
}
</file>

<file path="Components/RzDivider/Styling/DefaultRzDividerStyles.cs">
namespace RizzyUI;
public class DefaultRzDividerStyles : RzStylesBase.RzDividerStylesBase
{
    public DefaultRzDividerStyles(RzTheme theme) : base(theme) { }
    public override string Divider => $"my-8 py-3 flex items-center text-sm text-outline";
    public override string GetStyleCss(DividerStyle style) => style switch
    {
        DividerStyle.Solid => $"border-solid border-t border-outline",
        DividerStyle.Dashed => $"border-dashed border-t border-outline",
        DividerStyle.Dotted => $"border-dotted border-t border-outline",
        _ => GetStyleCss(DividerStyle.Solid)
    };
    public override string GetAlignmentCss(Align alignment, DividerStyle style)
    {
        var styleClass = style switch {
             DividerStyle.Solid => "solid", DividerStyle.Dashed => "dashed", DividerStyle.Dotted => "dotted", _ => "solid"
        };
        var borderStyleClass = $"border-{styleClass}";
        var borderColorClass = $"border-outline";
        var darkBorderColorClass = $"dark:border-outline";
        return alignment switch
        {
            Align.Start => $"after:flex-1 after:border-t after:{borderStyleClass} after:{borderColorClass} after:ms-6 {darkBorderColorClass}",
            Align.Center => $"before:flex-1 before:border-t before:{borderStyleClass} before:{borderColorClass} before:me-6 {darkBorderColorClass} after:flex-1 after:border-t after:{borderStyleClass} after:{borderColorClass} after:ms-6 {darkBorderColorClass}",
            Align.End => $"before:flex-1 before:border-t before:{borderStyleClass} before:{borderColorClass} before:me-6 {darkBorderColorClass}",
            _ => GetAlignmentCss(Align.Center, style)
        };
    }
}
</file>

<file path="Components/RzDropdown/RzDropdown.razor">
@namespace RizzyUI
@inherits RzComponent

<HtmlElement Element="div" @attributes="@AdditionalAttributes" class="@ContainerClass">
	<div x-data="rzDropdown" data-anchor="@Anchor.ToString().ToLowerInvariant()" class="@RelativeWrapperClass">
		<div
			class="@TriggerWrapperClass"
			aria-haspopup="true"
			x-bind:aria-expanded="dropdownOpen"
			x-on:click="toggleDropdown"
			x-on:keydown.space.prevent="openWithKeyboard"
			x-on:keydown.enter.prevent="openWithKeyboard"
			x-on:keydown.down.prevent="openWithKeyboard"
			x-on:keydown.esc.window="closeDropdown">
			<div>@Trigger</div>
		</div>
		<div x-cloak
		     x-show="dropdownOpen"
		     x-transition:enter="transition ease-out duration-100"
		     x-transition:enter-start="opacity-0 scale-90"
		     x-transition:enter-end="opacity-100 scale-100"
		     x-transition:leave="transition ease-in duration-75"
		     x-transition:leave-start="opacity-100 scale-100"
		     x-transition:leave-end="opacity-0 scale-90"
		     x-on:click.outside="closeDropdown"
		     x-trap="openedWithKeyboard"
		     x-on:keydown.down.prevent="focusWrapNext" x-on:keydown.up.prevent="focusWrapPrevious"
		     role="menu"
		     aria-labelledby="rz-dropdown-trigger" @* Consider making trigger id dynamic if needed *@
		     class="@MenuContainerClass"
		     x-bind:class="anchorCss">
			<div class="@MenuInnerContainerClass">
				@Content
			</div>
		</div>
	</div>
</HtmlElement>
</file>

<file path="Components/RzDropdown/RzDropdown.razor.cs">
using Microsoft.AspNetCore.Components;
using Microsoft.Extensions.Options;
using RizzyUI.Extensions;
namespace RizzyUI;
public partial class RzDropdown : RzComponent
{
    [Parameter]
    [EditorRequired]
    public RenderFragment? Trigger { get; set; }
    [Parameter]
    [EditorRequired]
    public RenderFragment? Content { get; set; }
    [Parameter]
    public AnchorPoint Anchor { get; set; } = AnchorPoint.BottomCenter;
    protected string ContainerClass => Theme.RzDropdown.Container;
    protected string RelativeWrapperClass => Theme.RzDropdown.RelativeWrapper;
    protected string TriggerWrapperClass => Theme.RzDropdown.TriggerWrapper;
    protected string MenuContainerClass => Theme.RzDropdown.MenuContainer;
    protected string MenuInnerContainerClass => Theme.RzDropdown.MenuInnerContainer;
    protected override string? RootClass()
    {
        return TwMerge.Merge(AdditionalAttributes, ContainerClass);
    }
}
</file>

<file path="Components/RzDropdown/RzDropdownMenuItem.razor">
@namespace RizzyUI
@using Blazicons
@inherits RzComponent

<a role="menuitem" @attributes="AdditionalAttributes" class="@RootClass()" x-on:click="closeDropdown" tabindex="0">
	@if (Icon != null)
	{
		<span class="@IconSpanClass"><Blazicon Svg="@Icon" class="@IconClass"/></span>
	}
	<span class="@TitleSpanClass">@Title</span>
	@if (Count != null)
	{
		<div class="@CountDivClass">
			@Count
		</div>
	}
</a>
</file>

<file path="Components/RzDropdown/RzDropdownMenuItem.razor.cs">
using Blazicons;
using Microsoft.AspNetCore.Components;
using Microsoft.Extensions.Options;
using RizzyUI.Extensions;
namespace RizzyUI;
public partial class RzDropdownMenuItem : RzComponent
{
    [Parameter]
    public SvgIcon? Icon { get; set; }
    [Parameter]
    [EditorRequired]
    public string Title { get; set; } = "Untitled";
    [Parameter]
    public int? Count { get; set; }
    protected string IconSpanClass => Theme.RzDropdownMenuItem.IconSpan;
    protected string IconClass => Theme.RzDropdownMenuItem.Icon;
    protected string TitleSpanClass => Theme.RzDropdownMenuItem.TitleSpan;
    protected string CountDivClass => Theme.RzDropdownMenuItem.CountDiv;
    protected override string? RootClass()
    {
        return TwMerge.Merge(AdditionalAttributes, Theme.RzDropdownMenuItem.MenuItem);
    }
}
</file>

<file path="Components/RzDropdown/RzDropdownSection.razor">
@namespace RizzyUI
@inherits RzComponent

<div @attributes="AdditionalAttributes" class="@RootClass()">
	@ChildContent
</div>
</file>

<file path="Components/RzDropdown/RzDropdownSection.razor.cs">
using Microsoft.AspNetCore.Components;
using Microsoft.Extensions.Options;
using RizzyUI.Extensions;
namespace RizzyUI;
public partial class RzDropdownSection : RzComponent
{
    [Parameter]
    public RenderFragment? ChildContent { get; set; }
    protected override string? RootClass()
    {
        return TwMerge.Merge(AdditionalAttributes, Theme.RzDropdownSection.Section);
    }
}
</file>

<file path="Components/RzDropdown/Styling/DefaultRzDropdownStyles.cs">
namespace RizzyUI;
public class DefaultRzDropdownStyles : RzStylesBase.RzDropdownStylesBase
{
    public DefaultRzDropdownStyles(RzTheme theme) : base(theme)
    {
    }
    public override string Container => ""; // Root container has no specific style by default
    /// <inheritdoc />
    public override string RelativeWrapper => "relative inline-block";
    public override string TriggerWrapper => "inline-flex items-center justify-center space-x-2";
    public override string MenuContainer => "z-60 absolute w-64 rounded-borderRadius shadow-xl dark:shadow-gray-900";
    public override string MenuInnerContainer =>
        $"border border-outline divide-y divide-outline rounded-borderRadius bg-surface ring-black dark:divide-outline";
}
public class DefaultRzDropdownSectionStyles : RzStylesBase.RzDropdownSectionStylesBase
{
    public DefaultRzDropdownSectionStyles(RzTheme theme) : base(theme)
    {
    }
    public override string Section => "space-y-1 p-2.5";
}
public class DefaultRzDropdownMenuItemStyles : RzStylesBase.RzDropdownMenuItemStylesBase
{
    public DefaultRzDropdownMenuItemStyles(RzTheme theme) : base(theme)
    {
    }
    public override string MenuItem =>
        $"group flex items-center justify-between space-x-2 rounded-borderRadius cursor-pointer border border-transparent px-2.5 py-2 text-sm font-medium text-on-surface hover:bg-primary/10 hover:text-primary focus-visible:bg-primary/10 focus-visible:text-{Theme.Light.OnSurfaceStrong.TailwindClassName} focus-visible:outline-hidden dark:hover:bg-surface-alt dark:focus-visible:bg-primary/10 dark:focus-visible:text-{Theme.Dark.OnSurfaceStrong.TailwindClassName}";
    public override string IconSpan => "text-xl";
    public override string Icon => "size-5 flex-none opacity-25 group-hover:opacity-50";
    public override string TitleSpan => "grow";
    public override string CountDiv =>
        "inline-flex rounded-full border px-1.5 py-0.5 text-xs font-semibold border-outline";
}
</file>

<file path="Components/RzEmbeddedPreview/RzEmbeddedPreview.razor">
@using Rizzy.Utility
@namespace RizzyUI
@inherits RzComponent

<HtmlElement class="@ContainerClass">
	<iframe x-data="rzEmbeddedPreview"
	        id="@Id"
	        class="@IFrameClass"
	        srcdoc="@_content"
	        x-ref="iframe">
	</iframe>
</HtmlElement>
</file>

<file path="Components/RzEmbeddedPreview/RzEmbeddedPreview.razor.cs">
using Microsoft.AspNetCore.Components;
using Microsoft.Extensions.Options;
using Rizzy.Utility;
using RizzyUI.Extensions;
using System;
using System.Threading.Tasks;
namespace RizzyUI;
public partial class RzEmbeddedPreview : RzComponent
{
    private string? _content;
    private readonly string Id = IdGenerator.UniqueId("rzpreview");
    [Inject] private IServiceProvider ServiceProvider { get; set; } = default!;
    [Parameter, EditorRequired] public required RenderFragment ChildContent { get; set; }
    [Parameter] public Type? Layout { get; set; }
    protected string ContainerClass => Theme.RzEmbeddedPreview.Container;
    protected string IFrameClass => Theme.RzEmbeddedPreview.IFrame;
    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();
		RenderFragment fragment = builder =>
		{
			if (Layout != null)
			{
				builder.OpenComponent(0, Layout);
				builder.AddAttribute(1, nameof(LayoutComponentBase.Body), ChildContent);
				builder.CloseComponent();
			}
			else
			{
				builder.AddContent(2, ChildContent);
			}
		};
		_content = await fragment.RenderHtmlAsync(ServiceProvider);
	}
}
</file>

<file path="Components/RzEmbeddedPreview/Styling/DefaultRzEmbeddedPreviewStyles.cs">
namespace RizzyUI;
public class DefaultRzEmbeddedPreviewStyles : RzStylesBase.RzEmbeddedPreviewStylesBase
{
	public DefaultRzEmbeddedPreviewStyles(RzTheme theme) : base(theme) { }
	public override string Container => "w-full";
	public override string IFrame => "w-full transition-all min-h-28";
}
</file>

<file path="Components/RzField/RzField.razor">
@namespace RizzyUI
@inherits RzComponent

<HtmlElement Element="@Element" @attributes="@AdditionalAttributes" class="@RootClass()">
    @ChildContent
</HtmlElement>
</file>

<file path="Components/RzField/RzField.razor.cs">
using Microsoft.AspNetCore.Components;
using Microsoft.Extensions.Options;
using RizzyUI.Extensions;
namespace RizzyUI;
public partial class RzField : RzComponent
{
    [Parameter]
    public RenderFragment? ChildContent { get; set; }
    protected override string? RootClass()
    {
        return TwMerge.Merge(AdditionalAttributes, Theme.RzField.Field);
    }
}
</file>

<file path="Components/RzField/RzFieldHelp.razor">
@namespace RizzyUI
@inherits RzComponent

<p @attributes="AdditionalAttributes" class="@RootClass()">
    @ChildContent
</p>
</file>

<file path="Components/RzField/RzFieldHelp.razor.cs">
using Microsoft.AspNetCore.Components;
using Microsoft.Extensions.Options;
using RizzyUI.Extensions;
namespace RizzyUI;
public partial class RzFieldHelp : RzComponent
{
    [Parameter]
    public RenderFragment? ChildContent { get; set; }
    protected override string? RootClass()
    {
        return TwMerge.Merge(AdditionalAttributes, Theme.RzFieldHelp.HelpText);
    }
}
</file>

<file path="Components/RzField/RzFieldLabel.razor">
@namespace RizzyUI
@inherits RzComponent
@typeparam TValue

@* Only render the label if DisplayName is actually set (either via parameter or inference) *@
@if (!string.IsNullOrEmpty(_effectiveDisplayName))
{
    <label for="@_for" @attributes="AdditionalAttributes" class="@RootClass()">
        @_effectiveDisplayName
        @ChildContent @* Allows adding things like the required indicator span *@
    </label>
}
else
{
    @* Render ChildContent anyway if DisplayName is null/empty, maybe it contains the label text *@
    @ChildContent
}
</file>

<file path="Components/RzField/RzFieldLabel.razor.cs">
using System.ComponentModel.DataAnnotations;
using System.Linq.Expressions;
using System.Reflection;
using Microsoft.AspNetCore.Components;
using Microsoft.AspNetCore.Components.Forms;
using Microsoft.AspNetCore.Http;
using Microsoft.Extensions.Options;
using Rizzy.Htmx;
using RizzyUI.Extensions;
namespace RizzyUI;
[CascadingTypeParameter(nameof(TValue))]
public partial class RzFieldLabel<TValue> : RzComponent
{
    private string? _effectiveDisplayName;
    private string _for = string.Empty;
    [CascadingParameter] private HttpContext? HttpContext { get; set; }
    [CascadingParameter] private EditContext? EditContext { get; set; }
    [Parameter]
    public RenderFragment? ChildContent { get; set; }
    [Parameter]
    public Expression<Func<TValue>>? For { get; set; }
    [Parameter]
    public string? DisplayName { get; set; }
    protected override void OnInitialized()
    {
        base.OnInitialized();
        if (EditContext == null)
            throw new InvalidOperationException($"{GetType()} must be used within an EditForm.");
    }
    protected override void OnParametersSet()
    {
        if (EditContext is null) return;
        SetEffectiveDisplayName();
        SetForAttribute();
        base.OnParametersSet();
    }
    private void SetEffectiveDisplayName()
    {
        if (!string.IsNullOrEmpty(DisplayName))
        {
            _effectiveDisplayName = DisplayName;
            return;
        }
        if (For == null)
        {
            _effectiveDisplayName = null;
            return;
        }
        if (For.Body is MemberExpression memberExpression)
        {
            var displayAttribute = memberExpression.Member.GetCustomAttribute<DisplayAttribute>(true);
            _effectiveDisplayName =
                displayAttribute?.GetName() ?? memberExpression.Member.Name;
        }
        else
        {
            _effectiveDisplayName = For.ToString();
        }
    }
    private void SetForAttribute()
    {
        _for = string.Empty;
        if (For != null && HttpContext != null && EditContext != null)
            try
            {
                FieldIdentifier field = FieldIdentifier.Create(For);
                var fieldMap = HttpContext.GetOrAddFieldMapping(EditContext);
                if (fieldMap != null && fieldMap.TryGetValue(field, out RzFormFieldMap? map) && map != null)
                    _for = map.Id;
            }
            catch (ArgumentException)
            {
            }
    }
    protected override string? RootClass()
    {
        return TwMerge.Merge(AdditionalAttributes, Theme.RzFieldLabel.Label);
    }
}
</file>

<file path="Components/RzField/Styling/DefaultRzFieldStyles.cs">
namespace RizzyUI;
public class DefaultRzFieldStyles : RzStylesBase.RzFieldStylesBase
{
    public DefaultRzFieldStyles(RzTheme theme) : base(theme)
    {
    }
    public override string Field => "space-y-1";
}
public class DefaultRzFieldLabelStyles : RzStylesBase.RzFieldLabelStylesBase
{
    public DefaultRzFieldLabelStyles(RzTheme theme) : base(theme)
    {
    }
    public override string Label => "font-medium";
    public override string RequiredIndicator =>
        $"text-sm text-danger dark:text-danger";
}
public class DefaultRzFieldHelpStyles : RzStylesBase.RzFieldHelpStylesBase
{
    public DefaultRzFieldHelpStyles(RzTheme theme) : base(theme)
    {
    }
    public override string HelpText => "text-sm text-on-surface";
}
</file>

<file path="Components/RzFormSection/RzFormSection.razor">
@namespace RizzyUI
@inherits RzComponent

<div class="@RootClass()">
	<div class="@DescriptionContainerClass">
		@if (!string.IsNullOrEmpty(Title))
		{
			<h2 class="@TitleClass">@Title</h2>
		}
		@if (Description != null)
		{
			<p class="@DescriptionClass">
				@Description
			</p>
		}
	</div>
	<div class="@ContentContainerClass">
		@Content
	</div>
</div>
</file>

<file path="Components/RzFormSection/RzFormSection.razor.cs">
using Microsoft.AspNetCore.Components;
using Microsoft.Extensions.Options;
using RizzyUI.Extensions;
namespace RizzyUI;
public partial class RzFormSection : RzComponent
{
    [Parameter]
    [EditorRequired]
    public string Title { get; set; } = string.Empty;
    [Parameter]
    public RenderFragment? Description { get; set; }
    [Parameter]
    public RenderFragment? Content { get; set; }
    [Parameter]
    public SectionLayout Layout { get; set; } = SectionLayout.TwoColumn;
    protected string DescriptionContainerClass => Theme.RzFormSection.GetDescriptionLayoutCss(Layout);
    protected string TitleClass => Theme.RzFormSection.Title;
    protected string DescriptionClass => Theme.RzFormSection.Description;
    protected string ContentContainerClass => Theme.RzFormSection.GetContentLayoutCss(Layout);
    protected override string? RootClass()
    {
        return TwMerge.Merge(AdditionalAttributes, Theme.RzFormSection.Container,
            Theme.RzFormSection.GetLayoutCss(Layout));
    }
}
</file>

<file path="Components/RzFormSection/Styling/DefaultRzFormSectionStyles.cs">
namespace RizzyUI;
public class DefaultRzFormSectionStyles : RzStylesBase.RzFormSectionStylesBase
{
    public DefaultRzFormSectionStyles(RzTheme theme) : base(theme)
    {
    }
    public override string Container => ""; // Base container style is determined by layout method
    /// <inheritdoc />
    public override string DescriptionContainer => ""; // Determined by layout method
    /// <inheritdoc />
    public override string Title =>
        $"text-base/7 font-semibold text-{Theme.Light.OnSurfaceStrong.TailwindClassName}"; // Adjusted line height
    /// <inheritdoc />
    public override string Description => "text-sm text-on-surface";
    public override string ContentContainer => ""; // Determined by layout method
    /// <inheritdoc />
    public override string GetLayoutCss(SectionLayout layout)
    {
        return layout switch
        {
            SectionLayout.TwoColumn => "md:flex md:space-x-5",
            SectionLayout.Stacked => "mb-5",
            _ => GetLayoutCss(SectionLayout.TwoColumn)
        };
    }
    public override string GetDescriptionLayoutCss(SectionLayout layout)
    {
        return layout switch
        {
            SectionLayout.TwoColumn => "md:w-1/3 md:flex-none",
            SectionLayout.Stacked => "pb-5 mb-10 border-b border-outline",
            _ => GetDescriptionLayoutCss(SectionLayout.TwoColumn)
        };
    }
    public override string GetContentLayoutCss(SectionLayout layout)
    {
        return layout switch
        {
            SectionLayout.TwoColumn => "space-y-6 md:w-1/2",
            SectionLayout.Stacked => "",
            _ => GetContentLayoutCss(SectionLayout.TwoColumn)
        };
    }
}
</file>

<file path="Components/RzLink/RzLink.razor">
@namespace RizzyUI
@inherits RzComponent

<HtmlElement Element="a" @attributes="CombinedAttributes" class="@RootClass()" href="@Href">
	@ChildContent
</HtmlElement>
</file>

<file path="Components/RzLink/RzLink.razor.cs">
using Microsoft.AspNetCore.Components;
using Microsoft.Extensions.Options;
using RizzyUI.Extensions;
namespace RizzyUI;
public partial class RzLink : RzComponent
{
    [Parameter]
    public string? Href { get; set; }
    [Parameter]
    public bool Underline { get; set; } = true;
    [Parameter]
    public RenderFragment? ChildContent { get; set; }
    protected Dictionary<string, object> CombinedAttributes
    {
        get
        {
            var attributes = AdditionalAttributes ?? new Dictionary<string, object>();
            attributes["href"] = string.IsNullOrEmpty(Href) ? "#" : Href;
            return attributes;
        }
    }
    protected override string? RootClass()
    {
        var styles = Theme.RzLink;
        return TwMerge.Merge(AdditionalAttributes,
            styles.Link,
            Underline ? styles.UnderlineEnabled : "");
    }
}
</file>

<file path="Components/RzLink/Styling/DefaultRzLinkStyles.cs">
namespace RizzyUI;
public class DefaultRzLinkStyles : RzStylesBase.RzLinkStylesBase
{
    public DefaultRzLinkStyles(RzTheme theme) : base(theme)
    {
    }
    public override string Link => "font-medium text-primary underline-offset-2 focus:outline-hidden dark:text-primary";
    public override string UnderlineEnabled => "hover:underline focus:underline";
}
</file>

<file path="Components/RzMarkdown/RzMarkdown.razor">
@namespace RizzyUI
@inherits RzComponent

<HtmlElement Element="div" @attributes="@AdditionalAttributes" class="@RootClass()"
             data-assets="@_assets"
             data-nonce="@Nonce"
             x-data="rzMarkdown">
    @OutputHtml
</HtmlElement>
</file>

<file path="Components/RzMarkdown/RzMarkdown.razor.cs">
using System.Text;
using System.Text.Json;
using System.Web;
using Markdig;
using Markdig.Renderers.Html;
using Markdig.Syntax;
using Markdig.Syntax.Inlines;
using Microsoft.AspNetCore.Components;
using Microsoft.Extensions.Options;
using Rizzy.Utility;
using RizzyUI.Extensions;
namespace RizzyUI;
public partial class RzMarkdown : RzComponent
{
    public static string[] DefaultAssets = [ ];
    private string _assets = string.Empty;
    [CascadingParameter]
    private RzQuickReferenceContainer? QuickReferenceContainer { get; set; }
    [Parameter]
    public MarkdownPipeline? Pipeline { get; set; }
    [Parameter]
    public RenderFragment? ChildContent { get; set; }
    [Parameter]
    public string? Content { get; set; } = string.Empty;
    [Parameter]
    public ProseWidth ProseWidth { get; set; } = ProseWidth.Comfortable;
    [Parameter]
    public string[] ComponentAssets { get; set; } = DefaultAssets;
    protected MarkupString? OutputHtml { get; private set; }
    protected override void OnInitialized()
    {
        base.OnInitialized();
        Pipeline ??= new MarkdownPipelineBuilder()
            .UseAdvancedExtensions()
            .UseRizzySyntaxHighlighting()
            .Build();
        _assets = JsonSerializer.Serialize(ComponentAssets);
    }
    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        RenderMarkdownContent();
    }
    private void RenderMarkdownContent()
    {
        string markdownText;
        if (!string.IsNullOrEmpty(Content))
        {
            markdownText = Content;
        }
        else if (ChildContent != null)
        {
            markdownText = ChildContent.AsMarkupString().Outdent();
            markdownText = HttpUtility.HtmlDecode(markdownText);
        }
        else
        {
            markdownText = string.Empty;
        }
        var html = RenderOutput(markdownText);
        OutputHtml = new MarkupString(html);
    }
    protected override string? RootClass()
    {
        return TwMerge.Merge(AdditionalAttributes, Theme.RzMarkdown.Container, Theme.RzMarkdown.GetProseWidthCss(ProseWidth));
    }
    private string RenderOutput(string markdownText)
    {
        var document = Markdown.Parse(markdownText, Pipeline);
        if (QuickReferenceContainer != null)
            foreach (var block in document)
                if (block is HeadingBlock heading)
                {
                    var level = heading.Level;
                    var headingText = ExtractPlainText(heading.Inline);
                    var attributes = heading.GetAttributes();
                    attributes.Id ??= IdGenerator.UniqueId("heading");
                    attributes.AddProperty("x-data", "rzHeading");
                    var headingLevel = level switch
                    {
                        1 => HeadingLevel.H1, 2 => HeadingLevel.H2, 3 => HeadingLevel.H3, _ => HeadingLevel.H4
                    };
                    QuickReferenceContainer.RegisterHeading(headingLevel, headingText, attributes.Id);
                }
        return document.ToHtml(Pipeline);
    }
    private string ExtractPlainText(ContainerInline? inline)
    {
        if (inline == null) return string.Empty;
        var sb = new StringBuilder();
        foreach (var child in inline)
            if (child is LiteralInline literal)
                sb.Append(literal.Content.Text.Substring(literal.Content.Start, literal.Content.Length));
            else if (child is ContainerInline container) sb.Append(ExtractPlainText(container));
        return sb.ToString().Trim();
    }
}
</file>

<file path="Components/RzMarkdown/Styling/DefaultRzMarkdownStyles.cs">
namespace RizzyUI;
public class DefaultRzMarkdownStyles : RzStylesBase.RzMarkdownStylesBase
{
    public DefaultRzMarkdownStyles(RzTheme theme) : base(theme)
    {
    }
    public override string Container => "prose dark:prose-invert text-on-surface max-w-none";
    public override string GetProseWidthCss(ProseWidth width)
    {
        return width switch
        {
            ProseWidth.Compact => "prose-compact",
            ProseWidth.Comfortable => "prose-comfortable",
            ProseWidth.Relaxed => "prose-relaxed",
            ProseWidth.Wide => "prose-wide",
            ProseWidth.UltraWide => "prose-ultrawide",
            ProseWidth.Full => "prose-full",
            _ => GetProseWidthCss(ProseWidth.Comfortable)
        };
    }
}
</file>

<file path="Components/RzNavbar/RzNavbar.razor">
@namespace RizzyUI
@using Blazicons
@inherits RzComponent

<HtmlElement Element="@Element" @attributes="@AdditionalAttributes" class="@RootClass()">
    <!-- Navbar Toggle Button (conditionally rendered based on screen size by CSS) -->
    <button type="button" class="@ToggleButtonClass" x-on:click="toggleSidebar">
        <div class="@ToggleButtonIconContainerClass">
            <Blazicon Svg="MdiIcon.Menu"/>
        </div>
        <span class="@ToggleButtonSrTextClass">@ScreenReaderText</span>
    </button>

    <div class="@ContentContainerClass">
        @ChildContent
    </div>
</HtmlElement>
</file>

<file path="Components/RzNavbar/RzNavbar.razor.cs">
using Microsoft.AspNetCore.Components;
using Microsoft.Extensions.Options;
using RizzyUI.Extensions;
namespace RizzyUI;
public partial class RzNavbar : RzComponent
{
    [Parameter]
    public RenderFragment? ChildContent { get; set; }
    [Parameter]
    public string ScreenReaderText { get; set; } = "Toggle side navigation";
    protected string ToggleButtonClass => Theme.RzNavbar.ToggleButton;
    protected string ToggleButtonIconContainerClass => Theme.RzNavbar.ToggleButtonIconContainer;
    protected string ToggleButtonSrTextClass => Theme.RzNavbar.ToggleButtonSrText;
    protected string ContentContainerClass => Theme.RzNavbar.ContentContainer;
    protected override void OnInitialized()
    {
        base.OnInitialized();
        Element = "nav";
    }
    protected override string? RootClass()
    {
        return TwMerge.Merge(AdditionalAttributes, Theme.RzNavbar.Navbar);
    }
}
</file>

<file path="Components/RzNavbar/Styling/DefaultRzNavbarStyles.cs">
namespace RizzyUI;
public class DefaultRzNavbarStyles : RzStylesBase.RzNavbarStylesBase
{
    public DefaultRzNavbarStyles(RzTheme theme) : base(theme)
    {
    }
    public override string Navbar =>
        "fixed top-0 z-50 h-16 w-screen items-center justify-between border-outline bg-surface-alt/75 px-4 py-2 backdrop-blur-xl flex border-b";
    public override string ToggleButton => "md:hidden inline-block text-on-surface";
    public override string ToggleButtonIconContainer => "text-xl";
    public override string ToggleButtonSrText => "sr-only";
    public override string ContentContainer => "h-full w-full flex items-center justify-between";
}
</file>

<file path="Components/RzNumber/RzNumberEdit.razor">
@typeparam TValue
@namespace RizzyUI
@using Blazicons
@using Rizzy
@inherits InputBase<TValue>

<div class="@InputWrapperClass" x-data="rzPrependInput">
	@if (!string.IsNullOrEmpty(PrependText) || PrependIcon != null)
	{
		<div x-ref="prependContainer" class="@PrependElementClass">
			@if (!string.IsNullOrEmpty(PrependText))
			{
				@PrependText
			}
			else if (PrependIcon != null)
			{
				<div class="@PrependIconContainerClass">
					<Blazicon Svg="PrependIcon"/>
				</div>
			}
		</div>
	}
	<RzInputNumber x-ref="textInput" TValue="TValue" @ref="_elem" Value="@_value" ValueExpression="For"
	               placeholder="@_placeholder" @attributes="AdditionalAttributes" class="@InputClass"/>
</div>
</file>

<file path="Components/RzNumber/RzNumberEdit.razor.cs">
using Blazicons;
using Microsoft.AspNetCore.Components;
using Microsoft.AspNetCore.Components.Forms;
using Microsoft.Extensions.Options;
using RizzyUI.Extensions;
namespace RizzyUI;
public partial class RzNumberEdit<TValue> : InputBase<TValue>
{
    private RzInputNumber<TValue>? _elem;
    private string _placeholder = string.Empty;
    private TValue _value = default!;
    [CascadingParameter]
    public EditContext? EditContext { get; set; }
    [Parameter]
    public string Placeholder { get; set; } = string.Empty;
    [Parameter]
    public string? PrependText { get; set; }
    [Parameter]
    public SvgIcon? PrependIcon { get; set; }
    public string Id => _elem?.Id ?? string.Empty;
    protected string InputWrapperClass => Theme.RzNumberEdit.InputWrapper;
    protected string PrependElementClass => Theme.RzNumberEdit.PrependElement;
    protected string PrependIconContainerClass => Theme.RzNumberEdit.PrependIconContainer;
    protected string InputClass => Theme.RzNumberEdit.Input;
    protected override void OnInitialized()
    {
        base.OnInitialized();
        if (For == null)
            throw new InvalidOperationException($"{GetType()} requires a value for the 'For' parameter.");
        if (EditContext == null)
            throw new InvalidOperationException($"{GetType()} must be used within an EditForm.");
    }
    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        _placeholder = Placeholder;
        if (AdditionalAttributes is not null && AdditionalAttributes.TryGetValue("placeholder", out var ph) && ph is string phStr)
        {
            _placeholder = phStr;
        }
        _value = For!.Compile().Invoke();
        if (!string.IsNullOrEmpty(PrependText) && PrependIcon != null)
            throw new InvalidOperationException(
                $"{nameof(PrependText)} and {nameof(PrependIcon)} cannot both be set at the same time.");
    }
    protected override string? RootClass()
    {
        return TwMerge.Merge(AdditionalAttributes, InputClass);
    }
}
</file>

<file path="Components/RzNumber/RzNumberField.razor">
@typeparam TValue
@namespace RizzyUI
@inherits RzComponent

@* Use the RzField component for the overall structure *@
<RzField @attributes="AdditionalAttributes" class="@RootClass()">
	<RzFieldLabel DisplayName="@DisplayName" For="@For" Required="Required"/>
	@* Pass down relevant parameters to RzNumberEdit *@
	<RzNumberEdit TValue="TValue"
	              For="@For"
	              Placeholder="@Placeholder"
	              PrependIcon="@PrependIcon"
	              PrependText="@PrependText"
	              @attributes="InputAttributes"/> @* Pass down *other* attributes *@
	@if (FieldHelp != null)
	{
		<RzFieldHelp>@FieldHelp</RzFieldHelp>
	}
	<RzValidationMessage For="@For"/>
</RzField>
</file>

<file path="Components/RzNumber/RzNumberField.razor.cs">
using System.Linq.Expressions;
using Blazicons;
using Microsoft.AspNetCore.Components;
using Microsoft.AspNetCore.Components.Forms;
using RizzyUI.Extensions;
namespace RizzyUI;
public partial class RzNumberField<TValue> : RzComponent
{
    [CascadingParameter]
    private EditContext? EditContext { get; set; }
    [Parameter]
    [EditorRequired]
    public Expression<Func<TValue>>? For { get; set; }
    [Parameter]
    public string? PrependText { get; set; }
    [Parameter]
    public SvgIcon? PrependIcon { get; set; }
    [Parameter]
    public string Placeholder { get; set; } = string.Empty;
    [Parameter]
    public string? DisplayName { get; set; }
    [Parameter]
    public bool Required { get; set; }
    [Parameter]
    public RenderFragment? FieldHelp { get; set; }
    protected Dictionary<string, object> InputAttributes => AdditionalAttributes?
        .Where(kvp => kvp.Key.ToLowerInvariant() != "class")
        .ToDictionary(kvp => kvp.Key, kvp => kvp.Value) ?? new Dictionary<string, object>();
    protected override void OnInitialized()
    {
        base.OnInitialized();
        if (For == null)
            throw new InvalidOperationException($"{GetType()} requires a value for the 'For' parameter.");
        if (EditContext == null)
            throw new InvalidOperationException($"{GetType()} must be used within an EditForm.");
    }
    protected override string? RootClass()
    {
        return TwMerge.Merge(AdditionalAttributes, Theme.RzNumberField.Field);
    }
}
</file>

<file path="Components/RzNumber/Styling/DefaultRzNumberStyles.cs">
namespace RizzyUI;
public class DefaultRzNumberEditStyles : RzStylesBase.RzNumberEditStylesBase
{
    public DefaultRzNumberEditStyles(RzTheme theme) : base(theme)
    {
    }
    public override string InputWrapper => "relative";
    public override string PrependElement =>
        $"pointer-events-none absolute inset-y-0 left-0 my-px ml-px flex items-center rounded-l-borderRadius border-r border-outline bg-surface-alt pl-3 pr-1 text-on-surface dark:border-outline dark:bg-surface-alt dark:text-on-surface";
    public override string PrependIconContainer => "text-xl";
    public override string Input =>
        $"block w-full rounded-borderRadius border border-outline px-3 py-2 leading-6 placeholder-on-surface-muted focus:border-primary focus:ring focus:ring-primary/50 transition-opacity text-transparent dark:border-outline dark:bg-surface-alt dark:placeholder-on-surface-muted dark:focus:border-primary";
}
public class DefaultRzNumberFieldStyles : RzStylesBase.RzNumberFieldStylesBase
{
    public DefaultRzNumberFieldStyles(RzTheme theme) : base(theme)
    {
    }
    public override string Field => "";
}
</file>

<file path="Components/RzProgress/RzProgress.razor">
@namespace RizzyUI
@inherits RzComponent

<HtmlElement Element="div"
             @attributes="AdditionalAttributes"
             class="@RootClass()"
             x-data="rzProgress"
             data-label="@Label"
             data-current-val="@CurrentValue"
             data-min-val="@MinValue"
             data-max-val="@MaxValue"
             role="progressbar"
             aria-label="@AriaLabel"
             aria-valuenow="@CurrentValue"
             aria-valuemin="@MinValue"
             aria-valuemax="@MaxValue"
             data-rz-progress="true">

	@if (LabelPosition == ProgressLabelPosition.Outside && !string.IsNullOrEmpty(Label))
	{
		<div class="@OutsideLabelContainerClass">
			<div class="grow"></div> @* Spacer for alignment if needed *@
			<div class="@OutsideLabelTextClass"><span x-text="buildLabel()"></span></div>
		</div>
	}
	<div class="@OuterBarClass @OuterBarHeightClass">
		<div class="@InnerBarClass" x-ref="progressBar" nonce="@Nonce">
			@if (LabelPosition == ProgressLabelPosition.Inside && !string.IsNullOrEmpty(Label))
			{
				<div class="@InsideLabelContainerClass" x-ref="progressBarLabel" :class="getLabelCss()">
					<span class="@InsideLabelTextClass" x-ref="innerLabel"></span> @* Content set by Alpine *@
				</div>
			}
		</div>
	</div>
</HtmlElement>
</file>

<file path="Components/RzProgress/RzProgress.razor.cs">
using Microsoft.AspNetCore.Components;
using Microsoft.Extensions.Options;
using RizzyUI.Extensions;
namespace RizzyUI;
public partial class RzProgress : RzComponent
{
    [Parameter]
    public int CurrentValue { get; set; }
    [Parameter]
    public int MinValue { get; set; }
    [Parameter]
    public int MaxValue { get; set; } = 100;
    [Parameter]
    public string? Label { get; set; }
    [Parameter]
    public ProgressLabelPosition LabelPosition { get; set; } = ProgressLabelPosition.Outside;
    [Parameter]
    public StatusColor Variant { get; set; } = StatusColor.Primary;
    [Parameter]
    public string AriaLabel { get; set; } = "Progress Bar";
    protected string OutsideLabelContainerClass => Theme.RzProgress.OutsideLabelContainer;
    protected string OutsideLabelTextClass => Theme.RzProgress.OutsideLabelText;
    protected string OuterBarClass => Theme.RzProgress.OuterBar;
    protected string OuterBarHeightClass => Theme.RzProgress.GetOuterBarHeightCss(LabelPosition);
    protected string InnerBarClass =>
        $"{Theme.RzProgress.InnerBarBase} {Theme.RzProgress.GetInnerBarVariantCss(Variant)}";
    protected string InsideLabelContainerClass => Theme.RzProgress.InsideLabelContainer;
    protected string InsideLabelTextClass => Theme.RzProgress.InsideLabelText;
    protected override string? RootClass()
    {
        return TwMerge.Merge(AdditionalAttributes, Theme.RzProgress.Container);
    }
}
</file>

<file path="Components/RzProgress/Styling/DefaultRzProgressStyles.cs">
namespace RizzyUI;
public class DefaultRzProgressStyles : RzStylesBase.RzProgressStylesBase
{
    public DefaultRzProgressStyles(RzTheme theme) : base(theme)
    {
    }
    public override string Container => "w-full";
    public override string OutsideLabelContainer => "mb-2 flex items-center";
    public override string OutsideLabelText => "text-on-surface";
    public override string OuterBar =>
        "relative flex w-full overflow-hidden rounded-borderRadius bg-outline";
    public override string InnerBarBase =>
        "p-0.5 text-center text-xs font-semibold leading-none transition-all";
    public override string InsideLabelContainer => "absolute";
    public override string InsideLabelText => ""; // Usually styled via parent or specific logic
    /// <inheritdoc />
    public override string GetOuterBarHeightCss(ProgressLabelPosition position)
    {
        return position == ProgressLabelPosition.Inside ? "h-4" : "h-2.5";
    }
    public override string GetInnerBarVariantCss(StatusColor variant)
    {
        return variant switch
        {
            StatusColor.Primary => "h-full rounded-borderRadius bg-primary text-on-primary",
            StatusColor.Secondary => "h-full rounded-borderRadius bg-secondary text-on-secondary",
            StatusColor.Success =>
                $"h-full rounded-borderRadius bg-success dark:bg-success text-on-success dark:text-on-success",
            StatusColor.Info =>
                $"h-full rounded-borderRadius bg-info dark:bg-info text-on-info dark:text-on-info",
            StatusColor.Warning =>
                $"h-full rounded-borderRadius bg-warning dark:bg-warning text-on-warning dark:text-on-warning",
            StatusColor.Danger =>
                $"h-full rounded-borderRadius bg-danger dark:bg-danger text-on-danger dark:text-on-danger",
            _ => GetInnerBarVariantCss(StatusColor.Primary)
        };
    }
    public override string GetInsideLabelColorCss(bool overflows)
    {
        return overflows ? $"text-on-surface dark:text-on-surface" : "";
    }
}
</file>

<file path="Components/RzQuickReference/RzQuickReference.razor">
@namespace RizzyUI
@inherits RzComponent

<div class="@RootClass()">
    <p class="@TitleClass">
        @Title
    </p>
    <ul class="@ListClass">
        @foreach (var heading in _headings)
        {
            <li class="@ListItemClass @GetIndentationClass(heading.Level)">
                @* Alpine handles selected class via :class binding in JS *@
                <a href="#@heading.Id"
                   class="@LinkClass"
                   data-headingid="@heading.Id"
                   :class="getSelectedCss"
                   x-on:click="handleHeadingClick">
                    @heading.Title
                </a>
            </li>
        }
    </ul>
</div>
</file>

<file path="Components/RzQuickReference/RzQuickReference.razor.cs">
using Microsoft.AspNetCore.Components;
using Microsoft.Extensions.Options;
using RizzyUI.Extensions;
namespace RizzyUI;
public partial class RzQuickReference : RzComponent
{
    private IReadOnlyList<HeadingItem> _headings = new List<HeadingItem>().AsReadOnly();
    [CascadingParameter]
    private RzQuickReferenceContainer? QuickReferenceContainer { get; set; }
    [Parameter]
    public string Title { get; set; } = "On this page";
    protected string TitleClass => Theme.RzQuickReference.Title;
    protected string ListClass => Theme.RzQuickReference.List;
    protected string ListItemClass => Theme.RzQuickReference.ListItem;
    protected string LinkClass => Theme.RzQuickReference.Link;
    protected override void OnInitialized()
    {
        base.OnInitialized();
        if (QuickReferenceContainer == null)
            throw new InvalidOperationException(
                $"{GetType()} must be placed within an {nameof(RzQuickReferenceContainer)}.");
        _headings = QuickReferenceContainer.GetHeadingItems();
    }
    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        if (QuickReferenceContainer != null) _headings = QuickReferenceContainer.GetHeadingItems();
    }
    protected override string? RootClass()
    {
        return TwMerge.Merge(AdditionalAttributes, Theme.RzQuickReference.Container);
    }
    protected string GetIndentationClass(HeadingLevel level)
    {
        return Theme.RzQuickReference.GetIndentationCss(level, QuickReferenceContainer!.MinimumHeadingLevel);
    }
}
</file>

<file path="Components/RzQuickReference/RzQuickReferenceContainer.razor">
@namespace RizzyUI
@inherits RzComponent

<HtmlElement Element="@Element" @attributes="@AdditionalAttributes" class="@RootClass()"
             data-headings="@_headingItemsSerialized"
             data-currentheadingid="@(_currentHeadingId)"
             x-data="rzQuickReferenceContainer">
    <CascadingValue Value="this" IsFixed="true"> @* Cascade self to children *@
        @ChildContent
    </CascadingValue>
</HtmlElement>
</file>

<file path="Components/RzQuickReference/RzQuickReferenceContainer.razor.cs">
using System.Text.Json;
using Microsoft.AspNetCore.Components;
using Microsoft.Extensions.Options;
using RizzyUI.Extensions;
namespace RizzyUI;
public partial class RzQuickReferenceContainer : RzComponent
{
    private readonly List<HeadingItem> _headingItems = new();
    private string _currentHeadingId = string.Empty;
    private string _headingItemsSerialized = "[]";
    [Parameter]
    public HeadingLevel MinimumHeadingLevel { get; set; } = HeadingLevel.H2;
    [Parameter]
    public HeadingLevel MaximumHeadingLevel { get; set; } = HeadingLevel.H4;
    [Parameter]
    public RenderFragment? ChildContent { get; set; }
    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            UpdateSerializedHeadings();
            StateHasChanged();
        }
        base.OnAfterRender(firstRender);
    }
    internal void RegisterHeading(HeadingLevel level, string title, string id)
    {
        if (level >= MinimumHeadingLevel && level <= MaximumHeadingLevel)
            if (!_headingItems.Any(h => h.Id == id))
                _headingItems.Add(new HeadingItem(level, title, id));
    }
    private void UpdateSerializedHeadings()
    {
        _headingItemsSerialized =
            JsonSerializer.Serialize(_headingItems.Select(x => x.Id).ToList());
        _currentHeadingId = _headingItems.FirstOrDefault()?.Id ?? string.Empty;
    }
    public IReadOnlyList<HeadingItem> GetHeadingItems()
    {
        return _headingItems.AsReadOnly();
    }
    protected override string? RootClass()
    {
        return TwMerge.Merge(AdditionalAttributes, Theme.RzQuickReferenceContainer.Container);
    }
}
</file>

<file path="Components/RzQuickReference/Styling/DefaultRzQuickReferenceStyles.cs">
namespace RizzyUI;
public class DefaultRzQuickReferenceStyles : RzStylesBase.RzQuickReferenceStylesBase
{
    public DefaultRzQuickReferenceStyles(RzTheme theme) : base(theme)
    {
    }
    public override string Container => $"text-{Theme.Light.OnSurfaceStrong.TailwindClassName}";
    public override string Title => "mb-4 font-bold";
    public override string List => "flex flex-col gap-2";
    public override string ListItem => ""; // Base LI, indentation added dynamically
    /// <inheritdoc />
    public override string Link => ""; // Base link, selected state handled by Alpine :class
    /// <inheritdoc />
    public override string LinkSelected => "font-bold";
    public override string GetIndentationCss(HeadingLevel level, HeadingLevel minLevel)
    {
        var relativeLevel = (int)level - (int)minLevel;
        return relativeLevel switch
        {
            0 => "ml-0",
            1 => "ml-4",
            2 => "ml-8",
            3 => "ml-12",
            _ => "ml-0"
        };
    }
}
public class DefaultRzQuickReferenceContainerStyles : RzStylesBase.RzQuickReferenceContainerStylesBase
{
    public DefaultRzQuickReferenceContainerStyles(RzTheme theme) : base(theme)
    {
    }
    public override string Container => "";
}
</file>

<file path="Components/RzRadio/RzRadioGroup.razor">
@typeparam TValue
@namespace RizzyUI
@using Rizzy
@inherits RzComponent

<CascadingValue Value="this" IsFixed="true">
    @* RzInputRadioGroup handles the value binding and EditContext integration *@
    <RzInputRadioGroup TValue="TValue" ValueExpression="@For" Value="CurrentValue" Name="@Name">
        <div @attributes="AdditionalAttributes" class="@RootClass()">
            @ChildContent
        </div>
    </RzInputRadioGroup>
</CascadingValue>
</file>

<file path="Components/RzRadio/RzRadioGroup.razor.cs">
using System.Linq.Expressions;
using Blazicons;
using Microsoft.AspNetCore.Components;
using Microsoft.AspNetCore.Components.Forms;
using RizzyUI.Extensions;
namespace RizzyUI;
public partial class RzRadioGroup<TValue> : RzComponent
{
    private TValue? _currentValue = default!;
    private FieldIdentifier _fieldIdentifier;
    private List<RzRadioGroupItem<TValue>> _items = new();
    [CascadingParameter]
    private EditContext? EditContext { get; set; }
    [Parameter]
    public string? DisplayName { get; set; } = string.Empty;
    [Parameter]
    public Orientation Orientation { get; set; } = Orientation.Vertical;
    [Parameter][EditorRequired]
    public Expression<Func<TValue>>? For { get; set; }
    [Parameter]
    public string Name { get; set; } = string.Empty;
    [Parameter]
    public SvgIcon CheckboxIcon { get; set; } = MdiIcon.CheckboxMarkedCircle;
    [Parameter]
    public TValue? Value { get; set; } = default!;
    [Parameter]
    public EventCallback<TValue> ValueChanged { get; set; }
    [Parameter]
    public RenderFragment? ChildContent { get; set; }
    protected TValue? CurrentValue
    {
        get => _currentValue;
        set
        {
            if (!EqualityComparer<TValue?>.Default.Equals(_currentValue, value))
            {
                _currentValue = value;
                InvokeAsync(async () =>
                {
                    Value = _currentValue;
                    await ValueChanged.InvokeAsync(_currentValue);
                });
            }
        }
    }
    protected override void OnInitialized()
    {
        base.OnInitialized();
        if (For == null)
            throw new InvalidOperationException($"{GetType()} requires a value for the 'For' parameter.");
        if (EditContext == null)
            throw new InvalidOperationException($"{GetType()} must be used within an EditForm.");
        _fieldIdentifier = FieldIdentifier.Create(For);
        _currentValue = Value ?? For.Compile().Invoke();
        if (string.IsNullOrEmpty(Name)) Name = _fieldIdentifier.FieldName;
    }
    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        if (For != null && Value == null)
        {
            var newValue = Value ?? For.Compile().Invoke();
            if (!EqualityComparer<TValue?>.Default.Equals(_currentValue, newValue)) _currentValue = newValue;
        }
        if (For == null) return;
        var newFieldIdentifier = FieldIdentifier.Create(For);
        if (string.IsNullOrEmpty(Name) || Name == _fieldIdentifier.FieldName)
            Name = newFieldIdentifier.FieldName;
        _fieldIdentifier = newFieldIdentifier;
    }
    public void AddRadioItem(RzRadioGroupItem<TValue> item)
    {
        if (!_items.Contains(item))
        {
            _items.Add(item);
            StateHasChanged();
        }
    }
    protected override string? RootClass()
    {
        var styles = Theme.RzRadioGroup;
        return TwMerge.Merge(AdditionalAttributes, styles.Container,
            styles.GetGridColumnsCss(Orientation, _items.Count));
    }
}
</file>

<file path="Components/RzRadio/RzRadioGroupField.razor">
@typeparam TValue
@namespace RizzyUI
@inherits RzComponent

<RzField @attributes="AdditionalAttributes" class="@RootClass()">
    <RzFieldLabel DisplayName="@DisplayName" For="@For" Required="Required"/>
    @if (FieldHelp != null)
    {
        <RzFieldHelp>@FieldHelp</RzFieldHelp>
    }
    <RzRadioGroup TValue="TValue"
                  @bind-Value="CurrentValue"
                  DisplayName="@DisplayName"
                  Name="@ResolvedName"
                  For="@For"
                  Orientation="@Orientation"
                  CheckboxIcon="@CheckboxIcon"
                  class="@GroupWithinFieldClass">
        @RadioGroupContent @* Pass content down *@
    </RzRadioGroup>
    <RzValidationMessage For="@For"/>
</RzField>
</file>

<file path="Components/RzRadio/RzRadioGroupField.razor.cs">
using System.Linq.Expressions;
using Blazicons;
using Microsoft.AspNetCore.Components;
using Microsoft.AspNetCore.Components.Forms;
using Microsoft.Extensions.Options;
using RizzyUI.Extensions;
namespace RizzyUI;
public partial class RzRadioGroupField<TValue> : RzComponent
{
    private TValue? _currentValue;
    private FieldIdentifier _fieldIdentifier;
    [CascadingParameter]
    private EditContext? EditContext { get; set; }
    [Parameter]
    public string? DisplayName { get; set; } = string.Empty;
    [Parameter]
    public Orientation Orientation { get; set; } = Orientation.Vertical;
    [Parameter]
    public SvgIcon CheckboxIcon { get; set; } = MdiIcon.CheckboxMarkedCircle;
    [Parameter]
    [EditorRequired]
    public required Expression<Func<TValue>>? For { get; set; }
    [Parameter]
    public TValue? Value { get; set; }
    [Parameter]
    public EventCallback<TValue> ValueChanged { get; set; }
    [Parameter]
    public string Name { get; set; } = string.Empty;
    [Parameter]
    public RenderFragment? RadioGroupContent { get; set; }
    [Parameter]
    public RenderFragment? FieldHelp { get; set; }
    [Parameter]
    public bool Required { get; set; }
    protected TValue? CurrentValue
    {
        get => _currentValue;
        set
        {
            if (!EqualityComparer<TValue?>.Default.Equals(_currentValue, value))
            {
                _currentValue = value;
                InvokeAsync(async () =>
                {
                    Value = _currentValue;
                    await ValueChanged.InvokeAsync(_currentValue);
                    EditContext?.NotifyFieldChanged(_fieldIdentifier);
                });
            }
        }
    }
    protected string ResolvedName { get; private set; } = string.Empty;
    protected string GroupWithinFieldClass => Theme.RzRadioGroupField.GroupWithinField;
    protected override void OnInitialized()
    {
        base.OnInitialized();
        if (For == null)
            throw new InvalidOperationException($"{GetType()} requires a value for the 'For' parameter.");
        if (EditContext == null)
            throw new InvalidOperationException($"{GetType()} must be used within an EditForm.");
        _fieldIdentifier = FieldIdentifier.Create(For);
        _currentValue = Value ?? For.Compile().Invoke();
        ResolvedName = string.IsNullOrEmpty(Name) ? _fieldIdentifier.FieldName : Name;
    }
    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        var newValue = Value ?? For!.Compile().Invoke();
        if (!EqualityComparer<TValue?>.Default.Equals(_currentValue, newValue)) _currentValue = newValue;
        if (For != null)
        {
            var newFieldIdentifier = FieldIdentifier.Create(For);
            ResolvedName = string.IsNullOrEmpty(Name) ? newFieldIdentifier.FieldName : Name;
            _fieldIdentifier = newFieldIdentifier;
        }
        else if (!string.IsNullOrEmpty(Name))
        {
            ResolvedName = Name;
        }
    }
    protected override string? RootClass()
    {
        return TwMerge.Merge(AdditionalAttributes);
    }
}
</file>

<file path="Components/RzRadio/RzRadioGroupItem.razor">
@typeparam TValue
@namespace RizzyUI
@using Blazicons
@inherits RzComponent

<label @attributes="AdditionalAttributes" class="@LabelWrapperClass">
    <RzInputRadio TValue="TValue" class="@RadioInputClass" Name="@ParentRadioGroup?.Name" Id="@Id" Value="@Value"/>
    <span class="@IconContainerClass">
	    <Blazicon Svg="EffectiveCheckboxIcon"/>
    </span>
    <span class="@ClickableContainerClass">
        <div class="@ContentWrapperClass">
            @if (Icon != null)
            {
                <div class="@LeadingIconContainerClass">
	                <Blazicon Svg="Icon"/>
                </div>
            }
            <span class="@TextContainerClass">
                <span class="@LabelTextClass">@Label</span>
                @if (Description != null)
                {
                    <span class="@DescriptionTextClass">@Description</span>
                }
                @ChildContent
            </span>
        </div>
    </span>
</label>
</file>

<file path="Components/RzRadio/RzRadioGroupItem.razor.cs">
using Blazicons;
using Microsoft.AspNetCore.Components;
using Microsoft.Extensions.Options;
using Rizzy.Utility;
namespace RizzyUI;
public partial class RzRadioGroupItem<TValue> : RzComponent
{
    [CascadingParameter]
    public RzRadioGroup<TValue>? ParentRadioGroup { get; set; }
    [Parameter]
    public SvgIcon? Icon { get; set; }
    [Parameter]
    [EditorRequired]
    public string Label { get; set; } = string.Empty;
    [Parameter]
    public TValue? Value { get; set; }
    [Parameter]
    public RenderFragment? Description { get; set; }
    [Parameter]
    public string Id { get; set; } = IdGenerator.UniqueId("rzrd");
    [Parameter]
    public RenderFragment? ChildContent { get; set; }
    protected SvgIcon EffectiveCheckboxIcon { get; set; } = default!;
    protected string LabelWrapperClass => Theme.RzRadioGroupItem.LabelWrapper;
    protected string RadioInputClass => Theme.RzRadioGroupItem.RadioInput;
    protected string IconContainerClass => Theme.RzRadioGroupItem.IconContainer;
    protected string ClickableContainerClass => Theme.RzRadioGroupItem.ClickableContainer;
    protected string ContentWrapperClass => Theme.RzRadioGroupItem.ContentWrapper;
    protected string LeadingIconContainerClass => Theme.RzRadioGroupItem.LeadingIconContainer;
    protected string TextContainerClass => Theme.RzRadioGroupItem.TextContainer;
    protected string LabelTextClass => Theme.RzRadioGroupItem.LabelText;
    protected string DescriptionTextClass => Theme.RzRadioGroupItem.DescriptionText;
    protected override void OnInitialized()
    {
        base.OnInitialized();
        if (ParentRadioGroup == null)
            throw new InvalidOperationException($"{GetType()} must be used within an RzRadioGroup.");
        EffectiveCheckboxIcon = ParentRadioGroup.CheckboxIcon;
        ParentRadioGroup.AddRadioItem(this);
    }
}
</file>

<file path="Components/RzRadio/Styling/DefaultRzRadioStyles.cs">
namespace RizzyUI;
public class DefaultRzRadioGroupStyles : RzStylesBase.RzRadioGroupStylesBase
{
    public DefaultRzRadioGroupStyles(RzTheme theme) : base(theme)
    {
    }
    public override string Container => "grid gap-2 pt-3";
    public override string GetGridColumnsCss(Orientation orientation, int itemCount)
    {
        return orientation switch
        {
            Orientation.Horizontal => $"grid-cols-{itemCount}",
            Orientation.Vertical => "grid-cols-1",
            _ => GetGridColumnsCss(Orientation.Vertical, itemCount)
        };
    }
}
public class DefaultRzRadioGroupItemStyles : RzStylesBase.RzRadioGroupItemStylesBase
{
    public DefaultRzRadioGroupItemStyles(RzTheme theme) : base(theme)
    {
    }
    public override string LabelWrapper => "group relative flex";
    public override string RadioInput => "opacity-0 peer absolute left-0 top-0 appearance-none";
    public override string IconContainer =>
        "z-1 text-primary text-xl opacity-0 absolute bottom-0 right-0 top-0 flex scale-50 cursor-pointer items-center px-4 transition peer-checked:scale-100 peer-checked:opacity-100";
    public override string ClickableContainer =>
        "group-hover:border-primary relative flex grow cursor-pointer rounded-borderRadius border border-outline p-4 peer-checked:bg-surface-alt peer-checked:border-primary dark:peer-checked:border-primary dark:peer-checked:bg-surface-alt dark:peer-checked:bg-opacity-10 peer-focus:ring peer-focus:ring-primary";
    public override string ContentWrapper => "flex";
    public override string LeadingIconContainer => "mr-2 text-2xl content-center";
    public override string TextContainer => "grow pr-8 text-sm";
    public override string LabelText => "mb-1 block font-bold";
    public override string DescriptionText => "block text-on-surface";
}
public class DefaultRzRadioGroupFieldStyles : RzStylesBase.RzRadioGroupFieldStylesBase
{
    public DefaultRzRadioGroupFieldStyles(RzTheme theme) : base(theme)
    {
    }
    public override string Field => ""; // Handled by RzField component
    /// <inheritdoc />
    public override string GroupWithinField => "";
}
</file>

<file path="Components/RzSearchButton/RzSearchButton.razor">
@namespace RizzyUI
@using Blazicons
@inherits RzComponent

<HtmlElement Element="button"
             @attributes="AdditionalAttributes"
             class="@RootClass()"
             aria-label="@Label">
	<div class="@InnerContainerClass">
		<span class="@IconSpanClass">
			<Blazicon Svg="MdiIcon.Magnify" />
		</span>
		@Label
	</div>
</HtmlElement>
</file>

<file path="Components/RzSearchButton/RzSearchButton.razor.cs">
using Microsoft.AspNetCore.Components;
using RizzyUI.Extensions;
namespace RizzyUI;
public partial class RzSearchButton : RzComponent
{
	[Parameter] public string Label { get; set; } = "Search";
	protected string InnerContainerClass => Theme.RzSearchButton.InnerContainer;
	protected string IconSpanClass => Theme.RzSearchButton.IconSpan;
	protected override string? RootClass() =>
		TwMerge.Merge(AdditionalAttributes, Theme.RzSearchButton.Button);
}
</file>

<file path="Components/RzSearchButton/Styling/DefaultRzSearchButtonStyles.cs">
namespace RizzyUI;
public class DefaultRzSearchButtonStyles : RzStylesBase.RzSearchButtonStylesBase
{
	public DefaultRzSearchButtonStyles(RzTheme theme) : base(theme) { }
	public override string Button => $"flex h-10 w-full cursor-pointer items-center justify-between border-outline bg-surface-alt p-2 px-4 font-light transition-all duration-200 rounded-theme border";
	public override string InnerContainer => "flex items-center gap-2";
	public override string IconSpan => "text-xl";
}
</file>

<file path="Components/RzSidebar/RzSidebar.razor">
@namespace RizzyUI
@inherits RzComponent

<div x-data="rzSidebar" class="@ContainerClass"> @* Use ContainerClass if needed, else remove class *@
    @if (NavbarContent != null)
    {
        @NavbarContent
    }

    <div class="@LayoutContainerClass @LayoutContainerTopClass">
        <div class="@LayoutInnerContainerClass">
            <!-- Skip Link -->
            <a class="@SkipLinkClass" href="#@MainContentId">skip to the main content</a>

            <!-- Mobile Overlay -->
            <div x-cloak x-show="showSidebar" class="@OverlayClass" aria-hidden="true" x-on:click="hideSidebar"
                 x-transition.opacity></div>

            <!-- Sidebar -->
            <aside x-cloak class="@SidebarClass @SidebarTopClass" :class="getSidebarTranslation"
                   aria-label="sidebar navigation">
                @MenuContent
            </aside>

            <!-- Main Content -->
            <section id="@MainContentId" class="@MainContentContainerClass">
                <div class="@MainContentPaddingClass">
                    @MainContent
                </div>
            </section>
        </div>
    </div>

    @if (NavbarContent == null)
    {
        <!-- Floating Toggle Button (only if no navbar) -->
        <button class="@FloatingToggleButtonClass" x-on:click="toggleSidebar">
            @* Alpine handles showing/hiding based on showSidebar *@
            <svg x-show="showSidebar" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16" fill="currentColor"
                 class="size-5" aria-hidden="true">
                <path
                    d="M2.146 2.854a.5.5 0 1 1 .708-.708L8 7.293l5.146-5.147a.5.5 0 0 1 .708.708L8.707 8l5.147 5.146a.5.5 0 0 1-.708.708L8 8.707l-5.146 5.147a.5.5 0 0 1-.708-.708L7.293 8z"/>
            </svg>
            <svg x-show="isSidebarHidden" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16" fill="currentColor"
                 class="size-5" aria-hidden="true">
                <path
                    d="M0 3a2 2 0 0 1 2-2h12a2 2 0 0 1 2 2v10a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2zm5-1v12h9a1 1 0 0 0 1-1V3a1 1 0 0 0-1-1zM4 2H2a1 1 0 0 0-1 1v10a1 1 0 0 0 1 1h2z"/>
            </svg>
            <span class="sr-only">sidebar toggle</span>
        </button>
    }
</div>
</file>

<file path="Components/RzSidebar/RzSidebar.razor.cs">
using Microsoft.AspNetCore.Components;
using RizzyUI.Extensions;
using Microsoft.Extensions.Options;
namespace RizzyUI;
public partial class RzSidebar : RzComponent
{
    [Parameter]
    public string MainContentId { get; set; } = "main-content";
    [Parameter]
    public RenderFragment? NavbarContent { get; set; }
    [Parameter]
    public RenderFragment? MenuContent { get; set; }
    [Parameter]
    public RenderFragment? MainContent { get; set; }
    protected bool HasNavbar => NavbarContent != null;
    protected string ContainerClass => Theme.RzSidebar.Container;
    protected string LayoutContainerClass => Theme.RzSidebar.LayoutContainer;
    protected string LayoutContainerTopClass => Theme.RzSidebar.GetLayoutContainerTopCss(HasNavbar);
    protected string LayoutInnerContainerClass => "relative flex w-full flex-col md:flex-row";
    protected string SkipLinkClass => Theme.RzSidebar.SkipLink;
    protected string OverlayClass => Theme.RzSidebar.Overlay;
    protected string SidebarClass => Theme.RzSidebar.Sidebar;
    protected string SidebarTopClass => Theme.RzSidebar.GetSidebarTopCss(HasNavbar);
    protected string MainContentContainerClass => Theme.RzSidebar.MainContentContainer;
    protected string MainContentPaddingClass => Theme.RzSidebar.MainContentPadding;
    protected string FloatingToggleButtonClass => Theme.RzSidebar.FloatingToggleButton;
    protected override string? RootClass() => TwMerge.Merge(AdditionalAttributes, ContainerClass);
}
</file>

<file path="Components/RzSidebar/RzSidebarLinkItem.razor">
@namespace RizzyUI
@using Blazicons
@inherits RzComponent

@* Determine root element and classes based on state *@
@if (Collapsible)
{
    <li class="@CollapsibleListItemClass">
        <div data-expanded="@((!Collapsed).ToString().ToLowerInvariant())" x-data="rzSidebarLinkItem"
             class="@CollapsibleInnerDivClass">
            <button type="button" x-on:click="toggleExpanded" id="@ButtonId" aria-controls="@CollapseId"
                    x-bind:aria-expanded="isExpanded" class="@CollapsibleButtonClass">
                @if (Icon != null)
                {
                    <div class="@CollapsibleButtonIconContainerClass" aria-hidden="true">
                        <Blazicon Svg="@Icon"/>
                    </div>
                }
                <span class="@CollapsibleButtonTitleClass">@Title</span>
                @if (TrailerContent != null)
                {
                    <div class="@CollapsibleButtonTrailerClass">@TrailerContent</div>
                }
                <svg xmlns="http://www.w3.org/2000/svg" fill="currentColor" class="@CollapsibleButtonChevronClass"
                     x-bind:class="isExpanded ? '@ChevronExpandedClass' : '@ChevronCollapsedClass'" aria-hidden="true">
                    <path fill-rule="evenodd"
                          d="M5.22 8.22a.75.75 0 0 1 1.06 0L10 11.94l3.72-3.72a.75.75 0 1 1 1.06 1.06l-4.25 4.25a.75.75 0 0 1-1.06 0L5.22 9.28a.75.75 0 0 1 0-1.06Z"
                          clip-rule="evenodd"/>
                </svg>
            </button>
            <ul x-cloak x-collapse x-show="isExpanded" aria-labelledby="@ButtonId" id="@CollapseId"
                class="@CollapsibleNestedListClass">
                <CascadingValue Value="this" IsFixed="true">
                    @ChildContent
                </CascadingValue>
            </ul>
        </div>
    </li>
}
else if (Parent is { HasChildren: true, Collapsible: false }) // Sub-item under non-collapsible parent
{
    <li class="@SubListItemClass">
        @if (HasChildren) // Sub-item that itself has children (render as div)
        {
            <div @attributes="AdditionalAttributes" class="@SubLinkOrDivClass">
                @if (Icon != null)
                {
                    <div class="@ItemIconContainerClass" aria-hidden="true">
                        <Blazicon Svg="@Icon"/>
                    </div>
                }
                <span class="@ItemTitleClass">@Title</span>
                @if (TrailerContent != null)
                {
                    <div class="@ItemTrailerClass">@TrailerContent</div>
                }
            </div>
        }
        else // Leaf sub-item (render as link)
        {
            <a @attributes="AdditionalAttributes" href="@Href" target="@Target" class="@SubLinkOrDivClass">
                @if (Icon != null)
                {
                    <div class="@ItemIconContainerClass" aria-hidden="true">
                        <Blazicon Svg="@Icon"/>
                    </div>
                }
                <span class="@ItemTitleClass">@Title</span>
                @if (TrailerContent != null)
                {
                    <div class="@ItemTrailerClass">@TrailerContent</div>
                }
            </a>
        }
        @if (ChildContent != null)
        {
            <ul class="@NonCollapsibleNestedListClass">
                <CascadingValue Value="this" IsFixed="true">
                    @ChildContent
                </CascadingValue>
            </ul>
        }
    </li>
}
else // Top-level non-collapsible item
{
    <li class="@TopLevelListItemClass">
        @if (HasChildren) // Top-level item with children (render as div)
        {
            <div @attributes="AdditionalAttributes" class="@TopLevelNonCollapsibleDivClass">
                @if (Icon != null)
                {
                    <div class="@ItemIconContainerClass" aria-hidden="true">
                        <Blazicon Svg="@Icon"/>
                    </div>
                }
                <span class="@ItemTitleClass">@Title</span>
                @if (TrailerContent != null)
                {
                    <div class="@ItemTrailerClass">@TrailerContent</div>
                }
            </div>
        }
        else // Top-level leaf item (render as link)
        {
            <a @attributes="AdditionalAttributes" href="@Href" target="@Target" class="@TopLevelLinkClass">
                @if (Icon != null)
                {
                    <div class="@ItemIconContainerClass" aria-hidden="true">
                        <Blazicon Svg="@Icon"/>
                    </div>
                }
                <span class="@ItemTitleClass">@Title</span>
                @if (TrailerContent != null)
                {
                    <div class="@ItemTrailerClass">@TrailerContent</div>
                }
            </a>
        }
        @if (ChildContent != null)
        {
            <ul class="@NonCollapsibleNestedListClass">
                <CascadingValue Value="this" IsFixed="true">
                    @ChildContent
                </CascadingValue>
            </ul>
        }
    </li>
}
</file>

<file path="Components/RzSidebar/RzSidebarLinkItem.razor.cs">
using Blazicons;
using Microsoft.AspNetCore.Components;
using Microsoft.Extensions.Options;
using Rizzy.Utility;
namespace RizzyUI;
public partial class RzSidebarLinkItem : RzComponent
{
    private bool _hasChildren;
    [CascadingParameter]
    protected RzTheme? CascadedTheme { get; set; }
    [CascadingParameter]
    public RzSidebarLinkItem? Parent { get; set; }
    [Inject]
    private IOptions<RizzyUIConfig>? Config { get; set; }
    protected RzTheme Theme { get; set; } = default!;
    [Parameter]
    public SvgIcon? Icon { get; set; }
    [Parameter]
    [EditorRequired]
    public string Title { get; set; } = string.Empty;
    [Parameter]
    public string Href { get; set; } = "#";
    [Parameter]
    public string Target { get; set; } = "_self";
    [Parameter]
    public RenderFragment? ChildContent { get; set; }
    [Parameter]
    public RenderFragment? TrailerContent { get; set; }
    [Parameter]
    public bool Collapsible { get; set; }
    [Parameter]
    public bool Collapsed { get; set; } = true;
    protected internal bool HasChildren
    {
        get => _hasChildren;
        set
        {
            if (_hasChildren != value)
            {
                _hasChildren = value;
                StateHasChanged();
            }
        }
    }
    protected string ButtonId { get; private set; } = string.Empty;
    protected string CollapseId { get; private set; } = string.Empty;
    protected string CollapsibleListItemClass => Theme.RzSidebarLinkItem.CollapsibleListItem;
    protected string CollapsibleInnerDivClass => Theme.RzSidebarLinkItem.CollapsibleInnerDiv;
    protected string CollapsibleButtonClass => Theme.RzSidebarLinkItem.CollapsibleButton;
    protected string CollapsibleButtonIconContainerClass => Theme.RzSidebarLinkItem.CollapsibleButtonIconContainer;
    protected string CollapsibleButtonTitleClass => Theme.RzSidebarLinkItem.CollapsibleButtonTitle;
    protected string CollapsibleButtonTrailerClass => Theme.RzSidebarLinkItem.CollapsibleButtonTrailer;
    protected string CollapsibleButtonChevronClass => Theme.RzSidebarLinkItem.CollapsibleButtonChevron;
    protected string CollapsibleNestedListClass => Theme.RzSidebarLinkItem.CollapsibleNestedList;
    protected string SubListItemClass => Theme.RzSidebarLinkItem.SubListItem;
    protected string SubLinkOrDivClass => Theme.RzSidebarLinkItem.SubLinkOrDiv;
    protected string TopLevelListItemClass => Theme.RzSidebarLinkItem.TopLevelListItem;
    protected string TopLevelNonCollapsibleDivClass => Theme.RzSidebarLinkItem.TopLevelNonCollapsibleDiv;
    protected string TopLevelLinkClass => Theme.RzSidebarLinkItem.TopLevelLink;
    protected string ItemIconContainerClass => Theme.RzSidebarLinkItem.ItemIconContainer;
    protected string ItemTitleClass => Theme.RzSidebarLinkItem.ItemTitle;
    protected string ItemTrailerClass => Theme.RzSidebarLinkItem.ItemTrailer;
    protected string NonCollapsibleNestedListClass => Theme.RzSidebarLinkItem.NonCollapsibleNestedList;
    protected string ChevronExpandedClass => Theme.RzSidebarLinkItem.GetChevronRotationCss(true);
    protected string ChevronCollapsedClass =>
        Theme.RzSidebarLinkItem.GetChevronRotationCss(false);
    protected override void OnInitialized()
    {
        base.OnInitialized();
        Theme = CascadedTheme ?? Config?.Value.DefaultTheme ?? RzTheme.Default;
        if (Theme == null)
            throw new InvalidOperationException(
                $"{GetType()} requires a cascading RzTheme or a default theme configured.");
        if (Collapsible)
        {
            var guid = IdGenerator.UniqueId("rzsb");
            ButtonId = $"rzbtn-{guid}";
            CollapseId = $"rzclps-{guid}";
        }
        Parent?.NotifyChildAdded(this);
    }
    internal void NotifyChildAdded(RzSidebarLinkItem child)
    {
        if (!HasChildren) HasChildren = true;
    }
}
</file>

<file path="Components/RzSidebar/RzSidebarLinks.razor">
@namespace RizzyUI
@inherits RzComponent

<ul class="@RootClass()">
    @ChildContent
</ul>
</file>

<file path="Components/RzSidebar/RzSidebarLinks.razor.cs">
using Microsoft.AspNetCore.Components;
using Microsoft.Extensions.Options;
using RizzyUI.Extensions;
namespace RizzyUI;
public partial class RzSidebarLinks : RzComponent
{
    [CascadingParameter]
    protected RzTheme? CascadedTheme { get; set; }
    [Inject]
    private IOptions<RizzyUIConfig>? Config { get; set; }
    protected RzTheme Theme { get; set; } = default!;
    [Parameter]
    public RenderFragment? ChildContent { get; set; }
    protected override void OnInitialized()
    {
        base.OnInitialized();
        Theme = CascadedTheme ?? Config?.Value.DefaultTheme ?? RzTheme.Default;
        if (Theme == null)
            throw new InvalidOperationException(
                $"{GetType()} requires a cascading RzTheme or a default theme configured.");
    }
    protected override string? RootClass()
    {
        return TwMerge.Merge(AdditionalAttributes, Theme.RzSidebarLinks.List);
    }
}
</file>

<file path="Components/RzSidebar/Styling/DefaultRzSidebarStyles.cs">
namespace RizzyUI;
public class DefaultRzSidebarStyles : RzStylesBase.RzSidebarStylesBase
{
    public DefaultRzSidebarStyles(RzTheme theme) : base(theme) { }
    public override string Container => ""; // x-data container usually has no specific style
    /// <inheritdoc/>
    public override string LayoutContainer => "relative flex w-full flex-col md:flex-row";
    public override string SkipLink => "sr-only";
    public override string Overlay => $"z-30 bg-surface/10 fixed inset-0 backdrop-blur-sm md:hidden dark:bg-surface/10";
    public override string Sidebar => $"fixed left-0 bottom-0 w-60 overflow-y-auto scrollbar-hover bg-surface-alt border-r border-outline z-40 p-4 transition-transform duration-300 md:w-60 md:translate-x-0";
    public override string MainContentContainer => $"md:pl-60 w-full bg-surface";
    public override string MainContentPadding => "p-4 md:p-6 lg:p-8";
    public override string FloatingToggleButton => $"z-50 fixed right-4 top-4 rounded-full bg-primary p-4 text-on-primary md:hidden";
    public override string GetSidebarTopCss(bool hasNavbar) => hasNavbar ? "top-16" : "top-0";
    public override string GetLayoutContainerTopCss(bool hasNavbar) => hasNavbar ? "mt-16" : ""; // Adjust based on standard navbar height (h-16)
    /// <inheritdoc/>
    // Use fixed width value corresponding to 'w-60'
    public override string GetSidebarTranslationCss(bool isVisible) => isVisible ? "translate-x-0" : "-translate-x-60";
}
public class DefaultRzSidebarLinkItemStyles : RzStylesBase.RzSidebarLinkItemStylesBase
{
    public DefaultRzSidebarLinkItemStyles(RzTheme theme) : base(theme)
    {
    }
    public override string CollapsibleListItem => ""; // No specific style on the LI itself usually
    /// <inheritdoc />
    public override string CollapsibleInnerDiv => "flex flex-col";
    public override string CollapsibleButton =>
        $"flex items-center justify-between rounded-borderRadius gap-2 px-2 py-1.5 text-sm font-medium underline-offset-2 focus:outline-none focus-visible:underline text-on-surface hover:bg-primary/5 hover:text-{Theme.Light.OnSurfaceStrong.TailwindClassName} dark:hover:text-{Theme.Dark.OnSurfaceStrong.TailwindClassName} dark:hover:bg-primary/5";
    public override string CollapsibleButtonIconContainer => "text-xl";
    public override string CollapsibleButtonTitle => "mr-auto text-left";
    public override string CollapsibleButtonTrailer => "ml-auto";
    public override string CollapsibleButtonChevron => "size-5 transition-transform shrink-0";
    public override string CollapsibleNestedList => ""; // No base style needed, relies on children LI styles
    /// <inheritdoc />
    public override string SubListItem =>
        $"border-l px-2 py-0.5 border-outline dark:border-outline transition duration-200 hover:border-l-2 hover:border-{Theme.Light.OutlineStrong.TailwindClassName} hover:text-{Theme.Light.OnSurfaceStrong.TailwindClassName} dark:hover:border-{Theme.Dark.OutlineStrong.TailwindClassName} dark:hover:text-{Theme.Dark.OnSurfaceStrong.TailwindClassName}";
    /// <inheritdoc />
    public override string SubLinkOrDiv =>
        $"flex items-center gap-2 px-2 py-1.5 text-sm rounded-borderRadius text-on-surface underline-offset-2 hover:bg-primary/5 hover:text-{Theme.Light.OnSurfaceStrong.TailwindClassName} focus-visible:underline focus:outline-none dark:hover:bg-primary/5 dark:hover:text-{Theme.Dark.OnSurfaceStrong.TailwindClassName}";
    /// <inheritdoc />
    public override string TopLevelListItem => "px-1 py-0.5 first:mt-2";
    public override string TopLevelNonCollapsibleDiv =>
        "flex items-center gap-2 px-2 py-1.5 text-sm font-medium text-on-surface underline-offset-2 rounded-borderRadius";
    public override string TopLevelLink =>
        $"flex items-center gap-2 px-2 py-1.5 text-sm font-medium text-on-surface underline-offset-2 hover:bg-primary/5 hover:text-{Theme.Light.OnSurfaceStrong.TailwindClassName} focus-visible:underline focus:outline-none dark:hover:bg-primary/5 dark:hover:text-{Theme.Dark.OnSurfaceStrong.TailwindClassName} rounded-borderRadius";
    public override string ItemIconContainer => "text-lg";
    public override string ItemTitle => ""; // Just a span
    /// <inheritdoc />
    public override string ItemTrailer => "ml-auto";
    public override string NonCollapsibleNestedList => "pl-4";
    public override string GetChevronRotationCss(bool isExpanded)
    {
        return isExpanded ? "rotate-180" : "rotate-0";
    }
}
public class DefaultRzSidebarLinksStyles : RzStylesBase.RzSidebarLinksStylesBase
{
    public DefaultRzSidebarLinksStyles(RzTheme theme) : base(theme)
    {
    }
    public override string List => "flex flex-col gap-2 pb-6";
}
</file>

<file path="Components/RzStep/RzSteps.razor">
@namespace RizzyUI
@using Blazicons
@inherits RzComponent

<HtmlElement Element="ol" @attributes="AdditionalAttributes" class="@RootClass()" aria-label="@AriaLabel">
	@* Cascading self allows child RzStep components to register *@
	<CascadingValue Value="this" IsFixed="true">
		@ChildContent
	</CascadingValue>

	@* Render registered steps *@
	@for (var i = 0; i < Items.Count; i++)
	{
		var step = Items[i];
		var isFirst = i == 0;
		var prevStep = isFirst ? null : Items[i - 1];

		<li class="@GetStepItemCss(isFirst)"
		    aria-label="@(string.IsNullOrEmpty(step.AriaLabel) ? step.Label : step.AriaLabel)">

			@* Render connector before every step except the first *@
			@if (!isFirst && prevStep != null)
			{
				<span class="@GetConnectorCss(prevStep)" aria-hidden="true"></span>
			}

			<div class="@StepContentContainerClass">
				@if (step.Status == StepStatus.Completed)
				{
					<span class="@CircleCompletedBaseClass @GetCircleCompletedVariantCss()">
						@if (step.Icon is not null)
						{
							<Blazicon Svg="step.Icon" class="@CircleCompletedIconClass"/>
						}
						else
						{
							<svg class="@CircleCompletedIconClass" xmlns="http://www.w3.org/2000/svg" fill="none"
							     viewBox="0 0 24 24" stroke-width="3" stroke="currentColor" aria-hidden="true">
								<path stroke-linecap="round" stroke-linejoin="round" d="m4.5 12.75 6 6 9-13.5"/>
							</svg>
							<span class="@CircleCompletedSrTextClass">completed</span>
						}
					</span>
				}
				else @* Current or Upcoming *@
				{
					<span class="@CircleDefaultBaseClass @GetCircleDefaultVariantCss(step.Status)">
						@if (step.Icon is not null)
						{
							<Blazicon Svg="step.Icon"
							          class="size-4"/> @* Assuming size-4 for icons in default circles *@
						}
						else
						{
							@(i + 1) @* Display step number *@
						}
					</span>
				}
				@if (ShowLabels && !string.IsNullOrEmpty(step.Label))
				{
					<span class="@LabelBaseClass @GetLabelVariantCss(step.Status)">@step.Label</span>
				}
			</div>
			@* Optional: Re-introduce caption if needed, using Theme styles *@
			@* @if (!string.IsNullOrEmpty(step.Caption))
               {
                   <span class="@CaptionClass">@step.Caption</span>
               } *@
		</li>
	}
</HtmlElement>
</file>

<file path="Components/RzStep/RzSteps.razor.cs">
using Microsoft.AspNetCore.Components;
using Microsoft.Extensions.Options;
using RizzyUI.Extensions;
namespace RizzyUI;
public partial class RzSteps : RzComponent
{
    [CascadingParameter]
    protected RzTheme? CascadedTheme { get; set; }
    [Inject]
    private IOptions<RizzyUIConfig>? Config { get; set; }
    protected RzTheme Theme { get; set; } = default!;
    [Parameter]
    public List<StepData> Items { get; set; } = new();
    [Parameter]
    public Orientation Orientation { get; set; } = Orientation.Horizontal;
    [Parameter]
    public bool ShowLabels { get; set; } = true;
    [Parameter]
    public string AriaLabel { get; set; } = "steps progress";
    [Parameter]
    public StatusColor ActiveColor { get; set; } = StatusColor.Primary;
    [Parameter]
    public RenderFragment? ChildContent { get; set; }
    protected string StepItemBaseClass => Theme.RzSteps.StepItem;
    protected string StepContentContainerClass => Theme.RzSteps.StepContentContainer;
    protected string CircleCompletedBaseClass => Theme.RzSteps.CircleCompletedBase;
    protected string CircleCompletedIconClass => Theme.RzSteps.CircleCompletedIcon;
    protected string CircleCompletedSrTextClass => Theme.RzSteps.CircleCompletedSrText;
    protected string CircleDefaultBaseClass => Theme.RzSteps.CircleDefaultBase;
    protected string LabelBaseClass => Theme.RzSteps.LabelBase;
    protected string CaptionClass => Theme.RzSteps.Caption;
    protected override void OnInitialized()
    {
        base.OnInitialized();
        Theme = CascadedTheme ?? Config?.Value.DefaultTheme ?? RzTheme.Default;
        if (Theme == null)
            throw new InvalidOperationException(
                $"{GetType()} requires a cascading RzTheme or a default theme configured.");
    }
    protected override string? RootClass()
    {
        return TwMerge.Merge(AdditionalAttributes, Theme.RzSteps.Container,
            Theme.RzSteps.GetOrientationCss(Orientation));
    }
    internal void RegisterStep(StepData data)
    {
        if (!Items.Exists(i => i.Label == data.Label))
        {
            Items.Add(data);
            StateHasChanged();
        }
    }
    protected string GetStepItemCss(bool isFirst)
    {
        return $"{StepItemBaseClass} {Theme.RzSteps.GetStepItemWidthCss(isFirst)}";
    }
    protected string GetConnectorCss(StepData previousStep)
    {
        return Theme.RzSteps.GetConnectorCss(Orientation, previousStep.Status, ActiveColor);
    }
    protected string GetCircleCompletedVariantCss()
    {
        return Theme.RzSteps.GetCircleCompletedCss(ActiveColor);
    }
    protected string GetCircleDefaultVariantCss(StepStatus status)
    {
        return Theme.RzSteps.GetCircleDefaultCss(status, ActiveColor);
    }
    protected string GetLabelVariantCss(StepStatus status)
    {
        return Theme.RzSteps.GetLabelStatusCss(status, ActiveColor);
    }
    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender && ChildContent != null)
        {
        }
        base.OnAfterRender(firstRender);
    }
}
</file>

<file path="Components/RzStep/StepData.cs">
using Blazicons;
namespace RizzyUI;
public record StepData
{
	public string Label { get; init; }
	public StepStatus Status { get; init; }
	public string? AriaLabel { get; init; }
	public string? Caption { get; init; }
	public SvgIcon? Icon { get; init; }
	public StepData(string label, StepStatus status, string? ariaLabel, string? caption, SvgIcon? icon)
	{
		Label = label;
		Status = status;
		AriaLabel = ariaLabel;
		Caption = caption;
		Icon = icon;
	}
}
</file>

<file path="Components/RzStep/StepStatus.cs">
namespace RizzyUI;
public enum StepStatus
{
	Completed,
	Current,
	Upcoming
}
</file>

<file path="Components/RzStep/Styling/DefaultRzStepsStyles.cs">
namespace RizzyUI;
public class DefaultRzStepsStyles : RzStylesBase.RzStepsStylesBase
{
    public DefaultRzStepsStyles(RzTheme theme) : base(theme)
    {
    }
    public override string Container => "flex gap-2";
    public override string StepItem => "flex items-center relative text-sm";
    public override string ConnectorBase => ""; // Base connector, specific styles added by GetConnectorCss
    /// <inheritdoc />
    public override string StepContentContainer => "flex items-center gap-2";
    public override string CircleCompletedBase =>
        "flex size-6 items-center justify-center rounded-full border";
    public override string CircleCompletedIcon => "size-4";
    public override string CircleCompletedSrText => "sr-only";
    public override string CircleDefaultBase =>
        "flex size-6 shrink-0 items-center justify-center rounded-full border";
    public override string LabelBase => "hidden w-max sm:inline";
    public override string Caption =>
        $"text-xs text-on-surface-muted";
    public override string GetOrientationCss(Orientation orientation)
    {
        return orientation switch
        {
            Orientation.Horizontal => "w-full items-center",
            Orientation.Vertical => "w-min flex-col gap-14",
            _ => GetOrientationCss(Orientation.Horizontal)
        };
    }
    public override string GetStepItemWidthCss(bool isFirst)
    {
        return isFirst ? "" : "w-full";
    }
    public override string GetConnectorCss(Orientation orientation, StepStatus previousStatus, StatusColor activeColor)
    {
        var isActive = previousStatus == StepStatus.Completed || previousStatus == StepStatus.Current;
        var colorClass = isActive ? GetActiveBackgroundClass(activeColor) : "bg-outline";
        var positionAndSize = orientation == Orientation.Vertical
            ? "absolute bottom-8 left-3 h-10 w-0.5"
            : "h-0.5 flex-1 mr-1";
        return $"{positionAndSize} {colorClass}";
    }
    public override string GetCircleCompletedCss(StatusColor activeColor)
    {
        return
            $"{GetActiveBorderClass(activeColor)} {GetActiveBackgroundClass(activeColor)} {GetActiveTextClass(activeColor)}";
    }
    public override string GetCircleDefaultCss(StepStatus status, StatusColor activeColor)
    {
        return status switch
        {
            StepStatus.Current =>
                $"border {GetActiveBorderClass(activeColor)} {GetActiveBackgroundClass(activeColor)} font-bold {GetActiveTextClass(activeColor)} outline outline-2 outline-offset-2 outline-{activeColor.ToString().ToLowerInvariant()} dark:outline-{activeColor.ToString().ToLowerInvariant()}",
            StepStatus.Upcoming => "border border-outline bg-surface-alt font-medium text-on-surface",
            _ => GetCircleDefaultCss(StepStatus.Upcoming, activeColor)
        };
    }
    public override string GetLabelStatusCss(StepStatus status, StatusColor activeColor)
    {
        return status switch
        {
            StepStatus.Completed =>
                $"text-{activeColor.ToString().ToLowerInvariant()} dark:text-{activeColor.ToString().ToLowerInvariant()}",
            StepStatus.Current =>
                $"font-bold text-{activeColor.ToString().ToLowerInvariant()} dark:text-{activeColor.ToString().ToLowerInvariant()}",
            StepStatus.Upcoming => "text-on-surface",
            _ => GetLabelStatusCss(StepStatus.Upcoming, activeColor)
        };
    }
    private string GetActiveBackgroundClass(StatusColor color)
    {
        return color switch
        {
            StatusColor.Primary => "bg-primary",
            StatusColor.Secondary => "bg-secondary",
            StatusColor.Success => $"bg-success dark:bg-success",
            StatusColor.Info => $"bg-info dark:bg-info",
            StatusColor.Warning => $"bg-warning dark:bg-warning",
            StatusColor.Danger => $"bg-danger dark:bg-danger",
            _ => GetActiveBackgroundClass(StatusColor.Primary)
        };
    }
    private string GetActiveBorderClass(StatusColor color)
    {
        return color switch
        {
            StatusColor.Primary => "border-primary",
            StatusColor.Secondary => "border-secondary",
            StatusColor.Success =>
                $"border-success dark:border-success",
            StatusColor.Info => $"border-info dark:border-info",
            StatusColor.Warning =>
                $"border-warning dark:border-warning",
            StatusColor.Danger =>
                $"border-danger dark:border-danger",
            _ => GetActiveBorderClass(StatusColor.Primary)
        };
    }
    private string GetActiveTextClass(StatusColor color)
    {
        return color switch
        {
            StatusColor.Primary => "text-on-primary",
            StatusColor.Secondary => "text-on-secondary",
            StatusColor.Success =>
                $"text-on-success dark:text-on-success",
            StatusColor.Info => $"text-on-info dark:text-on-info",
            StatusColor.Warning =>
                $"text-on-warning dark:text-on-warning",
            StatusColor.Danger =>
                $"text-on-danger dark:text-on-danger",
            _ => GetActiveTextClass(StatusColor.Primary)
        };
    }
}
</file>

<file path="Components/RzTab/RzTab.razor">
@inherits RzComponent
@namespace RizzyUI

<button
    id="@TabId"
    data-name="@NameLower"
    data-selectedtextcolor="@SelectedTextColorClass" @* Pass selected color to Alpine *@
    x-on:click="tabButtonClicked"
    x-on:keydown="handleKeyDown"
    type="button"
    role="tab"
    :aria-selected="tabButtonActive"
    tabindex="0" @* Managed by Alpine for focus *@
    aria-controls="@PanelId"
    @attributes="AdditionalAttributes"
    class="@RootClass()"
    :class="selectedTabTextColor"> @* Alpine applies selected text color *@
    @ChildContent
</button>
</file>

<file path="Components/RzTab/RzTab.razor.cs">
using Microsoft.AspNetCore.Components;
using Microsoft.Extensions.Options;
using RizzyUI.Extensions;
namespace RizzyUI;
public partial class RzTab : RzComponent
{
    [CascadingParameter]
    protected RzTheme? CascadedTheme { get; set; }
    [CascadingParameter]
    private RzTabs? Parent { get; set; }
    [CascadingParameter]
    private RzTabStrip? TabStrip { get; set; }
    [Inject]
    private IOptions<RizzyUIConfig>? Config { get; set; }
    protected RzTheme Theme { get; set; } = default!;
    [Parameter]
    [EditorRequired]
    public required string Name { get; set; } = default!;
    [Parameter]
    public RenderFragment? ChildContent { get; set; }
    protected string NameLower => Name?.ToLowerInvariant() ?? string.Empty;
    protected string TabId => $"{NameLower}-tab";
    protected string PanelId => $"{NameLower}-panel";
    protected string SelectedTextColorClass =>
        Parent?.SelectedTabTextColor.ToTextClass() ?? Theme.Light.Primary.ToCssClassString("text");
    protected override void OnInitialized()
    {
        base.OnInitialized();
        Theme = CascadedTheme ?? Config?.Value.DefaultTheme ?? RzTheme.Default;
        if (Theme == null)
            throw new InvalidOperationException(
                $"{GetType()} requires a cascading RzTheme or a default theme configured.");
        if (Parent == null)
            throw new InvalidOperationException($"{GetType()} must exist within an RzTabs component.");
        if (TabStrip == null)
            throw new InvalidOperationException($"{GetType()} must exist within an RzTabStrip component.");
        Parent.AddTab(this);
    }
    protected override string? RootClass()
    {
        var styles = Theme.RzTab;
        return TwMerge.Merge(AdditionalAttributes,
            styles.Button,
            styles.GetBackgroundColorCss(Parent?.TabBackgroundColor ?? SemanticColor.Surface),
            styles.GetTextColorCss(Parent?.TabTextColor ?? SemanticColor.OnSurface),
            styles.GetJustifyCss(TabStrip?.Justify ?? Justify.Center)
        );
    }
}
</file>

<file path="Components/RzTab/RzTabPanel.razor">
@inherits RzComponent
@namespace RizzyUI

<div
    id="@PanelId"
    data-name="@NameLower"
    x-show="tabContentActive"
    role="tabpanel"
    aria-labelledby="@TabId"
    tabindex="0" @* Managed by Alpine? Check accessibility needs *@
    class="@OuterContainerClass"
    x-cloak
>
    <div @attributes="AdditionalAttributes" class="@InnerContainerClass @TextColorClass">
        @ChildContent
    </div>
</div>
</file>

<file path="Components/RzTab/RzTabPanel.razor.cs">
using Microsoft.AspNetCore.Components;
using Microsoft.Extensions.Options;
using RizzyUI.Extensions;
namespace RizzyUI;
public partial class RzTabPanel : RzComponent
{
    [CascadingParameter]
    protected RzTheme? CascadedTheme { get; set; }
    [CascadingParameter]
    private RzTabs? Parent { get; set; }
    [Inject]
    private IOptions<RizzyUIConfig>? Config { get; set; }
    protected RzTheme Theme { get; set; } = default!;
    [Parameter]
    [EditorRequired]
    public string Name { get; set; } = default!;
    [Parameter]
    public RenderFragment? ChildContent { get; set; }
    protected string NameLower => Name?.ToLowerInvariant() ?? string.Empty;
    protected string TabId => $"{NameLower}-tab";
    protected string PanelId => $"{NameLower}-panel";
    protected string OuterContainerClass => Theme.RzTabPanel.OuterContainer;
    protected string InnerContainerClass => Theme.RzTabPanel.InnerContainer;
    protected string TextColorClass =>
        Theme.RzTabPanel.GetTextColorCss(Parent?.TabTextColor ?? SemanticColor.OnSurface);
    protected override void OnInitialized()
    {
        base.OnInitialized();
        Theme = CascadedTheme ?? Config?.Value.DefaultTheme ?? RzTheme.Default;
        if (Theme == null)
            throw new InvalidOperationException(
                $"{GetType()} requires a cascading RzTheme or a default theme configured.");
        if (Parent == null)
            throw new InvalidOperationException($"{GetType()} must exist within an RzTabs component.");
    }
    protected override string? RootClass()
    {
        return TwMerge.Merge(AdditionalAttributes, InnerContainerClass, TextColorClass);
    }
}
</file>

<file path="Components/RzTab/RzTabs.razor">
@inherits RzComponent
@namespace RizzyUI

<CascadingValue Value="this" IsFixed="true">
    <div
        data-tabselected="@ActiveTabNameLower"
        data-buttonref="@ButtonRefId"
        x-data="rzTabs"
        x-on:resize.window="handleResize"
        @attributes="AdditionalAttributes"
        class="@RootClass()"
    >
        @Menu

        <div class="@PanelsContainerClass">
            @TabPanels
        </div>
    </div>
</CascadingValue>
</file>

<file path="Components/RzTab/RzTabs.razor.cs">
using Microsoft.AspNetCore.Components;
using Microsoft.Extensions.Options;
using Rizzy.Utility;
using RizzyUI.Extensions;
namespace RizzyUI;
public partial class RzTabs : RzComponent
{
    internal List<RzTab> _tabs = new();
    [CascadingParameter]
    protected RzTheme? CascadedTheme { get; set; }
    [Inject]
    private IOptions<RizzyUIConfig>? Config { get; set; }
    protected RzTheme Theme { get; set; } = default!;
    internal string ButtonRefId { get; } = IdGenerator.UniqueId("rztabBtns");
    [Parameter]
    public string SelectedTabName { get; set; } = string.Empty;
    [Parameter]
    public SemanticColor TabTextColor { get; set; } = SemanticColor.OnSurface;
    [Parameter]
    public SemanticColor SelectedTabTextColor { get; set; } = SemanticColor.Primary;
    [Parameter]
    public SemanticColor SelectedTabUnderlineColor { get; set; } = SemanticColor.Primary;
    [Parameter]
    public SemanticColor TabBackgroundColor { get; set; } = SemanticColor.Surface;
    [Parameter]
    [EditorRequired]
    public required RenderFragment Menu { get; set; } = default!;
    [Parameter]
    [EditorRequired]
    public required RenderFragment TabPanels { get; set; } = default!;
    public RzTab? ActiveTab { get; private set; }
    protected string ActiveTabNameLower => ActiveTab?.Name?.ToLowerInvariant() ?? string.Empty;
    protected string PanelsContainerClass => Theme.RzTabs.PanelsContainer;
    protected override void OnInitialized()
    {
        base.OnInitialized();
        Theme = CascadedTheme ?? Config?.Value.DefaultTheme ?? RzTheme.Default;
        if (Theme == null)
            throw new InvalidOperationException(
                $"{GetType()} requires a cascading RzTheme or a default theme configured.");
    }
    protected override string? RootClass()
    {
        return TwMerge.Merge(AdditionalAttributes, Theme.RzTabs.Container);
    }
    internal void AddTab(RzTab tab)
    {
        if (!_tabs.Contains(tab))
        {
            _tabs.Add(tab);
            if (ActiveTab == null && (_tabs.Count == 1 || string.IsNullOrEmpty(SelectedTabName)))
                ActiveTab = tab;
            else if (!string.IsNullOrEmpty(SelectedTabName) &&
                     tab.Name.Equals(SelectedTabName, StringComparison.OrdinalIgnoreCase)) ActiveTab = tab;
            StateHasChanged();
        }
    }
}
</file>

<file path="Components/RzTab/RzTabStrip.razor">
@inherits RzComponent
@namespace RizzyUI

<CascadingValue Value="this" IsFixed="true">
    <div id="@Parent?.ButtonRefId"
         role="tablist"
         @attributes="AdditionalAttributes"
         class="@RootClass()">
        @ChildContent
        @* The selection marker, positioned by Alpine *@
        <div x-ref="tabMarker" class="@MarkerClass @MarkerAfterBackgroundClass" x-cloak>
            <div class="@MarkerInnerClass"></div>
        </div>
    </div>
</CascadingValue>
</file>

<file path="Components/RzTab/RzTabStrip.razor.cs">
using Microsoft.AspNetCore.Components;
using Microsoft.Extensions.Options;
using RizzyUI.Extensions;
namespace RizzyUI;
public partial class RzTabStrip : RzComponent
{
    [CascadingParameter]
    protected RzTheme? CascadedTheme { get; set; }
    [CascadingParameter]
    private RzTabs? Parent { get; set; }
    [Inject]
    private IOptions<RizzyUIConfig>? Config { get; set; }
    protected RzTheme Theme { get; set; } = default!;
    [Parameter]
    public Justify Justify { get; set; } = Justify.Center;
    [Parameter]
    public Size SpaceBetween { get; set; } = Size.Medium;
    [Parameter]
    public RenderFragment? ChildContent { get; set; }
    protected string MarkerClass => Theme.RzTabStrip.Marker;
    protected string MarkerAfterBackgroundClass => Parent != null
        ? Theme.RzTabStrip.GetMarkerAfterBackgroundCss(Parent.SelectedTabUnderlineColor)
        : "";
    /// <summary> Gets the computed CSS classes for the inner div within the marker. </summary>
    protected string MarkerInnerClass => Theme.RzTabStrip.MarkerInner;
    /// <inheritdoc />
    protected override void OnInitialized()
    {
        base.OnInitialized();
        Theme = CascadedTheme ?? Config?.Value.DefaultTheme ?? RzTheme.Default;
        if (Theme == null)
            throw new InvalidOperationException(
                $"{GetType()} requires a cascading RzTheme or a default theme configured.");
        if (Parent == null)
            throw new InvalidOperationException($"{GetType()} must exist within an RzTabs component.");
    }
    /// <inheritdoc />
    protected override string? RootClass()
    {
        var styles = Theme.RzTabStrip;
        return TwMerge.Merge(AdditionalAttributes,
            styles.Strip,
            Parent?._tabs != null ? styles.GetColumnsCss(Parent._tabs.Count) : "grid-cols-1",
            styles.GetGapCss(SpaceBetween),
            Parent?.TabTextColor.ToTextClass() ?? ""
        );
    }
}
</file>

<file path="Components/RzTab/Styling/DefaultRzTabStyles.cs">
namespace RizzyUI;
public class DefaultRzTabsStyles : RzStylesBase.RzTabsStylesBase
{
    public DefaultRzTabsStyles(RzTheme theme) : base(theme)
    {
    }
    public override string Container => ""; // Base container usually has no style
    /// <inheritdoc />
    public override string PanelsContainer => ""; // Container for panels usually has no specific style
}
/// <summary> Provides default styles for RzTabStrip. </summary>
public class DefaultRzTabStripStyles : RzStylesBase.RzTabStripStylesBase // Not sealed
{
    public DefaultRzTabStripStyles(RzTheme theme) : base(theme)
    {
    }
    /// <inheritdoc />
    public override string Strip => "relative inline-grid select-none items-center";
    public override string Marker =>
        "z-20 opacity-0 absolute pointer-events-none left-0 h-full w-1/2 duration-300 ease-out after:absolute after:left-0 after:bottom-0 after:h-0.5 after:w-full";
    public override string MarkerInner => "h-full w-full";
    public override string GetColumnsCss(int tabCount)
    {
        return tabCount switch
        {
            1 => "grid-cols-1", 2 => "grid-cols-2", 3 => "grid-cols-3", 4 => "grid-cols-4",
            5 => "grid-cols-5", 6 => "grid-cols-6", 7 => "grid-cols-7", 8 => "grid-cols-8",
            9 => "grid-cols-9", 10 => "grid-cols-10", 11 => "grid-cols-11", 12 => "grid-cols-12",
            _ => "grid-cols-1"
        };
    }
    public override string GetGapCss(Size spaceBetween)
    {
        return spaceBetween switch
        {
            Size.ExtraSmall => "gap-0", Size.Small => "gap-1", Size.Medium => "gap-2",
            Size.Large => "gap-3", Size.ExtraLarge => "gap-4",
            _ => GetGapCss(Size.Medium)
        };
    }
    public override string GetMarkerAfterBackgroundCss(SemanticColor color)
    {
        return color.ToBackgroundClass("after");
    }
}
public class DefaultRzTabStyles : RzStylesBase.RzTabStylesBase
{
    public DefaultRzTabStyles(RzTheme theme) : base(theme)
    {
    }
    public override string Button =>
        "z-10 relative inline-flex h-8 px-2 w-full cursor-pointer items-center whitespace-nowrap rounded-borderRadius rounded-b-none font-medium transition-all mr-1";
    public override string GetJustifyCss(Justify justify)
    {
        return justify switch
        {
            Justify.Start => "justify-start", Justify.Center => "justify-center", Justify.End => "justify-end",
            _ => GetJustifyCss(Justify.Center)
        };
    }
    public override string GetTextColorCss(SemanticColor color)
    {
        return color.ToTextClass();
    }
    public override string GetBackgroundColorCss(SemanticColor color)
    {
        return color.ToBackgroundClass();
    }
}
public class DefaultRzTabPanelStyles : RzStylesBase.RzTabPanelStylesBase
{
    public DefaultRzTabPanelStyles(RzTheme theme) : base(theme)
    {
    }
    public override string OuterContainer => "relative";
    public override string InnerContainer => "";
    public override string GetTextColorCss(SemanticColor color)
    {
        return color.ToTextClass();
    }
}
</file>

<file path="Components/RzText/RzTextEdit.razor">
@namespace RizzyUI
@using Blazicons
@using Rizzy
@inherits InputBase<string>

<div class="@InputWrapperClass" x-data="rzPrependInput">
    @if (!string.IsNullOrEmpty(PrependText) || PrependIcon != null)
    {
        <div x-ref="prependContainer" class="@PrependElementClass">
            @if (!string.IsNullOrEmpty(PrependText))
            {
                @PrependText
            }
            else if (PrependIcon != null) // Ensure PrependIcon is not null before rendering
            {
                <div class="@PrependIconContainerClass">
                    <Blazicon Svg="PrependIcon"/>
                </div>
            }
        </div>
    }
    <RzInputText x-ref="textInput" @ref="_elem" type="@_role" Value="@_value" ValueExpression="For"
                 placeholder="@_placeholder" @attributes="AdditionalAttributes" class="@InputClass"/>
</div>
</file>

<file path="Components/RzText/RzTextEdit.razor.cs">
using Blazicons;
using Microsoft.AspNetCore.Components;
using Microsoft.AspNetCore.Components.Forms;
using Microsoft.Extensions.Options;
using RizzyUI.Extensions;
namespace RizzyUI;
public partial class RzTextEdit : InputBase<string>
{
    private RzInputText? _elem;
    private string _placeholder = string.Empty;
    private string _role = "text";
    private string _value = string.Empty;
    [CascadingParameter]
    protected RzTheme? CascadedTheme { get; set; }
    [CascadingParameter]
    public EditContext? EditContext { get; set; }
    [Inject]
    private IOptions<RizzyUIConfig>? Config { get; set; }
    protected RzTheme Theme { get; set; } = default!;
    [Parameter]
    public TextRole Role { get; set; } = TextRole.Text;
    [Parameter]
    public string Placeholder { get; set; } = string.Empty;
    [Parameter]
    public string? PrependText { get; set; }
    [Parameter]
    public SvgIcon? PrependIcon { get; set; }
    public string Id => _elem?.Id ?? string.Empty;
    protected string InputWrapperClass => Theme.RzTextEdit.InputWrapper;
    protected string PrependElementClass => Theme.RzTextEdit.PrependElement;
    protected string PrependIconContainerClass => Theme.RzTextEdit.PrependIconContainer;
    protected string InputClass => Theme.RzTextEdit.Input;
    protected override void OnInitialized()
    {
        base.OnInitialized();
        Theme = CascadedTheme ?? Config?.Value.DefaultTheme ?? RzTheme.Default;
        if (Theme == null)
            throw new InvalidOperationException(
                $"{GetType()} requires a cascading RzTheme or a default theme configured.");
        if (For == null)
            throw new InvalidOperationException($"{GetType()} requires a value for the 'For' parameter.");
        if (EditContext == null)
            throw new InvalidOperationException($"{GetType()} must be used within an EditForm.");
    }
    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        _role = GetParameterValue("type", Role.ToString().ToLowerInvariant());
        _placeholder =
            GetParameterValue("placeholder", Placeholder);
        _value = For!.Compile().Invoke();
        if (!string.IsNullOrEmpty(PrependText) && PrependIcon != null)
            throw new InvalidOperationException(
                $"{nameof(PrependText)} and {nameof(PrependIcon)} cannot both be set at the same time.");
    }
    protected override string? RootClass()
    {
        return TwMerge.Merge(AdditionalAttributes, InputClass);
    }
}
</file>

<file path="Components/RzText/RzTextField.razor">
@namespace RizzyUI
@inherits RzComponent

@* Use the RzField component for the overall structure *@
<RzField class="@RootClass()">
    <RzFieldLabel DisplayName="@DisplayName" For="@For" Required="Required"/>
    @* Pass Role, Placeholder, PrependIcon, PrependText, and AdditionalAttributes down to RzTextEdit *@
    <RzTextEdit For="@For"
                Role="@Role"
                Placeholder="@Placeholder"
                PrependIcon="@PrependIcon"
                PrependText="@PrependText"
                @attributes="AdditionalAttributes"/>
    @if (FieldHelp != null)
    {
        <RzFieldHelp>@FieldHelp</RzFieldHelp>
    }
    <RzValidationMessage For="@For"/>
</RzField>
</file>

<file path="Components/RzText/RzTextField.razor.cs">
using System.Linq.Expressions;
using Blazicons;
using Microsoft.AspNetCore.Components;
using Microsoft.AspNetCore.Components.Forms;
using Microsoft.Extensions.Options;
using RizzyUI.Extensions;
namespace RizzyUI;
public partial class RzTextField : RzComponent
{
    [CascadingParameter]
    protected RzTheme? CascadedTheme { get; set; }
    [CascadingParameter]
    private EditContext? EditContext { get; set; }
    [Inject]
    private IOptions<RizzyUIConfig>? Config { get; set; }
    protected RzTheme Theme { get; set; } = default!;
    [Parameter]
    public TextRole Role { get; set; } = TextRole.Text;
    [Parameter]
    public string Placeholder { get; set; } = string.Empty;
    [Parameter]
    public string? DisplayName { get; set; }
    [Parameter]
    public bool Required { get; set; }
    [Parameter]
    public RenderFragment? FieldHelp { get; set; }
    [Parameter]
    [EditorRequired]
    public Expression<Func<string>>? For { get; set; }
    [Parameter]
    public string? PrependText { get; set; }
    [Parameter]
    public SvgIcon? PrependIcon { get; set; }
    protected override void OnInitialized()
    {
        base.OnInitialized();
        Theme = CascadedTheme ?? Config?.Value.DefaultTheme ?? RzTheme.Default;
        if (Theme == null)
            throw new InvalidOperationException(
                $"{GetType()} requires a cascading RzTheme or a default theme configured.");
        if (For == null)
            throw new InvalidOperationException($"{GetType()} requires a value for the 'For' parameter.");
        if (EditContext == null)
            throw new InvalidOperationException($"{GetType()} must be used within an EditForm.");
    }
    protected override string? RootClass()
    {
        return TwMerge.Merge(AdditionalAttributes);
    }
}
</file>

<file path="Components/RzText/Styling/DefaultRzTextStyles.cs">
namespace RizzyUI;
public class DefaultRzTextEditStyles : RzStylesBase.RzTextEditStylesBase
{
    public DefaultRzTextEditStyles(RzTheme theme) : base(theme)
    {
    }
    public override string InputWrapper => "relative";
    public override string PrependElement =>
        $"pointer-events-none absolute inset-y-0 left-0 my-px ml-px flex items-center rounded-l-borderRadius border-r border-outline bg-surface-alt px-3 text-on-surface dark:border-outline dark:bg-surface-alt dark:text-on-surface";
    public override string PrependIconContainer => "text-xl";
    public override string Input =>
        "block w-full rounded-borderRadius border border-outline px-3 py-2 leading-6 placeholder-on-surface-muted focus:border-primary focus:ring focus:ring-primary/50 dark:border-outline dark:bg-surface-alt dark:placeholder-on-surface-muted dark:focus:border-primary transition-opacity text-transparent";
}
public class DefaultRzTextFieldStyles : RzStylesBase.RzTextFieldStylesBase
{
    public DefaultRzTextFieldStyles(RzTheme theme) : base(theme)
    {
    }
    public override string Field => "";
}
</file>

<file path="Components/RzToggle/RzToggle.razor">
@namespace RizzyUI
@inherits RzComponent

<RzInputCheckbox ValueExpression="@For"
                 Value="CurrentValue" 
                 @attributes="AdditionalAttributes"
                 class="@RootClass()"
                 role="switch"
                 tabindex="0"
                 aria-checked="@AriaCheckedValue"/>
</file>

<file path="Components/RzToggle/RzToggle.razor.cs">
using System.Linq.Expressions;
using Microsoft.AspNetCore.Components;
using Microsoft.AspNetCore.Components.Forms;
using Microsoft.Extensions.Options;
using RizzyUI.Extensions;
namespace RizzyUI;
public partial class RzToggle : RzComponent
{
    private bool _currentValue;
    private FieldIdentifier _fieldIdentifier;
    [CascadingParameter]
    protected RzTheme? CascadedTheme { get; set; }
    [CascadingParameter]
    private EditContext? EditContext { get; set; }
    [Inject]
    private IOptions<RizzyUIConfig>? Config { get; set; }
    protected RzTheme Theme { get; set; } = default!;
    [Parameter]
    public bool? Value { get; set; }
    [Parameter]
    public EventCallback<bool> ValueChanged { get; set; }
    [Parameter]
    [EditorRequired]
    public Expression<Func<bool>>? For { get; set; }
    protected bool CurrentValue
    {
        get => _currentValue;
        set
        {
            if (_currentValue != value)
            {
                _currentValue = value;
                InvokeAsync(async () =>
                {
                    Value = _currentValue;
                    await ValueChanged.InvokeAsync(_currentValue);
                    EditContext?.NotifyFieldChanged(_fieldIdentifier);
                });
            }
        }
    }
    protected string AriaCheckedValue => CurrentValue ? "true" : "false";
    protected override void OnInitialized()
    {
        base.OnInitialized();
        Theme = CascadedTheme ?? Config?.Value.DefaultTheme ?? RzTheme.Default;
        if (Theme == null)
            throw new InvalidOperationException(
                $"{GetType()} requires a cascading RzTheme or a default theme configured.");
        if (For == null)
            throw new InvalidOperationException($"{GetType()} requires a value for the 'For' parameter.");
        if (EditContext == null)
            throw new InvalidOperationException($"{GetType()} must be used within an EditForm.");
        _fieldIdentifier = FieldIdentifier.Create(For);
        _currentValue = Value ?? For.Compile().Invoke();
    }
    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        var newValue = Value ?? For?.Compile().Invoke() ?? false;
        if (_currentValue != newValue) _currentValue = newValue;
    }
    protected override string? RootClass()
    {
        return TwMerge.Merge(AdditionalAttributes, Theme.RzToggle.Toggle);
    }
}
</file>

<file path="Components/RzToggle/RzToggleField.razor">
@namespace RizzyUI
@inherits RzComponent

<RzField class="@RootClass()">
	<div class="@ContentWrapperClass">
		<div class="@InnerWrapperClass">
			<RzFieldLabel DisplayName="@DisplayName" For="@For" class="@LabelInFieldClass">
				@if (Description != null)
				{
					<span class="@DescriptionInLabelClass">
						@Description
					</span>
				}
			</RzFieldLabel>

			@* Pass Value, For, ValueChanged, and AdditionalAttributes down *@
			<RzToggle For="@For" @bind-Value="CurrentValue" class="@ToggleInFieldClass"
			          @attributes="AdditionalAttributes"/>
		</div>
	</div>
	@* Validation message outside the inner flex container *@
	<RzValidationMessage For="@For"/>
</RzField>
</file>

<file path="Components/RzToggle/RzToggleField.razor.cs">
using System.Linq.Expressions;
using Microsoft.AspNetCore.Components;
using Microsoft.AspNetCore.Components.Forms;
using Microsoft.Extensions.Options;
using RizzyUI.Extensions;
namespace RizzyUI;
public partial class RzToggleField : RzComponent
{
    private bool _currentValue;
    private FieldIdentifier _fieldIdentifier;
    [CascadingParameter]
    protected RzTheme? CascadedTheme { get; set; }
    [CascadingParameter]
    private EditContext? EditContext { get; set; }
    [Inject]
    private IOptions<RizzyUIConfig>? Config { get; set; }
    protected RzTheme Theme { get; set; } = default!;
    [Parameter]
    public string? DisplayName { get; set; }
    [Parameter]
    public RenderFragment? Description { get; set; }
    [Parameter]
    [EditorRequired]
    public Expression<Func<bool>>? For { get; set; }
    [Parameter]
    public bool? Value { get; set; }
    [Parameter]
    public EventCallback<bool> ValueChanged { get; set; }
    protected bool CurrentValue
    {
        get => _currentValue;
        set
        {
            if (_currentValue != value)
            {
                _currentValue = value;
                InvokeAsync(async () =>
                {
                    Value = _currentValue;
                    await ValueChanged.InvokeAsync(_currentValue);
                    EditContext?.NotifyFieldChanged(_fieldIdentifier);
                });
            }
        }
    }
    protected string ContentWrapperClass => Theme.RzToggleField.ContentWrapper;
    protected string InnerWrapperClass => Theme.RzToggleField.InnerWrapper;
    protected string LabelInFieldClass => Theme.RzToggleField.LabelInField;
    protected string ToggleInFieldClass => Theme.RzToggleField.ToggleInField;
    protected string DescriptionInLabelClass => Theme.RzToggleField.DescriptionInLabel;
    protected override void OnInitialized()
    {
        base.OnInitialized();
        Theme = CascadedTheme ?? Config?.Value.DefaultTheme ?? RzTheme.Default;
        if (Theme == null)
            throw new InvalidOperationException(
                $"{GetType()} requires a cascading RzTheme or a default theme configured.");
        if (For == null)
            throw new InvalidOperationException($"{GetType()} requires a value for the 'For' parameter.");
        if (EditContext == null)
            throw new InvalidOperationException($"{GetType()} must be used within an EditForm.");
        _fieldIdentifier = FieldIdentifier.Create(For);
        _currentValue = Value ?? For.Compile().Invoke();
    }
    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        var newValue = Value ?? For?.Compile().Invoke() ?? false;
        if (_currentValue != newValue) _currentValue = newValue;
    }
    protected override string? RootClass()
    {
        return TwMerge.Merge(AdditionalAttributes);
    }
}
</file>

<file path="Components/RzToggle/Styling/DefaultRzToggleStyles.cs">
namespace RizzyUI;
public class DefaultRzToggleStyles : RzStylesBase.RzToggleStylesBase
{
    public DefaultRzToggleStyles(RzTheme theme) : base(theme)
    {
    }
    public override string Toggle =>
        $"relative w-[3.25rem] h-7 p-px bg-outline border-transparent text-transparent rounded-full cursor-pointer transition-colors ease-in-out duration-200 focus:ring-primary disabled:opacity-50 disabled:pointer-events-none checked:bg-none checked:bg-primary checked:text-primary checked:border-primary focus:checked:border-primary dark:checked:bg-primary dark:checked:border-primary dark:focus:ring-offset-{Theme.Dark.Surface.TailwindClassName} before:inline-block before:size-6 before:bg-on-primary checked:before:bg-on-primary before:translate-x-0 checked:before:translate-x-full before:rounded-full before:shadow before:transform before:ring-0 before:transition before:ease-in-out before:duration-200 dark:before:bg-{Theme.Dark.OnPrimary.TailwindClassName} dark:checked:before:bg-{Theme.Dark.OnPrimary.TailwindClassName}";
}
public class DefaultRzToggleFieldStyles : RzStylesBase.RzToggleFieldStylesBase
{
    public DefaultRzToggleFieldStyles(RzTheme theme) : base(theme)
    {
    }
    public override string Field => ""; // Handled by RzField
    /// <inheritdoc />
    public override string ContentWrapper => "space-x-2";
    public override string InnerWrapper => "flex items-center justify-between space-x-3";
    public override string LabelInField =>
        "font-medium leading-relaxed";
    public override string ToggleInField => ""; // No specific adjustment needed for the toggle itself usually
    /// <inheritdoc />
    public override string DescriptionInLabel => "block text-sm text-on-surface";
}
</file>

<file path="Components/RzTypography/RzHeading.razor">
@namespace RizzyUI
@inherits RzTypographyBase

<HtmlElement Element="@Element" @attributes="@AdditionalAttributes" id="@Id" class="@RootClass()"
             x-data="rzHeading"> @* Alpine data remains if needed for interaction *@
    @if (ChildContent == null && !string.IsNullOrEmpty(QuickReferenceTitle))
    {
        @QuickReferenceTitle @* Render QR title if no children provided *@
    }
    else
    {
        @ChildContent
    }
</HtmlElement>
</file>

<file path="Components/RzTypography/RzHeading.razor.cs">
using Microsoft.AspNetCore.Components;
using Rizzy.Utility;
using RizzyUI.Extensions;
namespace RizzyUI;
public partial class RzHeading : RzTypographyBase
{
    private bool _registered;
    [Parameter]
    [EditorRequired]
    public required HeadingLevel Level { get; set; }
    [Parameter]
    public RenderFragment? ChildContent { get; set; }
    [Parameter]
    public string? QuickReferenceTitle { get; set; }
    [CascadingParameter]
    private RzQuickReferenceContainer? QuickReferenceContainer { get; set; }
    public string Id { get; } = IdGenerator.UniqueId("rzheading");
    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        Element = Level switch
        {
            HeadingLevel.H1 => "h1", HeadingLevel.H2 => "h2",
            HeadingLevel.H3 => "h3", HeadingLevel.H4 => "h4",
            _ => "h1"
        };
        if (TextColor is null)
            TextColor = Level is HeadingLevel.H1 or HeadingLevel.H2
                ? SemanticColor.OnSurfaceStrong
                : SemanticColor.OnSurface;
        if (!_registered && QuickReferenceContainer != null && !string.IsNullOrEmpty(QuickReferenceTitle))
        {
            QuickReferenceContainer.RegisterHeading(Level, QuickReferenceTitle, Id);
            _registered = true;
        }
    }
    protected override string? RootClass()
    {
        var headingStyles = Theme.RzHeading;
        return TwMerge.Merge(AdditionalAttributes,
            GetTypographyBaseCss(),
            headingStyles.GetLevelCss(Level)
        );
    }
}
</file>

<file path="Components/RzTypography/RzParagraph.razor.cs">
using Microsoft.AspNetCore.Components;
using RizzyUI.Extensions;
namespace RizzyUI;
public class RzParagraph : RzTypographyBase
{
    [Parameter]
    public RenderFragment? ChildContent { get; set; }
    [Parameter]
    public ProseWidth ProseWidth { get; set; } = ProseWidth.Full;
    protected override void OnInitialized()
    {
        base.OnInitialized();
        Element = "p";
        TextColor ??= SemanticColor.OnSurface;
    }
    protected override string? RootClass()
    {
        var styles = Theme.RzParagraph;
        return TwMerge.Merge(AdditionalAttributes,
            styles.Paragraph,
            GetTypographyBaseCss(),
            styles.GetProseWidthCss(ProseWidth)
        );
    }
}
</file>

<file path="Components/RzTypography/RzTypographyBase.razor.cs">
using Microsoft.AspNetCore.Components;
using Microsoft.Extensions.Options;
namespace RizzyUI;
public abstract class RzTypographyBase : RzComponent
{
    [CascadingParameter]
    protected RzTheme? CascadedTheme { get; set; }
    [Inject]
    private IOptions<RizzyUIConfig>? Config { get; set; }
    protected RzTheme Theme { get; set; } = default!;
    [Parameter]
    public SemanticColor? TextColor { get; set; }
    [Parameter]
    public TextWeight? Weight { get; set; }
    [Parameter]
    public TextSize? Size { get; set; }
    [Parameter]
    public Leading? LineHeight { get; set; }
    [Parameter]
    public TextDecoration? Decoration { get; set; }
    [Parameter]
    public TextTransform? Transform { get; set; }
    protected override void OnInitialized()
    {
        base.OnInitialized();
        Theme = CascadedTheme ?? Config?.Value.DefaultTheme ?? RzTheme.Default;
        if (Theme == null)
            throw new InvalidOperationException(
                $"{GetType()} requires a cascading RzTheme or a default theme configured.");
    }
    protected virtual string GetTypographyBaseCss()
    {
        return Theme.RzTypography.GetBaseCss(TextColor, Weight, Size, LineHeight, Decoration, Transform);
    }
}
</file>

<file path="Components/RzTypography/Styling/DefaultRzTypographyStyles.cs">
namespace RizzyUI;
public class DefaultRzTypographyStyles : RzStylesBase.RzTypographyStylesBase
{
    public DefaultRzTypographyStyles(RzTheme theme) : base(theme)
    {
    }
    public override string GetTextWeightCss(TextWeight? weight)
    {
        return weight switch
        {
            TextWeight.Thin => "font-thin", TextWeight.Normal => "font-normal",
            TextWeight.Bold => "font-bold", TextWeight.ExtraBold => "font-extrabold",
            _ => ""
        };
    }
    /// <inheritdoc />
    public override string GetTextSizeCss(TextSize? size)
    {
        return size switch
        {
            TextSize.Small => "text-sm", TextSize.Medium => "text-base", TextSize.Large => "text-lg",
            TextSize.ExtraLarge => "text-xl", TextSize.TwoXL => "text-2xl", TextSize.ThreeXL => "text-3xl",
            TextSize.FourXL => "text-4xl", TextSize.FiveXL => "text-5xl",
            _ => ""
        };
    }
    /// <inheritdoc />
    public override string GetTextTransformCss(TextTransform? transform)
    {
        return transform switch
        {
            TextTransform.None => "normal-case", TextTransform.Uppercase => "uppercase",
            TextTransform.Lowercase => "lowercase", TextTransform.Capitalize => "capitalize",
            _ => ""
        };
    }
    /// <inheritdoc />
    public override string GetTextDecorationCss(TextDecoration? decoration)
    {
        return decoration switch
        {
            TextDecoration.None => "no-underline", TextDecoration.Underline => "underline",
            TextDecoration.Overline => "overline", TextDecoration.LineThrough => "line-through",
            _ => ""
        };
    }
    /// <inheritdoc />
    public override string GetLineHeightCss(Leading? leading)
    {
        return leading switch
        {
            Leading.None => "leading-none", Leading.Tight => "leading-tight", Leading.Snug => "leading-snug",
            Leading.Normal => "leading-normal", Leading.Relaxed => "leading-relaxed", Leading.Loose => "leading-loose",
            _ => ""
        };
    }
    /// <inheritdoc />
    public override string GetBaseCss(SemanticColor? textColor, TextWeight? weight, TextSize? size, Leading? lineHeight,
        TextDecoration? decoration, TextTransform? transform)
    {
        // Combine all individual style parts
        return
            $"{textColor?.ToTextClass() ?? ""} {GetTextWeightCss(weight)} {GetTextSizeCss(size)} {GetLineHeightCss(lineHeight)} {GetTextDecorationCss(decoration)} {GetTextTransformCss(transform)}"
                .Trim();
    }
}
public class DefaultRzHeadingStyles : RzStylesBase.RzHeadingStylesBase
{
    public DefaultRzHeadingStyles(RzTheme theme) : base(theme)
    {
    }
    public override string GetLevelCss(HeadingLevel level)
    {
        return level switch
        {
            HeadingLevel.H1 => "mb-5 text-xl sm:text-2xl md:text-3xl lg:text-4xl font-bold",
            HeadingLevel.H2 => "mb-4 text-lg sm:text-xl md:text-2xl lg:text-3xl font-semibold",
            HeadingLevel.H3 => "mb-3 text-base sm:text-lg md:text-xl lg:text-2xl font-medium",
            HeadingLevel.H4 => "mb-2 text-base sm:text-lg md:text-xl lg:text-2xl font-normal",
            _ => GetLevelCss(HeadingLevel.H1)
        };
    }
}
public class DefaultRzParagraphStyles : RzStylesBase.RzParagraphStylesBase
{
    public DefaultRzParagraphStyles(RzTheme theme) : base(theme)
    {
    }
    public override string Paragraph => "my-4 leading-relaxed";
    public override string GetProseWidthCss(ProseWidth width)
    {
        return width switch
        {
            ProseWidth.Compact => "max-w-prose prose-compact",
            ProseWidth.Comfortable => "max-w-prose prose-comfortable",
            ProseWidth.Relaxed => "max-w-prose prose-relaxed",
            ProseWidth.Wide => "max-w-prose prose-wide",
            ProseWidth.UltraWide => "max-w-prose prose-ultrawide",
            ProseWidth.Full => "max-w-none",
            _ => GetProseWidthCss(ProseWidth.Full)
        };
    }
}
</file>

<file path="Components/Theme/RizzyThemeProvider.cs">
using System.Text;
using Microsoft.AspNetCore.Components;
using Microsoft.AspNetCore.Components.Rendering;
using Microsoft.AspNetCore.Components.Web;
using Microsoft.Extensions.Options;
using Rizzy.Htmx;
namespace RizzyUI;
public class RizzyThemeProvider : ComponentBase
{
    [Inject] private IOptions<RizzyUIConfig>? RizzyConfig { get; set; }
    [Inject]
    protected IRizzyNonceProvider RizzyNonceProvider { get; set; } = default!;
    [Parameter]
    public RzTheme? Theme { get; set; }
    protected override void BuildRenderTree(RenderTreeBuilder builder)
    {
        var actualTheme = Theme ?? RizzyConfig?.Value.DefaultTheme ?? RzTheme.Default;
        var css = GenerateRootVariables(actualTheme);
        builder.AddMarkupContent(1, $"<style nonce=\"{RizzyNonceProvider.GetNonce()}\">{css}</style>");
        builder.AddMarkupContent(2, $@"<script nonce=""{RizzyNonceProvider.GetNonce()}"">
		    const storedMode = localStorage.getItem('darkMode') ?? 'auto';
		    const prefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches;
		    document.documentElement.classList.toggle('dark', storedMode === 'dark' || (storedMode === 'auto' && prefersDark));
        </script>");
    }
    private string GenerateRootVariables(RzTheme theme)
    {
        var sb = new StringBuilder();
        sb.AppendLine(":root {");
        sb.AppendLine($"--color-surface: {theme.Light.Surface.ToCssColorString()};");
        sb.AppendLine($"--color-on-surface: {theme.Light.OnSurface.ToCssColorString()};");
        sb.AppendLine($"--color-on-surface-strong: {theme.Light.OnSurfaceStrong.ToCssColorString()};");
        sb.AppendLine($"--color-on-surface-muted: {theme.Light.OnSurfaceMuted.ToCssColorString()};");
        sb.AppendLine($"--color-surface-alt: {theme.Light.SurfaceAlt.ToCssColorString()};");
        sb.AppendLine($"--color-surface-tertiary: {theme.Light.SurfaceTertiary.ToCssColorString()};");
        sb.AppendLine($"--color-on-surface-tertiary: {theme.Light.OnSurfaceTertiary.ToCssColorString()};");
        sb.AppendLine($"--color-primary: {theme.Light.Primary.ToCssColorString()};");
        sb.AppendLine($"--color-on-primary: {theme.Light.OnPrimary.ToCssColorString()};");
        sb.AppendLine($"--color-secondary: {theme.Light.Secondary.ToCssColorString()};");
        sb.AppendLine($"--color-on-secondary: {theme.Light.OnSecondary.ToCssColorString()};");
        sb.AppendLine($"--color-outline: {theme.Light.Outline.ToCssColorString()};");
        sb.AppendLine($"--color-outline-strong: {theme.Light.OutlineStrong.ToCssColorString()};");
        sb.AppendLine($"--color-danger: {theme.Danger.ToCssColorString()};");
        sb.AppendLine($"--color-on-danger: {theme.OnDanger.ToCssColorString()};");
        sb.AppendLine($"--color-info: {theme.Info.ToCssColorString()};");
        sb.AppendLine($"--color-onInfo: {theme.OnInfo.ToCssColorString()};");
        sb.AppendLine($"--color-warning: {theme.Warning.ToCssColorString()};");
        sb.AppendLine($"--color-on-warning: {theme.OnWarning.ToCssColorString()};");
        sb.AppendLine($"--color-success: {theme.Success.ToCssColorString()};");
        sb.AppendLine($"--color-on-success: {theme.OnSuccess.ToCssColorString()};");
        sb.AppendLine($"--borderWidth: {theme.BorderWidth};");
        sb.AppendLine($"--borderRadius: {theme.BorderRadius};");
        sb.AppendLine($"--highlight-bg: {theme.Light.Code.Background.ToCssColorString()};");
        sb.AppendLine($"--highlight-color: {theme.Light.Code.Color.ToCssColorString()};");
        sb.AppendLine($"--highlight-comment: {theme.Light.Code.Comment.ToCssColorString()};");
        sb.AppendLine($"--highlight-keyword: {theme.Light.Code.Keyword.ToCssColorString()};");
        sb.AppendLine($"--highlight-attribute: {theme.Light.Code.Attribute.ToCssColorString()};");
        sb.AppendLine($"--highlight-symbol: {theme.Light.Code.Symbol.ToCssColorString()};");
        sb.AppendLine($"--highlight-namespace: {theme.Light.Code.Namespace.ToCssColorString()};");
        sb.AppendLine($"--highlight-variable: {theme.Light.Code.Variable.ToCssColorString()};");
        sb.AppendLine($"--highlight-literal: {theme.Light.Code.Literal.ToCssColorString()};");
        sb.AppendLine($"--highlight-punctuation: {theme.Light.Code.Punctuation.ToCssColorString()};");
        sb.AppendLine($"--highlight-deletion: {theme.Light.Code.Deletion.ToCssColorString()};");
        sb.AppendLine($"--highlight-addition: {theme.Light.Code.Addition.ToCssColorString()};");
        sb.AppendLine(".prose {");
        sb.AppendLine("--tw-prose-code: var(--highlight-color);");
        sb.AppendLine("--tw-prose-pre-code: var(--highlight-color);");
        sb.AppendLine("--tw-prose-pre-bg: var(--highlight-bg)");
        sb.AppendLine("}");
        sb.AppendLine("&:where(.dark, .dark *) {");
        sb.AppendLine($"--color-surface: {theme.Dark.Surface.ToCssColorString()};");
        sb.AppendLine($"--color-on-surface: {theme.Dark.OnSurface.ToCssColorString()};");
        sb.AppendLine($"--color-on-surface-strong: {theme.Dark.OnSurfaceStrong.ToCssColorString()};");
        sb.AppendLine($"--color-on-surface-muted: {theme.Dark.OnSurfaceMuted.ToCssColorString()};");
        sb.AppendLine($"--color-surface-alt: {theme.Dark.SurfaceAlt.ToCssColorString()};");
        sb.AppendLine($"--color-surface-tertiary: {theme.Dark.SurfaceTertiary.ToCssColorString()};");
        sb.AppendLine($"--color-on-surface-tertiary: {theme.Dark.OnSurfaceTertiary.ToCssColorString()};");
        sb.AppendLine($"--color-primary: {theme.Dark.Primary.ToCssColorString()};");
        sb.AppendLine($"--color-on-primary: {theme.Dark.OnPrimary.ToCssColorString()};");
        sb.AppendLine($"--color-secondary: {theme.Dark.Secondary.ToCssColorString()};");
        sb.AppendLine($"--color-on-secondary: {theme.Dark.OnSecondary.ToCssColorString()};");
        sb.AppendLine($"--color-outline: {theme.Dark.Outline.ToCssColorString()};");
        sb.AppendLine($"--color-outline-strong: {theme.Dark.OutlineStrong.ToCssColorString()};");
        sb.AppendLine($"--highlight-bg: {theme.Dark.Code.Background.ToCssColorString()};");
        sb.AppendLine($"--highlight-color: {theme.Dark.Code.Color.ToCssColorString()};");
        sb.AppendLine($"--highlight-comment: {theme.Dark.Code.Comment.ToCssColorString()};");
        sb.AppendLine($"--highlight-keyword: {theme.Dark.Code.Keyword.ToCssColorString()};");
        sb.AppendLine($"--highlight-attribute: {theme.Dark.Code.Attribute.ToCssColorString()};");
        sb.AppendLine($"--highlight-symbol: {theme.Dark.Code.Symbol.ToCssColorString()};");
        sb.AppendLine($"--highlight-namespace: {theme.Dark.Code.Namespace.ToCssColorString()};");
        sb.AppendLine($"--highlight-variable: {theme.Dark.Code.Variable.ToCssColorString()};");
        sb.AppendLine($"--highlight-literal: {theme.Dark.Code.Literal.ToCssColorString()};");
        sb.AppendLine($"--highlight-punctuation: {theme.Dark.Code.Punctuation.ToCssColorString()};");
        sb.AppendLine($"--highlight-deletion: {theme.Dark.Code.Deletion.ToCssColorString()};");
        sb.AppendLine($"--highlight-addition: {theme.Dark.Code.Addition.ToCssColorString()};");
        sb.AppendLine("}");
        sb.AppendLine("}");
        return sb.ToString();
    }
}
</file>

<file path="Components/Theme/Themes/ArcticTheme.cs">
namespace RizzyUI;
public class ArcticTheme : RzTheme
{
    public ArcticTheme() : base("Arctic", "arctic")
    {
        Light = new RzThemeVariant
        {
            Surface = Colors.White,
            OnSurface = Colors.Slate.L700,
            OnSurfaceStrong = Colors.Black,
            OnSurfaceMuted = Colors.Neutral.L500,
            SurfaceAlt = Colors.Slate.L100,
            SurfaceTertiary = Colors.Slate.L200,
            OnSurfaceTertiary = Colors.Slate.L600,
            Primary = Colors.Blue.L700,
            OnPrimary = Colors.Slate.L100,
            Secondary = Colors.Indigo.L700,
            OnSecondary = Colors.Slate.L100,
            Outline = Colors.Slate.L300,
            OutlineStrong = Colors.Slate.L800,
            Code = CodeThemes.Github
        };
        Dark = new RzThemeVariant
        {
            Surface = Colors.Slate.L900,
            OnSurface = Colors.Slate.L300,
            OnSurfaceStrong = Colors.White,
            OnSurfaceMuted = Colors.Neutral.L500,
            SurfaceAlt = Colors.Slate.L800,
            SurfaceTertiary = Colors.Slate.L700,
            OnSurfaceTertiary = Colors.Slate.L300,
            Primary = Colors.Blue.L600,
            OnPrimary = Colors.Slate.L100,
            Secondary = Colors.Indigo.L600,
            OnSecondary = Colors.Slate.L100,
            Outline = Colors.Slate.L700,
            OutlineStrong = Colors.Slate.L300,
            Code = CodeThemes.DefaultDark
        };
        Danger = Colors.Red.L600;
        OnDanger = Colors.White;
        Info = Colors.Sky.L600;
        OnInfo = Colors.White;
        Warning = Colors.Amber.L500;
        OnWarning = Colors.White;
        Success = Colors.Green.L600;
        OnSuccess = Colors.White;
        BorderWidth = "1px";
        BorderRadius = "6px";
    }
}
</file>

<file path="Components/Theme/Themes/Code/CodeThemes.cs">
#pragma warning disable CS1591
namespace RizzyUI;
public static class CodeThemes
{
    public static RizzyCodeTheme Apathy { get; } = new("#031A16", "#81B5AC", "#2B685E", "#4C963E", "#3E7996", "#96883E",
        "#3E9688", "#883E96", "#963E4C", "#81B5AC", "#3E9688", "#883E96");
    public static RizzyCodeTheme Ashes { get; } = new("#1C2023", "#C7CCD1", "#747C84", "#C795AE", "#C7C795", "#AE95C7",
        "#C7AE95", "#95C7AE", "#95AEC7", "#C7CCD1", "#C7AE95", "#95C7AE");
    public static RizzyCodeTheme AtelierCaveLight { get; } = new("#efecf4", "#585260", "#7e7887", "#955ae7", "#aa573c",
        "#576ddb", "#be4678", "#2a9292", "#398bc6", "#585260", "#be4678", "#2a9292");
    public static RizzyCodeTheme AtelierCave { get; } = new("#19171c", "#8b8792", "#655f6d", "#955ae7", "#aa573c",
        "#576ddb", "#be4678", "#2a9292", "#398bc6", "#8b8792", "#be4678", "#2a9292");
    public static RizzyCodeTheme AtelierDuneLight { get; } = new("#fefbec", "#6e6b5e", "#999580", "#b854d4", "#b65611",
        "#6684e1", "#d73737", "#60ac39", "#1fad83", "#6e6b5e", "#d73737", "#60ac39");
    public static RizzyCodeTheme AtelierDune { get; } = new("#20201d", "#a6a28c", "#7d7a68", "#b854d4", "#b65611",
        "#6684e1", "#d73737", "#60ac39", "#1fad83", "#a6a28c", "#d73737", "#60ac39");
    public static RizzyCodeTheme AtelierEstuaryLight { get; } = new("#f4f3ec", "#5f5e4e", "#878573", "#5f9182",
        "#ae7313", "#36a166", "#ba6236", "#7d9726", "#5b9d48", "#5f5e4e", "#ba6236", "#7d9726");
    public static RizzyCodeTheme AtelierEstuary { get; } = new("#22221b", "#929181", "#6c6b5a", "#5f9182", "#ae7313",
        "#36a166", "#ba6236", "#7d9726", "#5b9d48", "#929181", "#ba6236", "#7d9726");
    public static RizzyCodeTheme AtelierForestLight { get; } = new("#f1efee", "#68615e", "#9c9491", "#6666ea",
        "#df5320", "#407ee7", "#f22c40", "#7b9726", "#3d97b8", "#68615e", "#f22c40", "#7b9726");
    public static RizzyCodeTheme AtelierForest { get; } = new("#1b1918", "#a8a19f", "#766e6b", "#6666ea", "#df5320",
        "#407ee7", "#f22c40", "#7b9726", "#3d97b8", "#a8a19f", "#f22c40", "#7b9726");
    public static RizzyCodeTheme AtelierHeathLight { get; } = new("#f7f3f7", "#695d69", "#9e8f9e", "#7b59c0", "#a65926",
        "#516aec", "#ca402b", "#918b3b", "#159393", "#695d69", "#ca402b", "#918b3b");
    public static RizzyCodeTheme AtelierHeath { get; } = new("#1b181b", "#ab9bab", "#776977", "#7b59c0", "#a65926",
        "#516aec", "#ca402b", "#918b3b", "#159393", "#ab9bab", "#ca402b", "#918b3b");
    public static RizzyCodeTheme AtelierLakesideLight { get; } = new("#ebf8ff", "#516d7b", "#7195a8", "#6b6bb8",
        "#935c25", "#257fad", "#d22d72", "#568c3b", "#2d8f6f", "#516d7b", "#d22d72", "#568c3b");
    public static RizzyCodeTheme AtelierLakeside { get; } = new("#161b1d", "#7ea2b4", "#5a7b8c", "#6b6bb8", "#935c25",
        "#257fad", "#d22d72", "#568c3b", "#2d8f6f", "#7ea2b4", "#d22d72", "#568c3b");
    public static RizzyCodeTheme AtelierPlateauLight { get; } = new("#f4ecec", "#585050", "#7e7777", "#8464c4",
        "#b45a3c", "#7272ca", "#ca4949", "#4b8b8b", "#5485b6", "#585050", "#ca4949", "#4b8b8b");
    public static RizzyCodeTheme AtelierPlateau { get; } = new("#1b1818", "#8a8585", "#655d5d", "#8464c4", "#b45a3c",
        "#7272ca", "#ca4949", "#4b8b8b", "#5485b6", "#8a8585", "#ca4949", "#4b8b8b");
    public static RizzyCodeTheme AtelierSavannaLight { get; } = new("#ecf4ee", "#526057", "#78877d", "#55859b",
        "#9f713c", "#478c90", "#b16139", "#489963", "#1c9aa0", "#526057", "#b16139", "#489963");
    public static RizzyCodeTheme AtelierSavanna { get; } = new("#171c19", "#87928a", "#5f6d64", "#55859b", "#9f713c",
        "#478c90", "#b16139", "#489963", "#1c9aa0", "#87928a", "#b16139", "#489963");
    public static RizzyCodeTheme AtelierSeasideLight { get; } = new("#f4fbf4", "#5e6e5e", "#809980", "#ad2bee",
        "#87711d", "#3d62f5", "#e6193c", "#29a329", "#1999b3", "#5e6e5e", "#e6193c", "#29a329");
    public static RizzyCodeTheme AtelierSeaside { get; } = new("#131513", "#8ca68c", "#687d68", "#ad2bee", "#87711d",
        "#3d62f5", "#e6193c", "#29a329", "#1999b3", "#8ca68c", "#e6193c", "#29a329");
    public static RizzyCodeTheme AtelierSulphurpoolLight { get; } = new("#f5f7ff", "#5e6687", "#898ea4", "#6679cc",
        "#c76b29", "#3d8fd1", "#c94922", "#ac9739", "#22a2c9", "#5e6687", "#c94922", "#ac9739");
    public static RizzyCodeTheme AtelierSulphurpool { get; } = new("#202746", "#979db4", "#6b7394", "#6679cc",
        "#c76b29", "#3d8fd1", "#c94922", "#ac9739", "#22a2c9", "#979db4", "#c94922", "#ac9739");
    public static RizzyCodeTheme Bespin { get; } = new("#28211c", "#8a8986", "#666666", "#9b859d", "#cf7d34", "#5ea6ea",
        "#cf6a4c", "#54be0d", "#afc4db", "#8a8986", "#cf6a4c", "#54be0d");
    public static RizzyCodeTheme Brewer { get; } = new("#0c0d0e", "#b7b8b9", "#737475", "#756bb1", "#e6550d", "#3182bd",
        "#e31a1c", "#31a354", "#80b1d3", "#b7b8b9", "#e31a1c", "#31a354");
    public static RizzyCodeTheme Bright { get; } = new("#000000", "#e0e0e0", "#b0b0b0", "#d381c3", "#fc6d24", "#6fb3d2",
        "#fb0120", "#a1c659", "#76c7b7", "#e0e0e0", "#fb0120", "#a1c659");
    public static RizzyCodeTheme BrushtreesDark { get; } = new("#485867", "#B0C5C8", "#8299A1", "#b386b2", "#d8bba2",
        "#868cb3", "#b38686", "#87b386", "#86b3b3", "#B0C5C8", "#b38686", "#87b386");
    public static RizzyCodeTheme Brushtrees { get; } = new("#E3EFEF", "#6D828E", "#98AFB5", "#b386b2", "#d8bba2",
        "#868cb3", "#b38686", "#87b386", "#86b3b3", "#6D828E", "#b38686", "#87b386");
    public static RizzyCodeTheme Chalk { get; } = new("#151515", "#d0d0d0", "#505050", "#e1a3ee", "#eda987", "#6fc2ef",
        "#fb9fb1", "#acc267", "#12cfc0", "#d0d0d0", "#fb9fb1", "#acc267");
    public static RizzyCodeTheme Circus { get; } = new("#191919", "#a7a7a7", "#5f5a60", "#b888e2", "#4bb1a7", "#639ee4",
        "#dc657d", "#84b97c", "#4bb1a7", "#a7a7a7", "#dc657d", "#84b97c");
    public static RizzyCodeTheme ClassicDark { get; } = new("#151515", "#D0D0D0", "#505050", "#AA759F", "#D28445",
        "#6A9FB5", "#AC4142", "#90A959", "#75B5AA", "#D0D0D0", "#AC4142", "#90A959");
    public static RizzyCodeTheme ClassicLight { get; } = new("#F5F5F5", "#303030", "#B0B0B0", "#AA759F", "#D28445",
        "#6A9FB5", "#AC4142", "#90A959", "#75B5AA", "#303030", "#AC4142", "#90A959");
    public static RizzyCodeTheme Codeschool { get; } = new("#232c31", "#9ea7a6", "#3f4944", "#c59820", "#43820d",
        "#484d79", "#2a5491", "#237986", "#b02f30", "#9ea7a6", "#2a5491", "#237986");
    public static RizzyCodeTheme Cupcake { get; } = new("#fbf1f2", "#8b8198", "#bfb9c6", "#BB99B4", "#EBB790",
        "#7297B9", "#D57E85", "#A3B367", "#69A9A7", "#8b8198", "#D57E85", "#A3B367");
    public static RizzyCodeTheme Cupertino { get; } = new("#5e5e5e", "#c0c0c0", "#808080", "#a90d91", "#eb8500",
        "#0000ff", "#c41a15", "#007400", "#318495", "#c0c0c0", "#c41a15", "#007400");
    public static RizzyCodeTheme Darktooth { get; } = new("#1D2021", "#A89984", "#665C54", "#8F4673", "#FE8625",
        "#0D6678", "#FB543F", "#95C085", "#8BA59B", "#A89984", "#FB543F", "#95C085");
    public static RizzyCodeTheme DefaultDark { get; } = new("#181818", "#d8d8d8", "#585858", "#ba8baf", "#dc9656",
        "#7cafc2", "#ab4642", "#a1b56c", "#86c1b9", "#d8d8d8", "#ab4642", "#a1b56c");
    public static RizzyCodeTheme DefaultLight { get; } = new("#f8f8f8", "#383838", "#b8b8b8", "#ba8baf", "#dc9656",
        "#7cafc2", "#ab4642", "#a1b56c", "#86c1b9", "#383838", "#ab4642", "#a1b56c");
    public static RizzyCodeTheme Dracula { get; } = new("#282936", "#e9e9f4", "#4d4f68", "#b45bcf", "#b45bcf",
        "#62d6e8", "#ea51b2", "#00f769", "#a1efe4", "#e9e9f4", "#ea51b2", "#00f769");
    public static RizzyCodeTheme Eighties { get; } = new("#2d2d2d", "#d3d0c8", "#747369", "#cc99cc", "#f99157",
        "#6699cc", "#f2777a", "#99cc99", "#66cccc", "#d3d0c8", "#f2777a", "#99cc99");
    public static RizzyCodeTheme Embers { get; } = new("#16130F", "#A39A90", "#5A5047", "#82576D", "#828257", "#6D5782",
        "#826D57", "#57826D", "#576D82", "#A39A90", "#826D57", "#57826D");
    public static RizzyCodeTheme Flat { get; } = new("#2C3E50", "#e0e0e0", "#95A5A6", "#9B59B6", "#E67E22", "#3498DB",
        "#E74C3C", "#2ECC71", "#1ABC9C", "#e0e0e0", "#E74C3C", "#2ECC71");
    public static RizzyCodeTheme Github { get; } = new("#ffffff", "#333333", "#969896", "#a71d5d", "#0086b3", "#795da3",
        "#ed6a43", "#183691", "#183691", "#333333", "#ed6a43", "#183691");
    public static RizzyCodeTheme GoogleDark { get; } = new("#1d1f21", "#c5c8c6", "#969896", "#A36AC7", "#F96A38",
        "#3971ED", "#CC342B", "#198844", "#3971ED", "#c5c8c6", "#CC342B", "#198844");
    public static RizzyCodeTheme GoogleLight { get; } = new("#ffffff", "#373b41", "#b4b7b4", "#A36AC7", "#F96A38",
        "#3971ED", "#CC342B", "#198844", "#3971ED", "#373b41", "#CC342B", "#198844");
    public static RizzyCodeTheme GrayscaleDark { get; } = new("#101010", "#b9b9b9", "#525252", "#747474", "#999999",
        "#686868", "#7c7c7c", "#8e8e8e", "#868686", "#b9b9b9", "#7c7c7c", "#8e8e8e");
    public static RizzyCodeTheme GrayscaleLight { get; } = new("#f7f7f7", "#464646", "#ababab", "#747474", "#999999",
        "#686868", "#7c7c7c", "#8e8e8e", "#868686", "#464646", "#7c7c7c", "#8e8e8e");
    public static RizzyCodeTheme Greenscreen { get; } = new("#001100", "#00bb00", "#007700", "#00bb00", "#009900",
        "#009900", "#007700", "#00bb00", "#005500", "#00bb00", "#007700", "#00bb00");
    public static RizzyCodeTheme GruvboxDarkHard { get; } = new("#1d2021", "#d5c4a1", "#665c54", "#d3869b", "#fe8019",
        "#83a598", "#fb4934", "#b8bb26", "#8ec07c", "#d5c4a1", "#fb4934", "#b8bb26");
    public static RizzyCodeTheme GruvboxDarkMedium { get; } = new("#282828", "#d5c4a1", "#665c54", "#d3869b", "#fe8019",
        "#83a598", "#fb4934", "#b8bb26", "#8ec07c", "#d5c4a1", "#fb4934", "#b8bb26");
    public static RizzyCodeTheme GruvboxDarkPale { get; } = new("#262626", "#dab997", "#8a8a8a", "#d485ad", "#ff8700",
        "#83adad", "#d75f5f", "#afaf00", "#85ad85", "#dab997", "#d75f5f", "#afaf00");
    public static RizzyCodeTheme GruvboxDarkSoft { get; } = new("#32302f", "#d5c4a1", "#665c54", "#d3869b", "#fe8019",
        "#83a598", "#fb4934", "#b8bb26", "#8ec07c", "#d5c4a1", "#fb4934", "#b8bb26");
    public static RizzyCodeTheme GruvboxLightHard { get; } = new("#f9f5d7", "#504945", "#bdae93", "#8f3f71", "#af3a03",
        "#076678", "#9d0006", "#79740e", "#427b58", "#504945", "#9d0006", "#79740e");
    public static RizzyCodeTheme GruvboxLightMedium { get; } = new("#fbf1c7", "#504945", "#bdae93", "#8f3f71",
        "#af3a03", "#076678", "#9d0006", "#79740e", "#427b58", "#504945", "#9d0006", "#79740e");
    public static RizzyCodeTheme GruvboxLightSoft { get; } = new("#f2e5bc", "#504945", "#bdae93", "#8f3f71", "#af3a03",
        "#076678", "#9d0006", "#79740e", "#427b58", "#504945", "#9d0006", "#79740e");
    public static RizzyCodeTheme HarmonicDark { get; } = new("#0b1c2c", "#cbd6e2", "#627e99", "#bf568b", "#bfbf56",
        "#8b56bf", "#bf8b56", "#56bf8b", "#568bbf", "#cbd6e2", "#bf8b56", "#56bf8b");
    public static RizzyCodeTheme HarmonicLight { get; } = new("#f7f9fb", "#405c79", "#aabcce", "#bf568b", "#bfbf56",
        "#8b56bf", "#bf8b56", "#56bf8b", "#568bbf", "#405c79", "#bf8b56", "#56bf8b");
    public static RizzyCodeTheme Hopscotch { get; } = new("#322931", "#b9b5b8", "#797379", "#c85e7c", "#fd8b19",
        "#1290bf", "#dd464c", "#8fc13e", "#149b93", "#b9b5b8", "#dd464c", "#8fc13e");
    public static RizzyCodeTheme IaDark { get; } = new("#1a1a1a", "#cccccc", "#767676", "#b98eb2", "#d86868", "#8eccdd",
        "#d88568", "#83a471", "#7c9cae", "#cccccc", "#d88568", "#83a471");
    public static RizzyCodeTheme IaLight { get; } = new("#f6f6f6", "#181818", "#898989", "#a94598", "#c43e18",
        "#48bac2", "#9c5a02", "#38781c", "#2d6bb1", "#181818", "#9c5a02", "#38781c");
    public static RizzyCodeTheme Icy { get; } = new("#021012", "#095b67", "#052e34", "#00acc1", "#b3ebf2", "#00bcd4",
        "#16c1d9", "#4dd0e1", "#26c6da", "#095b67", "#16c1d9", "#4dd0e1");
    public static RizzyCodeTheme Irblack { get; } = new("#000000", "#b5b3aa", "#6c6c66", "#ff73fd", "#e9c062",
        "#96cbfe", "#ff6c60", "#a8ff60", "#c6c5fe", "#b5b3aa", "#ff6c60", "#a8ff60");
    public static RizzyCodeTheme Isotope { get; } = new("#000000", "#d0d0d0", "#808080", "#cc00ff", "#ff9900",
        "#0066ff", "#ff0000", "#33ff00", "#00ffff", "#d0d0d0", "#ff0000", "#33ff00");
    public static RizzyCodeTheme Macintosh { get; } = new("#000000", "#c0c0c0", "#808080", "#4700a5", "#ff6403",
        "#0000d3", "#dd0907", "#1fb714", "#02abea", "#c0c0c0", "#dd0907", "#1fb714");
    public static RizzyCodeTheme Marrakesh { get; } = new("#201602", "#948e48", "#6c6823", "#8868b3", "#b36144",
        "#477ca1", "#c35359", "#18974e", "#75a738", "#948e48", "#c35359", "#18974e");
    public static RizzyCodeTheme Materia { get; } = new("#263238", "#CDD3DE", "#707880", "#82AAFF", "#EA9560",
        "#89DDFF", "#EC5F67", "#8BD649", "#80CBC4", "#CDD3DE", "#EC5F67", "#8BD649");
    public static RizzyCodeTheme MaterialDarker { get; } = new("#212121", "#EEFFFF", "#4A4A4A", "#C792EA", "#F78C6C",
        "#82AAFF", "#F07178", "#C3E88D", "#89DDFF", "#EEFFFF", "#F07178", "#C3E88D");
    public static RizzyCodeTheme MaterialLighter { get; } = new("#FAFAFA", "#80CBC4", "#CCD7DA", "#7C4DFF", "#F76D47",
        "#6182B8", "#FF5370", "#91B859", "#39ADB5", "#80CBC4", "#FF5370", "#91B859");
    public static RizzyCodeTheme MaterialPalenight { get; } = new("#292D3E", "#959DCB", "#676E95", "#C792EA", "#F78C6C",
        "#82AAFF", "#F07178", "#C3E88D", "#89DDFF", "#959DCB", "#F07178", "#C3E88D");
    public static RizzyCodeTheme MaterialVivid { get; } = new("#263238", "#B0BEC5", "#546E7A", "#651FFF", "#FF9100",
        "#2979FF", "#FF1744", "#00E676", "#00B0FF", "#B0BEC5", "#FF1744", "#00E676");
    public static RizzyCodeTheme Material { get; } = new("#263238", "#EEFFFF", "#546E7A", "#C792EA", "#F78C6C",
        "#82AAFF", "#F07178", "#C3E88D", "#89DDFF", "#EEFFFF", "#F07178", "#C3E88D");
    public static RizzyCodeTheme MellowPurple { get; } = new("#1e0528", "#ffeeff", "#320f55", "#8991bb", "#aa00a3",
        "#550068", "#00d9e9", "#05cb0d", "#b900b1", "#ffeeff", "#00d9e9", "#05cb0d");
    public static RizzyCodeTheme MexicoLight { get; } = new("#f8f8f8", "#383838", "#b8b8b8", "#96609e", "#dc9656",
        "#7cafc2", "#ab4642", "#538947", "#4b8093", "#383838", "#ab4642", "#538947");
    public static RizzyCodeTheme Mocha { get; } = new("#3B3228", "#d0c8c6", "#7e705a", "#a89bb9", "#d28b71", "#8ab3b5",
        "#cb6077", "#beb55b", "#7bbda4", "#d0c8c6", "#cb6077", "#beb55b");
    public static RizzyCodeTheme Monokai { get; } = new("#272822", "#f8f8f2", "#75715e", "#ae81ff", "#fd971f",
        "#66d9ef", "#f92672", "#a6e22e", "#a1efe4", "#f8f8f2", "#f92672", "#a6e22e");
    public static RizzyCodeTheme Nord { get; } = new("#2E3440", "#E5E9F0", "#4C566A", "#A3BE8C", "#81A1C1", "#EBCB8B",
        "#88C0D0", "#BF616A", "#D08770", "#E5E9F0", "#88C0D0", "#BF616A");
    public static RizzyCodeTheme Ocean { get; } = new("#2b303b", "#c0c5ce", "#65737e", "#b48ead", "#d08770", "#8fa1b3",
        "#bf616a", "#a3be8c", "#96b5b4", "#c0c5ce", "#bf616a", "#a3be8c");
    public static RizzyCodeTheme OceanicNext { get; } = new("#1B2B34", "#C0C5CE", "#65737E", "#C594C5", "#F99157",
        "#6699CC", "#EC5f67", "#99C794", "#5FB3B3", "#C0C5CE", "#EC5f67", "#99C794");
    public static RizzyCodeTheme OneLight { get; } = new("#fafafa", "#383a42", "#a0a1a7", "#a626a4", "#d75f00",
        "#4078f2", "#ca1243", "#50a14f", "#0184bc", "#383a42", "#ca1243", "#50a14f");
    public static RizzyCodeTheme Onedark { get; } = new("#282c34", "#abb2bf", "#545862", "#c678dd", "#d19a66",
        "#61afef", "#e06c75", "#98c379", "#56b6c2", "#abb2bf", "#e06c75", "#98c379");
    public static RizzyCodeTheme OutrunDark { get; } = new("#00002A", "#D0D0FA", "#50507A", "#F10596", "#FC8D28",
        "#66B0FF", "#FF4242", "#59F176", "#0EF0F0", "#D0D0FA", "#FF4242", "#59F176");
    public static RizzyCodeTheme Paraiso { get; } = new("#2f1e2e", "#a39e9b", "#776e71", "#815ba4", "#f99b15",
        "#06b6ef", "#ef6155", "#48b685", "#5bc4bf", "#a39e9b", "#ef6155", "#48b685");
    public static RizzyCodeTheme Phd { get; } = new("#061229", "#b8bbc2", "#717885", "#9989cc", "#f0a000", "#5299bf",
        "#d07346", "#99bf52", "#72b9bf", "#b8bbc2", "#d07346", "#99bf52");
    public static RizzyCodeTheme Pico { get; } = new("#000000", "#5f574f", "#008751", "#ff77a8", "#ffa300", "#83769c",
        "#ff004d", "#00e756", "#29adff", "#5f574f", "#ff004d", "#00e756");
    public static RizzyCodeTheme Pop { get; } = new("#000000", "#d0d0d0", "#505050", "#b31e8d", "#f29333", "#0e5a94",
        "#eb008a", "#37b349", "#00aabb", "#d0d0d0", "#eb008a", "#37b349");
    public static RizzyCodeTheme Porple { get; } = new("#292c36", "#d8d8d8", "#65568a", "#b74989", "#d28e5d", "#8485ce",
        "#f84547", "#95c76f", "#64878f", "#d8d8d8", "#f84547", "#95c76f");
    public static RizzyCodeTheme Railscasts { get; } = new("#2b2b2b", "#e6e1dc", "#5a647e", "#b6b3eb", "#cc7833",
        "#6d9cbe", "#da4939", "#a5c261", "#519f50", "#e6e1dc", "#da4939", "#a5c261");
    public static RizzyCodeTheme Rebecca { get; } = new("#292a44", "#f1eff8", "#666699", "#7aa5ff", "#efe4a1",
        "#2de0a7", "#a0a0c5", "#6dfedf", "#8eaee0", "#f1eff8", "#a0a0c5", "#6dfedf");
    public static RizzyCodeTheme Seti { get; } = new("#151718", "#d6d6d6", "#41535B", "#a074c4", "#db7b55", "#55b5db",
        "#Cd3f45", "#9fca56", "#55dbbe", "#d6d6d6", "#Cd3f45", "#9fca56");
    public static RizzyCodeTheme Shapeshifter { get; } = new("#f9f9f9", "#102015", "#555555", "#f996e2", "#e09448",
        "#3b48e3", "#e92f2f", "#0ed839", "#23edda", "#102015", "#e92f2f", "#0ed839");
    public static RizzyCodeTheme Snazzy { get; } = new("#1e1f29", "#eff0eb", "#78787e", "#ff6ac1", "#ff9f43", "#57c7ff",
        "#ff5c57", "#5af78e", "#9aedfe", "#eff0eb", "#ff5c57", "#5af78e");
    public static RizzyCodeTheme Solarflare { get; } = new("#18262F", "#A6AFB8", "#667581", "#A363D5", "#E66B2B",
        "#33B5E1", "#EF5253", "#7CC844", "#52CBB0", "#A6AFB8", "#EF5253", "#7CC844");
    public static RizzyCodeTheme SolarizedDark { get; } = new("#002b36", "#93a1a1", "#657b83", "#6c71c4", "#cb4b16",
        "#268bd2", "#dc322f", "#859900", "#2aa198", "#93a1a1", "#dc322f", "#859900");
    public static RizzyCodeTheme SolarizedLight { get; } = new("#fdf6e3", "#586e75", "#839496", "#6c71c4", "#cb4b16",
        "#268bd2", "#dc322f", "#859900", "#2aa198", "#586e75", "#dc322f", "#859900");
    public static RizzyCodeTheme Spacemacs { get; } = new("#1f2022", "#a3a3a3", "#585858", "#a31db1", "#ffa500",
        "#4f97d7", "#f2241f", "#67b11d", "#2d9574", "#a3a3a3", "#f2241f", "#67b11d");
    public static RizzyCodeTheme SummerfruitDark { get; } = new("#151515", "#D0D0D0", "#505050", "#AD00A1", "#FD8900",
        "#3777E6", "#FF0086", "#00C918", "#1FAAAA", "#D0D0D0", "#FF0086", "#00C918");
    public static RizzyCodeTheme SummerfruitLight { get; } = new("#FFFFFF", "#101010", "#B0B0B0", "#AD00A1", "#FD8900",
        "#3777E6", "#FF0086", "#00C918", "#1FAAAA", "#101010", "#FF0086", "#00C918");
    public static RizzyCodeTheme TomorrowNight { get; } = new("#1d1f21", "#c5c8c6", "#969896", "#b294bb", "#de935f",
        "#81a2be", "#cc6666", "#b5bd68", "#8abeb7", "#c5c8c6", "#cc6666", "#b5bd68");
    public static RizzyCodeTheme Tomorrow { get; } = new("#ffffff", "#4d4d4c", "#8e908c", "#8959a8", "#f5871f",
        "#4271ae", "#c82829", "#718c00", "#3e999f", "#4d4d4c", "#c82829", "#718c00");
    public static RizzyCodeTheme Tube { get; } = new("#231f20", "#d9d8d8", "#737171", "#98005d", "#f386a1", "#009ddc",
        "#ee2e24", "#00853e", "#85cebc", "#d9d8d8", "#ee2e24", "#00853e");
    public static RizzyCodeTheme Twilight { get; } = new("#1e1e1e", "#a7a7a7", "#5f5a60", "#9b859d", "#cda869",
        "#7587a6", "#cf6a4c", "#8f9d6a", "#afc4db", "#a7a7a7", "#cf6a4c", "#8f9d6a");
    public static RizzyCodeTheme UnikittyDark { get; } = new("#2e2a31", "#bcbabe", "#838085", "#bb60ea", "#d65407",
        "#796af5", "#d8137f", "#17ad98", "#149bda", "#bcbabe", "#d8137f", "#17ad98");
    public static RizzyCodeTheme UnikittyLight { get; } = new("#ffffff", "#6c696e", "#a7a5a8", "#aa17e6", "#d65407",
        "#775dff", "#d8137f", "#17ad98", "#149bda", "#6c696e", "#d8137f", "#17ad98");
    public static RizzyCodeTheme UnikittyReversible { get; } = new("#2e2a31", "#c3c2c4", "#878589", "#b33ce8",
        "#d65407", "#7864fa", "#d8137f", "#17ad98", "#149bda", "#c3c2c4", "#d8137f", "#17ad98");
    public static RizzyCodeTheme Woodland { get; } = new("#231e18", "#cabcb1", "#9d8b70", "#bb90e2", "#ca7f32",
        "#88a4d3", "#d35c5c", "#b7ba53", "#6eb958", "#cabcb1", "#d35c5c", "#b7ba53");
    public static RizzyCodeTheme XcodeDusk { get; } = new("#282B35", "#939599", "#686A71", "#B21889", "#786DC5",
        "#790EAD", "#B21889", "#DF0002", "#00A0BE", "#939599", "#B21889", "#DF0002");
    public static RizzyCodeTheme Zenburn { get; } = new("#3f3f3f", "#dcdccc", "#4f4f4f", "#dc8cc3", "#dfaf8f",
        "#7cb8bb", "#dca3a3", "#5f7f5f", "#93e0e3", "#dcdccc", "#dca3a3", "#5f7f5f");
}
</file>

<file path="Components/Theme/Themes/Code/RizzyCodeTheme.cs">
#pragma warning disable CS8618
namespace RizzyUI;
public class RizzyCodeTheme
{
	public RizzyCodeTheme(
        string background,
        string color,
        string comment,
        string keyword,
        string attribute,
        string symbol,
        string nameSpace,
        string variable,
        string literal,
        string punctuation,
        string deletion,
        string addition)
    {
        Background = new Color(background);
        Color = new Color(color);
        Comment = new Color(comment);
        Keyword = new Color(keyword);
        Attribute = new Color(attribute);
        Symbol = new Color(symbol);
        Namespace = new Color(nameSpace);
        Variable = new Color(variable);
        Literal = new Color(literal);
        Punctuation = new Color(punctuation);
        Deletion = new Color(deletion);
        Addition = new Color(addition);
    }
	public Color Background { get; init; }
	public Color Color { get; init; }
	public Color Comment { get; init; }
	public Color Keyword { get; init; }
	public Color Attribute { get; init; }
	public Color Symbol { get; init; }
	public Color Namespace { get; init; }
	public Color Variable { get; init; }
	public Color Literal { get; init; }
	public Color Punctuation { get; init; }
	public Color Deletion { get; init; }
	public Color Addition { get; init; }
}
</file>

<file path="Components/Theme/Themes/HighContrastTheme.cs">
namespace RizzyUI;
public class HighContrastTheme : RzTheme
{
    public HighContrastTheme() : base("High Contrast", "highcontrast")
    {
        Light = new RzThemeVariant
        {
            Surface = Colors.Gray.L50,
            OnSurface = Colors.Gray.L800,
            OnSurfaceStrong = Colors.Gray.L950,
            OnSurfaceMuted = Colors.Neutral.L500,
            SurfaceAlt = Colors.Gray.L200,
            SurfaceTertiary = Colors.Gray.L300,
            OnSurfaceTertiary = Colors.Gray.L700,
            Primary = Colors.Sky.L900,
            OnPrimary = Colors.White,
            Secondary = Colors.Indigo.L900,
            OnSecondary = Colors.White,
            Outline = Colors.Gray.L500,
            OutlineStrong = Colors.Gray.L900,
            Code = CodeThemes.Github
        };
        Dark = new RzThemeVariant
        {
            Surface = Colors.Gray.L900,
            OnSurface = Colors.Gray.L300,
            OnSurfaceStrong = Colors.Gray.L100,
            OnSurfaceMuted = Colors.Neutral.L500,
            SurfaceAlt = Colors.Gray.L800,
            SurfaceTertiary = Colors.Gray.L700,
            OnSurfaceTertiary = Colors.Gray.L300,
            Primary = Colors.Sky.L400,
            OnPrimary = Colors.Black,
            Secondary = Colors.Indigo.L400,
            OnSecondary = Colors.Black,
            Outline = Colors.Gray.L500,
            OutlineStrong = Colors.Gray.L300,
            Code = CodeThemes.DefaultDark
        };
        Danger = Colors.Red.L500;
        OnDanger = Colors.Black;
        Info = Colors.Sky.L500;
        OnInfo = Colors.Black;
        Warning = Colors.Yellow.L500;
        OnWarning = Colors.Black;
        Success = Colors.Green.L500;
        OnSuccess = Colors.Black;
        BorderWidth = "1px";
        BorderRadius = "6px";
    }
}
</file>

<file path="Components/Theme/Themes/ModernTheme.cs">
namespace RizzyUI;
public class ModernTheme : RzTheme
{
    public ModernTheme() : base("Modern", "modern")
    {
        Light = new RzThemeVariant
        {
            Surface = Colors.White,
            OnSurface = Colors.Neutral.L600,
            OnSurfaceStrong = Colors.Neutral.L900,
            OnSurfaceMuted = Colors.Neutral.L500,
            SurfaceAlt = Colors.Neutral.L50,
            SurfaceTertiary = Colors.Neutral.L100,
            OnSurfaceTertiary = Colors.Neutral.L500,
            Primary = Colors.Black,
            OnPrimary = Colors.Neutral.L100,
            Secondary = Colors.Neutral.L800,
            OnSecondary = Colors.White,
            Outline = Colors.Neutral.L300,
            OutlineStrong = Colors.Neutral.L800,
            Code = CodeThemes.Github
        };
        Dark = new RzThemeVariant
        {
            Surface = Colors.Neutral.L950,
            OnSurface = Colors.Neutral.L300,
            OnSurfaceStrong = Colors.White,
            OnSurfaceMuted = Colors.Neutral.L500,
            SurfaceAlt = Colors.Neutral.L900,
            SurfaceTertiary = Colors.Neutral.L800,
            OnSurfaceTertiary = Colors.Neutral.L300,
            Primary = Colors.White,
            OnPrimary = Colors.Black,
            Secondary = Colors.Neutral.L300,
            OnSecondary = Colors.Black,
            Outline = Colors.Neutral.L700,
            OutlineStrong = Colors.Neutral.L300,
            Code = CodeThemes.DefaultDark
        };
        Danger = Colors.Red.L500;
        OnDanger = Colors.White;
        Info = Colors.Sky.L500;
        OnInfo = Colors.White;
        Warning = Colors.Amber.L500;
        OnWarning = Colors.White;
        Success = Colors.Green.L500;
        OnSuccess = Colors.White;
        BorderWidth = "1px";
        BorderRadius = "6px";
    }
}
</file>

<file path="Components/Theme/Themes/NewsTheme.cs">
namespace RizzyUI;
public class NewsTheme : RzTheme
{
    public NewsTheme() : base("News", "news")
    {
        Light = new RzThemeVariant
        {
            Surface = Colors.Zinc.L50,
            OnSurface = Colors.Neutral.L600,
            OnSurfaceStrong = Colors.Neutral.L900,
            OnSurfaceMuted = Colors.Neutral.L500,
            SurfaceAlt = Colors.Zinc.L100,
            SurfaceTertiary = Colors.Zinc.L200,
            OnSurfaceTertiary = Colors.Zinc.L500,
            Primary = Colors.Sky.L700,
            OnPrimary = Colors.White,
            Secondary = Colors.Black,
            OnSecondary = Colors.White,
            Outline = Colors.Zinc.L300,
            OutlineStrong = Colors.Zinc.L500,
            Code = CodeThemes.Github
        };
        Dark = new RzThemeVariant
        {
            Surface = Colors.Zinc.L900,
            OnSurface = Colors.Zinc.L200,
            OnSurfaceStrong = Colors.Zinc.L50,
            OnSurfaceMuted = Colors.Neutral.L500,
            SurfaceAlt = Colors.Zinc.L800,
            SurfaceTertiary = Colors.Zinc.L700,
            OnSurfaceTertiary = Colors.Zinc.L200,
            Primary = Colors.Sky.L600,
            OnPrimary = Colors.White,
            Secondary = Colors.White,
            OnSecondary = Colors.Black,
            Outline = Colors.Zinc.L700,
            OutlineStrong = Colors.Zinc.L500,
            Code = CodeThemes.DefaultDark
        };
        Danger = Colors.Red.L700;
        OnDanger = Colors.Slate.L100;
        Info = Colors.Sky.L700;
        OnInfo = Colors.Slate.L100;
        Warning = Colors.Amber.L600;
        OnWarning = Colors.Amber.L50;
        Success = Colors.Green.L700;
        OnSuccess = Colors.White;
        BorderWidth = "1px";
        BorderRadius = "6px";
    }
}
</file>

<file path="Components/Typography/Heading.razor">
@namespace RizzyUI
@using Rizzy.Utility
@inherits TypographyBase

<HtmlElement Element="@Element" @attributes="@AdditionalAttributes" id="@Id" class="@RootClass()"
             x-data="rzHeading">
    @if (ChildContent == null)
    {
        @QuickReferenceTitle
    }
    else
    {
        @ChildContent
    }
</HtmlElement>

@code {
    private bool _registered = false;

    /// <summary>
    ///     Represents the heading level, corresponding to HTML heading tags.
    /// </summary>
    [Parameter][EditorRequired]
    public required HeadingLevel Level { get; set; }

    /// <summary>
    ///     Child content for the heading
    /// </summary>
    [Parameter]
    public RenderFragment? ChildContent { get; set; }

    /// <summary>
    ///     Title to be used in the Quick Reference outline.
    /// </summary>
    [Parameter]
    public string? QuickReferenceTitle { get; set; }

    /// <summary>
    ///     Reference to the QuickReferenceContainer.
    /// </summary>
    [CascadingParameter]
    private QuickReferenceContainer? QuickReferenceContainer { get; set; }

    /// <summary>
    ///     The unique ID for the heading element.
    /// </summary>
    public string Id { get; set; } = IdGenerator.UniqueId("heading");

    /// <inheritdoc cref="RzComponent" />
    protected override void OnParametersSet()
    {
        Element = Level switch
        {
            HeadingLevel.H1 => "h1",
            HeadingLevel.H2 => "h2",
            HeadingLevel.H3 => "h3",
            HeadingLevel.H4 => "h4",
            _ => "h1"
        };

        if (TextColor is null)
        {
            if (Level is HeadingLevel.H1 or HeadingLevel.H2)
                TextColor = SemanticColor.OnSurfaceStrong;
            else
                TextColor = SemanticColor.OnSurface;
        }

        if (!_registered && QuickReferenceContainer != null && !string.IsNullOrEmpty(QuickReferenceTitle))
        {
            QuickReferenceContainer.RegisterHeading(Level, QuickReferenceTitle, Id);
            _registered = true;
        }

        base.OnParametersSet();
    }

    protected override string? RootClass()
    {
        return TwMerge.Merge(AdditionalAttributes, GetHeadingStyles(Level), GetTypographyBaseCss());
    }

    /// <summary>
    ///     Gets the CSS classes associated with the specified heading level.
    /// </summary>
    /// <param name="level">The <see cref="HeadingLevel" /> enum value representing the level of the heading.</param>
    /// <returns>A string containing the CSS classes for the specified heading level.</returns>
    protected static string GetHeadingStyles(HeadingLevel? level)
    {
        return level switch
        {
            HeadingLevel.H1 => "mb-5 text-xl sm:text-2xl md:text-3xl lg:text-4xl font-bold",
            HeadingLevel.H2 => "mb-4 text-lg sm:text-xl md:text-2xl lg:text-3xl font-semibold",
            HeadingLevel.H3 => "mb-3 text-base sm:text-lg md:text-xl lg:text-2xl font-medium",
            HeadingLevel.H4 => "mb-2 text-base sm:text-lg md:text-xl lg:text-2xl font-normal",
            _ => string.Empty
        };
    }

}
</file>

<file path="Components/Typography/Paragraph.razor">
@namespace RizzyUI
@inherits TypographyBase

<HtmlElement Element="@Element" @attributes="@AdditionalAttributes" class="@RootClass()">@ChildContent</HtmlElement>


@code {
    private static readonly string BaseStyle = "my-4 leading-relaxed";

    /// <summary>
    ///     Child content for the heading
    /// </summary>
    [Parameter]
    public RenderFragment? ChildContent { get; set; }

    /// <summary>
    ///     Gets or sets the maximum character width of the paragraph.
    ///     Default is <see cref="ProseWidth.Full" />, unrestricted width.
    /// </summary>
    [Parameter]
    public ProseWidth ProseWidth { get; set; } = ProseWidth.Full;

    protected override void OnInitialized()
    {
        Element = "p";
        TextColor ??= SemanticColor.OnSurface;

        base.OnInitialized();
    }

    /// <summary>
    ///     Root css for paragraph
    /// </summary>
    /// <returns></returns>
    protected override string? RootClass()
    {
        return TwMerge.Merge(AdditionalAttributes, BaseStyle, GetTypographyBaseCss(), GetProseWidthCss(ProseWidth));
    }

    /// <summary>
    ///     Gets the CSS classes for the paragraph
    /// </summary>
    /// <param name="size"></param>
    /// <returns></returns>
    protected static string GetProseWidthCss(ProseWidth size)
    {
        return size switch
        {
            ProseWidth.Compact => "prose-compact",
            ProseWidth.Comfortable => "prose-comfortable",
            ProseWidth.Relaxed => "prose-relaxed",
            ProseWidth.Wide => "prose-wide",
            ProseWidth.UltraWide => "prose-ultrawide",
            ProseWidth.Full => "prose-full",
            _ => ""
        };
    }

}
</file>

<file path="Components/Typography/Styles.cs">
namespace RizzyUI;
public enum HeadingLevel
{
    H1,
    H2,
    H3,
    H4
}
public enum TextWeight
{
    Thin,
    Normal,
    Bold,
    ExtraBold
}
public enum TextSize
{
    Small,
    Medium,
    Large,
    ExtraLarge,
    TwoXL,
    ThreeXL,
    FourXL,
    FiveXL
}
public enum TextDecoration
{
    None,
    Underline,
    Overline,
    LineThrough
}
public enum TextTransform
{
    None,
    Uppercase,
    Lowercase,
    Capitalize
}
public enum Leading
{
    None,
    Tight,
    Snug,
    Normal,
    Relaxed,
    Loose
}
</file>

<file path="Components/Typography/TypographyBase.razor">
@namespace RizzyUI

@inherits RzComponent

@code {

	/// <summary>
	///     Gets or sets the text color for the typography component.
	///     This property accepts a <see cref="SemanticColor" /> value that is used to determine the text color class.
	/// </summary>
	[Parameter]
	public SemanticColor? TextColor { get; set; }

	/// <summary>
	///     Gets or sets the font weight for the typography component.
	///     This property accepts a <see cref="TextWeight" /> enum value to define the weight (e.g., Thin, Normal, Bold,
	///     ExtraBold).
	/// </summary>
	[Parameter]
	public TextWeight? Weight { get; set; }

	/// <summary>
	///     Gets or sets the text size for the typography component.
	///     This property accepts a <see cref="TextSize" /> enum value that specifies the text size (e.g., Small, Medium,
	///     Large).
	/// </summary>
	[Parameter]
	public TextSize? Size { get; set; }

	/// <summary>
	///     Gets or sets the line height for the typography component.
	///     This property accepts a <see cref="Leading" /> enum value to control the spacing between lines of text.
	/// </summary>
	[Parameter]
	public Leading? LineHeight { get; set; }

	/// <summary>
	///     Gets or sets the text decoration for the typography component.
	///     This property accepts a <see cref="TextDecoration" /> enum value to specify decoration such as underline, overline,
	///     or line-through.
	/// </summary>
	[Parameter]
	public TextDecoration? Decoration { get; set; }

	/// <summary>
	///     Gets or sets the text transformation for the typography component.
	///     This property accepts a <see cref="TextTransform" /> enum value that determines if the text is transformed to
	///     uppercase, lowercase, or capitalized.
	/// </summary>
	[Parameter]
	public TextTransform? Transform { get; set; }

	/// <summary>
	///     Builds a string of Tailwind CSS classes based on the configuration of the component
	/// </summary>
	/// <returns></returns>
	protected string GetTypographyBaseCss()
	{
		return $"{TextColor?.ToTextClass()} {GetTextSizeCss(Size)} {GetTextWeightCss(Weight)} {GetTextTransformCss(Transform)} {GetTextDecorationCss(Decoration)} {GetLineHeightClass(LineHeight)}";
	}

	/// <summary>
	///     Gets the CSS class associated with the specified text weight.
	/// </summary>
	/// <param name="weight">The <see cref="TextWeight" /> enum value representing the weight of the text.</param>
	/// <returns>A string containing the CSS class for the specified text weight.</returns>
	private static string GetTextWeightCss(TextWeight? weight)
	{
		return weight switch
		{
			TextWeight.Thin => "font-thin",
			TextWeight.Normal => "font-normal",
			TextWeight.Bold => "font-bold",
			TextWeight.ExtraBold => "font-extrabold",
			_ => string.Empty
		};
	}

	/// <summary>
	///     Gets the CSS class associated with the specified text size.
	/// </summary>
	/// <param name="size">The <see cref="TextSize" /> enum value representing the size of the text.</param>
	/// <returns>A string containing the CSS class for the specified text size.</returns>
	private static string GetTextSizeCss(TextSize? size)
	{
		return size switch
		{
			TextSize.Small => "text-sm",
			TextSize.Medium => "text-base",
			TextSize.Large => "text-lg",
			TextSize.ExtraLarge => "text-xl",
			TextSize.TwoXL => "text-2xl",
			TextSize.ThreeXL => "text-3xl",
			TextSize.FourXL => "text-4xl",
			TextSize.FiveXL => "text-5xl",
			_ => string.Empty
		};
	}

	/// <summary>
	///     Gets the Tailwind CSS class associated with the specified text transform.
	/// </summary>
	/// <param name="transform">The <see cref="TextTransform" /> enum value representing the desired text transformation.</param>
	/// <returns>A string containing the Tailwind CSS class for the specified text transform.</returns>
	private static string GetTextTransformCss(TextTransform? transform)
	{
		return transform switch
		{
			TextTransform.None => "normal-case",
			TextTransform.Uppercase => "uppercase",
			TextTransform.Lowercase => "lowercase",
			TextTransform.Capitalize => "capitalize",
			_ => string.Empty
		};
	}

	/// <summary>
	///     Gets the Tailwind CSS class associated with the specified text decoration.
	/// </summary>
	/// <param name="decoration">The <see cref="TextDecoration" /> enum value representing the desired text decoration.</param>
	/// <returns>A string containing the Tailwind CSS class for the specified text decoration.</returns>
	private static string GetTextDecorationCss(TextDecoration? decoration)
	{
		return decoration switch
		{
			TextDecoration.None => "no-underline",
			TextDecoration.Underline => "underline",
			TextDecoration.Overline => "overline",
			TextDecoration.LineThrough => "line-through",
			_ => string.Empty
		};
	}

	/// <summary>
	///     Gets the CSS class associated with the specified line height.
	/// </summary>
	/// <param name="leading">The <see cref="Leading" /> enum value representing the line height.</param>
	/// <returns>A string containing the CSS class for the specified line height.</returns>
	private static string GetLineHeightClass(Leading? leading)
	{
		return leading switch
		{
			Leading.None => "leading-none",
			Leading.Tight => "leading-tight",
			Leading.Snug => "leading-snug",
			Leading.Normal => "leading-normal",
			Leading.Relaxed => "leading-relaxed",
			Leading.Loose => "leading-loose",
			_ => string.Empty
		};
	}

}
</file>

<file path="Components/Utility/ColorUtil.cs">
using System.Diagnostics.CodeAnalysis;
namespace RizzyUI;
public static class ColorUtil
{
    [SuppressMessage("CodeQuality", "IDE0051:Remove unused private members",
        Justification = "This is to allow Tailwind utilities to discover used classes")]
#pragma warning disable CS0414
    private static readonly string TwBackgroundClassAfterDiscovery =
#pragma warning restore CS0414
        "after:bg-surface after:bg-on-surface after:bg-on-surface-strong after:bg-surface-alt after:bg-primary after:bg-on-primary after:bg-secondary after:bg-on-secondary after:bg-outline after:bg-outline-strong after:bg-danger after:bg-on-danger after:bg-info after:bg-on-info after:bg-warning after:bg-on-warning after:bg-success after:bg-on-success after:bg-surface";
    public static string ToLightBackgroundClass(this AccentColor accentColor)
    {
        return accentColor switch
        {
            AccentColor.Inherit => "",
            AccentColor.Gray => "bg-gray-100",
            AccentColor.Emerald => "bg-emerald-200",
            AccentColor.Teal => "bg-teal-200",
            AccentColor.Blue => "bg-blue-200",
            AccentColor.Indigo => "bg-indigo-200",
            AccentColor.Purple => "bg-purple-200",
            AccentColor.Pink => "bg-pink-200",
            AccentColor.Red => "bg-red-200",
            AccentColor.Orange => "bg-orange-200",
            AccentColor.Yellow => "bg-yellow-300",
            _ => "bg-gray-100"
        };
    }
    public static string ToDarkBackgroundClass(this AccentColor accentColor)
    {
        return accentColor switch
        {
            AccentColor.Inherit => "",
            AccentColor.Gray => "bg-gray-400",
            AccentColor.Emerald => "bg-emerald-800",
            AccentColor.Teal => "bg-teal-600",
            AccentColor.Blue => "bg-blue-600",
            AccentColor.Indigo => "bg-indigo-700",
            AccentColor.Purple => "bg-purple-600",
            AccentColor.Pink => "bg-pink-500",
            AccentColor.Red => "bg-red-500",
            AccentColor.Orange => "bg-orange-500",
            AccentColor.Yellow => "bg-yellow-300",
            _ => "bg-gray-400"
        };
    }
    public static string ToTextClass(AccentColor accentColor)
    {
        return accentColor switch
        {
            AccentColor.Inherit => "",
            AccentColor.Gray => "text-gray-600",
            AccentColor.Emerald => "text-emerald-700",
            AccentColor.Teal => "text-teal-700",
            AccentColor.Blue => "text-blue-700",
            AccentColor.Indigo => "text-indigo-700",
            AccentColor.Purple => "text-purple-700",
            AccentColor.Pink => "text-pink-700",
            AccentColor.Red => "text-red-700",
            AccentColor.Orange => "text-orange-700",
            AccentColor.Yellow => "text-yellow-800",
            _ => "text-gray-600"
        };
    }
    public static string ToTextClass(this SemanticColor color)
    {
        return color switch
        {
            SemanticColor.None => "",
            // Surface Colors
            SemanticColor.Surface => "text-surface ",
            SemanticColor.OnSurface => "text-on-surface ",
            SemanticColor.OnSurfaceStrong => "text-on-surface-strong ",
            SemanticColor.SurfaceAlt => "text-surface-alt ",
            SemanticColor.Primary => "text-primary ",
            SemanticColor.OnPrimary => "text-on-primary ",
            SemanticColor.Secondary => "text-secondary ",
            SemanticColor.OnSecondary => "text-on-secondary ",
            SemanticColor.Outline => "text-outline ",
            SemanticColor.OutlineStrong => "text-outline-strong ",
            // Status Colors (no dark variants)
            SemanticColor.Danger => "text-danger",
            SemanticColor.OnDanger => "text-on-danger",
            SemanticColor.Info => "text-info",
            SemanticColor.OnInfo => "text-onInfo",
            SemanticColor.Warning => "text-warning",
            SemanticColor.OnWarning => "text-on-warning",
            SemanticColor.Success => "text-success",
            SemanticColor.OnSuccess => "text-on-success",
            _ => "text-on-surface "
        };
    }
    public static string ToTextClass(this StatusColor color)
    {
        return color switch
        {
            StatusColor.Primary => "text-on-primary ",
            StatusColor.Danger => "text-on-danger",
            StatusColor.Info => "text-onInfo",
            StatusColor.Secondary => "text-on-secondary",
            StatusColor.Success => "text-on-success",
            StatusColor.Warning => "text-on-warning",
            _ => "text-on-primary "
        };
    }
    public static string ToBackgroundClass(this SemanticColor color)
    {
        return color switch
        {
            SemanticColor.None => "",
            // Surface Colors
            SemanticColor.Surface => "bg-surface",
            SemanticColor.OnSurface => "bg-on-surface",
            SemanticColor.OnSurfaceStrong => "bg-on-surface-strong",
            SemanticColor.SurfaceAlt => "bg-surface-alt",
            SemanticColor.Primary => "bg-primary",
            SemanticColor.OnPrimary => "bg-on-primary",
            SemanticColor.Secondary => "bg-secondary",
            SemanticColor.OnSecondary => "bg-on-secondary",
            SemanticColor.Outline => "bg-outline",
            SemanticColor.OutlineStrong => "bg-outline-strong",
            SemanticColor.Danger => "bg-danger",
            SemanticColor.OnDanger => "bg-on-danger",
            SemanticColor.Info => "bg-info",
            SemanticColor.OnInfo => "bg-onInfo",
            SemanticColor.Warning => "bg-warning",
            SemanticColor.OnWarning => "bg-on-warning",
            SemanticColor.Success => "bg-success",
            SemanticColor.OnSuccess => "bg-on-success",
            _ => "bg-surface "
        };
    }
    public static string ToBackgroundClass(this SemanticColor color, string pseudoSelector)
    {
        var ps = pseudoSelector + ":";
        return color switch
        {
            SemanticColor.None => "",
            // Surface Colors
            SemanticColor.Surface => $"{ps}bg-surface",
            SemanticColor.OnSurface => $"{ps}bg-on-surface",
            SemanticColor.OnSurfaceStrong => $"{ps}bg-on-surface-strong",
            SemanticColor.SurfaceAlt => $"{ps}bg-surface-alt",
            SemanticColor.Primary => $"{ps}bg-primary",
            SemanticColor.OnPrimary => $"{ps}bg-on-primary",
            SemanticColor.Secondary => $"{ps}bg-secondary",
            SemanticColor.OnSecondary => $"{ps}bg-on-secondary",
            SemanticColor.Outline => $"{ps}bg-outline",
            SemanticColor.OutlineStrong => $"{ps}bg-outline-strong",
            SemanticColor.Danger => ps + "bg-danger",
            SemanticColor.OnDanger => ps + "bg-on-danger",
            SemanticColor.Info => ps + "bg-info",
            SemanticColor.OnInfo => ps + "bg-onInfo",
            SemanticColor.Warning => ps + "bg-warning",
            SemanticColor.OnWarning => ps + "bg-on-warning",
            SemanticColor.Success => ps + "bg-success",
            SemanticColor.OnSuccess => ps + "bg-on-success",
            _ => "bg-surface "
        };
    }
}
</file>

<file path="Components/Variants.cs">
using System.Diagnostics.CodeAnalysis;
namespace RizzyUI;
public enum AlertVariant
{
	Alternate,
    Information,
    Success,
    Warning,
    Danger
}
public enum BadgeVariant
{
    Default,
    Secondary,
    Outline,
    Success,
    Info,
    Warning,
    Destructive
}
public enum ButtonVariant
{
    Default,
    Primary,
    Secondary,
    Alternate,
    Inverse,
    Information,
    Danger,
    Warning,
    Success,
    Ghost
}
public enum DividerStyle
{
	Solid,
	Dashed,
	Dotted
}
public enum Size
{
    ExtraSmall,
    Small,
    Medium,
    Large,
    ExtraLarge
}
public enum ProseWidth
{
	Compact,
	Comfortable,
	Relaxed,
	Wide,
	UltraWide,
	Full
}
public enum Justify
{
    Start,
    Center,
    End
}
public enum Align
{
    Start,
    Center,
    End
}
public enum AnchorPoint
{
	TopStart,
	TopCenter,
	TopEnd,
	Start,
	End,
	BottomEnd,
	BottomStart,
	BottomCenter
}
public enum OriginPoint
{
	OriginCenter,
	OriginTop,
	OriginTopRight,
	OriginRight,
	OriginBottomRight,
	OriginBottom,
	OriginBottomLeft,
	OriginLeft,
	OriginTopLeft
}
public enum AvatarShape
{
    Circle,
    Square
}
[SuppressMessage("ReSharper", "InconsistentNaming")]
public enum ModalSize
{
    ExtraSmall,
    Small,
    Medium,
    Large,
    ExtraLarge,
    TwoXL,
    ThreeXL,
    FourXL,
    FiveXL,
    SixXL,
    SevenXL
}
public enum SemanticColor
{
    None,
    Surface,
    OnSurface,
    OnSurfaceStrong,
    SurfaceAlt,
    Primary,
    OnPrimary,
    Secondary,
    OnSecondary,
    Outline,
    OutlineStrong,
    Danger,
    OnDanger,
    Info,
    OnInfo,
    Warning,
    OnWarning,
    Success,
    OnSuccess
}
public enum AccentColor
{
    Inherit,
    Gray,
    Emerald,
    Teal,
    Blue,
    Indigo,
    Purple,
    Pink,
    Red,
    Orange,
    Yellow
}
public enum StatusColor
{
    Primary,
    Secondary,
    Success,
    Info,
    Warning,
    Danger
}
public enum ProgressLabelPosition
{
    Inside,
    Outside
}
</file>

<file path="Constants.cs">
namespace RizzyUI;
internal class Constants
{
    public const string PackageName = "RizzyUI";
    public static string ContentUrl(string path)
    {
        return $"/_content/{PackageName}/{path}";
    }
}
</file>

<file path="Extensions/MarkdigExtensions.cs">
using Markdig;
using Markdig.Renderers;
using Markdig.Renderers.Html;
using Markdig.Renderers.Html.Inlines;
using Markdig.Syntax;
using Markdig.Syntax.Inlines;
namespace RizzyUI.Extensions;
public class RizzyCodeBlockExtension : IMarkdownExtension
{
    public void Setup(MarkdownPipelineBuilder pipeline)
    {
    }
    public void Setup(MarkdownPipeline pipeline, IMarkdownRenderer renderer)
    {
        if (renderer is HtmlRenderer htmlRenderer)
        {
            var originalCodeBlockRenderer = htmlRenderer.ObjectRenderers.FindExact<CodeBlockRenderer>();
            if (originalCodeBlockRenderer != null) htmlRenderer.ObjectRenderers.Remove(originalCodeBlockRenderer);
            htmlRenderer.ObjectRenderers.AddIfNotAlready(new RizzyCodeBlockRenderer(originalCodeBlockRenderer));
            var originalCodeInlineRenderer = htmlRenderer.ObjectRenderers.FindExact<CodeInlineRenderer>();
            if (originalCodeInlineRenderer != null) htmlRenderer.ObjectRenderers.Remove(originalCodeInlineRenderer);
            htmlRenderer.ObjectRenderers.AddIfNotAlready(new RizzyCodeInlineRenderer(originalCodeInlineRenderer));
        }
    }
}
public class RizzyCodeBlockRenderer : HtmlObjectRenderer<CodeBlock>
{
    private readonly CodeBlockRenderer? _originalRenderer;
    public RizzyCodeBlockRenderer(CodeBlockRenderer? originalRenderer = null)
    {
        _originalRenderer = originalRenderer;
    }
    protected override void Write(HtmlRenderer renderer, CodeBlock obj)
    {
        var classes = "hljs";
        if (obj is FencedCodeBlock fencedCodeBlock)
        {
            var language = fencedCodeBlock.Info?.Trim() ?? string.Empty;
            if (!string.IsNullOrEmpty(language)) classes += $" language-{language}";
            renderer.Write("<pre><code");
            renderer.Write($" class=\"{classes}\"");
            renderer.Write(">");
        }
        else
        {
            renderer.Write("<code");
            renderer.Write($" class=\"{classes}\"");
            renderer.Write(">");
        }
        var content = obj.Lines.ToString();
        renderer.WriteEscape(content);
        if (obj is FencedCodeBlock)
            renderer.Write("</code></pre>");
        else
            renderer.Write("</code>");
    }
}
public class RizzyCodeInlineRenderer : HtmlObjectRenderer<CodeInline>
{
    private readonly CodeInlineRenderer? _originalRenderer;
    public RizzyCodeInlineRenderer(CodeInlineRenderer? originalRenderer = null)
    {
        _originalRenderer = originalRenderer;
    }
    protected override void Write(HtmlRenderer renderer, CodeInline obj)
    {
        renderer.Write("<code class=\"hljs\">");
        renderer.WriteEscape(obj.Content);
        renderer.Write("</code>");
    }
}
public static class MarkdownPipelineBuilderExtensions
{
    public static MarkdownPipelineBuilder UseRizzySyntaxHighlighting(this MarkdownPipelineBuilder pipeline)
    {
        pipeline.Extensions.Add(new RizzyCodeBlockExtension());
        return pipeline;
    }
}
</file>

<file path="Extensions/ServiceCollectionExtensions.cs">
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.DependencyInjection.Extensions;
using Rizzy.Htmx;
using TailwindMerge.Extensions;
namespace RizzyUI;
public static class ServiceCollectionExtensions
{
    public static IServiceCollection AddRizzyUI(this IServiceCollection services, Action<RizzyUIConfig> configure)
    {
        if (configure == null) throw new ArgumentNullException(nameof(configure));
        services.Configure(configure);
        return services.AddRizzyUI();
    }
    public static IServiceCollection AddRizzyUI(this IServiceCollection services)
    {
        services.AddTailwindMerge();
        services.AddHttpContextAccessor();
        services.TryAddScoped<IRizzyNonceProvider, RizzyNonceProvider>();
        services.Configure<RizzyUIConfig>(config => { });
        return services;
    }
}
</file>

<file path="Extensions/StringExtensions.cs">
using System.Text;
namespace RizzyUI.Extensions;
internal static class StringExtensions
{
    private static readonly Random _random = new(Environment.TickCount);
    public static string Outdent(this string text)
    {
        if (string.IsNullOrEmpty(text))
            return text;
        var lines = text.Split(new[] { "\r\n", "\n" }, StringSplitOptions.None);
        var minLeadingWhitespace = int.MaxValue;
        foreach (var line in lines)
        {
            if (string.IsNullOrWhiteSpace(line))
                continue;
            var count = 0;
            while (count < line.Length && char.IsWhiteSpace(line[count])) count++;
            if (count < minLeadingWhitespace)
            {
                minLeadingWhitespace = count;
                if (minLeadingWhitespace == 0)
                    break;
            }
        }
        if (minLeadingWhitespace == int.MaxValue || minLeadingWhitespace == 0)
            return text;
        var sb = new StringBuilder(text.Length);
        for (var i = 0; i < lines.Length; i++)
        {
            var line = lines[i];
            if (string.IsNullOrEmpty(line))
            {
                sb.AppendLine(line);
            }
            else
            {
                var outdentedLine = line.Length >= minLeadingWhitespace
                    ? line.Substring(minLeadingWhitespace)
                    : string.Empty;
                sb.AppendLine(outdentedLine);
            }
        }
        if (sb.Length > 0 && sb[sb.Length - 1] == '\n')
        {
            sb.Length--;
            if (sb.Length > 0 && sb[sb.Length - 1] == '\r')
                sb.Length--;
        }
        return sb.ToString();
    }
    public static string Shuffle(this string input)
    {
        return new string(input.ToCharArray()
            .OrderBy(x => _random.Next())
            .ToArray());
    }
    public static string TrimEmptyLines(this string input)
    {
        if (string.IsNullOrWhiteSpace(input)) return string.Empty;
        var lines = input.Split(new[] { "\r\n", "\r", "\n" }, StringSplitOptions.None);
        var start = 0;
        while (start < lines.Length && string.IsNullOrWhiteSpace(lines[start])) start++;
        var end = lines.Length - 1;
        while (end >= start && string.IsNullOrWhiteSpace(lines[end])) end--;
        return string.Join(Environment.NewLine, lines[start..(end + 1)]);
    }
}
</file>

<file path="Extensions/TwMergeExtensions.cs">
using System.Globalization;
using TailwindMerge;
namespace RizzyUI.Extensions;
internal static class TwMergeExtensions
{
    public static string? Merge(this TwMerge twMerge, IReadOnlyDictionary<string, object>? additionalAttributes,
        params string[] classNames)
    {
        if (additionalAttributes is null || !additionalAttributes.TryGetValue("class", out var @class))
            return classNames.Length == 1 ? classNames[0] : twMerge.Merge(classNames);
        var classAttributeValue = Convert.ToString(@class, CultureInfo.InvariantCulture);
        if (string.IsNullOrEmpty(classAttributeValue))
            return classNames.Length == 1 ? classNames[0] : twMerge.Merge(classNames);
        if (classNames.Length == 0) return classAttributeValue;
        return twMerge.Merge([.. classNames, classAttributeValue]) ?? string.Empty;
    }
}
</file>

<file path="GlobalSuppressions.cs">
using System.Diagnostics.CodeAnalysis;
[assembly:
    SuppressMessage("Style", "IDE0130:Namespace does not match folder structure", Justification = "<Pending>",
        Scope = "namespace", Target = "~N:RizzyUI")]
</file>

<file path="GlobalUsings.cs">
global using Rizzy;
</file>

<file path="Oklch.cs">
using System.Text.RegularExpressions;
namespace RizzyUI;
public record Color
{
	private readonly Oklch _oklchColor;
	private readonly string _tailwindClass;
	protected readonly ColorType _type;
	private readonly string _variable;
	public Color(Oklch color)
    {
        _type = ColorType.Oklch;
        _oklchColor = color;
        _variable = string.Empty;
        _tailwindClass = $"[{ToCssColorString()}]";
    }
	public Color(string colorVariable, string colorName)
    {
        _type = ColorType.Variable;
        _variable = colorVariable;
        _tailwindClass = colorName;
    }
	public Color(string rgbHexColor)
    {
        if (!IsValidHexColor(rgbHexColor))
            throw new ArgumentException($"{nameof(rgbHexColor)} must be a valid CSS rgb hex color starting with a #");
        _type = ColorType.Rgb;
        _variable = rgbHexColor;
        _tailwindClass = string.Empty;
    }
	public Color(Color other)
    {
        _type = other._type;
        _oklchColor = other._oklchColor;
        _variable = other._variable.ToLowerInvariant();
        _tailwindClass = other._tailwindClass;
    }
	public string TailwindClassName => _tailwindClass;
    private static bool IsValidHexColor(string color)
    {
        return Regex.IsMatch(color, @"^#(?:[0-9A-Fa-f]{3,4}|[0-9A-Fa-f]{6,8})$");
    }
    public string ToCssColorString()
    {
        return _type switch
        {
            ColorType.Oklch => _oklchColor.Alpha < 1f
                ? $"oklch({_oklchColor.L} {_oklchColor.C} {_oklchColor.H})"
                : $"oklch({_oklchColor.L} {_oklchColor.C} {_oklchColor.H} / {_oklchColor.Alpha})",
            ColorType.Rgb => _variable,
            ColorType.Variable => $"var({_variable})",
            _ => throw new NotImplementedException()
        };
    }
    public virtual string ToCssClassString(string utility)
    {
        return $"{utility}-{_tailwindClass}";
    }
    protected enum ColorType
    {
	    Variable,
	    Oklch,
	    Rgb
    }
}
public readonly record struct Oklch(float L, float C, float H, float Alpha = 1.0f)
{
}
</file>

<file path="RizzyUIConfig.cs">
namespace RizzyUI;
public sealed class RizzyUIConfig
{
    public RzTheme DefaultTheme { get; set; } = RzTheme.Default;
}
</file>

<file path="RzComponent.cs">
using System.Diagnostics.CodeAnalysis;
using Microsoft.AspNetCore.Components;
using Microsoft.Extensions.Options;
using Rizzy.Htmx;
using TailwindMerge;
namespace RizzyUI;
public class RzComponent : ComponentBase
{
    private string? _nonce;
    [CascadingParameter]
    protected RzTheme? CascadedTheme { get; set; }
    [Inject]
    private IOptions<RizzyUIConfig>? Config { get; set; }
    protected RzTheme Theme { get; private set; } = RzTheme.Default;
    [Inject]
    protected TwMerge TwMerge { get; set; } = default!;
    [Inject]
    protected IRizzyNonceProvider RizzyNonceProvider { get; set; } = default!;
    [Parameter]
    public string Element { get; set; } = "div";
    [SuppressMessage("Usage", "CA2227:Collection properties should be read only",
        Justification = "False positive. This is a parameter.")]
    [Parameter(CaptureUnmatchedValues = true)]
    public Dictionary<string, object>? AdditionalAttributes { get; set; }
    protected string Nonce => _nonce ??= RizzyNonceProvider.GetNonce();
    protected virtual string? RootClass()
    {
        return AdditionalAttributes?.GetValueOrDefault("class", string.Empty).ToString();
    }
    protected override void OnInitialized()
    {
        base.OnInitialized();
        Theme = CascadedTheme ?? Config?.Value.DefaultTheme ?? RzTheme.Default;
    }
}
</file>

<file path="RzStylesBase.cs">
namespace RizzyUI;
public abstract class RzStylesBase
{
    #region RzAvatar Styles
    public abstract class RzAvatarStylesBase
    {
        protected readonly RzTheme Theme;
        protected RzAvatarStylesBase(RzTheme theme)
        {
            Theme = theme;
        }
        public abstract string Container { get; }
        public abstract string Indicator { get; }
        public abstract string Image { get; }
        public abstract string InitialsContainer { get; }
        public abstract string PlaceholderContainer { get; }
        public abstract string PlaceholderIcon { get; }
        public abstract string GetShapeCss(AvatarShape shape);
        public abstract string GetSizeCss(Size size);
        public abstract string GetInitialsSizeCss(Size size);
        public abstract string GetPlaceholderSizeCss(Size size);
        public abstract string GetIndicatorSizeCss(Size size);
        public abstract string GetIndicatorColorCss(AccentColor color);
    }
    #endregion
    #region RzBadge Styles
    public abstract class RzBadgeStylesBase
    {
        protected readonly RzTheme Theme;
        protected RzBadgeStylesBase(RzTheme theme)
        {
            Theme = theme;
        }
        public abstract string Badge { get; }
        public abstract string InnerSpan { get; }
        public abstract string GetVariantCss(SemanticColor color);
        public abstract string GetVariantSoftCss(SemanticColor color);
    }
    #endregion
    #region RzCodeViewer Styles
    public abstract class RzCodeViewerStylesBase
    {
        protected readonly RzTheme Theme;
        protected RzCodeViewerStylesBase(RzTheme theme)
        {
            Theme = theme;
        }
        public abstract string Container { get; }
        public abstract string Header { get; }
        public abstract string HeaderTitle { get; }
        public abstract string CodeContainer { get; }
        public abstract string CopyButtonContainer { get; }
        public abstract string CopyButton { get; }
        public abstract string CopyIconDefault { get; }
        public abstract string CopyIconCopied { get; }
        public abstract string PreWrapper { get; }
        public abstract string PreElement { get; }
        public abstract string ExpandButton { get; }
        public abstract string ExpandIcon { get; }
        public abstract string GetExpandContentCss(bool isExpanded);
        public abstract string GetExpandButtonIconCss(bool isExpanded);
        public abstract string GetCopyButtonStateCss(bool isCopied);
    }
    #endregion
    #region RzDateEdit Styles
    public abstract class RzDateEditStylesBase
    {
        protected readonly RzTheme Theme;
        protected RzDateEditStylesBase(RzTheme theme)
        {
            Theme = theme;
        }
        public abstract string Container { get; }
        public abstract string InputWrapper { get; }
        public abstract string PrependElement { get; }
        public abstract string PrependIconContainer { get; }
        public abstract string Input { get; }
    }
    #endregion
    #region RzDivider Styles
    public abstract class RzDividerStylesBase
    {
        protected readonly RzTheme Theme;
        protected RzDividerStylesBase(RzTheme theme)
        {
            Theme = theme;
        }
        public abstract string Divider { get; }
        public abstract string GetStyleCss(DividerStyle style);
        public abstract string GetAlignmentCss(Align alignment, DividerStyle style);
    }
    #endregion
    #region RzEmbeddedPreview Styles
    public abstract class RzEmbeddedPreviewStylesBase
    {
        protected readonly RzTheme Theme;
        protected RzEmbeddedPreviewStylesBase(RzTheme theme)
        {
            Theme = theme;
        }
        public abstract string Container { get; }
        public abstract string IFrame { get; }
    }
    #endregion
    #region RzFormSection Styles
    public abstract class RzFormSectionStylesBase
    {
        protected readonly RzTheme Theme;
        protected RzFormSectionStylesBase(RzTheme theme)
        {
            Theme = theme;
        }
        public abstract string Container { get; }
        public abstract string DescriptionContainer { get; }
        public abstract string Title { get; }
        public abstract string Description { get; }
        public abstract string ContentContainer { get; }
        public abstract string GetLayoutCss(SectionLayout layout);
        public abstract string GetDescriptionLayoutCss(SectionLayout layout);
        public abstract string GetContentLayoutCss(SectionLayout layout);
    }
    #endregion
    #region RzHeading Styles
    public abstract class RzHeadingStylesBase
    {
        protected readonly RzTheme Theme;
        protected RzHeadingStylesBase(RzTheme theme)
        {
            Theme = theme;
        }
        public abstract string GetLevelCss(HeadingLevel level);
    }
    #endregion
    #region RzLink Styles
    public abstract class RzLinkStylesBase
    {
        protected readonly RzTheme Theme;
        protected RzLinkStylesBase(RzTheme theme)
        {
            Theme = theme;
        }
        public abstract string Link { get; }
        public abstract string UnderlineEnabled { get; }
    }
    #endregion
    #region RzMarkdown Styles
    public abstract class RzMarkdownStylesBase
    {
        protected readonly RzTheme Theme;
        protected RzMarkdownStylesBase(RzTheme theme)
        {
            Theme = theme;
        }
        public abstract string Container { get; }
        public abstract string GetProseWidthCss(ProseWidth width);
    }
    #endregion
    #region RzNavbar Styles
    public abstract class RzNavbarStylesBase
    {
        protected readonly RzTheme Theme;
        protected RzNavbarStylesBase(RzTheme theme)
        {
            Theme = theme;
        }
        public abstract string Navbar { get; }
        public abstract string ToggleButton { get; }
        public abstract string ToggleButtonIconContainer { get; }
        public abstract string ToggleButtonSrText { get; }
        public abstract string ContentContainer { get; }
    }
    #endregion
    #region RzParagraph Styles
    public abstract class RzParagraphStylesBase
    {
        protected readonly RzTheme Theme;
        protected RzParagraphStylesBase(RzTheme theme)
        {
            Theme = theme;
        }
        public abstract string Paragraph { get; }
        public abstract string GetProseWidthCss(ProseWidth width);
    }
    #endregion
    #region RzProgress Styles
    public abstract class RzProgressStylesBase
    {
        protected readonly RzTheme Theme;
        protected RzProgressStylesBase(RzTheme theme)
        {
            Theme = theme;
        }
        public abstract string Container { get; }
        public abstract string OutsideLabelContainer { get; }
        public abstract string OutsideLabelText { get; }
        public abstract string OuterBar { get; }
        public abstract string InnerBarBase { get; }
        public abstract string InsideLabelContainer { get; }
        public abstract string InsideLabelText { get; }
        public abstract string GetOuterBarHeightCss(ProgressLabelPosition position);
        public abstract string GetInnerBarVariantCss(StatusColor variant);
        public abstract string GetInsideLabelColorCss(bool overflows);
    }
    #endregion
    #region RzStep Styles
    public abstract class RzStepsStylesBase
    {
        protected readonly RzTheme Theme;
        protected RzStepsStylesBase(RzTheme theme)
        {
            Theme = theme;
        }
        public abstract string Container { get; }
        public abstract string StepItem { get; }
        public abstract string ConnectorBase { get; }
        public abstract string StepContentContainer { get; }
        public abstract string CircleCompletedBase { get; }
        public abstract string CircleCompletedIcon { get; }
        public abstract string CircleCompletedSrText { get; }
        public abstract string CircleDefaultBase { get; }
        public abstract string LabelBase { get; }
        public abstract string Caption { get; }
        public abstract string GetOrientationCss(Orientation orientation);
        public abstract string GetStepItemWidthCss(bool isFirst);
        public abstract string GetConnectorCss(Orientation orientation, StepStatus previousStatus,
            StatusColor activeColor);
        public abstract string GetCircleCompletedCss(StatusColor activeColor);
        public abstract string GetCircleDefaultCss(StepStatus status, StatusColor activeColor);
        public abstract string GetLabelStatusCss(StepStatus status, StatusColor activeColor);
    }
    #endregion
    #region Typography Styles (Shared by RzHeading, RzParagraph)
    public abstract class RzTypographyStylesBase
    {
        protected readonly RzTheme Theme;
        protected RzTypographyStylesBase(RzTheme theme)
        {
            Theme = theme;
        }
        public abstract string GetTextWeightCss(TextWeight? weight);
        public abstract string GetTextSizeCss(TextSize? size);
        public abstract string GetTextTransformCss(TextTransform? transform);
        public abstract string GetTextDecorationCss(TextDecoration? decoration);
        public abstract string GetLineHeightCss(Leading? leading);
        public abstract string GetBaseCss(SemanticColor? textColor, TextWeight? weight, TextSize? size,
            Leading? lineHeight, TextDecoration? decoration, TextTransform? transform);
    }
    #endregion
    #region RzArticle Styles
    public abstract class RzArticleStylesBase
    {
        protected readonly RzTheme Theme;
        protected RzArticleStylesBase(RzTheme theme)
        {
            Theme = theme;
        }
        public abstract string Container { get; }
        public abstract string InnerContainer { get; }
        public abstract string Article { get; }
        public abstract string Aside { get; }
        public abstract string GetArticleProseCss(ProseWidth width);
        public abstract string GetAsideCss(Size columnWidth, bool isFixed);
        public abstract string GetContainerPaddingCss(Size columnWidth);
    }
    #endregion
    #region RzAccordion Styles
    public abstract class RzAccordionStylesBase
    {
        protected readonly RzTheme Theme;
        protected RzAccordionStylesBase(RzTheme theme)
        {
            Theme = theme;
        }
        public abstract string Container { get; }
    }
    public abstract class RzAccordionSectionStylesBase
    {
        protected readonly RzTheme Theme;
        protected RzAccordionSectionStylesBase(RzTheme theme)
        {
            Theme = theme;
        }
        public abstract string Button { get; }
        public abstract string ContentContainer { get; }
        public abstract string ChevronIcon { get; }
        public abstract string ChevronIconExpanded { get; }
    }
    #endregion
    #region RzAlert Styles
    public abstract class RzAlertStylesBase
    {
        protected readonly RzTheme Theme;
        protected RzAlertStylesBase(RzTheme theme)
        {
            Theme = theme;
        }
        public abstract string Container { get; }
        public abstract string InnerContainer { get; }
        public abstract string IconContainer { get; }
        public abstract string IconPulse { get; }
        public abstract string ContentContainer { get; }
        public abstract string CloseButton { get; }
        public abstract string CloseButtonIcon { get; }
        public abstract string GetVariantCss(AlertVariant variant);
        public abstract string GetVariantBackgroundLightCss(AlertVariant variant);
        public abstract string GetVariantBackgroundLighterCss(AlertVariant variant);
        public abstract string GetVariantIconColorCss(AlertVariant variant);
    }
    public abstract class RzAlertTitleStylesBase
    {
        protected readonly RzTheme Theme;
        protected RzAlertTitleStylesBase(RzTheme theme)
        {
            Theme = theme;
        }
        public abstract string Title { get; }
        public abstract string GetVariantTextColorCss(AlertVariant? variant);
    }
    public abstract class RzAlertDescriptionStylesBase
    {
        protected readonly RzTheme Theme;
        protected RzAlertDescriptionStylesBase(RzTheme theme)
        {
            Theme = theme;
        }
        public abstract string Description { get; }
    }
    #endregion
    #region RzBreadcrumb Styles
    public abstract class RzBreadcrumbStylesBase
    {
        protected readonly RzTheme Theme;
        protected RzBreadcrumbStylesBase(RzTheme theme)
        {
            Theme = theme;
        }
        public abstract string Container { get; }
        public abstract string List { get; }
    }
    public abstract class RzBreadcrumbItemStylesBase
    {
        protected readonly RzTheme Theme;
        protected RzBreadcrumbItemStylesBase(RzTheme theme)
        {
            Theme = theme;
        }
        public abstract string ListItem { get; }
        public abstract string Link { get; }
        public abstract string ActiveSpan { get; }
        public abstract string IconSpan { get; }
    }
    #endregion
    #region RzButton Styles
    public abstract class RzButtonStylesBase
    {
        protected readonly RzTheme Theme;
        protected RzButtonStylesBase(RzTheme theme)
        {
            Theme = theme;
        }
        public abstract string Button { get; }
        public abstract string Animated { get; }
        public abstract string GetVariantCss(ButtonVariant variant);
        public abstract string GetVariantOutlineCss(ButtonVariant variant);
        public abstract string GetSizeCss(Size size);
    }
    public abstract class RzButtonGroupStylesBase
    {
        protected readonly RzTheme Theme;
        protected RzButtonGroupStylesBase(RzTheme theme)
        {
            Theme = theme;
        }
        public abstract string Container { get; }
        public abstract string GroupFirst { get; }
        public abstract string GroupLast { get; }
        public abstract string GroupMiddle { get; }
    }
    public abstract class RzDarkmodeToggleStylesBase
    {
        protected readonly RzTheme Theme;
        protected RzDarkmodeToggleStylesBase(RzTheme theme)
        {
            Theme = theme;
        }
        public abstract string Button { get; }
        public abstract string Icon { get; }
    }
    public abstract class RzSearchButtonStylesBase
    {
        protected readonly RzTheme Theme;
        protected RzSearchButtonStylesBase(RzTheme theme)
        {
            Theme = theme;
        }
        public abstract string Button { get; }
        public abstract string InnerContainer { get; }
        public abstract string IconSpan { get; }
    }
    #endregion
    #region RzCard Styles
    public abstract class RzCardStylesBase
    {
        protected readonly RzTheme Theme;
        protected RzCardStylesBase(RzTheme theme)
        {
            Theme = theme;
        }
        public abstract string Container { get; }
    }
    public abstract class RzCardHeaderStylesBase
    {
        protected readonly RzTheme Theme;
        protected RzCardHeaderStylesBase(RzTheme theme)
        {
            Theme = theme;
        }
        public abstract string Header { get; }
    }
    public abstract class RzCardBodyStylesBase
    {
        protected readonly RzTheme Theme;
        protected RzCardBodyStylesBase(RzTheme theme)
        {
            Theme = theme;
        }
        public abstract string Body { get; }
    }
    public abstract class RzCardFooterStylesBase
    {
        protected readonly RzTheme Theme;
        protected RzCardFooterStylesBase(RzTheme theme)
        {
            Theme = theme;
        }
        public abstract string Footer { get; }
    }
    public abstract class RzCardTitleStylesBase
    {
        protected readonly RzTheme Theme;
        protected RzCardTitleStylesBase(RzTheme theme)
        {
            Theme = theme;
        }
        public abstract string Title { get; }
    }
    public abstract class RzCardSubtitleStylesBase
    {
        protected readonly RzTheme Theme;
        protected RzCardSubtitleStylesBase(RzTheme theme)
        {
            Theme = theme;
        }
        public abstract string Subtitle { get; }
    }
    public abstract class RzCardButtonsStylesBase
    {
        protected readonly RzTheme Theme;
        protected RzCardButtonsStylesBase(RzTheme theme)
        {
            Theme = theme;
        }
        public abstract string ButtonsContainer { get; }
    }
    #endregion
    #region RzCheckbox Styles
    public abstract class RzCheckboxGroupStylesBase
    {
        protected readonly RzTheme Theme;
        protected RzCheckboxGroupStylesBase(RzTheme theme)
        {
            Theme = theme;
        }
        public abstract string Container { get; }
        public abstract string GetOrientationCss(Orientation orientation);
    }
    public abstract class RzCheckboxGroupItemStylesBase
    {
        protected readonly RzTheme Theme;
        protected RzCheckboxGroupItemStylesBase(RzTheme theme)
        {
            Theme = theme;
        }
        public abstract string Label { get; }
        public abstract string CheckboxWrapper { get; }
        public abstract string CheckboxInput { get; }
        public abstract string IconContainer { get; }
        public abstract string TitleSpan { get; }
        public abstract string GetIconVisibilityCss(bool isChecked);
    }
    public abstract class RzCheckboxGroupFieldStylesBase
    {
        protected readonly RzTheme Theme;
        protected RzCheckboxGroupFieldStylesBase(RzTheme theme)
        {
            Theme = theme;
        }
        public abstract string Field { get; }
        public abstract string GroupWithinField { get; }
    }
    #endregion
    #region RzDropdown Styles
    public abstract class RzDropdownStylesBase
    {
        protected readonly RzTheme Theme;
        protected RzDropdownStylesBase(RzTheme theme)
        {
            Theme = theme;
        }
        public abstract string Container { get; }
        public abstract string RelativeWrapper { get; }
        public abstract string TriggerWrapper { get; }
        public abstract string MenuContainer { get; }
        public abstract string MenuInnerContainer { get; }
    }
    public abstract class RzDropdownSectionStylesBase
    {
        protected readonly RzTheme Theme;
        protected RzDropdownSectionStylesBase(RzTheme theme)
        {
            Theme = theme;
        }
        public abstract string Section { get; }
    }
    public abstract class RzDropdownMenuItemStylesBase
    {
        protected readonly RzTheme Theme;
        protected RzDropdownMenuItemStylesBase(RzTheme theme)
        {
            Theme = theme;
        }
        public abstract string MenuItem { get; }
        public abstract string IconSpan { get; }
        public abstract string Icon { get; }
        public abstract string TitleSpan { get; }
        public abstract string CountDiv { get; }
    }
    #endregion
    #region RzField Styles
    public abstract class RzFieldStylesBase
    {
        protected readonly RzTheme Theme;
        protected RzFieldStylesBase(RzTheme theme)
        {
            Theme = theme;
        }
        public abstract string Field { get; }
    }
    public abstract class RzFieldLabelStylesBase
    {
        protected readonly RzTheme Theme;
        protected RzFieldLabelStylesBase(RzTheme theme)
        {
            Theme = theme;
        }
        public abstract string Label { get; }
        public abstract string RequiredIndicator { get; }
    }
    public abstract class RzFieldHelpStylesBase
    {
        protected readonly RzTheme Theme;
        protected RzFieldHelpStylesBase(RzTheme theme)
        {
            Theme = theme;
        }
        public abstract string HelpText { get; }
    }
    #endregion
    #region RzNumber Styles
    public abstract class RzNumberEditStylesBase
    {
        protected readonly RzTheme Theme;
        protected RzNumberEditStylesBase(RzTheme theme)
        {
            Theme = theme;
        }
        public abstract string InputWrapper { get; }
        public abstract string PrependElement { get; }
        public abstract string PrependIconContainer { get; }
        public abstract string Input { get; }
    }
    public abstract class RzNumberFieldStylesBase
    {
        protected readonly RzTheme Theme;
        protected RzNumberFieldStylesBase(RzTheme theme)
        {
            Theme = theme;
        }
        public abstract string Field { get; }
    }
    #endregion
    #region RzQuickReference Styles
    public abstract class RzQuickReferenceStylesBase
    {
        protected readonly RzTheme Theme;
        protected RzQuickReferenceStylesBase(RzTheme theme)
        {
            Theme = theme;
        }
        public abstract string Container { get; }
        public abstract string Title { get; }
        public abstract string List { get; }
        public abstract string ListItem { get; }
        public abstract string Link { get; }
        public abstract string LinkSelected { get; }
        public abstract string GetIndentationCss(HeadingLevel level, HeadingLevel minLevel);
    }
    public abstract class RzQuickReferenceContainerStylesBase
    {
        protected readonly RzTheme Theme;
        protected RzQuickReferenceContainerStylesBase(RzTheme theme)
        {
            Theme = theme;
        }
        public abstract string Container { get; }
    }
    #endregion
    #region RzRadio Styles
    public abstract class RzRadioGroupStylesBase
    {
        protected readonly RzTheme Theme;
        protected RzRadioGroupStylesBase(RzTheme theme)
        {
            Theme = theme;
        }
        public abstract string Container { get; }
        public abstract string GetGridColumnsCss(Orientation orientation, int itemCount);
    }
    public abstract class RzRadioGroupItemStylesBase
    {
        protected readonly RzTheme Theme;
        protected RzRadioGroupItemStylesBase(RzTheme theme)
        {
            Theme = theme;
        }
        public abstract string LabelWrapper { get; }
        public abstract string RadioInput { get; }
        public abstract string IconContainer { get; }
        public abstract string ClickableContainer { get; }
        public abstract string ContentWrapper { get; }
        public abstract string LeadingIconContainer { get; }
        public abstract string TextContainer { get; }
        public abstract string LabelText { get; }
        public abstract string DescriptionText { get; }
    }
    public abstract class RzRadioGroupFieldStylesBase
    {
        protected readonly RzTheme Theme;
        protected RzRadioGroupFieldStylesBase(RzTheme theme)
        {
            Theme = theme;
        }
        public abstract string Field { get; }
        public abstract string GroupWithinField { get; }
    }
    #endregion
    #region RzSidebar Styles
    public abstract class RzSidebarStylesBase
    {
        protected readonly RzTheme Theme;
        protected RzSidebarStylesBase(RzTheme theme)
        {
            Theme = theme;
        }
        public abstract string Container { get; }
        public abstract string LayoutContainer { get; }
        public abstract string SkipLink { get; }
        public abstract string Overlay { get; }
        public abstract string Sidebar { get; }
        public abstract string MainContentContainer { get; }
        public abstract string MainContentPadding { get; }
        public abstract string FloatingToggleButton { get; }
        public abstract string GetSidebarTopCss(bool hasNavbar);
        public abstract string GetLayoutContainerTopCss(bool hasNavbar);
        public abstract string GetSidebarTranslationCss(bool isVisible);
    }
    public abstract class RzSidebarLinkItemStylesBase
    {
        protected readonly RzTheme Theme;
        protected RzSidebarLinkItemStylesBase(RzTheme theme)
        {
            Theme = theme;
        }
        public abstract string CollapsibleListItem { get; }
        public abstract string CollapsibleInnerDiv { get; }
        public abstract string CollapsibleButton { get; }
        public abstract string CollapsibleButtonIconContainer { get; }
        public abstract string CollapsibleButtonTitle { get; }
        public abstract string CollapsibleButtonTrailer { get; }
        public abstract string CollapsibleButtonChevron { get; }
        public abstract string CollapsibleNestedList { get; }
        public abstract string SubListItem { get; }
        public abstract string SubLinkOrDiv { get; }
        public abstract string TopLevelListItem { get; }
        public abstract string TopLevelNonCollapsibleDiv { get; }
        public abstract string TopLevelLink { get; }
        public abstract string ItemIconContainer { get; }
        public abstract string ItemTitle { get; }
        public abstract string ItemTrailer { get; }
        public abstract string NonCollapsibleNestedList { get; }
        public abstract string GetChevronRotationCss(bool isExpanded);
    }
    public abstract class RzSidebarLinksStylesBase
    {
        protected readonly RzTheme Theme;
        protected RzSidebarLinksStylesBase(RzTheme theme)
        {
            Theme = theme;
        }
        public abstract string List { get; }
    }
    #endregion
    #region RzTab Styles
    public abstract class RzTabsStylesBase
    {
        protected readonly RzTheme Theme;
        protected RzTabsStylesBase(RzTheme theme)
        {
            Theme = theme;
        }
        public abstract string Container { get; }
        public abstract string PanelsContainer { get; }
    }
    public abstract class RzTabStripStylesBase
    {
        protected readonly RzTheme Theme;
        protected RzTabStripStylesBase(RzTheme theme)
        {
            Theme = theme;
        }
        public abstract string Strip { get; }
        public abstract string Marker { get; }
        public abstract string MarkerInner { get; }
        public abstract string GetColumnsCss(int tabCount);
        public abstract string GetGapCss(Size spaceBetween);
        public abstract string GetMarkerAfterBackgroundCss(SemanticColor color);
    }
    public abstract class RzTabStylesBase
    {
        protected readonly RzTheme Theme;
        protected RzTabStylesBase(RzTheme theme)
        {
            Theme = theme;
        }
        public abstract string Button { get; }
        public abstract string GetJustifyCss(Justify justify);
        public abstract string GetTextColorCss(SemanticColor color);
        public abstract string GetBackgroundColorCss(SemanticColor color);
    }
    public abstract class RzTabPanelStylesBase
    {
        protected readonly RzTheme Theme;
        protected RzTabPanelStylesBase(RzTheme theme)
        {
            Theme = theme;
        }
        public abstract string OuterContainer { get; }
        public abstract string InnerContainer { get; }
        public abstract string GetTextColorCss(SemanticColor color);
    }
    #endregion
    #region RzText Styles
    public abstract class RzTextEditStylesBase
    {
        protected readonly RzTheme Theme;
        protected RzTextEditStylesBase(RzTheme theme)
        {
            Theme = theme;
        }
        public abstract string InputWrapper { get; }
        public abstract string PrependElement { get; }
        public abstract string PrependIconContainer { get; }
        public abstract string Input { get; }
    }
    public abstract class RzTextFieldStylesBase
    {
        protected readonly RzTheme Theme;
        protected RzTextFieldStylesBase(RzTheme theme)
        {
            Theme = theme;
        }
        public abstract string Field { get; }
    }
    #endregion
    #region RzToggle Styles
    public abstract class RzToggleStylesBase
    {
        protected readonly RzTheme Theme;
        protected RzToggleStylesBase(RzTheme theme)
        {
            Theme = theme;
        }
        public abstract string Toggle { get; }
    }
    public abstract class RzToggleFieldStylesBase
    {
        protected readonly RzTheme Theme;
        protected RzToggleFieldStylesBase(RzTheme theme)
        {
            Theme = theme;
        }
        public abstract string Field { get; }
        public abstract string ContentWrapper { get; }
        public abstract string InnerWrapper { get; }
        public abstract string LabelInField { get; }
        public abstract string ToggleInField { get; }
        public abstract string DescriptionInLabel { get; }
    }
    #endregion
}
</file>

<file path="RzTheme.cs">
#pragma warning disable CS8618
namespace RizzyUI;
public class RzTheme
{
    public RzTheme(string name, string themeCode)
    {
        Name = name;
        ThemeCode = themeCode;
        RzAccordion = new DefaultRzAccordionStyles(this);
        RzAccordionSection = new DefaultRzAccordionSectionStyles(this);
        RzAlert = new DefaultRzAlertStyles(this);
        RzAlertTitle = new DefaultRzAlertTitleStyles(this);
        RzAlertDescription = new DefaultRzAlertDescriptionStyles(this);
        RzArticle = new DefaultRzArticleStyles(this);
        RzAvatar = new DefaultRzAvatarStyles(this);
        RzBadge = new DefaultRzBadgeStyles(this);
        RzBreadcrumb = new DefaultRzBreadcrumbStyles(this);
        RzBreadcrumbItem = new DefaultRzBreadcrumbItemStyles(this);
        RzButton = new DefaultRzButtonStyles(this);
        RzButtonGroup = new DefaultRzButtonGroupStyles(this);
        RzCard = new DefaultRzCardStyles(this);
        RzCardBody = new DefaultRzCardBodyStyles(this);
        RzCardButtons = new DefaultRzCardButtonsStyles(this);
        RzCardFooter = new DefaultRzCardFooterStyles(this);
        RzCardHeader = new DefaultRzCardHeaderStyles(this);
        RzCardSubtitle = new DefaultRzCardSubtitleStyles(this);
        RzCardTitle = new DefaultRzCardTitleStyles(this);
        RzCheckboxGroup = new DefaultRzCheckboxGroupStyles(this);
        RzCheckboxGroupField = new DefaultRzCheckboxGroupFieldStyles(this);
        RzCheckboxGroupItem = new DefaultRzCheckboxGroupItemStyles(this);
        RzCodeViewer = new DefaultRzCodeViewerStyles(this);
        RzDarkmodeToggle = new DefaultRzDarkmodeToggleStyles(this);
        RzDateEdit = new DefaultRzDateEditStyles(this);
        RzDivider = new DefaultRzDividerStyles(this);
        RzDropdown = new DefaultRzDropdownStyles(this);
        RzDropdownMenuItem = new DefaultRzDropdownMenuItemStyles(this);
        RzDropdownSection = new DefaultRzDropdownSectionStyles(this);
        RzEmbeddedPreview = new DefaultRzEmbeddedPreviewStyles(this);
        RzField = new DefaultRzFieldStyles(this);
        RzFieldHelp = new DefaultRzFieldHelpStyles(this);
        RzFieldLabel = new DefaultRzFieldLabelStyles(this);
        RzFormSection = new DefaultRzFormSectionStyles(this);
        RzHeading = new DefaultRzHeadingStyles(this);
        RzLink = new DefaultRzLinkStyles(this);
        RzMarkdown = new DefaultRzMarkdownStyles(this);
        RzNavbar = new DefaultRzNavbarStyles(this);
        RzNumberEdit = new DefaultRzNumberEditStyles(this);
        RzNumberField = new DefaultRzNumberFieldStyles(this);
        RzParagraph = new DefaultRzParagraphStyles(this);
        RzProgress = new DefaultRzProgressStyles(this);
        RzQuickReferenceContainer = new DefaultRzQuickReferenceContainerStyles(this);
        RzQuickReference = new DefaultRzQuickReferenceStyles(this);
        RzRadioGroup = new DefaultRzRadioGroupStyles(this);
        RzRadioGroupField = new DefaultRzRadioGroupFieldStyles(this);
        RzRadioGroupItem = new DefaultRzRadioGroupItemStyles(this);
        RzSearchButton = new DefaultRzSearchButtonStyles(this);
        RzSidebar = new DefaultRzSidebarStyles(this);
        RzSidebarLinkItem = new DefaultRzSidebarLinkItemStyles(this);
        RzSidebarLinks = new DefaultRzSidebarLinksStyles(this);
        RzSteps = new DefaultRzStepsStyles(this);
        RzTabs = new DefaultRzTabsStyles(this);
        RzTab = new DefaultRzTabStyles(this);
        RzTabPanel = new DefaultRzTabPanelStyles(this);
        RzTabStrip = new DefaultRzTabStripStyles(this);
        RzTextEdit = new DefaultRzTextEditStyles(this);
        RzTextField = new DefaultRzTextFieldStyles(this);
        RzToggle = new DefaultRzToggleStyles(this);
        RzToggleField = new DefaultRzToggleFieldStyles(this);
        RzTypography = new DefaultRzTypographyStyles(this);
    }
    public string Name { get; init; }
    public string ThemeCode { get; init; }
    public RzThemeVariant Light { get; set; } = new();
    public RzThemeVariant Dark { get; set; } = new();
    public Color Danger { get; init; }
    public Color OnDanger { get; init; }
    public Color Info { get; init; }
    public Color OnInfo { get; init; }
    public Color Warning { get; init; }
    public Color OnWarning { get; init; }
    public Color Success { get; init; }
    public Color OnSuccess { get; init; }
    public string BorderWidth { get; init; }
    public string BorderRadius { get; init; }
    public virtual RzStylesBase.RzAccordionStylesBase RzAccordion { get; }
    public virtual RzStylesBase.RzAccordionSectionStylesBase RzAccordionSection { get; }
    public virtual RzStylesBase.RzAlertStylesBase RzAlert { get; }
    public virtual RzStylesBase.RzAlertTitleStylesBase RzAlertTitle { get; }
    public virtual RzStylesBase.RzAlertDescriptionStylesBase RzAlertDescription { get; }
    public virtual RzStylesBase.RzArticleStylesBase RzArticle { get; }
    public virtual RzStylesBase.RzAvatarStylesBase RzAvatar { get; }
    public virtual RzStylesBase.RzBadgeStylesBase RzBadge { get; }
    public virtual RzStylesBase.RzBreadcrumbStylesBase RzBreadcrumb { get; }
    public virtual RzStylesBase.RzBreadcrumbItemStylesBase RzBreadcrumbItem { get; }
    public virtual RzStylesBase.RzButtonStylesBase RzButton { get; }
    public virtual RzStylesBase.RzButtonGroupStylesBase RzButtonGroup { get; }
    public virtual RzStylesBase.RzCardStylesBase RzCard { get; }
    public virtual RzStylesBase.RzCardBodyStylesBase RzCardBody { get; }
    public virtual RzStylesBase.RzCardButtonsStylesBase RzCardButtons { get; }
    public virtual RzStylesBase.RzCardFooterStylesBase RzCardFooter { get; }
    public virtual RzStylesBase.RzCardHeaderStylesBase RzCardHeader { get; }
    public virtual RzStylesBase.RzCardSubtitleStylesBase RzCardSubtitle { get; }
    public virtual RzStylesBase.RzCardTitleStylesBase RzCardTitle { get; }
    public virtual RzStylesBase.RzCheckboxGroupStylesBase RzCheckboxGroup { get; }
    public virtual RzStylesBase.RzCheckboxGroupFieldStylesBase RzCheckboxGroupField { get; }
    public virtual RzStylesBase.RzCheckboxGroupItemStylesBase RzCheckboxGroupItem { get; }
    public virtual RzStylesBase.RzCodeViewerStylesBase RzCodeViewer { get; }
    public virtual RzStylesBase.RzDarkmodeToggleStylesBase RzDarkmodeToggle { get; }
    public virtual RzStylesBase.RzDateEditStylesBase RzDateEdit { get; }
    public virtual RzStylesBase.RzDividerStylesBase RzDivider { get; }
    public virtual RzStylesBase.RzDropdownStylesBase RzDropdown { get; }
    public virtual RzStylesBase.RzDropdownMenuItemStylesBase RzDropdownMenuItem { get; }
    public virtual RzStylesBase.RzDropdownSectionStylesBase RzDropdownSection { get; }
    public virtual RzStylesBase.RzEmbeddedPreviewStylesBase RzEmbeddedPreview { get; }
    public virtual RzStylesBase.RzFieldStylesBase RzField { get; }
    public virtual RzStylesBase.RzFieldHelpStylesBase RzFieldHelp { get; }
    public virtual RzStylesBase.RzFieldLabelStylesBase RzFieldLabel { get; }
    public virtual RzStylesBase.RzFormSectionStylesBase RzFormSection { get; }
    public virtual RzStylesBase.RzHeadingStylesBase RzHeading { get; }
    public virtual RzStylesBase.RzLinkStylesBase RzLink { get; }
    public virtual RzStylesBase.RzMarkdownStylesBase RzMarkdown { get; }
    public virtual RzStylesBase.RzNavbarStylesBase RzNavbar { get; }
    public virtual RzStylesBase.RzNumberEditStylesBase RzNumberEdit { get; }
    public virtual RzStylesBase.RzNumberFieldStylesBase RzNumberField { get; }
    public virtual RzStylesBase.RzParagraphStylesBase RzParagraph { get; }
    public virtual RzStylesBase.RzProgressStylesBase RzProgress { get; }
    public virtual RzStylesBase.RzQuickReferenceContainerStylesBase RzQuickReferenceContainer { get; }
    public virtual RzStylesBase.RzQuickReferenceStylesBase RzQuickReference { get; }
    public virtual RzStylesBase.RzRadioGroupStylesBase RzRadioGroup { get; }
    public virtual RzStylesBase.RzRadioGroupFieldStylesBase RzRadioGroupField { get; }
    public virtual RzStylesBase.RzRadioGroupItemStylesBase RzRadioGroupItem { get; }
    public virtual RzStylesBase.RzSearchButtonStylesBase RzSearchButton { get; }
    public virtual RzStylesBase.RzSidebarStylesBase RzSidebar { get; }
    public virtual RzStylesBase.RzSidebarLinkItemStylesBase RzSidebarLinkItem { get; }
    public virtual RzStylesBase.RzSidebarLinksStylesBase RzSidebarLinks { get; }
    public virtual RzStylesBase.RzStepsStylesBase RzSteps { get; }
    public virtual RzStylesBase.RzTabsStylesBase RzTabs { get; }
    public virtual RzStylesBase.RzTabStylesBase RzTab { get; }
    public virtual RzStylesBase.RzTabPanelStylesBase RzTabPanel { get; }
    public virtual RzStylesBase.RzTabStripStylesBase RzTabStrip { get; }
    public virtual RzStylesBase.RzTextEditStylesBase RzTextEdit { get; }
    public virtual RzStylesBase.RzTextFieldStylesBase RzTextField { get; }
    public virtual RzStylesBase.RzToggleStylesBase RzToggle { get; }
    public virtual RzStylesBase.RzToggleFieldStylesBase RzToggleField { get; }
    public virtual RzStylesBase.RzTypographyStylesBase RzTypography { get; }
    public static RzTheme Default => ArcticTheme;
    public static RzTheme ArcticTheme => new ArcticTheme();
    public static RzTheme HighContrastTheme => new HighContrastTheme();
    public static RzTheme ModernTheme => new ModernTheme();
    public static RzTheme NewsTheme => new NewsTheme();
}
#pragma warning restore CS8618
</file>

<file path="RzThemeVariant.cs">
#pragma warning disable CS8618
namespace RizzyUI;
public class RzThemeVariant
{
    public Color Surface { get; init; }
    public Color OnSurface { get; init; }
    public Color OnSurfaceStrong { get; init; }
    public Color OnSurfaceMuted { get; init; }
    public Color SurfaceAlt { get; init; }
    public Color SurfaceTertiary { get; init; }
    public Color OnSurfaceTertiary { get; init; }
    public Color Primary { get; init; }
    public Color OnPrimary { get; init; }
    public Color Secondary { get; init; }
    public Color OnSecondary { get; init; }
    public Color Outline { get; init; }
    public Color OutlineStrong { get; init; }
    public RizzyCodeTheme Code { get; init; }
}
</file>

<file path="Utility/Serialization/Converters/CalendarPositionConverter.cs">
using System.Text.Json;
using System.Text.Json.Serialization;
using RizzyUI;
namespace Jalex.UI.Components.Form.Converters;
public class CalendarPositionConverter : JsonConverter<CalendarPosition>
{
    public override CalendarPosition Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
    {
        var value = reader.GetString() ?? string.Empty;
        return value switch
        {
            "auto" => CalendarPosition.Auto,
            "above" => CalendarPosition.Above,
            "below" => CalendarPosition.Below,
            "auto left" => CalendarPosition.AutoLeft,
            "auto center" => CalendarPosition.AutoCenter,
            "auto right" => CalendarPosition.AutoRight,
            "above left" => CalendarPosition.AboveLeft,
            "above center" => CalendarPosition.AboveCenter,
            "above right" => CalendarPosition.AboveRight,
            "below left" => CalendarPosition.BelowLeft,
            "below center" => CalendarPosition.BelowCenter,
            "below right" => CalendarPosition.BelowRight,
            _ => throw new ArgumentOutOfRangeException($"Unexpected value when parsing CalendarPosition: {value}")
        };
    }
    public override void Write(Utf8JsonWriter writer, CalendarPosition value, JsonSerializerOptions options)
    {
        var stringValue = value switch
        {
            CalendarPosition.Auto => "auto",
            CalendarPosition.Above => "above",
            CalendarPosition.Below => "below",
            CalendarPosition.AutoLeft => "auto left",
            CalendarPosition.AutoCenter => "auto center",
            CalendarPosition.AutoRight => "auto right",
            CalendarPosition.AboveLeft => "above left",
            CalendarPosition.AboveCenter => "above center",
            CalendarPosition.AboveRight => "above right",
            CalendarPosition.BelowLeft => "below left",
            CalendarPosition.BelowCenter => "below center",
            CalendarPosition.BelowRight => "below right",
            _ => throw new ArgumentOutOfRangeException($"Unexpected CalendarPosition value: {value}")
        };
        writer.WriteStringValue(stringValue);
    }
}
</file>

<file path="Utility/Serialization/Converters/RawStringConverter.cs">
using System.Text.Json;
using System.Text.Json.Serialization;
namespace RizzyUI.Utility.Serialization.Converters;
public class RawStringConverter : JsonConverter<string>
{
    public override string Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
    {
        return string.Empty;
    }
    public override void Write(Utf8JsonWriter writer, string value, JsonSerializerOptions options)
    {
        writer.WriteRawValue(value, true);
    }
}
</file>

<file path="Utility/Serialization/Converters/SingleQuoteStringConverter.cs">
using System.Text.Json;
using System.Text.Json.Serialization;
namespace RizzyUI.Utility.Serialization.Converters;
internal class SingleQuoteStringConverter : JsonConverter<string>
{
    public override string Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
    {
        return reader.GetString() ?? string.Empty;
    }
    public override void Write(Utf8JsonWriter writer, string value, JsonSerializerOptions options)
    {
        writer.WriteRawValue($"'{value.Replace("'", "\\'")}'", true);
    }
}
</file>

<file path="wwwroot/js/rizzyui.js">
import Alpine from 'alpinejs';
import collapse from '@alpinejs/collapse';
import intersect from '@alpinejs/intersect';
import focus from '@alpinejs/focus';
import { registerComponents, require } from './alpine/components.js';
Alpine.plugin(collapse);
Alpine.plugin(intersect);
Alpine.plugin(focus)
registerComponents(Alpine);
window.Alpine = Alpine
Alpine.start()
export { Alpine, require };
</file>

</files>

<instruction>
﻿Your Role: Senior C# Developer
Specialization: ASP.NET and Blazor Razor Components
Context: Static Blazor Razor component development

You will use the "RizzyUI Component Coding Guidelines", outlined below, to perform your role as developer. You will be asked to
potentially develop new components, review code, or answer questions. You are required to be an expert on RizzyUI, so understanding
the guidelines below and the code provided is extremely important.

# RizzyUI Component Coding Guidelines

> **Note:** These guidelines assume you have access to the source code (e.g. files like **RizzyComponent.cs**, **TwMergeExtensions.cs**, **DarkmodeToggle.razor**, **Alert.razor**, etc.) and are intended to enforce our strict design, accessibility, and security requirements.

---

## 1. Component File Structure

- **Two-File Separation**
  - **Each component must be split into two files:**
    - **Markup File (.razor):** Contains only markup and the `@inherits RizzyComponent` directive.
    - **Code-Behind File (.razor.cs):** Contains a partial class with all C# code (logic, properties, methods).
  - **Benefits:**
    - Improves clarity and maintainability.
    - Enforces separation of concerns between UI markup and component logic.
  - **Example:**
    - **MyComponent.razor:**
      ```razor
      @namespace RizzyUI
      @inherits RizzyComponent

      <HtmlElement Element="div" @attributes="@AdditionalAttributes" class="@RootClass()">
          <p>Hello from MyComponent!</p>
      </HtmlElement>
      ```
    - **MyComponent.razor.cs:**
      ```csharp
      using Microsoft.AspNetCore.Components;
      using RizzyUI.Extensions;

      namespace RizzyUI;

      /// <xmldoc>
      /// A simple example component that displays a message.
      /// </xmldoc>
      public partial class MyComponent : RizzyComponent
      {
          private static readonly string BaseStyle = "p-4 bg-surface text-on-surface";

          /// <xmldoc>
          /// Gets the computed CSS class by merging AdditionalAttributes with the base style.
          /// </xmldoc>
          protected override string? RootClass() =>
              TwMerge.Merge(AdditionalAttributes, BaseStyle);
      }
      ```

- **File-Scoped Namespaces**
  - **Rule:** Every file must begin with a file-scoped namespace declaration.
    - **Example:**  
      ```csharp
      namespace RizzyUI;
      ```

- **Inheritance**
  - **All components must directly inherit from `RizzyComponent`.**
    - This base class (see **RizzyComponent.cs**) provides standard properties like `AdditionalAttributes`, a default `RootClass()` method, and manages Nonce values.
  
- **Code Review**
  - If you create a razor component that uses a Blazicon component, remember to add `@using Blazicons` at the top of the page
  - Any partial classes for a razor component that use TwMerge.Merge should remember to add `using RizzyUI.Extensions;` at the top of the page
  - Any partial classes for a razor component should *always* include `using Microsoft.AspNetCore.Components;` at the top of the page

---

## 2. Root Element and Class Generation

- **Use `<HtmlElement>` for the Root Element**
  - **Why?** It enables the use of the `Element` parameter to control the HTML tag.
  - **Mandatory Markup:** The root element must always include:
    ```razor
    @attributes="@AdditionalAttributes" class="@RootClass()"
    ```
  - **Example:**
    ```razor
    <HtmlElement Element="button" @attributes="@AdditionalAttributes" class="@RootClass()" aria-label="@AssistiveLabel" x-data="rzButton">
         @ChildContent
    </HtmlElement>
    ```

- **RootClass() Method in Code-Behind**
  - **Purpose:** Computes the final CSS class string by merging:
    - The component's default style (stored in a private static read-only string named **BaseStyle**).
    - Additional classes provided in `AdditionalAttributes`.
    - Variant-, size-, or state-specific classes (if applicable).
  - **Key Rule:** Always call `TwMerge.Merge(AdditionalAttributes, …)` to combine classes. This method intelligently removes redundant or conflicting Tailwind classes.
  - **Example Pattern:**
    ```csharp
    protected override string? RootClass()
    {
        string trailer = string.Empty;
        if (Group != null)
        {
            int idx = Group.Buttons.IndexOf(this);
            if (idx == 0)
                trailer = " rounded-none rounded-l-lg";
            else if (idx == Group.Buttons.Count - 1)
                trailer = " rounded-none rounded-r-lg border-l-0";
            else
                trailer = " rounded-none border-l-0";
        }
        return TwMerge.Merge(AdditionalAttributes, BaseStyle,
            Outline ? GetButtonOutlineVariantCss(Variant) : GetButtonVariantCss(Variant),
            GetButtonSizeCss(Size), trailer);
    }
    ```

---

## 3. Styling with Tailwind CSS 4.0 and Design Tokens

- **Tailwind CSS 4.0**
  - **Requirement:** Use Tailwind CSS 4.0 exclusively for styling. This is our CSS-first configuration method.
  - **No Inline CSS:** All styling must be done via Tailwind classes (and design tokens), not via inline `style` attributes.
  - **BaseStyle Field:** In every component's code-behind file, define a private static read-only field named **BaseStyle** that contains the default Tailwind CSS classes.
    - **Example:**
      ```csharp
      private static readonly string BaseStyle = "inline-flex items-center justify-center gap-2 cursor-pointer rounded font-medium tracking-wide text-center transition hover:opacity-75";
      ```

- **Design Tokens: Tailwind Semantic Color Tokens Available for Styling**

  The following design tokens are defined in our Tailwind configuration and theme (see also **RizzyThemeProvider.cs** and the theme files under **Components/Theme/Themes/**). They must be used to ensure consistency across components.

  ### **Default (Light) Mode Colors**
  - **surface**  
     **Token:** `--color-surface`  
     **Usage:** For primary backgrounds (e.g. `bg-surface`).
  - **on-surface**  
     **Token:** `--color-on-surface`  
     **Usage:** For text or icons placed on the surface (e.g. `text-on-surface`).
  - **on-surface-strong**  
     **Token:** `--color-on-surface-strong`  
     **Usage:** A stronger variant for elements on the surface (e.g. `text-on-surface-strong`).
  - **on-surface-muted**  
     **Token:** `--color-on-surface-muted`  
     **Usage:** A muted option for text/icons on the surface.
  - **surface-alt**  
     **Token:** `--color-surface-alt`  
     **Usage:** Alternate background for surfaces (for subtle patterns or secondary areas).
  - **primary**  
     **Token:** `--color-primary`  
     **Usage:** Primary brand or action color (e.g. `bg-primary`, `text-primary`).
  - **on-primary**  
     **Token:** `--color-on-primary`  
     **Usage:** Text or icon color used on a primary-colored background.
  - **secondary**  
     **Token:** `--color-secondary`  
     **Usage:** Secondary accent color (e.g. `bg-secondary`, `text-secondary`).
  - **on-secondary**  
     **Token:** `--color-on-secondary`  
     **Usage:** For text/icons on secondary backgrounds.
  - **outline**  
     **Token:** `--color-outline`  
     **Usage:** Used for borders or outlines (e.g. `border-outline`).
  - **outline-strong**  
     **Token:** `--color-outline-strong`  
     **Usage:** A stronger outline alternative (e.g. `border-outline-strong`).

  ### **Dark Mode Colors**
  - **surface-dark**  
     **Token:** `--color-surface-dark`  
     **Usage:** The primary dark background (e.g. `bg-surface-dark`).
  - **on-surface-dark**  
     **Token:** `--color-on-surface-dark`  
     **Usage:** For text/icons on dark surfaces.
  - **on-surface-dark-strong**  
     **Token:** `--color-on-surface-dark-strong`  
     **Usage:** A stronger text variant for dark backgrounds.
  - **on-surface-dark-muted**  
     **Token:** `--color-on-surface-dark-muted`  
     **Usage:** A muted text/icon color for dark surfaces.
  - **surface-dark-alt**  
     **Token:** `--color-surface-dark-alt`  
     **Usage:** Alternate background in dark mode areas.
  - **primary-dark**  
     **Token:** `--color-primary-dark`  
     **Usage:** Dark variant of the primary color.
  - **on-primary-dark**  
     **Token:** `--color-on-primary-dark`  
     **Usage:** For text/icons on primary-dark backgrounds.
  - **secondary-dark**  
     **Token:** `--color-secondary-dark`  
     **Usage:** Dark variant of the secondary color.
  - **on-secondary-dark**  
     **Token:** `--color-on-secondary-dark`  
     **Usage:** For elements on secondary-dark backgrounds.
  - **outline-dark**  
     **Token:** `--color-outline-dark`  
     **Usage:** Dark variant for borders or outlines.
  - **outline-dark-strong**  
     **Token:** `--color-outline-dark-strong`  
     **Usage:** A stronger dark outline option.

  ### **Status & Utility Colors**
  - **danger**  
     **Token:** `--color-danger`  
     **Usage:** Used for error or danger states (e.g. `bg-danger`, `text-danger`).
  - **on-danger**  
     **Token:** `--color-on-danger`  
     **Usage:** Text or icon color to be used on danger backgrounds.
  - **info**  
     **Token:** `--color-info`  
     **Usage:** Informational color (e.g. `bg-info`, `text-info`).
  - **onInfo**  
     **Token:** `--color-onInfo`  
     **Usage:** For text/icons on info backgrounds.
  - **warning**  
     **Token:** `--color-warning`  
     **Usage:** For warnings or cautionary messages (e.g. `bg-warning`, `text-warning`).
  - **on-warning**  
     **Token:** `--color-on-warning`  
     **Usage:** For text/icons on warning backgrounds.
  - **success**  
     **Token:** `--color-success`  
     **Usage:** Indicates success or confirmation (e.g. `bg-success`, `text-success`).
  - **on-success**  
     **Token:** `--color-on-success`  
     **Usage:** For elements placed on success backgrounds.

- **CSS-First Configuration Method**
  - **Explanation:** Tailwind 4.0 now favors a CSS-first approach where design tokens (defined as CSS custom properties) are declared in your theme configuration. For example, in our **@theme** block (see our Tailwind configuration), tokens such as `--color-surface` and `--color-primary` are defined.
  - **Usage:** When you use classes like `bg-surface` or `text-on-primary`, Tailwind outputs CSS that references these tokens. This ensures consistent styling that automatically adapts to theme changes.
  - **Reference Example (from our configuration):**
    ```css
    @theme {
        --default-font-family: 'Inter', 'Figtree', 'open sans';
        --color-surface: var(--color-white);
        --color-on-surface: var(--color-slate-700);
        --color-on-surface-strong: var(--color-black);
        --color-on-surface-muted: var(--color-neutral-500);
        --color-surface-alt: var(--color-slate-100);
        --color-primary: var(--color-blue-700);
        --color-on-primary: var(--color-slate-100);
        /* ... more tokens ... */
    }
    ```
  - **Note:** Junior developers should refer to both this guide and the actual theme files (e.g. **Themes/ArcticTheme.cs**, **Themes/HighContrastTheme.cs**, etc.) for the concrete values and available tokens.

---

## 4. Alpine.js Integration and Content Security Policy (CSP)

- **All Interactivity via Alpine.js**
  - **Rule:** Do not use C# event handlers (e.g. `@onclick`). All interactive behavior must be implemented with Alpine.js.
  - **Alpine Data Naming Convention:** Name all Alpine data objects with a prefix **`rz`** followed by the component name (e.g., `rzAlert`, `rzButton`, `rzDateEdit`).
  - **Method/Property References:**
    - **Correct:** `x-on:click="dismiss"` (references the `dismiss` method defined in the external Alpine data object).
    - **Incorrect:** `x-on:click="dismiss()"` (avoid inline function calls).
  
- **External Alpine.js Definitions**
  - **All Alpine logic must reside in external JavaScript files** (for example, **wwwroot/js/rizzyui.js**). Do not embed inline scripts.
  - **Example Alpine Definition (for Alert):**
    ```js
    // In wwwroot/js/rizzyui.js (external file)
    Alpine.data('rzAlert', () => ({
        showAlert: true,
        dismiss() {
            this.showAlert = false;
        }
    }));
    ```

- **CSP-Compatible Alpine.js Build**
  - **Requirement:** Our project uses a strict Content Security Policy that disallows inline scripts. Therefore, use the Alpine.js CSP-compatible build:
    ```html
    <script defer nonce="YOUR_NONCE" src="https://cdn.jsdelivr.net/npm/@alpinejs/csp@3.x.x/dist/cdn.min.js"></script>
    ```
  - **Note:** No inline Alpine scripts are allowed--only references to methods or properties by name.

- **Passing Data to Alpine**
  - **Pattern:** Use data- attributes to pass configuration or state data.
  - **Example (from DateEdit.razor):**
    ```razor
    data-config="@_serializedConfig"
    data-assets="@_assets"
    data-scriptnonce="@Nonce"
    data-stylenonce="@Nonce"
    ```

---

## 5. Accessibility (WCAG 2.2+)

- **ARIA Attributes and Semantic HTML**
  - **Always assign appropriate ARIA roles and properties.**
    - Example:  
      `role="alert" aria-live="assertive" aria-label="Alert message"`
  - **Keyboard and Focus:** Ensure interactive elements are focusable and have clear focus indicators.
  - **Skip Navigation:** Provide skip links (e.g., "skip to main content") where appropriate (see **Sidebar.razor**).

---

## 6. XML Documentation (xmldoc)

- **XML Documentation Requirements**
  - **Public and Protected Members:** Must have XML documentation comments using triple slashes (`///`), commonly referred to as **xmldoc**.
  - **Content:** Explain the purpose, parameters, return values, and usage.
  - **Example:**
    ```csharp
    /// <xmldoc>
    /// Gets the computed CSS class for the component's root element.
    /// Merges the base style with any additional attributes provided.
    /// </xmldoc>
    protected override string? RootClass() { ... }
    ```
  - **Note:** Private or internal members do not require xmldoc unless their complexity warrants further explanation.

---

## 7. Naming and Code Conventions

- **General C# Conventions**
  - **PascalCase:** For public and protected members, classes, and types.
  - **camelCase:** For private fields and local variables.
  - **Consistent Formatting:** Ensure proper indentation and avoid unnecessary complexity.
- **Component-Specific Conventions**
  - **BaseStyle Field:** Declare as a private static read-only string named **BaseStyle**.
  - **Method Naming:** Use clear, descriptive names (e.g., `GetButtonVariantCss`, `RootClass`).

---

## 8. Error Handling and Robustness

- **Validate Required Parameters**
  - Throw descriptive exceptions when required parameters (e.g., a `For` expression for form fields) are missing.
  - **Example:**
    ```csharp
    if (EditContext is null)
    {
        throw new InvalidOperationException("This field must be part of an EditForm");
    }
    ```
- **Graceful Failure:** Use techniques like `Math.Clamp` to prevent errors (e.g., in progress bar calculations).

---

## 9. File-Specific Guidelines and References

- **RizzyComponent.cs**
  - The base class for all components.
  - Manages `AdditionalAttributes`, `Nonce`, and a default `RootClass()` method.
- **TwMergeExtensions.cs**
  - Provides the extension method **TwMerge.Merge** to merge CSS classes.
- **Alpine.js in rizzyui.js**
  - Contains external Alpine data definitions (e.g., `rzAlert`, `rzButton`, etc.).
- **Reference Components:**
  - **DarkmodeToggle.razor/.cs:** Demonstrates state toggling and use of design tokens.
  - **Alert.razor/.cs:** Shows ARIA attributes and external Alpine interactivity.
  - **TextField.razor/.cs:** Combines form field elements with labels, placeholders, and validation.

---

## 10. Mini Examples Recap

### A. Simple Alert Component

**Alert.razor:**
```razor
@namespace RizzyUI
@inherits RizzyComponent

<HtmlElement Element="div" @attributes="@AdditionalAttributes" class="@RootClass()"
             role="alert" aria-live="assertive" aria-label="Alert message" x-data="rzAlert">
    <span>@ChildContent</span>
    <button type="button" aria-label="Close alert" x-on:click="dismiss">
        Close
    </button>
</HtmlElement>
```

**Alert.razor.cs:**
```csharp
namespace RizzyUI;

/// <xmldoc>
/// Represents an alert component with dismiss functionality.
/// </xmldoc>
public partial class Alert : RizzyComponent
{
    private static readonly string BaseStyle = "p-4 border rounded bg-surface-alt text-on-surface";

    /// <xmldoc>
    /// Gets or sets the content displayed within the alert.
    /// </xmldoc>
    [Parameter]
    public RenderFragment? ChildContent { get; set; }

    /// <xmldoc>
    /// Computes the alert's CSS class.
    /// </xmldoc>
    protected override string? RootClass() => TwMerge.Merge(AdditionalAttributes, BaseStyle);
}
```
*Note: The `dismiss` behavior is implemented externally in Alpine.js (in the `rzAlert` data object).*

---

### B. Button Component

**Button.razor:**
```razor
@namespace RizzyUI
@inherits RizzyComponent

<HtmlElement Element="button" @attributes="@AdditionalAttributes" class="@RootClass()"
             aria-label="@AssistiveLabel" x-data="rzButton">
    @ChildContent
</HtmlElement>
```

**Button.razor.cs:**
```csharp
namespace RizzyUI;

/// <xmldoc>
/// Represents a customizable button component.
/// </xmldoc>
public partial class Button : RizzyComponent
{
    private static readonly string BaseStyle = "inline-flex items-center justify-center gap-2 cursor-pointer rounded font-medium tracking-wide text-center transition hover:opacity-75 active:opacity-100";

    /// <xmldoc>
    /// Gets or sets the accessible label for the button.
    /// </xmldoc>
    [Parameter]
    public string AssistiveLabel { get; set; } = "Action Button";

    /// <xmldoc>
    /// Gets or sets the content inside the button.
    /// </xmldoc>
    [Parameter]
    public RenderFragment? ChildContent { get; set; }

    /// <xmldoc>
    /// Computes the button's CSS class.
    /// </xmldoc>
    protected override string? RootClass() => TwMerge.Merge(AdditionalAttributes, BaseStyle);
}
```
*Interactivity is handled by Alpine.js via the external `rzButton` data object.*

---

### C. Form Field (TextField) Component

**TextField.razor:**
```razor
@namespace RizzyUI
@inherits RizzyComponent

<Field @attributes="@AdditionalAttributes" class="@RootClass()">
    <FieldLabel DisplayName="@DisplayName" For="@For">
        @if (Required)
        {
            <span class="text-sm text-red-600">*</span>
        }
    </FieldLabel>
    <TextEdit For="@For" Role="@Role" Placeholder="@Placeholder" PrependIcon="@PrependIcon" PrependText="@PrependText" />
    @if (FieldHelp != null)
    {
        <FieldHelp>@FieldHelp</FieldHelp>
    }
    <RzValidationMessage For="@For" />
</Field>
```

**TextField.razor.cs:**
```csharp
namespace RizzyUI;

/// <xmldoc>
/// A text field component that includes a label, optional prepend (text or icon), help content, and validation messages.
/// </xmldoc>
public partial class TextField : RizzyComponent
{
    private static readonly string BaseStyle = "";

    /// <xmldoc>
    /// Gets or sets the label text for the field.
    /// </xmldoc>
    [Parameter]
    public string? DisplayName { get; set; }

    /// <xmldoc>
    /// Gets or sets the placeholder text.
    /// </xmldoc>
    [Parameter]
    public string Placeholder { get; set; } = string.Empty;

    /// <xmldoc>
    /// Specifies the bound expression for the field value.
    /// </xmldoc>
    [Parameter, EditorRequired]
    public Expression<Func<string>>? For { get; set; }

    /// <xmldoc>
    /// Indicates whether the field is required.
    /// </xmldoc>
    [Parameter]
    public bool Required { get; set; } = false;

    /// <xmldoc>
    /// Gets or sets text to prepend inside the input field.
    /// </xmldoc>
    [Parameter]
    public string? PrependText { get; set; }

    /// <xmldoc>
    /// Gets or sets an icon to prepend inside the input field.
    /// </xmldoc>
    [Parameter]
    public SvgIcon? PrependIcon { get; set; }

    /// <xmldoc>
    /// Gets or sets the help content for the field.
    /// </xmldoc>
    [Parameter]
    public RenderFragment? FieldHelp { get; set; }

    protected override void OnParametersSet()
    {
        if (EditContext is null)
        {
            throw new InvalidOperationException("This field must be part of an EditForm");
        }
        base.OnParametersSet();
    }

    /// <xmldoc>
    /// Computes the CSS class for the text field container.
    /// </xmldoc>
    protected override string? RootClass() => TwMerge.Merge(AdditionalAttributes, BaseStyle);
}
```

---

## 11. Naming Conventions for CSS Helper Methods

- **General Pattern:**
  - **Method Name Format:** All helper methods that return CSS classes should be named following the pattern:
    - **Get< Purpose >Css(variable)**
    - Examples include:
      - `GetAlertVariantCss(AlertVariant variant)`
      - `GetButtonSizeCss(Size size)`
      - `GetTextDecorationCss(TextDecoration? decoration)`
  - **Return Type and Modifier:**
    - These methods are declared as **protected static string**.
    - **Rationale:** Declaring them as static ensures they do not depend on instance state and can be reused throughout the component library.
  
- **Enum-Based Parameters:**
  - Nearly all of these helper methods rely on an **enum parameter**.
    - The enums are defined in the **Variants.cs** file.
    - For example:
      - `AlertVariant` is used by `GetAlertVariantCss`
      - `Size` is used by methods like `GetButtonSizeCss`
      - Other enums (such as `TextDecoration`, `TextWeight`, etc.) are used similarly.
  - **Documentation:** Each helper method must include xmldoc (XML documentation) that describes:
    - The purpose of the method.
    - The enum parameter and its possible values.
    - What CSS classes (as full, complete Tailwind class names) are returned for each value.
    - An exception (typically `ArgumentOutOfRangeException`) thrown for any invalid enum values.
  
- **Tailwind Class Completeness:**
  - **Full Class Names:** The methods should include complete Tailwind class names (e.g., `border-danger bg-surface text-on-surface dark:bg-surface-dark dark:text-on-surface-dark`).
    - **Purpose:** This ensures that the Tailwind 4 scanner picks up every class that might be used in production, even if those classes are generated dynamically.
  - **Example:**
    ```csharp
    /// <xmldoc>
    /// Gets the CSS classes associated with the specified alert variant.
    /// </xmldoc>
    /// <param name="variant">
    /// The <see cref="AlertVariant"/> enum value representing the type of alert.
    /// </param>
    /// <returns>
    /// A string containing the CSS classes for the specified alert variant.
    /// </returns>
    /// <exception cref="ArgumentOutOfRangeException">
    /// Thrown when an invalid <see cref="AlertVariant"/> value is provided.
    /// </exception>
    protected static string GetAlertVariantCss(AlertVariant variant)
    {
        return variant switch
        {
            AlertVariant.Alternate => "border-outline bg-surface-alt text-on-surface dark:bg-surface-dark-alt dark:text-on-surface-dark",
            AlertVariant.Information => "border-info bg-surface text-on-surface dark:bg-surface-dark dark:text-on-surface-dark",
            AlertVariant.Success => "border-success bg-surface text-on-surface dark:bg-surface-dark dark:text-on-surface-dark",
            AlertVariant.Warning => "border-warning bg-surface text-on-surface dark:bg-surface-dark dark:text-on-surface-dark",
            AlertVariant.Danger => "border-danger bg-surface text-on-surface dark:bg-surface-dark dark:text-on-surface-dark",
            _ => throw new ArgumentOutOfRangeException(nameof(variant), variant, null)
        };
    }
    ```
  - **Key Note:** The method name **GetAlertVariantCss** clearly indicates its purpose: it returns CSS classes for an alert variant. Similar naming conventions must be followed for other component-specific styling needs.

- **Integration in Components:**
  - When composing the final CSS class for a component (usually in the **RootClass()** method), these helper methods are invoked to generate the variant- or size-dependent classes.
    - **Example from Button.razor.cs:**
      ```csharp
      protected override string? RootClass()
      {
          string trailer = string.Empty;
          if (Group != null)
          {
              int idx = Group.Buttons.IndexOf(this);
              if (idx == 0)
                  trailer = " rounded-none rounded-l-lg";
              else if (idx == Group.Buttons.Count - 1)
                  trailer = " rounded-none rounded-r-lg border-l-0";
              else
                  trailer = " rounded-none border-l-0";
          }
          return TwMerge.Merge(AdditionalAttributes, BaseStyle,
              Outline ? GetButtonOutlineVariantCss(Variant) : GetButtonVariantCss(Variant),
              GetButtonSizeCss(Size), trailer);
      }
      ```
    - This pattern ensures that any dynamic styling based on enum values is generated consistently across the library.

---

## Summary of CSS Helper Method Guidelines

- **Naming Convention:** Use **Get[Purpose]Css(variable)** for all helper methods.
- **Access Modifier:** Methods should be **protected static string**.
- **Enum Parameters:** Almost every helper method takes an enum parameter (from **Variants.cs**) to decide which complete Tailwind CSS classes to return.
- **Full Class Names:** Include full Tailwind class names so that the Tailwind 4 scanner registers all classes for output.
- **Documentation:** Provide detailed xmldoc for each method that explains its purpose, parameters, return value, and potential exceptions.

---

## 12. Summary of Key Points

- **Component Files:**  
  - Use two-file separation (markup and code-behind) with file-scoped namespaces.
- **Base Class:**  
  - All components inherit directly from **RizzyComponent**.
- **Root Element:**  
  - Use `<HtmlElement>` with `@attributes="@AdditionalAttributes" class="@RootClass()"`.
- **RootClass() Implementation:**  
  - Always merge the default **BaseStyle** (private static readonly string) with `AdditionalAttributes` using **TwMerge.Merge**.
- **Tailwind CSS & Design Tokens:**  
  - Use Tailwind CSS 4.0 in a CSS-first manner.
  - Style using our design tokens (see the "Tailwind Semantic Color Tokens Available for Styling" section).
- **Alpine.js Interactivity and CSP:**  
  - All interactivity is implemented via external Alpine.js data objects (e.g. `rzAlert`, `rzButton`).
  - Use the CSP-compliant Alpine.js build; no inline scripts allowed.
- **Accessibility:**  
  - Follow WCAG 2.2+ guidelines using appropriate ARIA roles and semantic HTML.
- **XML Documentation (xmldoc):**  
  - All public and protected members must include xmldoc comments.
- **Naming and Code Conventions:**  
  - Use PascalCase for public/protected members, camelCase for private fields.
- **Error Handling:**  
  - Validate required parameters and fail gracefully with descriptive errors.

</instruction>
