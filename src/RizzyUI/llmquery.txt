This file is a merged representation of a subset of the codebase, containing specifically included files and files not matching ignore patterns, combined into a single document. The content has been processed where empty lines have been removed.
Generated by Repomix on: 2025-04-11T18:33:09.089Z

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

- Pay special attention to the Repository Instruction. These contain important context and guidelines specific to this project.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Only files matching these patterns are included: **/*.razor, **/*.razor.cs, **/*.cs, **/js/*.js
- Files matching these patterns are excluded: obj/, bin/, **/js/vendor/*.*
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Empty lines have been removed from all files
</notes>

<additional_info>

</additional_info>

</file_summary>

<directory_structure>
_Imports.razor
Colors.cs
ColorScale.cs
Components/Display/RzAvatar/RzAvatar.razor
Components/Display/RzAvatar/RzAvatar.razor.cs
Components/Display/RzAvatar/Styling/DefaultRzAvatarStyles.cs
Components/Display/RzBadge/RzBadge.razor
Components/Display/RzBadge/RzBadge.razor.cs
Components/Display/RzBadge/Styling/DefaultRzBadgeStyles.cs
Components/Display/RzDivider/RzDivider.razor
Components/Display/RzDivider/RzDivider.razor.cs
Components/Display/RzDivider/Styling/DefaultRzDividerStyles.cs
Components/Display/RzProgress/RzProgress.razor
Components/Display/RzProgress/RzProgress.razor.cs
Components/Display/RzProgress/Styling/DefaultRzProgressStyles.cs
Components/Document/Models/HeadingItem.cs
Components/Document/RzArticle/RzArticle.razor
Components/Document/RzArticle/RzArticle.razor.cs
Components/Document/RzArticle/Styling/DefaultRzArticleStyles.cs
Components/Document/RzBrowser/RzBrowser.razor
Components/Document/RzBrowser/rzBrowser.razor.cs
Components/Document/RzBrowser/Styling/DefaultRzBrowserStyles.cs
Components/Document/RzCodeViewer/CodeLanguage.cs
Components/Document/RzCodeViewer/RzCodeViewer.razor
Components/Document/RzCodeViewer/RzCodeViewer.razor.cs
Components/Document/RzCodeViewer/Styling/DefaultRzCodeViewerStyles.cs
Components/Document/RzEmbeddedPreview/RzEmbeddedPreview.razor
Components/Document/RzEmbeddedPreview/RzEmbeddedPreview.razor.cs
Components/Document/RzEmbeddedPreview/Styling/DefaultRzEmbeddedPreviewStyles.cs
Components/Document/RzMarkdown/RzMarkdown.razor
Components/Document/RzMarkdown/RzMarkdown.razor.cs
Components/Document/RzMarkdown/Styling/DefaultRzMarkdownStyles.cs
Components/Document/RzQuickReference/RzQuickReference.razor
Components/Document/RzQuickReference/RzQuickReference.razor.cs
Components/Document/RzQuickReference/RzQuickReferenceContainer.razor
Components/Document/RzQuickReference/RzQuickReferenceContainer.razor.cs
Components/Document/RzQuickReference/Styling/DefaultRzQuickReferenceStyles.cs
Components/Feedback/RzAlert/RzAlert.razor
Components/Feedback/RzAlert/RzAlert.razor.cs
Components/Feedback/RzAlert/RzAlertDescription.razor
Components/Feedback/RzAlert/RzAlertDescription.razor.cs
Components/Feedback/RzAlert/RzAlertTitle.razor
Components/Feedback/RzAlert/RzAlertTitle.razor.cs
Components/Feedback/RzAlert/Styling/DefaultRzAlertStyles.cs
Components/Form/_Imports.razor
Components/Form/Enum/Orientation.cs
Components/Form/Enum/SectionLayout.cs
Components/Form/Enum/TextRole.cs
Components/Form/InputBase.cs
Components/Form/Models/FlatpickrOptions.cs
Components/Form/RzButton/RzButton.razor
Components/Form/RzButton/RzButton.razor.cs
Components/Form/RzButton/RzButtonGroup.razor
Components/Form/RzButton/RzButtonGroup.razor.cs
Components/Form/RzButton/Styling/DefaultRzButtonGroupStyles.cs
Components/Form/RzButton/Styling/DefaultRzButtonStyles.cs
Components/Form/RzCheckbox/RzCheckboxGroup.razor
Components/Form/RzCheckbox/RzCheckboxGroup.razor.cs
Components/Form/RzCheckbox/RzCheckboxGroupField.razor
Components/Form/RzCheckbox/RzCheckboxGroupField.razor.cs
Components/Form/RzCheckbox/RzCheckboxGroupItem.razor
Components/Form/RzCheckbox/RzCheckboxGroupItem.razor.cs
Components/Form/RzCheckbox/Styling/DefaultRzCheckboxStyles.cs
Components/Form/RzDateEdit/RzDateEdit.razor
Components/Form/RzDateEdit/RzDateEdit.razor.cs
Components/Form/RzDateEdit/Styling/DefaultRzDateEditStyles.cs
Components/Form/RzField/RzField.razor
Components/Form/RzField/RzField.razor.cs
Components/Form/RzField/RzFieldHelp.razor
Components/Form/RzField/RzFieldHelp.razor.cs
Components/Form/RzField/RzFieldLabel.razor
Components/Form/RzField/RzFieldLabel.razor.cs
Components/Form/RzField/Styling/DefaultRzFieldStyles.cs
Components/Form/RzFormSection/RzFormSection.razor
Components/Form/RzFormSection/RzFormSection.razor.cs
Components/Form/RzFormSection/Styling/DefaultRzFormSectionStyles.cs
Components/Form/RzNumber/RzNumberEdit.razor
Components/Form/RzNumber/RzNumberEdit.razor.cs
Components/Form/RzNumber/RzNumberField.razor
Components/Form/RzNumber/RzNumberField.razor.cs
Components/Form/RzNumber/Styling/DefaultRzNumberStyles.cs
Components/Form/RzRadio/RzRadioGroup.razor
Components/Form/RzRadio/RzRadioGroup.razor.cs
Components/Form/RzRadio/RzRadioGroupField.razor
Components/Form/RzRadio/RzRadioGroupField.razor.cs
Components/Form/RzRadio/RzRadioGroupItem.razor
Components/Form/RzRadio/RzRadioGroupItem.razor.cs
Components/Form/RzRadio/Styling/DefaultRzRadioStyles.cs
Components/Form/RzText/RzTextEdit.razor
Components/Form/RzText/RzTextEdit.razor.cs
Components/Form/RzText/RzTextField.razor
Components/Form/RzText/RzTextField.razor.cs
Components/Form/RzText/Styling/DefaultRzTextStyles.cs
Components/Form/RzToggle/RzToggle.razor
Components/Form/RzToggle/RzToggle.razor.cs
Components/Form/RzToggle/RzToggleField.razor
Components/Form/RzToggle/RzToggleField.razor.cs
Components/Form/RzToggle/Styling/DefaultRzToggleStyles.cs
Components/FragmentComponent.cs
Components/HtmlElement.cs
Components/Layout/RzAccordion/RzAccordion.razor
Components/Layout/RzAccordion/RzAccordion.razor.cs
Components/Layout/RzAccordion/RzAccordionSection.razor
Components/Layout/RzAccordion/RzAccordionSection.razor.cs
Components/Layout/RzAccordion/Styling/DefaultRzAccordionSectionStyles.cs
Components/Layout/RzAccordion/Styling/DefaultRzAccordionStyles.cs
Components/Layout/RzCard/RzCard.razor
Components/Layout/RzCard/RzCard.razor.cs
Components/Layout/RzCard/RzCardBody.razor
Components/Layout/RzCard/RzCardBody.razor.cs
Components/Layout/RzCard/RzCardButtons.razor
Components/Layout/RzCard/RzCardButtons.razor.cs
Components/Layout/RzCard/RzCardFooter.razor
Components/Layout/RzCard/RzCardFooter.razor.cs
Components/Layout/RzCard/RzCardHeader.razor
Components/Layout/RzCard/RzCardHeader.razor.cs
Components/Layout/RzCard/RzCardSubtitle.razor
Components/Layout/RzCard/RzCardSubtitle.razor.cs
Components/Layout/RzCard/RzCardTitle.razor
Components/Layout/RzCard/RzCardTitle.razor.cs
Components/Layout/RzCard/Styling/DefaultRzCardStyles.cs
Components/Layout/RzSearchButton/RzSearchButton.razor
Components/Layout/RzSearchButton/RzSearchButton.razor.cs
Components/Layout/RzSearchButton/Styling/DefaultRzSearchButtonStyles.cs
Components/Layout/RzStep/RzStep.cs
Components/Layout/RzStep/RzSteps.razor
Components/Layout/RzStep/RzSteps.razor.cs
Components/Layout/RzStep/StepData.cs
Components/Layout/RzStep/StepStatus.cs
Components/Layout/RzStep/Styling/DefaultRzStepsStyles.cs
Components/Navigation/RzBreadcrumb/RzBreadcrumb.razor
Components/Navigation/RzBreadcrumb/RzBreadcrumb.razor.cs
Components/Navigation/RzBreadcrumb/RzBreadcrumbItem.cs
Components/Navigation/RzBreadcrumb/Styling/DefaultRzBreadcrumbStyles.cs
Components/Navigation/RzDropdown/RzDropdown.razor
Components/Navigation/RzDropdown/RzDropdown.razor.cs
Components/Navigation/RzDropdown/RzDropdownMenuItem.razor
Components/Navigation/RzDropdown/RzDropdownMenuItem.razor.cs
Components/Navigation/RzDropdown/RzDropdownSection.razor
Components/Navigation/RzDropdown/RzDropdownSection.razor.cs
Components/Navigation/RzDropdown/Styling/DefaultRzDropdownStyles.cs
Components/Navigation/RzLink/RzLink.razor
Components/Navigation/RzLink/RzLink.razor.cs
Components/Navigation/RzLink/Styling/DefaultRzLinkStyles.cs
Components/Navigation/RzNavbar/RzNavbar.razor
Components/Navigation/RzNavbar/RzNavbar.razor.cs
Components/Navigation/RzNavbar/Styling/DefaultRzNavbarStyles.cs
Components/Navigation/RzSidebar/RzSidebar.razor
Components/Navigation/RzSidebar/RzSidebar.razor.cs
Components/Navigation/RzSidebar/RzSidebarLinkItem.razor
Components/Navigation/RzSidebar/RzSidebarLinkItem.razor.cs
Components/Navigation/RzSidebar/RzSidebarLinks.razor
Components/Navigation/RzSidebar/RzSidebarLinks.razor.cs
Components/Navigation/RzSidebar/Styling/DefaultRzSidebarStyles.cs
Components/Navigation/RzTab/RzTab.razor
Components/Navigation/RzTab/RzTab.razor.cs
Components/Navigation/RzTab/RzTabPanel.razor
Components/Navigation/RzTab/RzTabPanel.razor.cs
Components/Navigation/RzTab/RzTabs.razor
Components/Navigation/RzTab/RzTabs.razor.cs
Components/Navigation/RzTab/RzTabStrip.razor
Components/Navigation/RzTab/RzTabStrip.razor.cs
Components/Navigation/RzTab/Styling/DefaultRzTabStyles.cs
Components/Theme/RzDarkMode/RzDarkModeToggle.razor
Components/Theme/RzDarkMode/RzDarkModeToggle.razor.cs
Components/Theme/RzDarkMode/Styling/RzDarkmodeToggleStyles.cs
Components/Theme/RzThemeProvider.cs
Components/Theme/Themes/ArcticTheme.cs
Components/Theme/Themes/Code/CodeThemes.cs
Components/Theme/Themes/Code/RizzyCodeTheme.cs
Components/Theme/Themes/HighContrastTheme.cs
Components/Theme/Themes/ModernTheme.cs
Components/Theme/Themes/NewsTheme.cs
Components/Typography/RzHeading.razor
Components/Typography/RzHeading.razor.cs
Components/Typography/RzParagraph.razor
Components/Typography/RzParagraph.razor.cs
Components/Typography/RzTypographyBase.cs
Components/Typography/Styles.cs
Components/Typography/Styling/DefaultRzTypographyStyles.cs
Components/Utility/ColorUtil.cs
Components/Variants.cs
Constants.cs
Extensions/MarkdigExtensions.cs
Extensions/ServiceCollectionExtensions.cs
Extensions/StringExtensions.cs
Extensions/TwMergeExtensions.cs
GlobalSuppressions.cs
GlobalUsings.cs
Oklch.cs
RizzyUIConfig.cs
RzComponent.cs
RzStylesBase.cs
RzTheme.cs
RzTheme.StyleProviders.cs
RzThemeVariant.cs
Utility/Serialization/Converters/CalendarPositionConverter.cs
Utility/Serialization/Converters/RawStringConverter.cs
Utility/Serialization/Converters/SingleQuoteStringConverter.cs
wwwroot/js/antiforgerySnippet.js
wwwroot/js/antiforgerySnippet.min.js
wwwroot/js/rizzyui-csp.js
wwwroot/js/rizzyui.js
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path="_Imports.razor">
@using Microsoft.AspNetCore.Components.Web
@using RizzyUI.Extensions
</file>

<file path="Colors.cs">
namespace RizzyUI;
/// <summary>
///     Provides static readonly properties to access each Tailwind color palette.
///     Example: Colors.Rose.L500 or Colors.Rose["500"]
/// </summary>
public static class Colors
{
	/// <summary>
	///     Transparent
	/// </summary>
	public static readonly Color Transparent = new(new Oklch(0, 0, 0, 0));
	/// <summary>
	///     The color white.
	/// </summary>
	public static readonly Color White = new("--color-white", "white");
	/// <summary>
	///     The color black.
	/// </summary>
	public static readonly Color Black = new("--color-black", "black");
	/// <summary>
	///     Red color scale.
	/// </summary>
	public static readonly ColorScale Red = new Red();
	/// <summary>
	///     Orange color scale.
	/// </summary>
	public static readonly ColorScale Orange = new Orange();
	/// <summary>
	///     Amber color scale.
	/// </summary>
	public static readonly ColorScale Amber = new Amber();
	/// <summary>
	///     Yellow color scale.
	/// </summary>
	public static readonly ColorScale Yellow = new Yellow();
	/// <summary>
	///     Lime color scale.
	/// </summary>
	public static readonly ColorScale Lime = new Lime();
	/// <summary>
	///     Green color scale.
	/// </summary>
	public static readonly ColorScale Green = new Green();
	/// <summary>
	///     Emerald color scale.
	/// </summary>
	public static readonly ColorScale Emerald = new Emerald();
	/// <summary>
	///     Teal color scale.
	/// </summary>
	public static readonly ColorScale Teal = new Teal();
	/// <summary>
	///     Cyan color scale.
	/// </summary>
	public static readonly ColorScale Cyan = new Cyan();
	/// <summary>
	///     Sky color scale.
	/// </summary>
	public static readonly ColorScale Sky = new Sky();
	/// <summary>
	///     Blue color scale.
	/// </summary>
	public static readonly ColorScale Blue = new Blue();
	/// <summary>
	///     Indigo color scale.
	/// </summary>
	public static readonly ColorScale Indigo = new Indigo();
	/// <summary>
	///     Violet color scale.
	/// </summary>
	public static readonly ColorScale Violet = new Violet();
	/// <summary>
	///     Purple color scale.
	/// </summary>
	public static readonly ColorScale Purple = new Purple();
	/// <summary>
	///     Fuchsia color scale.
	/// </summary>
	public static readonly ColorScale Fuchsia = new Fuchsia();
	/// <summary>
	///     Pink color scale.
	/// </summary>
	public static readonly ColorScale Pink = new Pink();
	/// <summary>
	///     Rose color scale.
	/// </summary>
	public static readonly ColorScale Rose = new Rose();
	/// <summary>
	///     Stone color scale.
	/// </summary>
	public static readonly ColorScale Stone = new Stone();
	/// <summary>
	///     Neutral color scale.
	/// </summary>
	public static readonly ColorScale Neutral = new Neutral();
	/// <summary>
	///     Zinc color scale.
	/// </summary>
	public static readonly ColorScale Zinc = new Zinc();
	/// <summary>
	///     Gray color scale.
	/// </summary>
	public static readonly ColorScale Gray = new Gray();
	/// <summary>
	///     Slate color scale.
	/// </summary>
	public static readonly ColorScale Slate = new Slate();
}
</file>

<file path="ColorScale.cs">
namespace RizzyUI;
/// <summary>
///     Represents a scale of colors with various lightness levels.
/// </summary>
public abstract class ColorScale
{
    /// <summary>
    ///     Gets the color shade at level 50.
    /// </summary>
    public abstract Color L50 { get; }
    /// <summary>
    ///     Gets the color shade at level 100.
    /// </summary>
    public abstract Color L100 { get; }
    /// <summary>
    ///     Gets the color shade at level 200.
    /// </summary>
    public abstract Color L200 { get; }
    /// <summary>
    ///     Gets the color shade at level 300.
    /// </summary>
    public abstract Color L300 { get; }
    /// <summary>
    ///     Gets the color shade at level 400.
    /// </summary>
    public abstract Color L400 { get; }
    /// <summary>
    ///     Gets the color shade at level 500.
    /// </summary>
    public abstract Color L500 { get; }
    /// <summary>
    ///     Gets the color shade at level 600.
    /// </summary>
    public abstract Color L600 { get; }
    /// <summary>
    ///     Gets the color shade at level 700.
    /// </summary>
    public abstract Color L700 { get; }
    /// <summary>
    ///     Gets the color shade at level 800.
    /// </summary>
    public abstract Color L800 { get; }
    /// <summary>
    ///     Gets the color shade at level 900.
    /// </summary>
    public abstract Color L900 { get; }
    /// <summary>
    ///     Gets the color shade at level 950.
    /// </summary>
    public abstract Color L950 { get; }
}
/// <summary>
///     Represents the red color scale.
/// </summary>
public sealed class Red : ColorScale
{
    /// <inheritdoc />
    public override Color L50 => new("--color-red-50", "red-50");
    /// <inheritdoc />
    public override Color L100 => new("--color-red-100", "red-100");
    /// <inheritdoc />
    public override Color L200 => new("--color-red-200", "red-200");
    /// <inheritdoc />
    public override Color L300 => new("--color-red-300", "red-300");
    /// <inheritdoc />
    public override Color L400 => new("--color-red-400", "red-400");
    /// <inheritdoc />
    public override Color L500 => new("--color-red-500", "red-500");
    /// <inheritdoc />
    public override Color L600 => new("--color-red-600", "red-600");
    /// <inheritdoc />
    public override Color L700 => new("--color-red-700", "red-700");
    /// <inheritdoc />
    public override Color L800 => new("--color-red-800", "red-800");
    /// <inheritdoc />
    public override Color L900 => new("--color-red-900", "red-900");
    /// <inheritdoc />
    public override Color L950 => new("--color-red-950", "red-950");
}
/// <summary>
///     Represents the orange color scale.
/// </summary>
public sealed class Orange : ColorScale
{
    /// <inheritdoc />
    public override Color L50 => new("--color-orange-50", "orange-50");
    /// <inheritdoc />
    public override Color L100 => new("--color-orange-100", "orange-100");
    /// <inheritdoc />
    public override Color L200 => new("--color-orange-200", "orange-200");
    /// <inheritdoc />
    public override Color L300 => new("--color-orange-300", "orange-300");
    /// <inheritdoc />
    public override Color L400 => new("--color-orange-400", "orange-400");
    /// <inheritdoc />
    public override Color L500 => new("--color-orange-500", "orange-500");
    /// <inheritdoc />
    public override Color L600 => new("--color-orange-600", "orange-600");
    /// <inheritdoc />
    public override Color L700 => new("--color-orange-700", "orange-700");
    /// <inheritdoc />
    public override Color L800 => new("--color-orange-800", "orange-800");
    /// <inheritdoc />
    public override Color L900 => new("--color-orange-900", "orange-900");
    /// <inheritdoc />
    public override Color L950 => new("--color-orange-950", "orange-950");
}
/// <summary>
///     Represents the amber color scale.
/// </summary>
public sealed class Amber : ColorScale
{
    /// <inheritdoc />
    public override Color L50 => new("--color-amber-50", "amber-50");
    /// <inheritdoc />
    public override Color L100 => new("--color-amber-100", "amber-100");
    /// <inheritdoc />
    public override Color L200 => new("--color-amber-200", "amber-200");
    /// <inheritdoc />
    public override Color L300 => new("--color-amber-300", "amber-300");
    /// <inheritdoc />
    public override Color L400 => new("--color-amber-400", "amber-400");
    /// <inheritdoc />
    public override Color L500 => new("--color-amber-500", "amber-500");
    /// <inheritdoc />
    public override Color L600 => new("--color-amber-600", "amber-600");
    /// <inheritdoc />
    public override Color L700 => new("--color-amber-700", "amber-700");
    /// <inheritdoc />
    public override Color L800 => new("--color-amber-800", "amber-800");
    /// <inheritdoc />
    public override Color L900 => new("--color-amber-900", "amber-900");
    /// <inheritdoc />
    public override Color L950 => new("--color-amber-950", "amber-950");
}
/// <summary>
///     Represents the yellow color scale.
/// </summary>
public sealed class Yellow : ColorScale
{
    /// <inheritdoc />
    public override Color L50 => new("--color-yellow-50", "yellow-50");
    /// <inheritdoc />
    public override Color L100 => new("--color-yellow-100", "yellow-100");
    /// <inheritdoc />
    public override Color L200 => new("--color-yellow-200", "yellow-200");
    /// <inheritdoc />
    public override Color L300 => new("--color-yellow-300", "yellow-300");
    /// <inheritdoc />
    public override Color L400 => new("--color-yellow-400", "yellow-400");
    /// <inheritdoc />
    public override Color L500 => new("--color-yellow-500", "yellow-500");
    /// <inheritdoc />
    public override Color L600 => new("--color-yellow-600", "yellow-600");
    /// <inheritdoc />
    public override Color L700 => new("--color-yellow-700", "yellow-700");
    /// <inheritdoc />
    public override Color L800 => new("--color-yellow-800", "yellow-800");
    /// <inheritdoc />
    public override Color L900 => new("--color-yellow-900", "yellow-900");
    /// <inheritdoc />
    public override Color L950 => new("--color-yellow-950", "yellow-950");
}
/// <summary>
///     Represents the lime color scale.
/// </summary>
public sealed class Lime : ColorScale
{
    /// <inheritdoc />
    public override Color L50 => new("--color-lime-50", "lime-50");
    /// <inheritdoc />
    public override Color L100 => new("--color-lime-100", "lime-100");
    /// <inheritdoc />
    public override Color L200 => new("--color-lime-200", "lime-200");
    /// <inheritdoc />
    public override Color L300 => new("--color-lime-300", "lime-300");
    /// <inheritdoc />
    public override Color L400 => new("--color-lime-400", "lime-400");
    /// <inheritdoc />
    public override Color L500 => new("--color-lime-500", "lime-500");
    /// <inheritdoc />
    public override Color L600 => new("--color-lime-600", "lime-600");
    /// <inheritdoc />
    public override Color L700 => new("--color-lime-700", "lime-700");
    /// <inheritdoc />
    public override Color L800 => new("--color-lime-800", "lime-800");
    /// <inheritdoc />
    public override Color L900 => new("--color-lime-900", "lime-900");
    /// <inheritdoc />
    public override Color L950 => new("--color-lime-950", "lime-950");
}
/// <summary>
///     Represents the green color scale.
/// </summary>
public sealed class Green : ColorScale
{
    /// <inheritdoc />
    public override Color L50 => new("--color-green-50", "green-50");
    /// <inheritdoc />
    public override Color L100 => new("--color-green-100", "green-100");
    /// <inheritdoc />
    public override Color L200 => new("--color-green-200", "green-200");
    /// <inheritdoc />
    public override Color L300 => new("--color-green-300", "green-300");
    /// <inheritdoc />
    public override Color L400 => new("--color-green-400", "green-400");
    /// <inheritdoc />
    public override Color L500 => new("--color-green-500", "green-500");
    /// <inheritdoc />
    public override Color L600 => new("--color-green-600", "green-600");
    /// <inheritdoc />
    public override Color L700 => new("--color-green-700", "green-700");
    /// <inheritdoc />
    public override Color L800 => new("--color-green-800", "green-800");
    /// <inheritdoc />
    public override Color L900 => new("--color-green-900", "green-900");
    /// <inheritdoc />
    public override Color L950 => new("--color-green-950", "green-950");
}
/// <summary>
///     Represents the emerald color scale.
/// </summary>
public sealed class Emerald : ColorScale
{
    /// <inheritdoc />
    public override Color L50 => new("--color-emerald-50", "emerald-50");
    /// <inheritdoc />
    public override Color L100 => new("--color-emerald-100", "emerald-100");
    /// <inheritdoc />
    public override Color L200 => new("--color-emerald-200", "emerald-200");
    /// <inheritdoc />
    public override Color L300 => new("--color-emerald-300", "emerald-300");
    /// <inheritdoc />
    public override Color L400 => new("--color-emerald-400", "emerald-400");
    /// <inheritdoc />
    public override Color L500 => new("--color-emerald-500", "emerald-500");
    /// <inheritdoc />
    public override Color L600 => new("--color-emerald-600", "emerald-600");
    /// <inheritdoc />
    public override Color L700 => new("--color-emerald-700", "emerald-700");
    /// <inheritdoc />
    public override Color L800 => new("--color-emerald-800", "emerald-800");
    /// <inheritdoc />
    public override Color L900 => new("--color-emerald-900", "emerald-900");
    /// <inheritdoc />
    public override Color L950 => new("--color-emerald-950", "emerald-950");
}
/// <summary>
///     Represents the teal color scale.
/// </summary>
public sealed class Teal : ColorScale
{
    /// <inheritdoc />
    public override Color L50 => new("--color-teal-50", "teal-50");
    /// <inheritdoc />
    public override Color L100 => new("--color-teal-100", "teal-100");
    /// <inheritdoc />
    public override Color L200 => new("--color-teal-200", "teal-200");
    /// <inheritdoc />
    public override Color L300 => new("--color-teal-300", "teal-300");
    /// <inheritdoc />
    public override Color L400 => new("--color-teal-400", "teal-400");
    /// <inheritdoc />
    public override Color L500 => new("--color-teal-500", "teal-500");
    /// <inheritdoc />
    public override Color L600 => new("--color-teal-600", "teal-600");
    /// <inheritdoc />
    public override Color L700 => new("--color-teal-700", "teal-700");
    /// <inheritdoc />
    public override Color L800 => new("--color-teal-800", "teal-800");
    /// <inheritdoc />
    public override Color L900 => new("--color-teal-900", "teal-900");
    /// <inheritdoc />
    public override Color L950 => new("--color-teal-950", "teal-950");
}
/// <summary>
///     Represents the cyan color scale.
/// </summary>
public sealed class Cyan : ColorScale
{
    /// <inheritdoc />
    public override Color L50 => new("--color-cyan-50", "cyan-50");
    /// <inheritdoc />
    public override Color L100 => new("--color-cyan-100", "cyan-100");
    /// <inheritdoc />
    public override Color L200 => new("--color-cyan-200", "cyan-200");
    /// <inheritdoc />
    public override Color L300 => new("--color-cyan-300", "cyan-300");
    /// <inheritdoc />
    public override Color L400 => new("--color-cyan-400", "cyan-400");
    /// <inheritdoc />
    public override Color L500 => new("--color-cyan-500", "cyan-500");
    /// <inheritdoc />
    public override Color L600 => new("--color-cyan-600", "cyan-600");
    /// <inheritdoc />
    public override Color L700 => new("--color-cyan-700", "cyan-700");
    /// <inheritdoc />
    public override Color L800 => new("--color-cyan-800", "cyan-800");
    /// <inheritdoc />
    public override Color L900 => new("--color-cyan-900", "cyan-900");
    /// <inheritdoc />
    public override Color L950 => new("--color-cyan-950", "cyan-950");
}
/// <summary>
///     Represents the sky color scale.
/// </summary>
public sealed class Sky : ColorScale
{
    /// <inheritdoc />
    public override Color L50 => new("--color-sky-50", "sky-50");
    /// <inheritdoc />
    public override Color L100 => new("--color-sky-100", "sky-100");
    /// <inheritdoc />
    public override Color L200 => new("--color-sky-200", "sky-200");
    /// <inheritdoc />
    public override Color L300 => new("--color-sky-300", "sky-300");
    /// <inheritdoc />
    public override Color L400 => new("--color-sky-400", "sky-400");
    /// <inheritdoc />
    public override Color L500 => new("--color-sky-500", "sky-500");
    /// <inheritdoc />
    public override Color L600 => new("--color-sky-600", "sky-600");
    /// <inheritdoc />
    public override Color L700 => new("--color-sky-700", "sky-700");
    /// <inheritdoc />
    public override Color L800 => new("--color-sky-800", "sky-800");
    /// <inheritdoc />
    public override Color L900 => new("--color-sky-900", "sky-900");
    /// <inheritdoc />
    public override Color L950 => new("--color-sky-950", "sky-950");
}
/// <summary>
///     Represents the blue color scale.
/// </summary>
public sealed class Blue : ColorScale
{
    /// <inheritdoc />
    public override Color L50 => new("--color-blue-50", "blue-50");
    /// <inheritdoc />
    public override Color L100 => new("--color-blue-100", "blue-100");
    /// <inheritdoc />
    public override Color L200 => new("--color-blue-200", "blue-200");
    /// <inheritdoc />
    public override Color L300 => new("--color-blue-300", "blue-300");
    /// <inheritdoc />
    public override Color L400 => new("--color-blue-400", "blue-400");
    /// <inheritdoc />
    public override Color L500 => new("--color-blue-500", "blue-500");
    /// <inheritdoc />
    public override Color L600 => new("--color-blue-600", "blue-600");
    /// <inheritdoc />
    public override Color L700 => new("--color-blue-700", "blue-700");
    /// <inheritdoc />
    public override Color L800 => new("--color-blue-800", "blue-800");
    /// <inheritdoc />
    public override Color L900 => new("--color-blue-900", "blue-900");
    /// <inheritdoc />
    public override Color L950 => new("--color-blue-950", "blue-950");
}
/// <summary>
///     Represents the indigo color scale.
/// </summary>
public sealed class Indigo : ColorScale
{
    /// <inheritdoc />
    public override Color L50 => new("--color-indigo-50", "indigo-50");
    /// <inheritdoc />
    public override Color L100 => new("--color-indigo-100", "indigo-100");
    /// <inheritdoc />
    public override Color L200 => new("--color-indigo-200", "indigo-200");
    /// <inheritdoc />
    public override Color L300 => new("--color-indigo-300", "indigo-300");
    /// <inheritdoc />
    public override Color L400 => new("--color-indigo-400", "indigo-400");
    /// <inheritdoc />
    public override Color L500 => new("--color-indigo-500", "indigo-500");
    /// <inheritdoc />
    public override Color L600 => new("--color-indigo-600", "indigo-600");
    /// <inheritdoc />
    public override Color L700 => new("--color-indigo-700", "indigo-700");
    /// <inheritdoc />
    public override Color L800 => new("--color-indigo-800", "indigo-800");
    /// <inheritdoc />
    public override Color L900 => new("--color-indigo-900", "indigo-900");
    /// <inheritdoc />
    public override Color L950 => new("--color-indigo-950", "indigo-950");
}
/// <summary>
///     Represents the violet color scale.
/// </summary>
public sealed class Violet : ColorScale
{
    /// <inheritdoc />
    public override Color L50 => new("--color-violet-50", "violet-50");
    /// <inheritdoc />
    public override Color L100 => new("--color-violet-100", "violet-100");
    /// <inheritdoc />
    public override Color L200 => new("--color-violet-200", "violet-200");
    /// <inheritdoc />
    public override Color L300 => new("--color-violet-300", "violet-300");
    /// <inheritdoc />
    public override Color L400 => new("--color-violet-400", "violet-400");
    /// <inheritdoc />
    public override Color L500 => new("--color-violet-500", "violet-500");
    /// <inheritdoc />
    public override Color L600 => new("--color-violet-600", "violet-600");
    /// <inheritdoc />
    public override Color L700 => new("--color-violet-700", "violet-700");
    /// <inheritdoc />
    public override Color L800 => new("--color-violet-800", "violet-800");
    /// <inheritdoc />
    public override Color L900 => new("--color-violet-900", "violet-900");
    /// <inheritdoc />
    public override Color L950 => new("--color-violet-950", "violet-950");
}
/// <summary>
///     Represents the purple color scale.
/// </summary>
public sealed class Purple : ColorScale
{
    /// <inheritdoc />
    public override Color L50 => new("--color-purple-50", "purple-50");
    /// <inheritdoc />
    public override Color L100 => new("--color-purple-100", "purple-100");
    /// <inheritdoc />
    public override Color L200 => new("--color-purple-200", "purple-200");
    /// <inheritdoc />
    public override Color L300 => new("--color-purple-300", "purple-300");
    /// <inheritdoc />
    public override Color L400 => new("--color-purple-400", "purple-400");
    /// <inheritdoc />
    public override Color L500 => new("--color-purple-500", "purple-500");
    /// <inheritdoc />
    public override Color L600 => new("--color-purple-600", "purple-600");
    /// <inheritdoc />
    public override Color L700 => new("--color-purple-700", "purple-700");
    /// <inheritdoc />
    public override Color L800 => new("--color-purple-800", "purple-800");
    /// <inheritdoc />
    public override Color L900 => new("--color-purple-900", "purple-900");
    /// <inheritdoc />
    public override Color L950 => new("--color-purple-950", "purple-950");
}
/// <summary>
///     Represents the fuchsia color scale.
/// </summary>
public sealed class Fuchsia : ColorScale
{
    /// <inheritdoc />
    public override Color L50 => new("--color-fuchsia-50", "fuchsia-50");
    /// <inheritdoc />
    public override Color L100 => new("--color-fuchsia-100", "fuchsia-100");
    /// <inheritdoc />
    public override Color L200 => new("--color-fuchsia-200", "fuchsia-200");
    /// <inheritdoc />
    public override Color L300 => new("--color-fuchsia-300", "fuchsia-300");
    /// <inheritdoc />
    public override Color L400 => new("--color-fuchsia-400", "fuchsia-400");
    /// <inheritdoc />
    public override Color L500 => new("--color-fuchsia-500", "fuchsia-500");
    /// <inheritdoc />
    public override Color L600 => new("--color-fuchsia-600", "fuchsia-600");
    /// <inheritdoc />
    public override Color L700 => new("--color-fuchsia-700", "fuchsia-700");
    /// <inheritdoc />
    public override Color L800 => new("--color-fuchsia-800", "fuchsia-800");
    /// <inheritdoc />
    public override Color L900 => new("--color-fuchsia-900", "fuchsia-900");
    /// <inheritdoc />
    public override Color L950 => new("--color-fuchsia-950", "fuchsia-950");
}
/// <summary>
///     Represents the pink color scale.
/// </summary>
public sealed class Pink : ColorScale
{
    /// <inheritdoc />
    public override Color L50 => new("--color-pink-50", "pink-50");
    /// <inheritdoc />
    public override Color L100 => new("--color-pink-100", "pink-100");
    /// <inheritdoc />
    public override Color L200 => new("--color-pink-200", "pink-200");
    /// <inheritdoc />
    public override Color L300 => new("--color-pink-300", "pink-300");
    /// <inheritdoc />
    public override Color L400 => new("--color-pink-400", "pink-400");
    /// <inheritdoc />
    public override Color L500 => new("--color-pink-500", "pink-500");
    /// <inheritdoc />
    public override Color L600 => new("--color-pink-600", "pink-600");
    /// <inheritdoc />
    public override Color L700 => new("--color-pink-700", "pink-700");
    /// <inheritdoc />
    public override Color L800 => new("--color-pink-800", "pink-800");
    /// <inheritdoc />
    public override Color L900 => new("--color-pink-900", "pink-900");
    /// <inheritdoc />
    public override Color L950 => new("--color-pink-950", "pink-950");
}
/// <summary>
///     Represents the rose color scale.
/// </summary>
public sealed class Rose : ColorScale
{
    /// <inheritdoc />
    public override Color L50 => new("--color-rose-50", "rose-50");
    /// <inheritdoc />
    public override Color L100 => new("--color-rose-100", "rose-100");
    /// <inheritdoc />
    public override Color L200 => new("--color-rose-200", "rose-200");
    /// <inheritdoc />
    public override Color L300 => new("--color-rose-300", "rose-300");
    /// <inheritdoc />
    public override Color L400 => new("--color-rose-400", "rose-400");
    /// <inheritdoc />
    public override Color L500 => new("--color-rose-500", "rose-500");
    /// <inheritdoc />
    public override Color L600 => new("--color-rose-600", "rose-600");
    /// <inheritdoc />
    public override Color L700 => new("--color-rose-700", "rose-700");
    /// <inheritdoc />
    public override Color L800 => new("--color-rose-800", "rose-800");
    /// <inheritdoc />
    public override Color L900 => new("--color-rose-900", "rose-900");
    /// <inheritdoc />
    public override Color L950 => new("--color-rose-950", "rose-950");
}
/// <summary>
///     Represents the slate color scale.
/// </summary>
public sealed class Slate : ColorScale
{
    /// <inheritdoc />
    public override Color L50 => new("--color-slate-50", "slate-50");
    /// <inheritdoc />
    public override Color L100 => new("--color-slate-100", "slate-100");
    /// <inheritdoc />
    public override Color L200 => new("--color-slate-200", "slate-200");
    /// <inheritdoc />
    public override Color L300 => new("--color-slate-300", "slate-300");
    /// <inheritdoc />
    public override Color L400 => new("--color-slate-400", "slate-400");
    /// <inheritdoc />
    public override Color L500 => new("--color-slate-500", "slate-500");
    /// <inheritdoc />
    public override Color L600 => new("--color-slate-600", "slate-600");
    /// <inheritdoc />
    public override Color L700 => new("--color-slate-700", "slate-700");
    /// <inheritdoc />
    public override Color L800 => new("--color-slate-800", "slate-800");
    /// <inheritdoc />
    public override Color L900 => new("--color-slate-900", "slate-900");
    /// <inheritdoc />
    public override Color L950 => new("--color-slate-950", "slate-950");
}
/// <summary>
///     Represents the gray color scale.
/// </summary>
public sealed class Gray : ColorScale
{
    /// <inheritdoc />
    public override Color L50 => new("--color-gray-50", "gray-50");
    /// <inheritdoc />
    public override Color L100 => new("--color-gray-100", "gray-100");
    /// <inheritdoc />
    public override Color L200 => new("--color-gray-200", "gray-200");
    /// <inheritdoc />
    public override Color L300 => new("--color-gray-300", "gray-300");
    /// <inheritdoc />
    public override Color L400 => new("--color-gray-400", "gray-400");
    /// <inheritdoc />
    public override Color L500 => new("--color-gray-500", "gray-500");
    /// <inheritdoc />
    public override Color L600 => new("--color-gray-600", "gray-600");
    /// <inheritdoc />
    public override Color L700 => new("--color-gray-700", "gray-700");
    /// <inheritdoc />
    public override Color L800 => new("--color-gray-800", "gray-800");
    /// <inheritdoc />
    public override Color L900 => new("--color-gray-900", "gray-900");
    /// <inheritdoc />
    public override Color L950 => new("--color-gray-950", "gray-950");
}
/// <summary>
///     Represents the zinc color scale.
/// </summary>
public sealed class Zinc : ColorScale
{
    /// <inheritdoc />
    public override Color L50 => new("--color-zinc-50", "zinc-50");
    /// <inheritdoc />
    public override Color L100 => new("--color-zinc-100", "zinc-100");
    /// <inheritdoc />
    public override Color L200 => new("--color-zinc-200", "zinc-200");
    /// <inheritdoc />
    public override Color L300 => new("--color-zinc-300", "zinc-300");
    /// <inheritdoc />
    public override Color L400 => new("--color-zinc-400", "zinc-400");
    /// <inheritdoc />
    public override Color L500 => new("--color-zinc-500", "zinc-500");
    /// <inheritdoc />
    public override Color L600 => new("--color-zinc-600", "zinc-600");
    /// <inheritdoc />
    public override Color L700 => new("--color-zinc-700", "zinc-700");
    /// <inheritdoc />
    public override Color L800 => new("--color-zinc-800", "zinc-800");
    /// <inheritdoc />
    public override Color L900 => new("--color-zinc-900", "zinc-900");
    /// <inheritdoc />
    public override Color L950 => new("--color-zinc-950", "zinc-950");
}
/// <summary>
///     Represents the neutral color scale.
/// </summary>
public sealed class Neutral : ColorScale
{
    /// <inheritdoc />
    public override Color L50 => new("--color-neutral-50", "neutral-50");
    /// <inheritdoc />
    public override Color L100 => new("--color-neutral-100", "neutral-100");
    /// <inheritdoc />
    public override Color L200 => new("--color-neutral-200", "neutral-200");
    /// <inheritdoc />
    public override Color L300 => new("--color-neutral-300", "neutral-300");
    /// <inheritdoc />
    public override Color L400 => new("--color-neutral-400", "neutral-400");
    /// <inheritdoc />
    public override Color L500 => new("--color-neutral-500", "neutral-500");
    /// <inheritdoc />
    public override Color L600 => new("--color-neutral-600", "neutral-600");
    /// <inheritdoc />
    public override Color L700 => new("--color-neutral-700", "neutral-700");
    /// <inheritdoc />
    public override Color L800 => new("--color-neutral-800", "neutral-800");
    /// <inheritdoc />
    public override Color L900 => new("--color-neutral-900", "neutral-900");
    /// <inheritdoc />
    public override Color L950 => new("--color-neutral-950", "neutral-950");
}
/// <summary>
///     Represents the stone color scale.
/// </summary>
public sealed class Stone : ColorScale
{
    /// <inheritdoc />
    public override Color L50 => new("--color-stone-50", "stone-50");
    /// <inheritdoc />
    public override Color L100 => new("--color-stone-100", "stone-100");
    /// <inheritdoc />
    public override Color L200 => new("--color-stone-200", "stone-200");
    /// <inheritdoc />
    public override Color L300 => new("--color-stone-300", "stone-300");
    /// <inheritdoc />
    public override Color L400 => new("--color-stone-400", "stone-400");
    /// <inheritdoc />
    public override Color L500 => new("--color-stone-500", "stone-500");
    /// <inheritdoc />
    public override Color L600 => new("--color-stone-600", "stone-600");
    /// <inheritdoc />
    public override Color L700 => new("--color-stone-700", "stone-700");
    /// <inheritdoc />
    public override Color L800 => new("--color-stone-800", "stone-800");
    /// <inheritdoc />
    public override Color L900 => new("--color-stone-900", "stone-900");
    /// <inheritdoc />
    public override Color L950 => new("--color-stone-950", "stone-950");
}
</file>

<file path="Components/Display/RzAvatar/RzAvatar.razor">
@namespace RizzyUI
@inherits RzComponent

<HtmlElement Element="@Element" @attributes="@AdditionalAttributes" class="@RootClass()" role="img"
             aria-label="@AlternateText">
    @if (IndicatorVisible)
    {
        <div class="@IndicatorClass @IndicatorSizeClass @IndicatorColorClass"></div>
    }
    @if (!string.IsNullOrEmpty(ImageSource))
    {
        <img src="@ImageSource" alt="@AlternateText" class="@ImageClass @ImageSizeClass @ImageShapeClass"/>
    }
    else if (!string.IsNullOrEmpty(Initials))
    {
        <div
            class="@InitialsContainerClass @InitialsContainerSizeClass @InitialsContainerShapeClass @InitialsTextSizeClass">
            @Initials
        </div>
    }
    else
    {
        <div class="@PlaceholderContainerClass @PlaceholderContainerSizeClass @PlaceholderContainerShapeClass">
            <svg class="@PlaceholderIconClass @PlaceholderIconSizeClass"
                 fill="currentColor"
                 viewBox="0 0 20 20"
                 xmlns="http://www.w3.org/2000/svg">
                <path
                    fill-rule="evenodd"
                    d="M10 9a3 3 0 100-6 3 3 0 000 6zm-7 9a7 7 0 1114 0H3z"
                    clip-rule="evenodd"/>
            </svg>
        </div>
    }
</HtmlElement>
</file>

<file path="Components/Display/RzAvatar/RzAvatar.razor.cs">
using Microsoft.AspNetCore.Components;
using Microsoft.Extensions.Options;
using RizzyUI.Extensions;
namespace RizzyUI;
/// <xmldoc>
///     Renders a user avatar, supporting image sources, initials fallback, and optional status indicators.
///     Styling and dimensions are determined by the active <see cref="RzTheme" />.
/// </xmldoc>
public partial class RzAvatar : RzComponent
{
    private string _initials = string.Empty;
    /// <summary> Gets or sets the source URL of the avatar image. </summary>
    [Parameter]
    public string ImageSource { get; set; } = string.Empty;
    /// <summary> Gets or sets the display name associated with the avatar (used for alt text). </summary>
    [Parameter]
    public string DisplayName { get; set; } = string.Empty;
    /// <summary> Gets or sets the initials to display when no image is provided (max 2 chars, uppercase). </summary>
    [Parameter]
#pragma warning disable BL0007
    public string Initials
#pragma warning restore BL0007
    {
        get => _initials;
        set => _initials = value != null && value.Length > 2
            ? value.Substring(0, 2).ToUpperInvariant()
            : (value ?? string.Empty).ToUpperInvariant();
    }
    /// <summary> Gets or sets the shape of the avatar. Defaults to Circle. </summary>
    [Parameter]
    public AvatarShape Shape { get; set; } = AvatarShape.Circle;
    /// <summary> Gets or sets the size of the avatar. Defaults to Medium. </summary>
    [Parameter]
    public Size Size { get; set; } = Size.Medium;
    /// <summary> Gets or sets a value indicating whether the status indicator is visible. </summary>
    [Parameter]
    public bool IndicatorVisible { get; set; }
    /// <summary> Gets or sets the accent color of the status indicator. Defaults to Emerald. </summary>
    [Parameter]
    public AccentColor IndicatorColor { get; set; } = AccentColor.Emerald;
    /// <summary>
    ///     Gets or sets a value indicating whether the avatar has a border (Currently not implemented in default
    ///     styles).
    /// </summary>
    [Parameter]
    public bool Border { get; set; } // Note: Border styling needs explicit addition if desired
    /// <summary> Gets the alternate text for the avatar image, used for accessibility. </summary>
    private string AlternateText => string.IsNullOrEmpty(DisplayName) ? "User Avatar" : $"{DisplayName}";
    // --- Style Properties derived from Theme ---
    /// <summary> Gets the computed CSS classes for the main avatar container. </summary>
    protected string? ContainerClass => Theme.RzAvatar.Container;
    /// <summary> Gets the computed CSS classes for the status indicator base style. </summary>
    protected string IndicatorClass => Theme.RzAvatar.Indicator;
    /// <summary> Gets the computed CSS classes for the indicator size. </summary>
    protected string IndicatorSizeClass => Theme.RzAvatar.GetIndicatorSizeCss(Size);
    /// <summary> Gets the computed CSS classes for the indicator color. </summary>
    protected string IndicatorColorClass => Theme.RzAvatar.GetIndicatorColorCss(IndicatorColor);
    /// <summary> Gets the computed CSS classes for the image element. </summary>
    protected string ImageClass => Theme.RzAvatar.Image;
    /// <summary> Gets the computed CSS classes for the image size. </summary>
    protected string ImageSizeClass => Theme.RzAvatar.GetSizeCss(Size);
    /// <summary> Gets the computed CSS classes for the image shape. </summary>
    protected string ImageShapeClass => Theme.RzAvatar.GetShapeCss(Shape);
    /// <summary> Gets the computed CSS classes for the initials container. </summary>
    protected string InitialsContainerClass => Theme.RzAvatar.InitialsContainer;
    /// <summary> Gets the computed CSS classes for the initials container size. </summary>
    protected string InitialsContainerSizeClass => Theme.RzAvatar.GetSizeCss(Size);
    /// <summary> Gets the computed CSS classes for the initials container shape. </summary>
    protected string InitialsContainerShapeClass => Theme.RzAvatar.GetShapeCss(Shape);
    /// <summary> Gets the computed CSS classes for the initials text size. </summary>
    protected string InitialsTextSizeClass => Theme.RzAvatar.GetInitialsSizeCss(Size);
    /// <summary> Gets the computed CSS classes for the placeholder container. </summary>
    protected string PlaceholderContainerClass => Theme.RzAvatar.PlaceholderContainer;
    /// <summary> Gets the computed CSS classes for the placeholder container size. </summary>
    protected string PlaceholderContainerSizeClass => Theme.RzAvatar.GetSizeCss(Size);
    /// <summary> Gets the computed CSS classes for the placeholder container shape. </summary>
    protected string PlaceholderContainerShapeClass => Theme.RzAvatar.GetShapeCss(Shape);
    /// <summary> Gets the computed CSS classes for the placeholder icon. </summary>
    protected string PlaceholderIconClass => Theme.RzAvatar.PlaceholderIcon;
    /// <summary> Gets the computed CSS classes for the placeholder icon size. </summary>
    protected string PlaceholderIconSizeClass => Theme.RzAvatar.GetPlaceholderSizeCss(Size);
 /// <inheritdoc />
    protected override string? RootClass()
    {
        return TwMerge.Merge(AdditionalAttributes, ContainerClass ?? string.Empty, Theme.RzAvatar.GetSizeCss(Size));
    }
}
</file>

<file path="Components/Display/RzAvatar/Styling/DefaultRzAvatarStyles.cs">
namespace RizzyUI;
/// <summary>
///     Provides the default styles for the RzAvatar component.
/// </summary>
public class DefaultRzAvatarStyles : RzStylesBase.RzAvatarStylesBase
{
    /// <summary>
    ///     Initializes a new instance of the <see cref="DefaultRzAvatarStyles" /> class.
    /// </summary>
    /// <param name="theme">The theme instance to use for styling.</param>
    public DefaultRzAvatarStyles(RzTheme theme) : base(theme)
    {
    }
    /// <inheritdoc />
    public override string Container =>
        "relative inline-block aspect-square object-cover"; // Base container styles, size added separately
    /// <inheritdoc />
    public override string Indicator =>
        $"border-2 absolute right-0 top-0 rounded-full border-surface"; // Base indicator styles, size and color added separately
    /// <inheritdoc />
    public override string Image => "inline-block aspect-square"; // Base image styles, size and shape added separately
    /// <inheritdoc />
    public override string InitialsContainer =>
        $"inline-flex items-center justify-center bg-surface-alt text-on-surface-muted dark:bg-surface-alt dark:text-on-surface-muted"; // Base initials container styles, size and shape added separately
    /// <inheritdoc />
    public override string PlaceholderContainer =>
        $"inline-flex items-center justify-center bg-surface-alt text-outline dark:bg-surface-alt dark:text-outline"; // Base placeholder styles, size and shape added separately
    /// <inheritdoc />
    public override string PlaceholderIcon => "inline-block"; // Base placeholder icon styles, size added separately
    /// <inheritdoc />
    public override string GetShapeCss(AvatarShape shape)
    {
        return shape switch
        {
            AvatarShape.Circle => "rounded-full", // Use theme token for full roundness
            AvatarShape.Square => "rounded-theme",
            _ => "rounded-full"
        };
    }
    /// <inheritdoc />
    public override string GetSizeCss(Size size)
    {
        return size switch
        {
            Size.ExtraSmall => "size-6",
            Size.Small => "size-8",
            Size.Medium => "size-10",
            Size.Large => "size-14",
            Size.ExtraLarge => "size-20",
            _ => GetSizeCss(Size.Medium)
        };
    }
    /// <inheritdoc />
    public override string GetInitialsSizeCss(Size size)
    {
        return size switch
        {
            Size.ExtraSmall => "text-xs", // Adjusted from original text-sm for better fit
            Size.Small => "text-sm",
            Size.Medium => "text-base", // Adjusted from original empty
            Size.Large => "text-2xl",
            Size.ExtraLarge => "text-4xl",
            _ => GetInitialsSizeCss(Size.Medium)
        };
    }
    /// <inheritdoc />
    public override string GetPlaceholderSizeCss(Size size)
    {
        return size switch
        {
            Size.ExtraSmall => "size-4",
            Size.Small => "size-5",
            Size.Medium => "size-6",
            Size.Large => "size-8",
            Size.ExtraLarge => "size-10",
            _ => GetPlaceholderSizeCss(Size.Medium)
        };
    }
    /// <inheritdoc />
    public override string GetIndicatorSizeCss(Size size)
    {
        return size switch
        {
            Size.ExtraSmall => "size-3",
            Size.Small => "size-3",
            Size.Medium => "size-3",
            Size.Large => "size-4",
            Size.ExtraLarge => "size-5",
            _ => GetIndicatorSizeCss(Size.Medium)
        };
    }
    /// <inheritdoc />
    public override string GetIndicatorColorCss(AccentColor color)
    {
        return color.ToLightBackgroundClass() + " " + color.ToDarkBackgroundClass();
    }
}
</file>

<file path="Components/Display/RzBadge/RzBadge.razor">
@namespace RizzyUI
@using Blazicons
@inherits RzComponent

<HtmlElement Element="span" @attributes="AdditionalAttributes" class="@RootClass()">
    <span class="@InnerSpanClass">
	    <span class="flex items-center gap-1"> @* Keep inner flex for alignment *@
		    @if (Icon != null)
		    {
			    <Blazicon Svg="Icon"/>
		    }
		    @ChildContent @Label
	    </span>
	</span>
</HtmlElement>
</file>

<file path="Components/Display/RzBadge/RzBadge.razor.cs">
using Blazicons;
using Microsoft.AspNetCore.Components;
using Microsoft.Extensions.Options;
using RizzyUI.Extensions;
namespace RizzyUI;
/// <xmldoc>
///     A badge component for displaying labels with various styles and colors, determined by the active
///     <see cref="RzTheme" />.
/// </xmldoc>
public partial class RzBadge : RzComponent
{
    /// <summary> The semantic color of the badge. Defaults to SurfaceAlt. </summary>
    [Parameter]
    public SemanticColor Color { get; set; } = SemanticColor.SurfaceAlt;
    /// <summary> When set to true, applies a softer styling to the badge. </summary>
    [Parameter]
    public bool Soft { get; set; }
    /// <summary> Optional icon to display within the badge. </summary>
    [Parameter]
    public SvgIcon? Icon { get; set; }
    /// <summary> Optional text label for the badge. Used if ChildContent is not provided. </summary>
    [Parameter]
    public string Label { get; set; } = string.Empty;
    /// <summary> Child content for the badge, allowing for text and additional elements. Overrides Label if set. </summary>
    [Parameter]
    public RenderFragment? ChildContent { get; set; }
    // --- Style Properties derived from Theme ---
    /// <summary> Gets the computed CSS classes for the inner span element. </summary>
    protected string InnerSpanClass => Theme.RzBadge.InnerSpan;
    /// <inheritdoc />
    protected override string? RootClass()
    {
        var styles = Theme.RzBadge;
        return TwMerge.Merge(AdditionalAttributes,
            styles.Badge,
            Soft ? styles.GetVariantSoftCss(Color) : styles.GetVariantCss(Color));
    }
}
</file>

<file path="Components/Display/RzBadge/Styling/DefaultRzBadgeStyles.cs">
namespace RizzyUI;
/// <summary>
///     Provides the default styles for the RzBadge component.
/// </summary>
public class DefaultRzBadgeStyles : RzStylesBase.RzBadgeStylesBase
{
    /// <summary>
    ///     Initializes a new instance of the <see cref="DefaultRzBadgeStyles" /> class.
    /// </summary>
    /// <param name="theme">The theme instance to use for styling.</param>
    public DefaultRzBadgeStyles(RzTheme theme) : base(theme)
    {
    }
    /// <inheritdoc />
    public override string Badge =>
        "w-fit inline-flex overflow-hidden rounded-theme-2xl border text-xs font-medium"; // Use theme token
    /// <inheritdoc />
    public override string InnerSpan => "flex items-center gap-1 px-2 py-1";
    /// <inheritdoc />
    public override string GetVariantCss(SemanticColor color)
    {
        return color switch
        {
            SemanticColor.Surface => $"border-outline bg-surface text-on-surface",
            SemanticColor.SurfaceAlt => "border-on-surface bg-surface-alt text-on-surface", // Corrected border
            SemanticColor.Primary => "border-primary bg-primary text-on-primary",
            SemanticColor.Secondary => "border-secondary bg-secondary text-on-secondary",
            SemanticColor.Info =>
                $"border-info bg-info text-on-info dark:border-info dark:bg-info dark:text-on-info",
            SemanticColor.Success =>
                $"border-success bg-success text-on-success dark:border-success dark:bg-success dark:text-on-success",
            SemanticColor.Warning =>
                $"border-warning bg-warning text-on-warning dark:border-warning dark:bg-warning dark:text-on-warning",
            SemanticColor.Danger =>
                $"border-danger bg-danger text-on-danger dark:border-danger dark:bg-danger dark:text-on-danger",
            SemanticColor.Outline => "border-outline bg-transparent text-outline",
            SemanticColor.OnSurface => GetVariantCss(SemanticColor.Surface), // Map On variants to base
            SemanticColor.OnSurfaceStrong => GetVariantCss(SemanticColor.Surface),
            SemanticColor.OnPrimary => GetVariantCss(SemanticColor.Primary),
            SemanticColor.OnSecondary => GetVariantCss(SemanticColor.Secondary),
            SemanticColor.OnInfo => GetVariantCss(SemanticColor.Info),
            SemanticColor.OnSuccess => GetVariantCss(SemanticColor.Success),
            SemanticColor.OnWarning => GetVariantCss(SemanticColor.Warning),
            SemanticColor.OnDanger => GetVariantCss(SemanticColor.Danger),
            SemanticColor.OutlineStrong => GetVariantCss(SemanticColor.Outline),
            SemanticColor.None => "",
            _ => GetVariantCss(SemanticColor.SurfaceAlt) // Default
        };
    }
    /// <inheritdoc />
    public override string GetVariantSoftCss(SemanticColor color)
    {
        return color switch
        {
            SemanticColor.Surface => $"border-outline bg-surface text-on-surface",
            SemanticColor.SurfaceAlt => "border-on-surface bg-surface-alt text-on-surface",
            SemanticColor.Primary => "border-primary bg-primary/10 text-primary",
            SemanticColor.Secondary => "border-secondary bg-secondary/10 text-secondary",
            SemanticColor.Info =>
                $"border-info bg-info/10 dark:bg-info/10 text-info dark:border-info dark:text-on-info",
            SemanticColor.Success =>
                $"border-success bg-success/10 dark:bg-success/10 text-success dark:border-success dark:text-on-success",
            SemanticColor.Warning =>
                $"border-warning bg-warning/10 dark:bg-warning/10 text-warning dark:border-warning dark:text-on-warning",
            SemanticColor.Danger =>
                $"border-danger bg-danger/10 dark:bg-danger/10 text-danger dark:border-danger dark:text-on-danger",
            SemanticColor.Outline => "border-outline bg-outline/10 text-on-surface",
            SemanticColor.OnSurface => GetVariantSoftCss(SemanticColor.Surface),
            SemanticColor.OnSurfaceStrong => GetVariantSoftCss(SemanticColor.Surface),
            SemanticColor.OnPrimary => GetVariantSoftCss(SemanticColor.Primary),
            SemanticColor.OnSecondary => GetVariantSoftCss(SemanticColor.Secondary),
            SemanticColor.OnInfo => GetVariantSoftCss(SemanticColor.Info),
            SemanticColor.OnSuccess => GetVariantSoftCss(SemanticColor.Success),
            SemanticColor.OnWarning => GetVariantSoftCss(SemanticColor.Warning),
            SemanticColor.OnDanger => GetVariantSoftCss(SemanticColor.Danger),
            SemanticColor.OutlineStrong => GetVariantSoftCss(SemanticColor.Outline),
            SemanticColor.None => "",
            _ => GetVariantSoftCss(SemanticColor.SurfaceAlt) // Default
        };
    }
}
</file>

<file path="Components/Display/RzDivider/RzDivider.razor">
@namespace RizzyUI
@inherits RzComponent

@if (ChildContent != null)
{
	<HtmlElement Element="@Element" @attributes="AdditionalAttributes" class="@RootClass()">
		@ChildContent
	</HtmlElement>
}
else
{
	<hr @attributes="AdditionalAttributes" class="@RootClass()" />
}
</file>

<file path="Components/Display/RzDivider/RzDivider.razor.cs">
// src/RizzyUI/Components/RzDivider/RzDivider.razor.cs
using Microsoft.AspNetCore.Components;
using Microsoft.Extensions.Options;
using RizzyUI.Extensions;
namespace RizzyUI;
/// <xmldoc>
/// A component that renders a horizontal divider line, optionally with centered or aligned text/content.
/// Renders as an <c>&lt;hr></c> if no <see cref="ChildContent"/> is provided, otherwise renders as a <c>&lt;div></c>
/// using pseudo-elements for the lines. Styling is determined by the active <see cref="RzTheme"/>.
/// </xmldoc>
public partial class RzDivider : RzComponent
{
    /// <summary> The style of the dividing line (Solid, Dashed, Dotted). Defaults to Solid. </summary>
    [Parameter] public DividerStyle Style { get; set; } = DividerStyle.Solid;
    /// <summary> The alignment of the child content within the divider (Start, Center, End). Only used if <see cref="ChildContent"/> is provided. Defaults to Center. </summary>
    [Parameter] public Align LabelAlignment { get; set; } = Align.Center;
    /// <summary> Optional content to display within the divider (e.g., text or an icon). If null, a simple <c>&lt;hr></c> is rendered. </summary>
    [Parameter] public RenderFragment? ChildContent { get; set; }
    /// <inheritdoc/>
    protected override void OnInitialized()
    {
        base.OnInitialized();
        Element = "hr";
    }
    /// <inheritdoc />
    protected override string? RootClass()
    {
        var styles = Theme.RzDivider;
        return TwMerge.Merge(AdditionalAttributes,
            styles.Divider, // Base styles including text color, margins, base layout
            ChildContent is null
                ? styles.GetStyleCss(Style) // Style for <hr> (border-t, border-style)
                : styles.GetAlignmentCss(LabelAlignment, Style) // Alignment/style for <div> with content (uses ::before/::after)
        );
    }
}
</file>

<file path="Components/Display/RzDivider/Styling/DefaultRzDividerStyles.cs">
namespace RizzyUI;
/// <summary> Provides default styles for RzDivider. </summary>
public class DefaultRzDividerStyles : RzStylesBase.RzDividerStylesBase 
{
    public DefaultRzDividerStyles(RzTheme theme) : base(theme) { }
    /// <inheritdoc/>
    public override string Divider => $"my-8 py-3 flex items-center text-sm text-outline"; // Use semantic name
    /// <inheritdoc/>
    public override string GetStyleCss(DividerStyle style) => style switch
    {
        DividerStyle.Solid => $"border-solid border-t border-outline", // Use semantic name
        DividerStyle.Dashed => $"border-dashed border-t border-outline",
        DividerStyle.Dotted => $"border-dotted border-t border-outline",
        _ => GetStyleCss(DividerStyle.Solid)
    };
    /// <inheritdoc/>
    public override string GetAlignmentCss(Align alignment, DividerStyle style)
    {
        var styleClass = style switch {
             DividerStyle.Solid => "solid", DividerStyle.Dashed => "dashed", DividerStyle.Dotted => "dotted", _ => "solid"
        };
        var borderStyleClass = $"border-{styleClass}";
        // Use semantic name for border color directly
        var borderColorClass = $"border-outline";
        var darkBorderColorClass = $"dark:border-outline"; // Assuming dark outline uses same variable
        return alignment switch
        {
            Align.Start => $"after:flex-1 after:border-t after:{borderStyleClass} after:{borderColorClass} after:ms-6 {darkBorderColorClass}",
            Align.Center => $"before:flex-1 before:border-t before:{borderStyleClass} before:{borderColorClass} before:me-6 {darkBorderColorClass} after:flex-1 after:border-t after:{borderStyleClass} after:{borderColorClass} after:ms-6 {darkBorderColorClass}",
            Align.End => $"before:flex-1 before:border-t before:{borderStyleClass} before:{borderColorClass} before:me-6 {darkBorderColorClass}",
            _ => GetAlignmentCss(Align.Center, style)
        };
    }
}
</file>

<file path="Components/Display/RzProgress/RzProgress.razor">
@namespace RizzyUI
@inherits RzComponent

<HtmlElement Element="div"
             @attributes="AdditionalAttributes"
             class="@RootClass()"
             x-data="rzProgress"
             data-label="@Label"
             data-current-val="@CurrentValue"
             data-min-val="@MinValue"
             data-max-val="@MaxValue"
             role="progressbar"
             aria-label="@AriaLabel"
             aria-valuenow="@CurrentValue"
             aria-valuemin="@MinValue"
             aria-valuemax="@MaxValue"
             data-progress="true">

	@if (LabelPosition == ProgressLabelPosition.Outside && !string.IsNullOrEmpty(Label))
	{
		<div class="@OutsideLabelContainerClass">
			<div class="grow"></div> @* Spacer for alignment if needed *@
			<div class="@OutsideLabelTextClass"><span x-text="buildLabel"></span></div>
		</div>
	}
	<div class="@OuterBarClass @OuterBarHeightClass">
		<div class="@InnerBarClass" x-ref="progressBar" nonce="@Nonce">
			@if (LabelPosition == ProgressLabelPosition.Inside && !string.IsNullOrEmpty(Label))
			{
				<div class="@InsideLabelContainerClass" x-ref="progressBarLabel" :class="getLabelCss">
					<span class="@InsideLabelTextClass" x-ref="innerLabel"></span> @* Content set by Alpine *@
				</div>
			}
		</div>
	</div>
</HtmlElement>
</file>

<file path="Components/Display/RzProgress/RzProgress.razor.cs">
using Microsoft.AspNetCore.Components;
using Microsoft.Extensions.Options;
using RizzyUI.Extensions;
namespace RizzyUI;
/// <xmldoc>
///     Represents a Progress bar component that visually indicates the completion status of a task.
///     Supports labels inside or outside the bar and various status colors.
///     Styling and calculation logic is handled via the active <see cref="RzTheme" /> and Alpine.js.
/// </xmldoc>
public partial class RzProgress : RzComponent
{
    /// <summary> Gets or sets the current value of the progress bar. </summary>
    [Parameter]
    public int CurrentValue { get; set; }
    /// <summary> Gets or sets the minimum value of the progress bar. Defaults to 0. </summary>
    [Parameter]
    public int MinValue { get; set; }
    /// <summary> Gets or sets the maximum value of the progress bar. Defaults to 100. </summary>
    [Parameter]
    public int MaxValue { get; set; } = 100;
    /// <summary> Gets or sets the label text for the progress bar. Supports '{percent}' placeholder. </summary>
    [Parameter]
    public string? Label { get; set; }
    /// <summary> Gets or sets the position of the label (Inside or Outside). Defaults to Outside. </summary>
    [Parameter]
    public ProgressLabelPosition LabelPosition { get; set; } = ProgressLabelPosition.Outside;
    /// <summary> Gets or sets the status color variant of the progress bar. Defaults to Primary. </summary>
    [Parameter]
    public StatusColor Variant { get; set; } = StatusColor.Primary;
    /// <summary> Gets or sets the aria-label for accessibility. Defaults to "Progress Bar". </summary>
    [Parameter]
    public string AriaLabel { get; set; } = "Progress Bar";
    // --- Style Properties derived from Theme ---
    /// <summary> Gets the computed CSS classes for the outside label container. </summary>
    protected string OutsideLabelContainerClass => Theme.RzProgress.OutsideLabelContainer;
    /// <summary> Gets the computed CSS classes for the outside label text. </summary>
    protected string OutsideLabelTextClass => Theme.RzProgress.OutsideLabelText;
    /// <summary> Gets the computed CSS classes for the outer bar (track). </summary>
    protected string OuterBarClass => Theme.RzProgress.OuterBar;
    /// <summary> Gets the computed CSS classes for the outer bar's height based on label position. </summary>
    protected string OuterBarHeightClass => Theme.RzProgress.GetOuterBarHeightCss(LabelPosition);
    /// <summary> Gets the computed CSS classes for the inner bar (value), including base and variant styles. </summary>
    protected string InnerBarClass =>
        $"{Theme.RzProgress.InnerBarBase} {Theme.RzProgress.GetInnerBarVariantCss(Variant)}";
    /// <summary> Gets the computed CSS classes for the inside label container. </summary>
    protected string InsideLabelContainerClass => Theme.RzProgress.InsideLabelContainer;
    /// <summary> Gets the computed CSS classes for the inside label text. </summary>
    protected string InsideLabelTextClass => Theme.RzProgress.InsideLabelText;
    /// <inheritdoc />
    protected override string? RootClass()
    {
        return TwMerge.Merge(AdditionalAttributes, Theme.RzProgress.Container);
    }
    // Note: Percentage calculation logic moved to Alpine.js ('rzProgress' component)
}
</file>

<file path="Components/Display/RzProgress/Styling/DefaultRzProgressStyles.cs">
namespace RizzyUI;
/// <summary> Provides default styles for RzProgress. </summary>
public class DefaultRzProgressStyles : RzStylesBase.RzProgressStylesBase 
{
    public DefaultRzProgressStyles(RzTheme theme) : base(theme)
    {
    }
    /// <inheritdoc />
    public override string Container => "w-full";
    /// <inheritdoc />
    public override string OutsideLabelContainer => "mb-2 flex items-center";
    /// <inheritdoc />
    public override string OutsideLabelText => "text-on-surface"; // Use theme text color
    /// <inheritdoc />
    public override string OuterBar =>
        "relative flex w-full overflow-hidden rounded-theme bg-outline"; // Use theme tokens
    /// <inheritdoc />
    public override string InnerBarBase =>
        "p-0.5 text-center text-xs font-semibold leading-none transition-all"; // Base styles for inner bar
    /// <inheritdoc />
    public override string InsideLabelContainer => "absolute"; // Positioned within InnerBar
    /// <inheritdoc />
    public override string InsideLabelText => ""; // Usually styled via parent or specific logic
    /// <inheritdoc />
    public override string GetOuterBarHeightCss(ProgressLabelPosition position)
    {
        return position == ProgressLabelPosition.Inside ? "h-4" : "h-2.5";
    }
    /// <inheritdoc />
    public override string GetInnerBarVariantCss(StatusColor variant)
    {
        return variant switch
        {
            StatusColor.Primary => "h-full rounded-theme bg-primary text-on-primary",
            StatusColor.Secondary => "h-full rounded-theme bg-secondary text-on-secondary",
            StatusColor.Success =>
                $"h-full rounded-theme bg-success dark:bg-success text-on-success dark:text-on-success", // Note: Specific OnSuccess dark might be needed
            StatusColor.Info =>
                $"h-full rounded-theme bg-info dark:bg-info text-on-info dark:text-on-info",
            StatusColor.Warning =>
                $"h-full rounded-theme bg-warning dark:bg-warning text-on-warning dark:text-on-warning",
            StatusColor.Danger =>
                $"h-full rounded-theme bg-danger dark:bg-danger text-on-danger dark:text-on-danger",
            _ => GetInnerBarVariantCss(StatusColor.Primary)
        };
    }
    /// <inheritdoc />
    public override string GetInsideLabelColorCss(bool overflows)
    {
        return overflows ? $"text-on-surface dark:text-on-surface" : "";
        // Apply contrasting color if label overflows bar
    }
}
</file>

<file path="Components/Document/Models/HeadingItem.cs">
namespace RizzyUI;
/// <summary>
///     Represents a heading item with level, title, and ID.
/// </summary>
public class HeadingItem
{
    /// <summary>
    ///     Initializes a new instance of the <see cref="HeadingItem" /> class.
    /// </summary>
    /// <param name="level">The heading level.</param>
    /// <param name="title">The title of the heading.</param>
    /// <param name="id">The unique ID of the heading element.</param>
    public HeadingItem(HeadingLevel level, string title, string id)
    {
        Level = level;
        Title = title;
        Id = id;
    }
    /// <summary>
    ///     The heading level.
    /// </summary>
    public HeadingLevel Level { get; }
    /// <summary>
    ///     The title of the heading.
    /// </summary>
    public string Title { get; }
    /// <summary>
    ///     The unique ID of the heading element.
    /// </summary>
    public string Id { get; }
}
</file>

<file path="Components/Document/RzArticle/RzArticle.razor">
@namespace RizzyUI
@inherits RzComponent

<HtmlElement Element="@Element" @attributes="@AdditionalAttributes" class="@RootClass()">
    <div class="@InnerContainerClass">
        <article class="@ArticleClass @ArticleProseClass">
            @MainContent
        </article>

        <aside class="@AsideClass">
            @SideContent
        </aside>
    </div>
</HtmlElement>
</file>

<file path="Components/Document/RzArticle/RzArticle.razor.cs">
using Microsoft.AspNetCore.Components;
using Microsoft.Extensions.Options;
using RizzyUI.Extensions;
namespace RizzyUI;
/// <xmldoc>
///     A layout component rendering a responsive two-column layout, typically for main article content
///     and a side navigation or information panel (<see cref="RzQuickReference" />).
///     Styling and layout details are determined by the active <see cref="RzTheme" />.
/// </xmldoc>
public partial class RzArticle : RzComponent
{
    /// <summary> Gets or sets the maximum character width of the main article content area. Defaults to Full. </summary>
    [Parameter]
    public ProseWidth ProseWidth { get; set; } = ProseWidth.Full;
    /// <summary> Gets or sets the width of the side column. Defaults to Large. </summary>
    [Parameter]
    public Size ColumnWidth { get; set; } = Size.Large;
    /// <summary> Gets or sets the content to render in the side column (e.g., QuickReference). </summary>
    [Parameter]
    public RenderFragment? SideContent { get; set; }
    /// <summary> Gets or sets the main content to render in the primary article area. Required. </summary>
    [Parameter]
    [EditorRequired]
    public required RenderFragment MainContent { get; set; }
    /// <summary>
    ///     Gets or sets a value indicating whether the side column should be fixed-positioned on larger screens.
    ///     Defaults to true.
    /// </summary>
    [Parameter]
    public bool IsSideFixed { get; set; } = true;
    // --- Style Properties derived from Theme ---
    /// <summary> Gets the computed CSS classes for the inner container div. </summary>
    protected string InnerContainerClass => Theme.RzArticle.InnerContainer;
    /// <summary> Gets the computed CSS classes for the article element. </summary>
    protected string ArticleClass => Theme.RzArticle.Article;
    /// <summary> Gets the computed CSS classes for the article's prose width. </summary>
    protected string ArticleProseClass => Theme.RzArticle.GetArticleProseCss(ProseWidth);
    /// <summary> Gets the computed CSS classes for the aside element, including width and fixed state. </summary>
    protected string AsideClass => Theme.RzArticle.GetAsideCss(ColumnWidth, IsSideFixed);
    /// <inheritdoc />
    protected override string? RootClass()
    {
        return TwMerge.Merge(AdditionalAttributes, Theme.RzArticle.Container,
            Theme.RzArticle.GetContainerPaddingCss(ColumnWidth));
    }
}
</file>

<file path="Components/Document/RzArticle/Styling/DefaultRzArticleStyles.cs">
namespace RizzyUI;
/// <summary>
///     Provides the default styles for the RzArticle component.
/// </summary>
public class DefaultRzArticleStyles : RzStylesBase.RzArticleStylesBase
{
    /// <inheritdoc />
    public DefaultRzArticleStyles(RzTheme theme) : base(theme)
    {
    }
    /// <inheritdoc />
    public override string Container =>
        $"flex w-full justify-between pr-0 text-on-surface dark:text-on-surface"; // Base container styles
    /// <inheritdoc />
    public override string InnerContainer => "mx-auto flex max-w-7xl grow flex-col overflow-x-auto overflow-y-hidden";
    /// <inheritdoc />
    public override string Article => ""; // Base article element, prose width added by method
    /// <inheritdoc />
    public override string Aside =>
        "hidden shrink-0 flex-col gap-2 overflow-y-auto p-8 pl-0 text-sm xl:flex"; // Base aside, fixed/width added by method
    /// <inheritdoc />
    public override string GetArticleProseCss(ProseWidth width)
    {
        return width switch
        {
            ProseWidth.Compact => "prose-compact",
            ProseWidth.Comfortable => "prose-comfortable",
            ProseWidth.Relaxed => "prose-relaxed",
            ProseWidth.Wide => "prose-wide",
            ProseWidth.UltraWide => "prose-ultrawide",
            ProseWidth.Full => "prose-full", // or "" if max-w-none is sufficient
            _ => GetArticleProseCss(ProseWidth.Comfortable)
        };
    }
    /// <inheritdoc />
    public override string GetAsideCss(Size columnWidth, bool isFixed)
    {
        var fixedCss =
            isFixed
                ? "h-fill fixed right-0 top-16 z-0"
                : ""; // Fixed positioning + top offset (adjust if navbar height changes)
        var widthCss = columnWidth switch
        {
            Size.ExtraSmall => "w-48",
            Size.Small => "w-56",
            Size.Medium => "w-64",
            Size.Large => "w-72",
            Size.ExtraLarge => "w-80",
            _ => GetAsideCss(Size.Large, isFixed) // Recalculate width based on default size
        };
        // Combine base, fixed, and width
        return $"{Aside} {fixedCss} {widthCss}";
    }
    /// <inheritdoc />
    public override string GetContainerPaddingCss(Size columnWidth)
    {
        return columnWidth switch // Adds right padding to main container to avoid overlap with fixed aside
        {
            Size.ExtraSmall => "xl:pr-48",
            Size.Small => "xl:pr-56",
            Size.Medium => "xl:pr-64",
            Size.Large => "xl:pr-72",
            Size.ExtraLarge => "xl:pr-80",
            _ => GetContainerPaddingCss(Size.Large)
        };
    }
}
</file>

<file path="Components/Document/RzBrowser/RzBrowser.razor">
@namespace RizzyUI
@inherits RzComponent

<div x-data="rzBrowser" @attributes="@AdditionalAttributes" class="@RootClass()">
    <div class="@TopBarClass">
        <div class="@TrafficLightsContainerClass">
            <div class="@TrafficLightRedClass"></div>
            <div class="@TrafficLightYellowClass"></div>
            <div class="@TrafficLightGreenClass"></div>
        </div>
        <div class="@ScreenSizeControlsContainerClass">
            <div class="@ScreenSizeButtonGroupClass"> @* Use style for the inner group *@
                <button title="Desktop Screen" x-on:click="setDesktopScreenSize" class="@ScreenSizeButtonClass">
                     @* Use exact Alpine binding for dynamic class *@
                    <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" fill="currentColor" :class="getDesktopScreenCss" viewBox="0 0 16 16">
                        <title>Desktop</title>
                        <path d="M0 4s0-2 2-2h12s2 0 2 2v6s0 2-2 2h-4c0 .667.083 1.167.25 1.5H11a.5.5 0 0 1 0 1H5a.5.5 0 0 1 0-1h.75c.167-.333.25-.833.25-1.5H2s-2 0-2-2V4zm1.398-.855a.758.758 0 0 0-.254.302A1.46 1.46 0 0 0 1 4.01V10c0 .325.078.502.145.602.07.105.17.188.302.254a1.464 1.464 0 0 0 .538.143L2.01 11H14c.325 0 .502-.078.602-.145a.758.758 0 0 0 .254-.302 1.464 1.464 0 0 0 .143-.538L15 9.99V4c0-.325-.078-.502-.145-.602a.757.757 0 0 0-.302-.254A1.46 1.46 0 0 0 13.99 3H2c-.325 0-.502.078-.602.145z"></path>
                    </svg>
                </button>
                <button x-on:click="setTabletScreenSize" title="Tablet Screen" class="@ScreenSizeButtonClass">
                     @* Use exact Alpine binding for dynamic class *@
                    <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" fill="currentColor" :class="getTabletScreenCss" viewBox="0 0 16 16">
                        <title>Tablet</title>
                        <path d="M12 1a1 1 0 0 1 1 1v12a1 1 0 0 1-1 1H4a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1h8zM4 0a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h8a2 2 0 0 0 2-2V2a2 2 0 0 0-2-2H4z"></path>
                        <path d="M8 14a1 1 0 1 0 0-2 1 1 0 0 0 0 2z"></path>
                    </svg>
                </button>
                <button x-on:click="setPhoneScreenSize" title="Phone Screen" class="@ScreenSizeButtonClass">
                     @* Use exact Alpine binding for dynamic class *@
                    <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" fill="currentColor" :class="getPhoneScreenCss" viewBox="0 0 16 16">
                        <title>Phone</title>
                        <path d="M11 1a1 1 0 0 1 1 1v12a1 1 0 0 1-1 1H5a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1h6zM5 0a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h6a2 2 0 0 0 2-2V2a2 2 0 0 0-2-2H5z"></path>
                        <path d="M8 14a1 1 0 1 0 0-2 1 1 0 0 0 0 2z"></path>
                    </svg>
                </button>
             </div>
        </div>
    </div>
    <div class="@ContentAreaClass">
        <div class="@PreviewContainerClass" :class="getBrowserBorderCss"> @* Use exact Alpine binding for dynamic class *@

            @if (Layout != null)
            {
                @* RzEmbeddedPreview handles its own styling *@
	            <RzEmbeddedPreview Layout="@Layout">
                    @ChildContent
	            </RzEmbeddedPreview>
            }
            else
            {
                @* Render content directly if no layout/iframe needed *@
	            @ChildContent
            }

        </div>
    </div>
</div>
</file>

<file path="Components/Document/RzBrowser/rzBrowser.razor.cs">
using Microsoft.AspNetCore.Components;
using RizzyUI.Extensions;
namespace RizzyUI;
/// <xmldoc>
/// A component that simulates a browser window, useful for previewing components or content.
/// Includes traffic light buttons and optional responsive size controls (desktop only).
/// Styling is determined by the active <see cref="RzTheme"/>. Interactivity (size toggling, dynamic classes) is handled by Alpine.js.
/// </xmldoc>
public partial class RzBrowser : RzComponent // Inherits new RzComponent base
{
    /// <summary> The content to be displayed within the browser preview area. </summary>
    [Parameter] public RenderFragment? ChildContent { get; set; }
    /// <summary> Optional Layout type. If provided, ChildContent will be rendered inside an <see cref="RzEmbeddedPreview"/> (iframe) using this layout. </summary>
    [Parameter] public Type? Layout { get; set; }
    // --- Style Properties derived from Theme ---
    protected string TopBarClass => Theme.RzBrowser.TopBar;
    protected string TrafficLightsContainerClass => Theme.RzBrowser.TrafficLightsContainer;
    protected string TrafficLightRedClass => Theme.RzBrowser.TrafficLightRed;
    protected string TrafficLightYellowClass => Theme.RzBrowser.TrafficLightYellow;
    protected string TrafficLightGreenClass => Theme.RzBrowser.TrafficLightGreen;
    protected string ScreenSizeControlsContainerClass => Theme.RzBrowser.ScreenSizeControlsContainer;
    protected string ScreenSizeButtonGroupClass => Theme.RzBrowser.ScreenSizeButtonGroup;
    protected string ScreenSizeButtonClass => Theme.RzBrowser.ScreenSizeButton;
    protected string ContentAreaClass => Theme.RzBrowser.ContentArea;
    protected string PreviewContainerClass => Theme.RzBrowser.PreviewContainer;
    /// <inheritdoc/>
    protected override string? RootClass() =>
        TwMerge.Merge(AdditionalAttributes, Theme.RzBrowser.Container);
}
</file>

<file path="Components/Document/RzBrowser/Styling/DefaultRzBrowserStyles.cs">
namespace RizzyUI;
/// <summary> Provides default styles for RzBrowser. </summary>
public class DefaultRzBrowserStyles : RzStylesBase.RzBrowserStylesBase 
{
    /// <inheritdoc />
    public DefaultRzBrowserStyles(RzTheme theme) : base(theme) { }
    /// <inheritdoc/>
    public override string Container => $"overflow-hidden border border-outline rounded-theme";
    /// <inheritdoc/>
    public override string TopBar => $"bg-surface-alt w-full px-4 py-3 lg:py-1.5 pr-0 flex items-center justify-between border-outline border-b";
    /// <inheritdoc/>
    public override string TrafficLightsContainer => "flex gap-1.5";
    /// <inheritdoc/>
    public override string TrafficLightRed => "size-3 rounded-full bg-red-500";
    /// <inheritdoc/>
    public override string TrafficLightYellow => "size-3 rounded-full bg-yellow-500";
    /// <inheritdoc/>
    public override string TrafficLightGreen => "size-3 rounded-full bg-green-500";
    /// <inheritdoc/>
    public override string ScreenSizeControlsContainer => "text-on-surface hidden items-center justify-center gap-4 lg:flex";
    /// <inheritdoc/>
    public override string ScreenSizeButton => $"rounded-full p-1 transition hover:bg-surface-dark/10 focus:outline-none focus-visible:bg-surface-dark/10 dark:hover:bg-surface/10 dark:focus-visible:bg-surface/10";
    /// <inheritdoc/>
    public override string ScreenSizeButtonGroup => $"bg-surface-alt border-outline flex items-center gap-1 rounded-full px-4"; // Style for the grouping div
    /// <inheritdoc/>
    public override string ContentArea => "grid-pattern bg-surface flex justify-center";
    /// <inheritdoc/>
    public override string PreviewContainer => $"bg-surface border-outline relative w-full overflow-hidden transition-all"; // Removed border-none, controlled by Alpine now
}
</file>

<file path="Components/Document/RzCodeViewer/CodeLanguage.cs">
namespace RizzyUI;
/// <summary>
///     Provides constants for language aliases supported by Highlight.js.
/// </summary>
public static class CodeLanguage
{
    /// <summary>
    ///     1C Enterprise language.
    /// </summary>
    public const string OneC = "1c";
    /// <summary>
    ///     4D programming language.
    /// </summary>
    public const string FourD = "4d";
    /// <summary>
    ///     ABAP (Advanced Business Application Programming).
    /// </summary>
    public const string Abap = "sap-abap";
    /// <summary>
    ///     ABNF (Augmented Backus–Naur Form).
    /// </summary>
    public const string Abnf = "abnf";
    /// <summary>
    ///     Access logs.
    /// </summary>
    public const string AccessLog = "accesslog";
    /// <summary>
    ///     Ada programming language.
    /// </summary>
    public const string Ada = "ada";
    /// <summary>
    ///     Apex programming language.
    /// </summary>
    public const string Apex = "apex";
    /// <summary>
    ///     Arduino (C++ with Arduino libraries).
    /// </summary>
    public const string Arduino = "arduino";
    /// <summary>
    ///     ARM assembler.
    /// </summary>
    public const string ArmAsm = "armasm";
    /// <summary>
    ///     AVR assembler.
    /// </summary>
    public const string AvrAsm = "avrasm";
    /// <summary>
    ///     ActionScript language.
    /// </summary>
    public const string ActionScript = "actionscript";
    /// <summary>
    ///     Alan Interactive Fiction language.
    /// </summary>
    public const string AlanIf = "alan";
    /// <summary>
    ///     Alan programming language.
    /// </summary>
    public const string Alan = "ln";
    /// <summary>
    ///     AngelScript language.
    /// </summary>
    public const string AngelScript = "angelscript";
    /// <summary>
    ///     Apache configuration files.
    /// </summary>
    public const string Apache = "apache";
    /// <summary>
    ///     AppleScript language.
    /// </summary>
    public const string AppleScript = "applescript";
    /// <summary>
    ///     Esri Arcade scripting language.
    /// </summary>
    public const string Arcade = "arcade";
    /// <summary>
    ///     AsciiDoc markup language.
    /// </summary>
    public const string AsciiDoc = "asciidoc";
    /// <summary>
    ///     AspectJ programming language.
    /// </summary>
    public const string AspectJ = "aspectj";
    /// <summary>
    ///     AutoHotkey scripting language.
    /// </summary>
    public const string AutoHotkey = "autohotkey";
    /// <summary>
    ///     AutoIt scripting language.
    /// </summary>
    public const string AutoIt = "autoit";
    /// <summary>
    ///     AWK scripting language.
    /// </summary>
    public const string Awk = "awk";
    /// <summary>
    ///     Ballerina programming language.
    /// </summary>
    public const string Ballerina = "ballerina";
    /// <summary>
    ///     Bash shell scripting language.
    /// </summary>
    public const string Bash = "bash";
    /// <summary>
    ///     BASIC programming language.
    /// </summary>
    public const string Basic = "basic";
    /// <summary>
    ///     BBCode markup language.
    /// </summary>
    public const string BBCode = "bbcode";
    /// <summary>
    ///     Blade templating engine (Laravel).
    /// </summary>
    public const string Blade = "blade";
    /// <summary>
    ///     Backus–Naur Form grammar.
    /// </summary>
    public const string Bnf = "bnf";
    /// <summary>
    ///     BQN programming language.
    /// </summary>
    public const string Bqn = "bqn";
    /// <summary>
    ///     Brainfuck esoteric programming language.
    /// </summary>
    public const string Brainfuck = "brainfuck";
    /// <summary>
    ///     C# programming language.
    /// </summary>
    public const string CSharp = "csharp";
    /// <summary>
    ///     C programming language.
    /// </summary>
    public const string C = "c";
    /// <summary>
    ///     C++ programming language.
    /// </summary>
    public const string Cpp = "cpp";
    /// <summary>
    ///     C/AL language.
    /// </summary>
    public const string CAL = "cal";
    /// <summary>
    ///     C3 programming language.
    /// </summary>
    public const string C3 = "c3";
    /// <summary>
    ///     Caché Object Script.
    /// </summary>
    public const string CacheObjectScript = "cos";
    /// <summary>
    ///     Candid language.
    /// </summary>
    public const string Candid = "candid";
    /// <summary>
    ///     CMake scripting language.
    /// </summary>
    public const string CMake = "cmake";
    /// <summary>
    ///     COBOL programming language.
    /// </summary>
    public const string Cobol = "cobol";
    /// <summary>
    ///     CODEOWNERS file format.
    /// </summary>
    public const string Codeowners = "codeowners";
    /// <summary>
    ///     Coq proof assistant language.
    /// </summary>
    public const string Coq = "coq";
    /// <summary>
    ///     CSP (Communicating Sequential Processes).
    /// </summary>
    public const string Csp = "csp";
    /// <summary>
    ///     Cascading Style Sheets.
    /// </summary>
    public const string Css = "css";
    /// <summary>
    ///     Cap’n Proto serialization language.
    /// </summary>
    public const string CapnProto = "capnproto";
    /// <summary>
    ///     Chaos programming language.
    /// </summary>
    public const string Chaos = "chaos";
    /// <summary>
    ///     Chapel programming language.
    /// </summary>
    public const string Chapel = "chapel";
    /// <summary>
    ///     Cisco CLI configuration.
    /// </summary>
    public const string CiscoCli = "cisco";
    /// <summary>
    ///     Clojure programming language.
    /// </summary>
    public const string Clojure = "clojure";
    /// <summary>
    ///     CoffeeScript programming language.
    /// </summary>
    public const string CoffeeScript = "coffeescript";
    /// <summary>
    ///     CpcdosC+ programming language.
    /// </summary>
    public const string CpcdosCPlus = "cpc";
    /// <summary>
    ///     Crmsh (Cluster Resource Manager Shell).
    /// </summary>
    public const string Crmsh = "crmsh";
    /// <summary>
    ///     Crystal programming language.
    /// </summary>
    public const string Crystal = "crystal";
    /// <summary>
    ///     cURL command-line tool.
    /// </summary>
    public const string Curl = "curl";
    /// <summary>
    ///     Cypher query language (Neo4j).
    /// </summary>
    public const string Cypher = "cypher";
    /// <summary>
    ///     D programming language.
    /// </summary>
    public const string D = "d";
    /// <summary>
    ///     Dafny programming language.
    /// </summary>
    public const string Dafny = "dafny";
    /// <summary>
    ///     Dart programming language.
    /// </summary>
    public const string Dart = "dart";
    /// <summary>
    ///     Delphi programming language.
    /// </summary>
    public const string Delphi = "dpr";
    /// <summary>
    ///     Diff syntax for differences between files.
    /// </summary>
    public const string Diff = "diff";
    /// <summary>
    ///     Django templating language.
    /// </summary>
    public const string Django = "django";
    /// <summary>
    ///     DNS Zone file format.
    /// </summary>
    public const string DnsZoneFile = "dns";
    /// <summary>
    ///     Dockerfile format.
    /// </summary>
    public const string Dockerfile = "dockerfile";
    /// <summary>
    ///     DOS batch file scripting.
    /// </summary>
    public const string Dos = "dos";
    /// <summary>
    ///     dsconfig format.
    /// </summary>
    public const string Dsconfig = "dsconfig";
    /// <summary>
    ///     Device Tree Source.
    /// </summary>
    public const string Dts = "dts";
    /// <summary>
    ///     Dust templating language.
    /// </summary>
    public const string Dust = "dust";
    /// <summary>
    ///     Dylan programming language.
    /// </summary>
    public const string Dylan = "dylan";
    /// <summary>
    ///     EBNF (Extended Backus–Naur Form) grammar.
    /// </summary>
    public const string Ebnf = "ebnf";
    /// <summary>
    ///     Elixir programming language.
    /// </summary>
    public const string Elixir = "elixir";
    /// <summary>
    ///     Elm programming language.
    /// </summary>
    public const string Elm = "elm";
    /// <summary>
    ///     Erlang programming language.
    /// </summary>
    public const string Erlang = "erlang";
    /// <summary>
    ///     Excel formula language.
    /// </summary>
    public const string Excel = "excel";
    /// <summary>
    ///     Extempore programming language.
    /// </summary>
    public const string Extempore = "extempore";
    /// <summary>
    ///     F# programming language.
    /// </summary>
    public const string FSharp = "fsharp";
    /// <summary>
    ///     FIX (Financial Information Exchange) protocol.
    /// </summary>
    public const string Fix = "fix";
    /// <summary>
    ///     Flix programming language.
    /// </summary>
    public const string Flix = "flix";
    /// <summary>
    ///     Fortran programming language.
    /// </summary>
    public const string Fortran = "fortran";
    /// <summary>
    ///     FunC programming language.
    /// </summary>
    public const string FunC = "func";
    /// <summary>
    ///     G-code for CNC machines.
    /// </summary>
    public const string GCode = "gcode";
    /// <summary>
    ///     GAMS (General Algebraic Modeling System).
    /// </summary>
    public const string Gams = "gams";
    /// <summary>
    ///     GAUSS Mathematical and Statistical System.
    /// </summary>
    public const string Gauss = "gauss";
    /// <summary>
    ///     GDScript for Godot Engine.
    /// </summary>
    public const string GdScript = "godot";
    /// <summary>
    ///     Gherkin language for Cucumber testing.
    /// </summary>
    public const string Gherkin = "gherkin";
    /// <summary>
    ///     Glimmer and EmberJS templates.
    /// </summary>
    public const string Glimmer = "hbs";
    /// <summary>
    ///     GN meta-build system files.
    /// </summary>
    public const string Gn = "gn";
    /// <summary>
    ///     Go programming language.
    /// </summary>
    public const string Go = "go";
    /// <summary>
    ///     Grammatical Framework language.
    /// </summary>
    public const string GrammaticalFramework = "gf";
    /// <summary>
    ///     Golo programming language.
    /// </summary>
    public const string Golo = "golo";
    /// <summary>
    ///     Gradle build scripts.
    /// </summary>
    public const string Gradle = "gradle";
    /// <summary>
    ///     GraphQL query language.
    /// </summary>
    public const string GraphQL = "graphql";
    /// <summary>
    ///     Groovy programming language.
    /// </summary>
    public const string Groovy = "groovy";
    /// <summary>
    ///     GSQL query language.
    /// </summary>
    public const string GSQL = "gsql";
    /// <summary>
    ///     HTML, XML languages.
    /// </summary>
    public const string Html = "xml";
    /// <summary>
    ///     HTTP request and response messages.
    /// </summary>
    public const string Http = "http";
    /// <summary>
    ///     Haml templating language.
    /// </summary>
    public const string Haml = "haml";
    /// <summary>
    ///     Handlebars templating language.
    /// </summary>
    public const string Handlebars = "handlebars";
    /// <summary>
    ///     Haskell programming language.
    /// </summary>
    public const string Haskell = "haskell";
    /// <summary>
    ///     Haxe programming language.
    /// </summary>
    public const string Haxe = "haxe";
    /// <summary>
    ///     High-Level Shading Language.
    /// </summary>
    public const string Hlsl = "hlsl";
    /// <summary>
    ///     Hy programming language.
    /// </summary>
    public const string Hy = "hy";
    /// <summary>
    ///     INI configuration files.
    /// </summary>
    public const string Ini = "ini";
    /// <summary>
    ///     Inform 7 programming language.
    /// </summary>
    public const string Inform7 = "inform7";
    /// <summary>
    ///     IRPF90 language.
    /// </summary>
    public const string Irpf90 = "irpf90";
    /// <summary>
    ///     Iptables configuration.
    /// </summary>
    public const string Iptables = "iptables";
    /// <summary>
    ///     JSON (JavaScript Object Notation).
    /// </summary>
    public const string Json = "json";
    /// <summary>
    ///     JSONata query and transformation language.
    /// </summary>
    public const string Jsonata = "jsonata";
    /// <summary>
    ///     Java programming language.
    /// </summary>
    public const string Java = "java";
    /// <summary>
    ///     JavaScript programming language.
    /// </summary>
    public const string JavaScript = "javascript";
    /// <summary>
    ///     Jolie programming language.
    /// </summary>
    public const string Jolie = "jolie";
    /// <summary>
    ///     Julia programming language.
    /// </summary>
    public const string Julia = "julia";
    /// <summary>
    ///     Julia REPL sessions.
    /// </summary>
    public const string JuliaRepl = "julia-repl";
    /// <summary>
    ///     Kotlin programming language.
    /// </summary>
    public const string Kotlin = "kotlin";
    /// <summary>
    ///     LaTeX document preparation system.
    /// </summary>
    public const string Latex = "tex";
    /// <summary>
    ///     Leaf templating language.
    /// </summary>
    public const string Leaf = "leaf";
    /// <summary>
    ///     Lean theorem prover language.
    /// </summary>
    public const string Lean = "lean";
    /// <summary>
    ///     Lasso programming language.
    /// </summary>
    public const string Lasso = "lasso";
    /// <summary>
    ///     Less CSS preprocessor.
    /// </summary>
    public const string Less = "less";
    /// <summary>
    ///     LDIF (LDAP Data Interchange Format).
    /// </summary>
    public const string Ldif = "ldif";
    /// <summary>
    ///     Lisp programming language.
    /// </summary>
    public const string Lisp = "lisp";
    /// <summary>
    ///     LiveCode Server scripting language.
    /// </summary>
    public const string LiveCodeServer = "livecodeserver";
    /// <summary>
    ///     LiveScript programming language.
    /// </summary>
    public const string LiveScript = "livescript";
    /// <summary>
    ///     LookML (Looker Modeling Language).
    /// </summary>
    public const string LookMl = "lookml";
    /// <summary>
    ///     Lua programming language.
    /// </summary>
    public const string Lua = "lua";
    /// <summary>
    ///     Luau programming language.
    /// </summary>
    public const string Luau = "luau";
    /// <summary>
    ///     Macaulay2 algebra system language.
    /// </summary>
    public const string Macaulay2 = "macaulay2";
    /// <summary>
    ///     Makefile build automation tool.
    /// </summary>
    public const string Makefile = "makefile";
    /// <summary>
    ///     Markdown markup language.
    /// </summary>
    public const string Markdown = "markdown";
    /// <summary>
    ///     Mathematica symbolic computation language.
    /// </summary>
    public const string Mathematica = "mathematica";
    /// <summary>
    ///     MATLAB programming language.
    /// </summary>
    public const string Matlab = "matlab";
    /// <summary>
    ///     Maxima computer algebra system.
    /// </summary>
    public const string Maxima = "maxima";
    /// <summary>
    ///     Maya Embedded Language.
    /// </summary>
    public const string MayaEmbeddedLanguage = "mel";
    /// <summary>
    ///     Mercury programming language.
    /// </summary>
    public const string Mercury = "mercury";
    /// <summary>
    ///     MetaPost language.
    /// </summary>
    public const string MetaPost = "metapost";
    /// <summary>
    ///     MIPS assembler.
    /// </summary>
    public const string MipsAsm = "mips";
    /// <summary>
    ///     Mint programming language.
    /// </summary>
    public const string Mint = "mint";
    /// <summary>
    ///     Mirth scripting language.
    /// </summary>
    public const string Mirth = "mirth";
    /// <summary>
    ///     mIRC scripting language.
    /// </summary>
    public const string Mirc = "mirc";
    /// <summary>
    ///     Mizar language.
    /// </summary>
    public const string Mizar = "mizar";
    /// <summary>
    ///     MKB (Makefiles and Builders).
    /// </summary>
    public const string Mkb = "mkb";
    /// <summary>
    ///     MLIR (Multi-Level Intermediate Representation).
    /// </summary>
    public const string Mlir = "mlir";
    /// <summary>
    ///     Mojolicious Perl framework.
    /// </summary>
    public const string Mojolicious = "mojolicious";
    /// <summary>
    ///     Monkey programming language.
    /// </summary>
    public const string Monkey = "monkey";
    /// <summary>
    ///     MoonScript programming language.
    /// </summary>
    public const string MoonScript = "moonscript";
    /// <summary>
    ///     Motoko programming language.
    /// </summary>
    public const string Motoko = "motoko";
    /// <summary>
    ///     N1QL query language.
    /// </summary>
    public const string N1ql = "n1ql";
    /// <summary>
    ///     NSIS (Nullsoft Scriptable Install System).
    /// </summary>
    public const string Nsis = "nsis";
    /// <summary>
    ///     Never programming language.
    /// </summary>
    public const string Never = "never";
    /// <summary>
    ///     Nginx configuration files.
    /// </summary>
    public const string Nginx = "nginx";
    /// <summary>
    ///     Nim programming language.
    /// </summary>
    public const string Nim = "nim";
    /// <summary>
    ///     Nix programming language.
    /// </summary>
    public const string Nix = "nix";
    /// <summary>
    ///     Oak programming language.
    /// </summary>
    public const string Oak = "oak";
    /// <summary>
    ///     Object Constraint Language.
    /// </summary>
    public const string Ocl = "ocl";
    /// <summary>
    ///     OCaml programming language.
    /// </summary>
    public const string OCaml = "ocaml";
    /// <summary>
    ///     Objective-C programming language.
    /// </summary>
    public const string ObjectiveC = "objectivec";
    /// <summary>
    ///     Odin programming language.
    /// </summary>
    public const string Odin = "odin";
    /// <summary>
    ///     OpenGL Shading Language.
    /// </summary>
    public const string OpenGLShadingLanguage = "glsl";
    /// <summary>
    ///     OpenSCAD scripting language.
    /// </summary>
    public const string OpenScad = "openscad";
    /// <summary>
    ///     Oracle Rules Language.
    /// </summary>
    public const string OracleRulesLanguage = "ruleslanguage";
    /// <summary>
    ///     Oxygene programming language.
    /// </summary>
    public const string Oxygene = "oxygene";
    /// <summary>
    ///     PF firewall configuration files.
    /// </summary>
    public const string Pf = "pf";
    /// <summary>
    ///     PHP scripting language.
    /// </summary>
    public const string Php = "php";
    /// <summary>
    ///     Papyrus scripting language.
    /// </summary>
    public const string Papyrus = "papyrus";
    /// <summary>
    ///     Parser3 scripting language.
    /// </summary>
    public const string Parser3 = "parser3";
    /// <summary>
    ///     Perl programming language.
    /// </summary>
    public const string Perl = "perl";
    /// <summary>
    ///     Phix programming language.
    /// </summary>
    public const string Phix = "phix";
    /// <summary>
    ///     Pine Script for financial analysis.
    /// </summary>
    public const string PineScript = "pine";
    /// <summary>
    ///     Plaintext format.
    /// </summary>
    public const string Plaintext = "plaintext";
    /// <summary>
    ///     Pony programming language.
    /// </summary>
    public const string Pony = "pony";
    /// <summary>
    ///     PostgreSQL and PL/pgSQL.
    /// </summary>
    public const string PostgreSQL = "pgsql";
    /// <summary>
    ///     PowerOn programming language.
    /// </summary>
    public const string PowerOn = "poweron";
    /// <summary>
    ///     PowerShell scripting language.
    /// </summary>
    public const string PowerShell = "powershell";
    /// <summary>
    ///     Processing programming language.
    /// </summary>
    public const string Processing = "processing";
    /// <summary>
    ///     Prolog programming language.
    /// </summary>
    public const string Prolog = "prolog";
    /// <summary>
    ///     Properties file format.
    /// </summary>
    public const string Properties = "properties";
    /// <summary>
    ///     Protocol Buffers.
    /// </summary>
    public const string ProtocolBuffers = "proto";
    /// <summary>
    ///     Puppet configuration management language.
    /// </summary>
    public const string Puppet = "puppet";
    /// <summary>
    ///     Python programming language.
    /// </summary>
    public const string Python = "python";
    /// <summary>
    ///     Python REPL sessions.
    /// </summary>
    public const string PythonRepl = "python-repl";
    /// <summary>
    ///     Q# programming language.
    /// </summary>
    public const string QSharp = "qsharp";
    /// <summary>
    ///     Q/K programming language.
    /// </summary>
    public const string Q = "k";
    /// <summary>
    ///     QML language.
    /// </summary>
    public const string Qml = "qml";
    /// <summary>
    ///     R programming language.
    /// </summary>
    public const string R = "r";
    /// <summary>
    ///     Raku programming language.
    /// </summary>
    public const string Raku = "raku";
    /// <summary>
    ///     RakuDoc documentation format.
    /// </summary>
    public const string RakuDoc = "pod6";
    /// <summary>
    ///     Raku quoting constructs.
    /// </summary>
    public const string RakuQuoting = "rakuquoting";
    /// <summary>
    ///     Raku regexes.
    /// </summary>
    public const string RakuRegexe = "rakuregexe";
    /// <summary>
    ///     Razor (cshtml-razor) for ASP.NET web pages.
    /// </summary>
    public const string Razor = "cshtml-razor";
    /// <summary>
    ///     ReasonML programming language.
    /// </summary>
    public const string Reasonml = "reasonml";
    /// <summary>
    ///     Rebol and Red programming languages.
    /// </summary>
    public const string RebolAndRed = "redbol";
    /// <summary>
    ///     RenderMan RIB file format.
    /// </summary>
    public const string RenderManRib = "rib";
    /// <summary>
    ///     RenderMan RSL shader language.
    /// </summary>
    public const string RenderManRsl = "rsl";
    /// <summary>
    ///     ReScript programming language.
    /// </summary>
    public const string Rescript = "rescript";
    /// <summary>
    ///     RiScript language.
    /// </summary>
    public const string RiScript = "risc";
    /// <summary>
    ///     RISC-V Assembly language.
    /// </summary>
    public const string RiscVAssembly = "riscv";
    /// <summary>
    ///     Roboconf graph files.
    /// </summary>
    public const string Roboconf = "graph";
    /// <summary>
    ///     Robot Framework test data.
    /// </summary>
    public const string RobotFramework = "robot";
    /// <summary>
    ///     RPM spec files.
    /// </summary>
    public const string RpmSpecfile = "rpm-specfile";
    /// <summary>
    ///     Ruby programming language.
    /// </summary>
    public const string Ruby = "ruby";
    /// <summary>
    ///     Rust programming language.
    /// </summary>
    public const string Rust = "rust";
    /// <summary>
    ///     RVT Script language.
    /// </summary>
    public const string RvtScript = "rvt";
    /// <summary>
    ///     SAS programming language.
    /// </summary>
    public const string SAS = "SAS";
    /// <summary>
    ///     SCSS (Sassy CSS) language.
    /// </summary>
    public const string Scss = "scss";
    /// <summary>
    ///     SQL (Structured Query Language).
    /// </summary>
    public const string Sql = "sql";
    /// <summary>
    ///     STEP Part 21 files.
    /// </summary>
    public const string StepPart21 = "p21";
    /// <summary>
    ///     Scala programming language.
    /// </summary>
    public const string Scala = "scala";
    /// <summary>
    ///     Scheme programming language.
    /// </summary>
    public const string Scheme = "scheme";
    /// <summary>
    ///     Scilab programming language.
    /// </summary>
    public const string Scilab = "scilab";
    /// <summary>
    ///     SFZ format.
    /// </summary>
    public const string Sfz = "sfz";
    /// <summary>
    ///     Shape Expressions (ShExC).
    /// </summary>
    public const string ShapeExpressions = "shexc";
    /// <summary>
    ///     Shell scripting language.
    /// </summary>
    public const string Shell = "shell";
    /// <summary>
    ///     Smali assembly language for Dalvik VM.
    /// </summary>
    public const string Smali = "smali";
    /// <summary>
    ///     Smalltalk programming language.
    /// </summary>
    public const string Smalltalk = "smalltalk";
    /// <summary>
    ///     Standard ML programming language.
    /// </summary>
    public const string Sml = "sml";
    /// <summary>
    ///     Solidity programming language.
    /// </summary>
    public const string Solidity = "solidity";
    /// <summary>
    ///     Splunk SPL (Search Processing Language).
    /// </summary>
    public const string SplunkSpl = "spl";
    /// <summary>
    ///     Stan programming language.
    /// </summary>
    public const string Stan = "stan";
    /// <summary>
    ///     Stata statistical software.
    /// </summary>
    public const string Stata = "stata";
    /// <summary>
    ///     Structured Text (IEC 61131-3).
    /// </summary>
    public const string StructuredText = "iecst";
    /// <summary>
    ///     Stylus CSS preprocessor.
    /// </summary>
    public const string Stylus = "stylus";
    /// <summary>
    ///     SubUnit test result format.
    /// </summary>
    public const string SubUnit = "subunit";
    /// <summary>
    ///     SuperCollider programming language.
    /// </summary>
    public const string Supercollider = "supercollider";
    /// <summary>
    ///     Svelte component framework.
    /// </summary>
    public const string Svelte = "svelte";
    /// <summary>
    ///     Swift programming language.
    /// </summary>
    public const string Swift = "swift";
    /// <summary>
    ///     Tcl scripting language.
    /// </summary>
    public const string Tcl = "tcl";
    /// <summary>
    ///     Terraform (HCL) configuration language.
    /// </summary>
    public const string Terraform = "terraform";
    /// <summary>
    ///     Test Anything Protocol.
    /// </summary>
    public const string Tap = "tap";
    /// <summary>
    ///     Thrift interface definition language.
    /// </summary>
    public const string Thrift = "thrift";
    /// <summary>
    ///     Toit programming language.
    /// </summary>
    public const string Toit = "toit";
    /// <summary>
    ///     TP language.
    /// </summary>
    public const string Tp = "tp";
    /// <summary>
    ///     Transact-SQL language.
    /// </summary>
    public const string TransactSql = "tsql";
    /// <summary>
    ///     TTCN-3 testing language.
    /// </summary>
    public const string TtcnThree = "ttcn";
    /// <summary>
    ///     Twig templating language.
    /// </summary>
    public const string Twig = "twig";
    /// <summary>
    ///     TypeScript programming language.
    /// </summary>
    public const string TypeScript = "typescript";
    /// <summary>
    ///     Unicorn Rails log files.
    /// </summary>
    public const string UnicornRailsLog = "unicorn-rails-log";
    /// <summary>
    ///     Unison programming language.
    /// </summary>
    public const string Unison = "unison";
    /// <summary>
    ///     VB.NET programming language.
    /// </summary>
    public const string VbNet = "vbnet";
    /// <summary>
    ///     VBA (Visual Basic for Applications).
    /// </summary>
    public const string Vba = "vba";
    /// <summary>
    ///     VBScript scripting language.
    /// </summary>
    public const string VbScript = "vbscript";
    /// <summary>
    ///     VHDL hardware description language.
    /// </summary>
    public const string Vhdl = "vhdl";
    /// <summary>
    ///     Vala programming language.
    /// </summary>
    public const string Vala = "vala";
    /// <summary>
    ///     Verilog hardware description language.
    /// </summary>
    public const string Verilog = "verilog";
    /// <summary>
    ///     Vim script.
    /// </summary>
    public const string VimScript = "vim";
    /// <summary>
    ///     WebGPU Shading Language (WGSL).
    /// </summary>
    public const string Wgsl = "wgsl";
    /// <summary>
    ///     X# programming language.
    /// </summary>
    public const string XSharp = "xsharp";
    /// <summary>
    ///     X++ programming language (Axapta).
    /// </summary>
    public const string Axapta = "axapta";
    /// <summary>
    ///     x86 Assembly language.
    /// </summary>
    public const string X86Asm = "x86asm";
    /// <summary>
    ///     x86 Assembly (AT&amp;T syntax).
    /// </summary>
    public const string X86AsmAtt = "x86asmatt";
    /// <summary>
    ///     XL programming language.
    /// </summary>
    public const string Xl = "xl";
    /// <summary>
    ///     XQuery and XPath.
    /// </summary>
    public const string XQuery = "xquery";
    /// <summary>
    ///     YAML Ain't Markup Language.
    /// </summary>
    public const string Yaml = "yml";
    /// <summary>
    ///     ZenScript scripting language.
    /// </summary>
    public const string ZenScript = "zenscript";
    /// <summary>
    ///     Zephir programming language.
    /// </summary>
    public const string Zephir = "zephir";
    /// <summary>
    ///     Zig programming language.
    /// </summary>
    public const string Zig = "zig";
    /// <summary>
    ///     Gets the full language class with the "language-" prefix.
    /// </summary>
    /// <param name="language">The language alias to append.</param>
    /// <returns>A string representing the full language class for Highlight.js.</returns>
    public static string GetLanguageClass(string language)
    {
        return $"language-{language}";
    }
}
</file>

<file path="Components/Document/RzCodeViewer/RzCodeViewer.razor">
@namespace RizzyUI
@using System.Text
@using System.Web
@using System.Text.Json
@using Rizzy.Utility
@inherits RzComponent

<div @attributes="AdditionalAttributes" class="@RootClass()"
     data-assets="@_assets"
     data-codeid="@CodeId"
     data-nonce="@Nonce"
     x-data="rzCodeViewer">

    <div class="@HeaderClass">
        <span class="@HeaderTitleClass">@ViewerTitle</span>
    </div>

    <div class="@CodeContainerClass">
        <div class="@CopyButtonContainerClass">
            <button aria-label="copy code" role="button" :title="getCopiedTitle" x-on:click="copyHTML" class="@CopyButtonClass" :class="getCopiedCss" x-on:click.away="disableCopied" data-target="cardDefault" title="copy">
                <svg x-show="notCopied" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="@CopyIconDefaultClass" x-transition:enter="transition duration-200 ease-out" x-transition:enter-start="opacity-0" x-transition:enter-end="opacity-100">
                    <path stroke-linecap="round" stroke-linejoin="round" d="M15.666 3.888A2.25 2.25 0 0013.5 2.25h-3c-1.03 0-1.9.693-2.166 1.638m7.332 0c.055.194.084.4.084.612v0a.75.75 0 01-.75.75H9a.75.75 0 01-.75-.75v0c0-.212.03-.418.084-.612m7.332 0c.646.049 1.288.11 1.927.184 1.1.128 1.907 1.077 1.907 2.185V19.5a2.25 2.25 0 01-2.25 2.25H6.75A2.25 2.25 0 014.5 19.5V6.257c0-1.108.806-2.057 1.907-2.185a48.208 48.208 0 011.927-.184"></path>
                </svg>
                <svg x-show="copied" x-transition:enter="transition duration-200 ease-out" x-transition:enter-start="translate-y-2 opacity-0" x-transition:enter-end="translate-y-0 opacity-100" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.3" stroke="currentColor" class="@CopyIconCopiedClass">
                    <path stroke-linecap="round" stroke-linejoin="round" d="M11.35 3.836c-.065.21-.1.433-.1.664 0 .414.336.75.75.75h4.5a.75.75 0 00.75-.75 2.25 2.25 0 00-.1-.664m-5.8 0A2.251 2.251 0 0113.5 2.25H15c1.012 0 1.867.668 2.15 1.586m-5.8 0c-.376.023-.75.05-1.124.08C9.095 4.01 8.25 4.973 8.25 6.108V8.25m8.9-4.414c.376.023.75.05 1.124.08 1.131.094 1.976 1.057 1.976 2.192V16.5A2.25 2.25 0 0118 18.75h-2.25m-7.5-10.5H4.875c-.621 0-1.125.504-1.125 1.125v11.25c0 .621.504 1.125 1.125 1.125h9.75c.621 0 1.125-.504 1.125-1.125V18.75m-7.5-10.5h6.375c.621 0 1.125.504 1.125 1.125v9.375m-8.25-3l1.5 1.5 3-3.75"></path>
                </svg>
            </button>
        </div>

        <div class="@PreWrapperClass" :class="getExpandCss">
            <pre x-ref="codeBlock" class="@PreElementClass" tabindex="0">
                <code class="@LanguageClass" id="@CodeId">@CodeContent</code>
            </pre>
        </div>
    </div>

    <button aria-label="expand the code container" class="@ExpandButtonClass" x-on:click="toggleExpand">
        <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="2.5" stroke="currentColor" class="@ExpandIconClass" :class="getExpandButtonCss">
            <path stroke-linecap="round" stroke-linejoin="round" d="M19.5 8.25l-7.5 7.5-7.5-7.5"></path>
        </svg>
    </button>
</div>
</file>

<file path="Components/Document/RzCodeViewer/RzCodeViewer.razor.cs">
using Microsoft.AspNetCore.Components;
using Microsoft.Extensions.Options;
using System.Text.Json;
using System.Web; // For HttpUtility
using Rizzy.Utility;
using RizzyUI.Extensions;
namespace RizzyUI;
/// <xmldoc>
/// Displays code snippets with syntax highlighting (using Highlight.js), copy-to-clipboard functionality,
/// and an expand/collapse feature. Styling is determined by the active <see cref="RzTheme"/>.
/// </xmldoc>
public partial class RzCodeViewer : RzComponent
{
    // Theme is inherited from RzComponent
    private string CodeId { get; } = IdGenerator.UniqueId("rzcode");
    private string CodeContent { get; set; } = string.Empty;
    private string _assets = string.Empty;
    /// <summary> Default assets loaded for RzCodeViewer (Highlight.js core and Razor plugin). </summary>
    public static string[] DefaultAssets =
    [
        Constants.ContentUrl("js/vendor/highlightjs/highlight.js"),
        Constants.ContentUrl("js/vendor/highlightjs-plugin/cshtml-razor.min.js"),
    ];
    /// <summary> Optional array of asset URLs (JS/CSS) to load, primarily for Highlight.js and themes. Defaults to <see cref="DefaultAssets"/>. </summary>
    [Parameter] public string[] ComponentAssets { get; set; } = DefaultAssets;
    /// <summary> The language alias for Highlight.js syntax highlighting (e.g., "csharp", "html", "css"). See <see cref="CodeLanguage"/> constants. Defaults to "html". </summary>
    [Parameter] public string Language { get; set; } = CodeLanguage.Html;
    /// <summary> The code content provided as a RenderFragment. Used if <see cref="Source"/> is null or empty. </summary>
    [Parameter] public RenderFragment? ChildContent { get; set; }
    /// <summary> The code content provided as a string. Takes precedence over <see cref="ChildContent"/>. </summary>
    [Parameter] public string? Source { get; set; }
    /// <summary> The title displayed in the header of the code viewer card. Defaults to "Source". </summary>
    [Parameter] public string ViewerTitle { get; set; } = "Source";
    // --- Style Properties derived from Theme ---
    /// <summary> Gets the computed CSS classes for the header div. </summary>
    protected string HeaderClass => Theme.RzCodeViewer.Header;
    /// <summary> Gets the computed CSS classes for the header title span. </summary>
    protected string HeaderTitleClass => Theme.RzCodeViewer.HeaderTitle;
    /// <summary> Gets the computed CSS classes for the main code container div. </summary>
    protected string CodeContainerClass => Theme.RzCodeViewer.CodeContainer;
    /// <summary> Gets the computed CSS classes for the copy button container div. </summary>
    protected string CopyButtonContainerClass => Theme.RzCodeViewer.CopyButtonContainer;
    /// <summary> Gets the computed CSS classes for the copy button. </summary>
    protected string CopyButtonClass => Theme.RzCodeViewer.CopyButton;
    /// <summary> Gets the computed CSS classes for the default copy icon. </summary>
    protected string CopyIconDefaultClass => Theme.RzCodeViewer.CopyIconDefault;
    /// <summary> Gets the computed CSS classes for the copied state icon. </summary>
    protected string CopyIconCopiedClass => Theme.RzCodeViewer.CopyIconCopied;
    /// <summary> Gets the computed CSS classes for the pre element wrapper div. </summary>
    protected string PreWrapperClass => Theme.RzCodeViewer.PreWrapper;
    /// <summary> Gets the computed CSS classes for the pre element. </summary>
    protected string PreElementClass => Theme.RzCodeViewer.PreElement;
    /// <summary> Gets the computed CSS classes for the expand/collapse button. </summary>
    protected string ExpandButtonClass => Theme.RzCodeViewer.ExpandButton;
    /// <summary> Gets the computed CSS classes for the expand/collapse icon. </summary>
    protected string ExpandIconClass => Theme.RzCodeViewer.ExpandIcon;
    /// <summary> Gets the full language class name for Highlight.js. </summary>
    protected string LanguageClass => CodeLanguage.GetLanguageClass(Language);
    /// <inheritdoc/>
    protected override void OnInitialized()
    {
        // Base class handles Theme initialization
        base.OnInitialized();
        _assets = JsonSerializer.Serialize(ComponentAssets);
    }
    /// <inheritdoc/>
    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        SetCodeContent();
    }
    private void SetCodeContent()
    {
        string rawContent;
        if (!string.IsNullOrEmpty(Source))
        {
            rawContent = Source;
        }
        else if (ChildContent != null)
        {
            rawContent = ChildContent.AsMarkupString(); // Assumes AsMarkupString extension exists
            rawContent = HttpUtility.HtmlDecode(rawContent); // Decode entities
        }
        else
        {
            rawContent = string.Empty;
        }
        CodeContent = rawContent.TrimEmptyLines().Outdent(); // Trim and outdent
    }
    /// <inheritdoc/>
    protected override string? RootClass() =>
        TwMerge.Merge(AdditionalAttributes, Theme.RzCodeViewer.Container);
}
</file>

<file path="Components/Document/RzCodeViewer/Styling/DefaultRzCodeViewerStyles.cs">
namespace RizzyUI;
/// <summary> Provides default styles for RzCodeViewer. </summary>
public class DefaultRzCodeViewerStyles : RzStylesBase.RzCodeViewerStylesBase
{
    /// <inheritdoc />
    public DefaultRzCodeViewerStyles(RzTheme theme) : base(theme) { }
    /// <inheritdoc/>
    public override string Container => "mt-2 overflow-auto";
    /// <inheritdoc/>
    public override string Header => $"border-b-0 border-outline bg-surface-alt flex flex-col items-start justify-between gap-4 rounded-theme rounded-b-none border p-4 text-sm text-slate-400 md:flex-row md:items-center md:gap-2"; // Use semantic names
    /// <inheritdoc/>
    public override string HeaderTitle => $"text-on-surface"; // Use semantic names
    /// <inheritdoc/>
    public override string CodeContainer => $"border-outline w-full overflow-y-auto transition-all !rounded-b-none rounded-b-xl border"; // Use semantic names
    /// <inheritdoc/>
    public override string CopyButtonContainer => $"border-surface-tertiary/70 bg-surface-tertiary text-on-surface-tertiary flex h-11 items-center justify-between border-b"; // Use semantic names
    /// <inheritdoc/>
    public override string CopyButton => $"my-auto ml-auto mr-2 overflow-hidden rounded-full p-1 hover:bg-surface/10 focus:outline-none focus:outline-offset-0 focus-visible:outline-2 active:-outline-offset-2"; // Use semantic names
    /// <inheritdoc/>
    public override string CopyIconDefault => $"text-on-surface-strong size-6 cursor-pointer"; // Use semantic names (adjusted for likely contrast)
    /// <inheritdoc/>
    public override string CopyIconCopied => "size-6 text-emerald-500"; // Keep specific color for success state
    /// <inheritdoc/>
    public override string PreWrapper => "relative overflow-y-auto";
    /// <inheritdoc/>
    public override string PreElement => $"text-on-surface/60 overflow-x-auto text-sm p-8 border-none"; // Use semantic names
    /// <inheritdoc/>
    public override string ExpandButton => $"border-t-0 border-outline bg-surface-alt text-on-surface flex w-full items-center justify-center gap-2 rounded-theme rounded-t-none border p-2 focus:outline-none focus-visible:rounded-t-none focus-visible:border-2 focus-visible:border-primary dark:focus-visible:border-primary"; // Use semantic names
    /// <inheritdoc/>
    public override string ExpandIcon => "rotate-0 h-5 w-5 transition";
    /// <inheritdoc/>
    public override string GetExpandContentCss(bool isExpanded) => isExpanded ? "" : "max-h-60";
    /// <inheritdoc/>
    public override string GetExpandButtonIconCss(bool isExpanded) => isExpanded ? "rotate-180" : "rotate-0";
    /// <inheritdoc/>
    public override string GetCopyButtonStateCss(bool isCopied) => isCopied ? $"focus-visible:outline-success" : $"focus-visible:outline-on-surface-strong"; // Use semantic names
}
</file>

<file path="Components/Document/RzEmbeddedPreview/RzEmbeddedPreview.razor">
@using Rizzy.Utility
@namespace RizzyUI
@inherits RzComponent

<HtmlElement class="@ContainerClass">
	<iframe x-data="rzEmbeddedPreview"
	        id="@Id"
	        class="@IFrameClass"
	        srcdoc="@_content"
	        x-ref="iframe">
	</iframe>
</HtmlElement>
</file>

<file path="Components/Document/RzEmbeddedPreview/RzEmbeddedPreview.razor.cs">
using Microsoft.AspNetCore.Components;
using Microsoft.Extensions.Options;
using Rizzy.Utility;
using RizzyUI.Extensions;
using System;
using System.Threading.Tasks; // For Task
namespace RizzyUI;
/// <xmldoc>
/// Renders child content within an isolated iframe, optionally applying a specified Blazor layout component.
/// Useful for previewing components or content in a sandboxed environment. Includes Alpine.js logic
/// for dynamic iframe resizing and dark mode synchronization.
/// Styling is determined by the active <see cref="RzTheme"/>.
/// </xmldoc>
public partial class RzEmbeddedPreview : RzComponent
{
    // Theme is inherited from RzComponent
    private string? _content;
    private readonly string Id = IdGenerator.UniqueId("rzpreview");
    /// <summary> ServiceProvider reference needed to render components to string correctly. </summary>
    [Inject] private IServiceProvider ServiceProvider { get; set; } = default!;
    /// <summary> The content (markup or components) to render inside the iframe. Required. </summary>
    [Parameter, EditorRequired] public required RenderFragment ChildContent { get; set; }
    /// <summary> An optional Blazor layout component type to wrap the <see cref="ChildContent"/> within the iframe. </summary>
    [Parameter] public Type? Layout { get; set; }
    // --- Style Properties derived from Theme ---
    /// <summary> Gets the computed CSS classes for the container div. </summary>
    protected string ContainerClass => Theme.RzEmbeddedPreview.Container;
    /// <summary> Gets the computed CSS classes for the iframe element. </summary>
    protected string IFrameClass => Theme.RzEmbeddedPreview.IFrame;
    /// <inheritdoc/>
    protected override async Task OnParametersSetAsync() // Use async version for RenderHtmlAsync
    {
        await base.OnParametersSetAsync(); // Ensure base class logic runs
        // Wrap the ChildContent inside the Layout if specified
		RenderFragment fragment = builder =>
		{
			if (Layout != null)
			{
				builder.OpenComponent(0, Layout);
				builder.AddAttribute(1, nameof(LayoutComponentBase.Body), ChildContent);
				builder.CloseComponent();
			}
			else
			{
				builder.AddContent(2, ChildContent);
			}
		};
		// Use the async RenderHtml extension method to render the fragment
        // Be mindful of potential deadlocks if not done correctly in all scenarios.
        // Consider making this truly async if rendering becomes complex.
		_content = await fragment.RenderHtmlAsync(ServiceProvider);
	}
}
</file>

<file path="Components/Document/RzEmbeddedPreview/Styling/DefaultRzEmbeddedPreviewStyles.cs">
namespace RizzyUI;
/// <summary> Provides default styles for RzEmbeddedPreview. </summary>
public class DefaultRzEmbeddedPreviewStyles : RzStylesBase.RzEmbeddedPreviewStylesBase 
{
	/// <inheritdoc />
	public DefaultRzEmbeddedPreviewStyles(RzTheme theme) : base(theme) { }
	/// <inheritdoc/>
	public override string Container => "w-full";
	/// <inheritdoc/>
	public override string IFrame => "w-full transition-all min-h-28";
}
</file>

<file path="Components/Document/RzMarkdown/RzMarkdown.razor">
@namespace RizzyUI
@inherits RzComponent

<HtmlElement Element="div" @attributes="@AdditionalAttributes" class="@RootClass()"
             data-assets="@_assets"
             data-nonce="@Nonce"
             x-data="rzMarkdown">
    @OutputHtml
</HtmlElement>
</file>

<file path="Components/Document/RzMarkdown/RzMarkdown.razor.cs">
using System.Text;
using System.Text.Json;
using System.Web;
using Markdig;
using Markdig.Renderers.Html;
using Markdig.Syntax;
using Markdig.Syntax.Inlines;
using Microsoft.AspNetCore.Components;
using Microsoft.Extensions.Options;
using Rizzy.Utility;
using RizzyUI.Extensions;
// Add this
// Add this
namespace RizzyUI;
/// <xmldoc>
///     A component that converts Markdown text (provided as ChildContent or Content parameter) into HTML using Markdig.
///     It supports GitHub Flavored Markdown extensions and integrates with Highlight.js for syntax highlighting.
///     Styling is determined by the active <see cref="RzTheme" /> and Tailwind Typography plugin.
/// </xmldoc>
public partial class RzMarkdown : RzComponent
{
    /// <summary> Default assets loaded for RzMarkdown (Highlight.js and Razor plugin). </summary>
    public static string[] DefaultAssets = [ /* Unchanged */];
    private string _assets = string.Empty;
    /// <summary> Reference to the QuickReferenceContainer for heading registration. </summary>
    [CascadingParameter]
    private RzQuickReferenceContainer? QuickReferenceContainer { get; set; }
    /// <summary>
    ///     The Markdig pipeline used for conversion. Defaults to a pipeline with advanced extensions and custom code
    ///     block rendering.
    /// </summary>
    [Parameter]
    public MarkdownPipeline? Pipeline { get; set; }
    /// <summary> The Markdown content provided as a RenderFragment. Used if <see cref="Content" /> is null or empty. </summary>
    [Parameter]
    public RenderFragment? ChildContent { get; set; }
    /// <summary> The Markdown content provided as a string. Takes precedence over <see cref="ChildContent" />. </summary>
    [Parameter]
    public string? Content { get; set; } = string.Empty;
    /// <summary> Controls the maximum width of the rendered prose content. Defaults to Comfortable. </summary>
    [Parameter]
    public ProseWidth ProseWidth { get; set; } = ProseWidth.Comfortable;
    /// <summary>
    ///     Optional array of asset URLs (JS/CSS) to load, primarily for syntax highlighting. Defaults to
    ///     <see cref="DefaultAssets" />.
    /// </summary>
    [Parameter]
    public string[] ComponentAssets { get; set; } = DefaultAssets;
    /// <summary> Gets the HTML markup generated by converting the markdown content. </summary>
    protected MarkupString? OutputHtml { get; private set; }
    /// <inheritdoc />
    protected override void OnInitialized()
    {
        base.OnInitialized();
        // Setup default pipeline if none provided
        Pipeline ??= new MarkdownPipelineBuilder()
            .UseAdvancedExtensions()
            .UseRizzySyntaxHighlighting() // Assumes this extension exists and is correctly implemented
            .Build();
        // Serialize assets only once if they don't change
        _assets = JsonSerializer.Serialize(ComponentAssets);
    }
    /// <inheritdoc />
    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        // Re-render HTML only if content changes
        RenderMarkdownContent();
    }
    private void RenderMarkdownContent()
    {
        string markdownText;
        if (!string.IsNullOrEmpty(Content))
        {
            markdownText = Content;
        }
        else if (ChildContent != null)
        {
            markdownText = ChildContent.AsMarkupString().Outdent();
            markdownText = HttpUtility.HtmlDecode(markdownText); // Decode potential HTML entities
        }
        else
        {
            markdownText = string.Empty;
        }
        var html = RenderOutput(markdownText);
        OutputHtml = new MarkupString(html);
    }
    /// <inheritdoc />
    protected override string? RootClass()
    {
        return TwMerge.Merge(AdditionalAttributes, Theme.RzMarkdown.Container, Theme.RzMarkdown.GetProseWidthCss(ProseWidth));
    }
    // RenderOutput and ExtractPlainText methods remain the same, but ensure they use the correct
    // QuickReferenceContainer type (RzQuickReferenceContainer) if needed.
    private string RenderOutput(string markdownText)
    {
        var document = Markdown.Parse(markdownText, Pipeline);
        // Iterate through heading blocks and register them.
        if (QuickReferenceContainer != null)
            foreach (var block in document)
                if (block is HeadingBlock heading)
                {
                    var level = heading.Level;
                    var headingText = ExtractPlainText(heading.Inline);
                    var attributes = heading.GetAttributes();
                    attributes.Id ??= IdGenerator.UniqueId("heading"); // Ensure ID exists
                    attributes.AddProperty("x-data", "rzHeading"); // Add Alpine data if needed
                    var headingLevel = level switch
                    {
                        1 => HeadingLevel.H1, 2 => HeadingLevel.H2, 3 => HeadingLevel.H3, _ => HeadingLevel.H4
                    };
                    // Ensure QuickReferenceContainer parameter type matches RzQuickReferenceContainer
                    QuickReferenceContainer.RegisterHeading(headingLevel, headingText, attributes.Id);
                }
        return document.ToHtml(Pipeline);
    }
    private string ExtractPlainText(ContainerInline? inline)
    {
        // (Implementation remains the same)
        if (inline == null) return string.Empty;
        var sb = new StringBuilder();
        foreach (var child in inline)
            if (child is LiteralInline literal)
                sb.Append(literal.Content.Text.Substring(literal.Content.Start, literal.Content.Length));
            else if (child is ContainerInline container) sb.Append(ExtractPlainText(container));
        return sb.ToString().Trim();
    }
}
</file>

<file path="Components/Document/RzMarkdown/Styling/DefaultRzMarkdownStyles.cs">
namespace RizzyUI;
/// <summary>
///     Provides the default styles for the RzMarkdown component.
/// </summary>
public class DefaultRzMarkdownStyles : RzStylesBase.RzMarkdownStylesBase
{
    /// <inheritdoc />
    public DefaultRzMarkdownStyles(RzTheme theme) : base(theme)
    {
    }
    /// <inheritdoc />
    // Includes base prose, dark mode inversion, and theme text color
    public override string Container => "prose dark:prose-invert text-on-surface max-w-none";
    /// <inheritdoc />
    public override string GetProseWidthCss(ProseWidth width)
    {
        return width switch
        {
            ProseWidth.Compact => "prose-compact",
            ProseWidth.Comfortable => "prose-comfortable",
            ProseWidth.Relaxed => "prose-relaxed",
            ProseWidth.Wide => "prose-wide",
            ProseWidth.UltraWide => "prose-ultrawide", // Corrected class name if needed
            ProseWidth.Full => "prose-full", // Ensure this utility exists or remove if max-w-none covers it
            _ => GetProseWidthCss(ProseWidth.Comfortable) // Default to comfortable
        };
    }
}
</file>

<file path="Components/Document/RzQuickReference/RzQuickReference.razor">
@namespace RizzyUI
@inherits RzComponent

<div class="@RootClass()">
    <p class="@TitleClass">
        @Title
    </p>
    <ul class="@ListClass">
        @foreach (var heading in _headings)
        {
            <li class="@ListItemClass @GetIndentationClass(heading.Level)">
                @* Alpine handles selected class via :class binding in JS *@
                <a href="#@heading.Id"
                   class="@LinkClass"
                   data-headingid="@heading.Id"
                   :class="getSelectedCss"
                   x-on:click="handleHeadingClick">
                    @heading.Title
                </a>
            </li>
        }
    </ul>
</div>
</file>

<file path="Components/Document/RzQuickReference/RzQuickReference.razor.cs">
using Microsoft.AspNetCore.Components;
using Microsoft.Extensions.Options;
using RizzyUI.Extensions;
namespace RizzyUI;
/// <xmldoc>
///     Renders an "on this page" style navigation outline based on headings registered
///     with the parent <see cref="RzQuickReferenceContainer" />. Interacts with Alpine.js
///     to highlight the currently visible heading.
///     Styling is determined by the active <see cref="RzTheme" />.
/// </xmldoc>
public partial class RzQuickReference : RzComponent
{
    private IReadOnlyList<HeadingItem> _headings = new List<HeadingItem>().AsReadOnly();
    /// <summary> Gets the parent container which holds the heading data. </summary>
    [CascadingParameter]
    private RzQuickReferenceContainer? QuickReferenceContainer { get; set; }
    /// <summary> The title displayed above the quick reference list. Defaults to "On this page". </summary>
    [Parameter]
    public string Title { get; set; } = "On this page";
    // --- Style Properties derived from Theme ---
    /// <summary> Gets the computed CSS classes for the title paragraph. </summary>
    protected string TitleClass => Theme.RzQuickReference.Title;
    /// <summary> Gets the computed CSS classes for the list (ul) element. </summary>
    protected string ListClass => Theme.RzQuickReference.List;
    /// <summary> Gets the computed CSS classes for the list items (li). </summary>
    protected string ListItemClass => Theme.RzQuickReference.ListItem;
    /// <summary> Gets the computed CSS classes for the heading links (a). </summary>
    protected string LinkClass => Theme.RzQuickReference.Link;
    // Note: LinkSelected class is handled by Alpine :class="getSelectedCss"
    /// <inheritdoc />
    protected override void OnInitialized()
    {
        base.OnInitialized();
        if (QuickReferenceContainer == null)
            throw new InvalidOperationException(
                $"{GetType()} must be placed within an {nameof(RzQuickReferenceContainer)}.");
        // Get initial headings
        _headings = QuickReferenceContainer.GetHeadingItems();
    }
    /// <inheritdoc />
    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        // Update headings if the container might have changed (less common, but possible)
        if (QuickReferenceContainer != null) _headings = QuickReferenceContainer.GetHeadingItems();
    }
    /// <inheritdoc />
    protected override string? RootClass()
    {
        return TwMerge.Merge(AdditionalAttributes, Theme.RzQuickReference.Container);
    }
    /// <summary> Gets the CSS class for indentation based on the heading level. </summary>
    /// <param name="level">The heading level.</param>
    /// <returns>A string containing the Tailwind CSS class for margin-left.</returns>
    protected string GetIndentationClass(HeadingLevel level)
    {
        return Theme.RzQuickReference.GetIndentationCss(level, QuickReferenceContainer!.MinimumHeadingLevel);
        // Use parent's min level
    }
}
</file>

<file path="Components/Document/RzQuickReference/RzQuickReferenceContainer.razor">
@namespace RizzyUI
@inherits RzComponent

<HtmlElement Element="@Element" @attributes="@AdditionalAttributes" class="@RootClass()"
             data-headings="@_headingItemsSerialized"
             data-currentheadingid="@(_currentHeadingId)"
             x-data="rzQuickReferenceContainer">
    <CascadingValue Value="this" IsFixed="true"> @* Cascade self to children *@
        @ChildContent
    </CascadingValue>
</HtmlElement>
</file>

<file path="Components/Document/RzQuickReference/RzQuickReferenceContainer.razor.cs">
using System.Text.Json;
using Microsoft.AspNetCore.Components;
using RizzyUI.Extensions;
namespace RizzyUI;
/// <xmldoc>
///     A container component that collects heading information from child components (like <see cref="RzHeading" />)
///     and makes it available to <see cref="RzQuickReference" /> for building an "on this page" navigation.
///     Interacts with Alpine.js to manage the currently highlighted heading.
///     Styling is determined by the active <see cref="RzTheme" />.
/// </xmldoc>
public partial class RzQuickReferenceContainer : RzComponent
{
    private readonly List<HeadingItem> _headingItems = new();
    private string _currentHeadingId = string.Empty; // Store initial heading ID
    private string _headingItemsSerialized = "[]";
    /// <summary> The lowest heading level (e.g., H2) to include in the quick reference outline. Defaults to H2. </summary>
    [Parameter]
    public HeadingLevel MinimumHeadingLevel { get; set; } = HeadingLevel.H2;
    /// <summary> The highest heading level (e.g., H4) to include in the quick reference outline. Defaults to H4. </summary>
    [Parameter]
    public HeadingLevel MaximumHeadingLevel { get; set; } = HeadingLevel.H4;
    /// <summary>
    ///     The child content of the container, which should include headings and potentially an
    ///     <see cref="RzQuickReference" /> component.
    /// </summary>
    [Parameter]
    public RenderFragment? ChildContent { get; set; }
    /// <inheritdoc />
    protected override void OnAfterRender(bool firstRender)
    {
        // After the first render where headings are registered,
        // update the serialized data and initial ID if needed.
        if (firstRender)
        {
            UpdateSerializedHeadings();
            StateHasChanged(); // Trigger re-render with updated data attributes
        }
        base.OnAfterRender(firstRender);
    }
    /// <summary> Registers a heading with this container. Called by child <see cref="RzHeading" /> components. </summary>
    /// <param name="level">The heading level.</param>
    /// <param name="title">The title of the heading.</param>
    /// <param name="id">The unique ID of the heading element.</param>
    internal void RegisterHeading(HeadingLevel level, string title, string id)
    {
        if (level >= MinimumHeadingLevel && level <= MaximumHeadingLevel)
            if (!_headingItems.Any(h => h.Id == id)) // Avoid duplicates
                _headingItems.Add(new HeadingItem(level, title, id));
        // Don't serialize here, do it once in OnAfterRender
    }
    private void UpdateSerializedHeadings()
    {
        _headingItemsSerialized =
            JsonSerializer.Serialize(_headingItems.Select(x => x.Id).ToList()); // Serialize the IDs
        _currentHeadingId = _headingItems.FirstOrDefault()?.Id ?? string.Empty; // Set initial ID for Alpine
    }
    /// <summary> Gets the list of registered heading items. </summary>
    /// <returns>A read-only list of <see cref="HeadingItem" />.</returns>
    public IReadOnlyList<HeadingItem> GetHeadingItems()
    {
        return _headingItems.AsReadOnly();
    }
    /// <inheritdoc />
    protected override string? RootClass()
    {
        return TwMerge.Merge(AdditionalAttributes, Theme.RzQuickReferenceContainer.Container);
    }
}
</file>

<file path="Components/Document/RzQuickReference/Styling/DefaultRzQuickReferenceStyles.cs">
namespace RizzyUI;
/// <summary> Provides default styles for RzQuickReference. </summary>
public class DefaultRzQuickReferenceStyles : RzStylesBase.RzQuickReferenceStylesBase 
{
    /// <inheritdoc />
    public DefaultRzQuickReferenceStyles(RzTheme theme) : base(theme)
    {
    }
    /// <inheritdoc />
    public override string Container => $"text-on-surface-strong"; // Base text color
    /// <inheritdoc />
    public override string Title => "mb-4 font-bold";
    /// <inheritdoc />
    public override string List => "flex flex-col gap-2";
    /// <inheritdoc />
    public override string ListItem => ""; // Base LI, indentation added dynamically
    /// <inheritdoc />
    public override string Link => ""; // Base link, selected state handled by Alpine :class
    /// <inheritdoc />
    public override string LinkSelected => "font-bold"; // Class added by Alpine when selected
    /// <inheritdoc />
    public override string GetIndentationCss(HeadingLevel level, HeadingLevel minLevel)
    {
        // Calculate relative level (0 = minLevel, 1 = minLevel+1, etc.)
        var relativeLevel = (int)level - (int)minLevel;
        return relativeLevel switch
        {
            0 => "ml-0",
            1 => "ml-4",
            2 => "ml-8",
            3 => "ml-12", // H4 if min is H1, or H5 if min is H2
            _ => "ml-0" // Default or levels beyond H4/H5
        };
    }
}
/// <summary> Provides default styles for RzQuickReferenceContainer. </summary>
public class DefaultRzQuickReferenceContainerStyles : RzStylesBase.RzQuickReferenceContainerStylesBase 
{
    public DefaultRzQuickReferenceContainerStyles(RzTheme theme) : base(theme)
    {
    }
    /// <inheritdoc />
    public override string Container => ""; // No base styles for the container usually
}
</file>

<file path="Components/Feedback/RzAlert/RzAlert.razor">
@* src/RizzyUI/Components/RzAlert/RzAlert.razor *@
@using Blazicons
@namespace RizzyUI
@inherits RzComponent

<CascadingValue Value="this" IsFixed="true">
	<HtmlElement Element="@Element"
	             @attributes="@AdditionalAttributes"
	             class="@RootClass()"
	             role="alert"
	             aria-live="assertive"
	             aria-labelledby="rzalert-title"
	             aria-describedby="rzalert-description"
	             x-cloak
	             x-show="showAlert"
	             x-data="rzAlert"
	             x-transition:enter="transition ease-out duration-200"
	             x-transition:enter-start="opacity-0"
	             x-transition:enter-end="opacity-100"
	             x-transition:leave="transition ease-in duration-100"
	             x-transition:leave-start="opacity-100"
	             x-transition:leave-end="opacity-0">

		<div class="@InnerContainerClass">
			@if (Icon != null)
			{
				<div class="@IconContainerClass" aria-hidden="true">
					@if (Pulse)
					{
						<div class="@IconPulseClass"></div>
					}
					<Blazicon Svg="Icon"></Blazicon>
				</div>
			}
			<div class="@ContentContainerClass">
				@ChildContent
			</div>

			@if (Dismissable)
			{
				<button
					type="button"
					x-on:click="dismiss"
					aria-label="Close alert"
					class="@CloseButtonClass">
					<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" aria-hidden="true" stroke="currentColor" fill="none" stroke-width="2.5" class="@CloseButtonIconClass">
						<path stroke-linecap="round" stroke-linejoin="round" d="M6 18L18 6M6 6l12 12"/>
					</svg>
				</button>
			}
		</div>
	</HtmlElement>
</CascadingValue>
</file>

<file path="Components/Feedback/RzAlert/RzAlert.razor.cs">
using Blazicons;
using Microsoft.AspNetCore.Components;
using Microsoft.Extensions.Options;
using RizzyUI.Extensions;
// Add this
namespace RizzyUI;
/// <xmldoc>
///     Represents an alert component that displays a message with optional icon, variant, and dismiss functionality.
///     Styling is handled by the active theme.
/// </xmldoc>
public partial class RzAlert : RzComponent
{
    private string _bgLight = string.Empty;
    private string _bgLighter = string.Empty;
    private string _iconColor = string.Empty;
    /// <summary> Gets or sets the variant of the alert. </summary>
    [Parameter]
    public AlertVariant Variant { get; set; } = AlertVariant.Information;
    /// <summary> Gets or sets the icon displayed in the alert. </summary>
    [Parameter]
    public SvgIcon? Icon { get; set; }
    /// <summary> Gets or sets a value indicating whether the alert can be dismissed. </summary>
    [Parameter]
    public bool Dismissable { get; set; }
    /// <summary> Gets or sets the content to be displayed inside the alert. </summary>
    [Parameter]
    public RenderFragment? ChildContent { get; set; }
    /// <summary> Gets or sets whether to display a pulse behind the icon. </summary>
    [Parameter]
    public bool Pulse { get; set; }
    // --- Properties used by Razor markup ---
    internal string InnerContainerClass => Theme.RzAlert.InnerContainer + " " + _bgLight; // Add bgLight here
    internal string IconContainerClass =>
        Theme.RzAlert.IconContainer + (Pulse ? "" : " " + _bgLighter) + " " + _iconColor;
    internal string IconPulseClass => Pulse ? Theme.RzAlert.IconPulse + " " + _bgLighter : "";
    internal string ContentContainerClass => Theme.RzAlert.ContentContainer;
    internal string CloseButtonClass => Theme.RzAlert.CloseButton;
    internal string CloseButtonIconClass => Theme.RzAlert.CloseButtonIcon;
    /// <inheritdoc />
    protected override void OnInitialized()
    {
        base.OnInitialized();
        SetVariantStyles(); // Set styles after Theme is confirmed
        SetDefaultIcon(); // Set default icon after variant styles are known
    }
    /// <inheritdoc />
    protected override void OnParametersSet()
    {
        // Re-apply styles if parameters change AFTER initialization
        if (Theme != null) // Ensure theme is available
        {
            SetVariantStyles();
            SetDefaultIcon();
        }
        base.OnParametersSet();
    }
    private void SetVariantStyles()
    {
        var styles = Theme.RzAlert;
        _bgLight = styles.GetVariantBackgroundLightCss(Variant);
        _bgLighter = styles.GetVariantBackgroundLighterCss(Variant);
        _iconColor = styles.GetVariantIconColorCss(Variant);
    }
    private void SetDefaultIcon()
    {
        if (Icon == null) // Only set if user hasn't provided one
            Icon = Variant switch
            {
                AlertVariant.Information => MdiIcon.InformationSlabCircle,
                AlertVariant.Success => MdiIcon.CheckCircle,
                AlertVariant.Warning => MdiIcon.AlertCircle,
                AlertVariant.Danger => MdiIcon.CloseCircle,
                AlertVariant.Alternate => null, // No default for alternate
                _ => MdiIcon.InformationSlabCircle
            };
    }
    /// <inheritdoc />
    protected override string? RootClass()
    {
        return TwMerge.Merge(AdditionalAttributes, Theme.RzAlert.Container, Theme.RzAlert.GetVariantCss(Variant));
    }
}
</file>

<file path="Components/Feedback/RzAlert/RzAlertDescription.razor">
@namespace RizzyUI
@inherits RzComponent

<HtmlElement Element="@Element" @attributes="@AdditionalAttributes" class="@RootClass()">
    @ChildContent
</HtmlElement>
</file>

<file path="Components/Feedback/RzAlert/RzAlertDescription.razor.cs">
using Microsoft.AspNetCore.Components;
using Microsoft.Extensions.Options;
using RizzyUI.Extensions;
namespace RizzyUI;
/// <xmldoc>
/// Represents the descriptive content (<c>p</c> tag by default) within an <see cref="RzAlert"/> component.
/// Provides supplementary information to the <see cref="RzAlertTitle"/>.
/// Styling is determined by the active <see cref="RzTheme"/>.
/// </xmldoc>
public partial class RzAlertDescription : RzComponent
{
    /// <summary> The descriptive content to be rendered. </summary>
    [Parameter] public RenderFragment? ChildContent { get; set; }
    /// <inheritdoc/>
    protected override void OnInitialized()
    {
        base.OnInitialized();
        Element = "p"; // Default to paragraph element
    }
    /// <inheritdoc/>
    protected override string? RootClass() =>
        TwMerge.Merge(AdditionalAttributes, Theme.RzAlertDescription.Description);
}
</file>

<file path="Components/Feedback/RzAlert/RzAlertTitle.razor">
@namespace RizzyUI
@inherits RzComponent

<HtmlElement Element="@Element" @attributes="AdditionalAttributes" class="@RootClass()">@ChildContent</HtmlElement>
</file>

<file path="Components/Feedback/RzAlert/RzAlertTitle.razor.cs">
using Microsoft.AspNetCore.Components;
using Microsoft.Extensions.Options;
using RizzyUI.Extensions;
namespace RizzyUI;
/// <xmldoc>
/// Represents the title section (<c>h3</c>) for an <see cref="RzAlert"/> component.
/// Its text color is determined by the parent alert's variant and the active <see cref="RzTheme"/>.
/// </xmldoc>
public partial class RzAlertTitle : RzComponent
{
    /// <summary> Gets the parent <see cref="RzAlert"/> component to determine the variant. </summary>
    [CascadingParameter] public RzAlert? AlertParent { get; set; }
    /// <summary> Injected configuration to get the default theme as fallback. </summary>
    private string _variantTextClass = string.Empty;
    /// <summary> The content to be rendered inside the alert title (typically text). </summary>
    [Parameter] public RenderFragment? ChildContent { get; set; }
    /// <inheritdoc/>
    protected override void OnInitialized()
    {
        base.OnInitialized();
        Element = "h3";
    }
    /// <inheritdoc/>
    protected override void OnParametersSet()
    {
         base.OnParametersSet();
         // Get variant color class after AlertParent should be available
         _variantTextClass = Theme.RzAlertTitle.GetVariantTextColorCss(AlertParent?.Variant);
    }
    /// <inheritdoc/>
    protected override string? RootClass() =>
        TwMerge.Merge(AdditionalAttributes, Theme.RzAlertTitle.Title, _variantTextClass);
}
</file>

<file path="Components/Feedback/RzAlert/Styling/DefaultRzAlertStyles.cs">
namespace RizzyUI;
/// <inheritdoc />
public class DefaultRzAlertStyles : RzStylesBase.RzAlertStylesBase
{
    /// <inheritdoc />
    public DefaultRzAlertStyles(RzTheme theme) : base(theme)
    {
    }
    /// <inheritdoc />
    public override string Container => "relative w-full overflow-hidden rounded-theme border";
    /// <inheritdoc />
    public override string InnerContainer => "flex w-full items-center gap-2 p-4";
    /// <inheritdoc />
    public override string IconContainer => "relative flex rounded-full p-1 text-2xl justify-center";
    /// <inheritdoc />
    public override string IconPulse =>
        "absolute animate-ping motion-reduce:animate-none size-6 aspect-square rounded-full";
    /// <inheritdoc />
    public override string ContentContainer => "ml-2";
    /// <inheritdoc />
    public override string CloseButton => "ml-auto";
    /// <inheritdoc />
    public override string CloseButtonIcon => "shrink-0 h-4 w-4";
    /// <inheritdoc />
    public override string GetVariantCss(AlertVariant variant)
    {
        return variant switch
        {
            AlertVariant.Alternate => $"border-outline bg-surface text-on-surface",
            AlertVariant.Information =>
                $"border-info bg-surface text-on-surface",
            AlertVariant.Success =>
                $"border-success bg-surface text-on-surface",
            AlertVariant.Warning =>
                $"border-warning bg-surface text-on-surface",
            AlertVariant.Danger =>
                $"border-danger bg-surface text-on-surface",
            _ => GetVariantCss(AlertVariant.Information) // Default
        };
    }
    /// <inheritdoc />
    public override string GetVariantBackgroundLightCss(AlertVariant variant)
    {
        return variant switch
        {
            AlertVariant.Alternate => "bg-surface-alt/10",
            AlertVariant.Information => $"bg-info/10",
            AlertVariant.Success => $"bg-success/10",
            AlertVariant.Warning => $"bg-warning/10",
            AlertVariant.Danger => $"bg-danger/10",
            _ => GetVariantBackgroundLightCss(AlertVariant.Information)
        };
    }
    /// <inheritdoc />
    public override string GetVariantBackgroundLighterCss(AlertVariant variant)
    {
        return variant switch
        {
            AlertVariant.Alternate => "bg-surface-alt/15",
            AlertVariant.Information => $"bg-info/15",
            AlertVariant.Success => $"bg-success/15",
            AlertVariant.Warning => $"bg-warning/15",
            AlertVariant.Danger => $"bg-danger/15",
            _ => GetVariantBackgroundLighterCss(AlertVariant.Information)
        };
    }
    /// <inheritdoc />
    public override string GetVariantIconColorCss(AlertVariant variant)
    {
        return variant switch
        {
            AlertVariant.Alternate => "text-on-surface",
            AlertVariant.Information => $"text-info",
            AlertVariant.Success => $"text-success",
            AlertVariant.Warning => $"text-warning",
            AlertVariant.Danger => $"text-danger",
            _ => GetVariantIconColorCss(AlertVariant.Information)
        };
    }
}
/// <inheritdoc />
public class DefaultRzAlertTitleStyles : RzStylesBase.RzAlertTitleStylesBase
{
    public DefaultRzAlertTitleStyles(RzTheme theme) : base(theme)
    {
    }
    public override string Title => "text-sm font-semibold pb-1";
    public override string GetVariantTextColorCss(AlertVariant? variant)
    {
        return variant switch
        {
            AlertVariant.Alternate =>
                $"text-on-surface-strong", // Example: maybe stronger for alternate
            AlertVariant.Information => $"text-info",
            AlertVariant.Success => $"text-success",
            AlertVariant.Warning => $"text-warning",
            AlertVariant.Danger => $"text-danger",
            _ => $"text-info" // Default
        };
    }
}
/// <inheritdoc />
public class DefaultRzAlertDescriptionStyles : RzStylesBase.RzAlertDescriptionStylesBase
{
    public DefaultRzAlertDescriptionStyles(RzTheme theme) : base(theme)
    {
    }
    public override string Description => "text-xs font-medium sm:text-sm";
}
</file>

<file path="Components/Form/_Imports.razor">
@using System.Net.Http
@using System.Net.Http.Json
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Components.Routing
@using Microsoft.AspNetCore.Components.Web
@using static Microsoft.AspNetCore.Components.Web.RenderMode
@using Microsoft.AspNetCore.Components.Web.Virtualization
@using Microsoft.JSInterop
@using Rizzy.Configuration;
@using Rizzy.Components
</file>

<file path="Components/Form/Enum/Orientation.cs">
namespace RizzyUI;
/// <summary>
///     Specifies the layout orientation for components or form fields.
///     This enum is used to define whether elements should be arranged horizontally or vertically.
/// </summary>
public enum Orientation
{
	/// <summary>
	///     Indicates that elements should be arranged in a horizontal layout.
	/// </summary>
	Horizontal,
	/// <summary>
	///     Indicates that elements should be arranged in a vertical layout.
	/// </summary>
	Vertical
}
</file>

<file path="Components/Form/Enum/SectionLayout.cs">
namespace RizzyUI;
/// <summary>
///     Layout for section
/// </summary>
public enum SectionLayout
{
    /// <summary>
    ///     Title and description appear in a format stacked on top of form
    /// </summary>
    Stacked,
    /// <summary>
    ///     Title and description appear in a left column with form on right
    /// </summary>
    TwoColumn
}
</file>

<file path="Components/Form/Enum/TextRole.cs">
namespace RizzyUI;
/// <summary>
///     Specifies the semantic role of a text input field within a form. This enumeration determines the behavior and
///     styling
///     applied to text inputs, such as standard text, password, email, URL, search, or telephone inputs.
/// </summary>
public enum TextRole
{
	/// <summary>
	///     Represents a standard text input field.
	/// </summary>
	Text,
	/// <summary>
	///     Represents a password input field, which obscures user input for privacy.
	/// </summary>
	Password,
	/// <summary>
	///     Represents an email input field, optimized for entering email addresses.
	/// </summary>
	Email,
	/// <summary>
	///     Represents a URL input field, optimized for entering web addresses.
	/// </summary>
	Url,
	/// <summary>
	///     Represents a search input field, typically styled for search functionality.
	/// </summary>
	Search,
	/// <summary>
	///     Represents a telephone input field, optimized for entering phone numbers.
	/// </summary>
	Tel
}
</file>

<file path="Components/Form/InputBase.cs">
using System.Linq.Expressions;
using Microsoft.AspNetCore.Components;
namespace RizzyUI;
/// <summary>
///     Base class for input components, handling value binding and additional attributes.
/// </summary>
/// <typeparam name="TValue">Type of the bound value.</typeparam>
public class InputBase<TValue> : RzComponent
{
    /// <summary>
    ///     Expression identifying the model property to bind.
    /// </summary>
    [Parameter]
    [EditorRequired]
    public required Expression<Func<TValue>> For { get; set; }
    /// <summary>
    ///     Retrieves a parameter value from additional attributes with type safety.
    /// </summary>
    /// <param name="parameterName">The attribute key.</param>
    /// <param name="defaultValue">Default value if not found or type mismatch.</param>
    /// <returns>
    ///     The attribute value cast to <typeparamref name="TValue" />, or <paramref name="defaultValue" />.
    /// </returns>
    protected TValue GetParameterValue(string parameterName, TValue defaultValue)
    {
        if (AdditionalAttributes is not null &&
            AdditionalAttributes.TryGetValue(parameterName, out var attributeValue) &&
            attributeValue is TValue typedValue)
            return typedValue;
        return defaultValue;
    }
}
</file>

<file path="Components/Form/Models/FlatpickrOptions.cs">
using System.Text.Json.Serialization;
using Jalex.UI.Components.Form.Converters;
namespace RizzyUI;
/// <summary>
///     Specifies the selection mode for the date picker.
/// </summary>
[JsonConverter(typeof(JsonStringEnumConverter))]
public enum Mode
{
    /// <summary>
    ///     Single date selection mode.
    /// </summary>
    Single,
    /// <summary>
    ///     Multiple date selection mode.
    /// </summary>
    Multiple,
    /// <summary>
    ///     Range selection mode, allowing a start and end date.
    /// </summary>
    Range,
    /// <summary>
    ///     Time-only selection mode, hiding the calendar.
    /// </summary>
    Time
}
/// <summary>
///     Defines how the month selector in the calendar is displayed.
/// </summary>
[JsonConverter(typeof(JsonStringEnumConverter))]
public enum MonthSelectorType
{
    /// <summary>
    ///     Displays the month selector as a dropdown.
    /// </summary>
    Dropdown,
    /// <summary>
    ///     Displays the month selector as a static list.
    /// </summary>
    Static
}
/// <summary>
///     Specifies the positioning strategy for the Flatpickr calendar.
/// </summary>
[JsonConverter(typeof(CalendarPositionConverter))]
public enum CalendarPosition
{
    /// <summary>
    ///     Automatic positioning based on available space.
    /// </summary>
    Auto,
    /// <summary>
    ///     Force the calendar to appear above the input.
    /// </summary>
    Above,
    /// <summary>
    ///     Force the calendar to appear below the input.
    /// </summary>
    Below,
    /// <summary>
    ///     Automatic placement with left alignment.
    /// </summary>
    AutoLeft,
    /// <summary>
    ///     Automatic placement with center alignment.
    /// </summary>
    AutoCenter,
    /// <summary>
    ///     Automatic placement with right alignment.
    /// </summary>
    AutoRight,
    /// <summary>
    ///     Force the calendar above and aligned to the left.
    /// </summary>
    AboveLeft,
    /// <summary>
    ///     Force the calendar above and centered horizontally.
    /// </summary>
    AboveCenter,
    /// <summary>
    ///     Force the calendar above and aligned to the right.
    /// </summary>
    AboveRight,
    /// <summary>
    ///     Force the calendar below and aligned to the left.
    /// </summary>
    BelowLeft,
    /// <summary>
    ///     Force the calendar below and centered horizontally.
    /// </summary>
    BelowCenter,
    /// <summary>
    ///     Force the calendar below and aligned to the right.
    /// </summary>
    BelowRight
}
/// <summary>
///     Represents a date range used to enable or disable selection in the date picker.
/// </summary>
public class CalendarDateRange
{
    /// <summary>
    ///     Gets or sets the starting date for this range.
    /// </summary>
    public DateTime From { get; set; }
    /// <summary>
    ///     Gets or sets the ending date for this range. May be null if only a single date is used.
    /// </summary>
    public DateTime? To { get; set; }
}
/// <summary>
///     Configuration options for Flatpickr date/time picker.
/// </summary>
public class FlatpickrOptions
{
    /// <summary>
    ///     Allows the user to enter a date directly into the input field. By default, direct entry is disabled.
    /// </summary>
    [JsonPropertyName("allowInput")]
    public bool? AllowInput { get; set; }
    /// <summary>
    ///     Allows preloading of an invalid date. Useful when you're using date strings as default values, or if the input
    ///     element is optional.
    /// </summary>
    [JsonPropertyName("allowInvalidPreload")]
    public bool? AllowInvalidPreload { get; set; }
    /// <summary>
    ///     Exactly the same as date format, but for the altInput field.
    /// </summary>
    [JsonPropertyName("altFormat")]
    public string? AltFormat { get; set; }
    /// <summary>
    ///     Show the user a readable date (as per altFormat), but return something totally different to the server.
    /// </summary>
    [JsonPropertyName("altInput")]
    public bool? AltInput { get; set; }
    /// <summary>
    ///     This class will be added to the input element created by the altInput option. Note that altInput already inherits
    ///     classes from the original input.
    /// </summary>
    [JsonPropertyName("altInputClass")]
    public string? AltInputClass { get; set; }
    /// <summary>
    ///     Whether to enable animations, such as month transitions.
    /// </summary>
    [JsonPropertyName("animate")]
    public bool? Animate { get; set; }
    /// <summary>
    ///     Defines how the date will be formatted in the aria-label for calendar days, using the same tokens as dateFormat.
    ///     Defaults to "F j, Y".
    /// </summary>
    [JsonPropertyName("ariaDateFormat")]
    public string? AriaDateFormat { get; set; }
    /// <summary>
    ///     Whether the default time should be auto-filled when the input is empty and gains or loses focus. Defaults to true.
    /// </summary>
    [JsonPropertyName("autoFillDefaultTime")]
    public bool? AutoFillDefaultTime { get; set; }
    /// <summary>
    ///     Whether clicking on the input should open the picker. Set it to false if you only want to open the calendar
    ///     programmatically.
    /// </summary>
    [JsonPropertyName("clickOpens")]
    public bool? ClickOpens { get; set; }
    /// <summary>
    ///     Whether calendar should close after date selection. By default, the calendar stays open unless the user clicks
    ///     outside of it.
    /// </summary>
    [JsonPropertyName("closeOnSelect")]
    public bool? CloseOnSelect { get; set; }
    /// <summary>
    ///     If "mode" is "multiple", this string will be used to join selected dates together for the date input value.
    /// </summary>
    [JsonPropertyName("conjunction")]
    public string? Conjunction { get; set; }
    /// <summary>
    ///     A string of characters which are used to define how the date will be displayed in the input box.
    /// </summary>
    [JsonPropertyName("dateFormat")]
    public string? DateFormat { get; set; }
    /// <summary>
    ///     The initial selected date(s).
    /// </summary>
    [JsonPropertyName("defaultDate")]
    public string? DefaultDate { get; set; }
    /// <summary>
    ///     Initial value of the hour element, when no date is selected.
    /// </summary>
    [JsonPropertyName("defaultHour")]
    public int? DefaultHour { get; set; }
    /// <summary>
    ///     Initial value of the minute element, when no date is selected.
    /// </summary>
    [JsonPropertyName("defaultMinute")]
    public int? DefaultMinute { get; set; }
    /// <summary>
    ///     Initial value of the seconds element, when no date is selected.
    /// </summary>
    [JsonPropertyName("defaultSeconds")]
    public int? DefaultSeconds { get; set; }
    /// <summary>
    ///     Disables certain dates, preventing them from being selected.
    /// </summary>
    [JsonPropertyName("disable")]
    public List<CalendarDateRange>? Disable { get; set; }
    /// <summary>
    ///     Set this to true to always use the non-native picker on mobile devices.
    ///     By default, Flatpickr utilizes native datetime widgets unless certain options (e.g., disable) are used.
    /// </summary>
    [JsonPropertyName("disableMobile")]
    public bool? DisableMobile { get; set; }
    /// <summary>
    ///     Disables all dates except for those specified.
    /// </summary>
    [JsonPropertyName("enable")]
    public List<CalendarDateRange>? Enable { get; set; }
    /// <summary>
    ///     Enables seconds selection in the time picker.
    /// </summary>
    [JsonPropertyName("enableSeconds")]
    public bool? EnableSeconds { get; set; }
    /// <summary>
    ///     Enables the time picker.
    /// </summary>
    [JsonPropertyName("enableTime")]
    public bool? EnableTime { get; set; }
    /// <summary>
    ///     Adjusts the step for the hour input (incl. scrolling).
    /// </summary>
    [JsonPropertyName("hourIncrement")]
    public int? HourIncrement { get; set; }
    /// <summary>
    ///     Displays the calendar inline.
    /// </summary>
    [JsonPropertyName("inline")]
    public bool? Inline { get; set; }
    /// <summary>
    ///     The locale, either as a string (e.g., "ru", "en") or as an object.
    /// </summary>
    [JsonPropertyName("locale")]
    public string? Locale { get; set; }
    /// <summary>
    ///     The maximum date that a user can pick to (inclusive).
    /// </summary>
    [JsonPropertyName("maxDate")]
    public DateTime? MaxDate { get; set; }
    /// <summary>
    ///     The maximum time that a user can pick to (inclusive).
    /// </summary>
    [JsonPropertyName("maxTime")]
    public DateTime? MaxTime { get; set; }
    /// <summary>
    ///     The minimum date that a user can start picking from (inclusive).
    /// </summary>
    [JsonPropertyName("minDate")]
    public DateTime? MinDate { get; set; }
    /// <summary>
    ///     The minimum time that a user can start picking from (inclusive).
    /// </summary>
    [JsonPropertyName("minTime")]
    public DateTime? MinTime { get; set; }
    /// <summary>
    ///     Adjusts the step for the minute input (incl. scrolling). Defaults to 5.
    /// </summary>
    [JsonPropertyName("minuteIncrement")]
    public int? MinuteIncrement { get; set; }
    /// <summary>
    ///     Date selection mode, defaults to "single".
    /// </summary>
    [JsonPropertyName("mode")]
    public Mode? Mode { get; set; }
    /// <summary>
    ///     How the month selector in the calendar should be shown. Can be set to "dropdown" to display a dropdown
    ///     menu for month selection, or "static" to display the months as a static list.
    /// </summary>
    [JsonPropertyName("monthSelectorType")]
    public MonthSelectorType? MonthSelectorType { get; set; }
    /// <summary>
    ///     HTML for the right arrow icon, used to switch months.
    /// </summary>
    [JsonPropertyName("nextArrow")]
    public string? NextArrow { get; set; }
    /// <summary>
    ///     Hides the day selection in the calendar. Use it along with "enableTime" to create a time picker.
    /// </summary>
    [JsonPropertyName("noCalendar")]
    public bool? NoCalendar { get; set; }
    /// <summary>
    ///     How the calendar should be positioned with regards to the input. Can accept multiple positioning options like
    ///     "auto", "above", "below", "auto left", "auto right", etc.
    /// </summary>
    [JsonPropertyName("position")]
    public CalendarPosition? CalendarPosition { get; set; }
    /// <summary>
    ///     HTML for the left arrow icon, used to switch months.
    /// </summary>
    [JsonPropertyName("prevArrow")]
    public string? PrevArrow { get; set; }
    /// <summary>
    ///     Whether to display the current month name in shorthand mode, e.g., "Sep" instead of "September".
    /// </summary>
    [JsonPropertyName("shorthandCurrentMonth")]
    public bool? ShorthandCurrentMonth { get; set; }
    /// <summary>
    ///     Creates a wrapper to position the calendar. Useful if the input is inside a scrollable element or you need the
    ///     calendar to be positioned in a specific way relative to the input.
    /// </summary>
    [JsonPropertyName("static")]
    public bool? Static { get; set; }
    /// <summary>
    ///     Sets the number of months to show in the calendar. Useful for displaying multiple months at once.
    /// </summary>
    [JsonPropertyName("showMonths")]
    public int? ShowMonths { get; set; }
    /// <summary>
    ///     Displays time picker in 24-hour mode without AM/PM selection when enabled.
    /// </summary>
    [JsonPropertyName("time_24hr")]
    public bool? Time24Hr { get; set; }
    /// <summary>
    ///     Display week numbers to the left of the calendar.
    /// </summary>
    [JsonPropertyName("weekNumbers")]
    public bool? WeekNumbers { get; set; }
    /// <summary>
    ///     See https://chmln.github.io/flatpickr/examples/#flatpickr-external-elements. Allows the flatpickr calendar to wrap
    ///     around a custom input and open/close the calendar when this input is focused or clicked.
    /// </summary>
    [JsonPropertyName("wrap")]
    public bool? Wrap { get; set; }
}
</file>

<file path="Components/Form/RzButton/RzButton.razor">
@namespace RizzyUI
@inherits RzComponent

<HtmlElement Element="@Element" @attributes="@AdditionalAttributes" class="@RootClass()" aria-label="@AssistiveLabel">
	@* Render ChildContent first if it exists, otherwise fall back to Label *@
	@if (ChildContent != null)
	{
		@ChildContent
	}
	else
	{
		@Label
	}
</HtmlElement>
</file>

<file path="Components/Form/RzButton/RzButton.razor.cs">
using Microsoft.AspNetCore.Components;
using Microsoft.Extensions.Options;
using RizzyUI.Extensions;
// Add this
namespace RizzyUI;
/// <xmldoc>
///     Represents a clickable button with customizable styling, variant, and size. Styling is handled by the active theme.
/// </xmldoc>
public partial class RzButton : RzComponent
{
    /// <summary> Cascaded RzButtonGroup this component belongs to (optional) </summary>
    [CascadingParameter]
    public RzButtonGroup? Group { get; set; }
    /// <summary> Gets or sets the accessible label for the button. </summary>
    [Parameter]
    public string AssistiveLabel { get; set; } = "Action Button";
    /// <summary> Button variation (primary, secondary, etc). </summary>
    [Parameter]
    public ButtonVariant Variant { get; set; } = ButtonVariant.Primary;
    /// <summary> Button size. </summary>
    [Parameter]
    public Size Size { get; set; } = Size.Medium;
    /// <summary> Makes the button to have the outlines. </summary>
    [Parameter]
    public bool Outline { get; set; }
    /// <summary> Label for button (if ChildContent not provided). </summary>
    [Parameter]
    public string Label { get; set; } = string.Empty;
    /// <summary> Enable click animation (default: true). </summary>
    [Parameter]
    public bool Animate { get; set; } = true;
    /// <summary> Child content for the button. </summary>
    [Parameter]
    public RenderFragment? ChildContent { get; set; }
    /// <inheritdoc />
    protected override void OnInitialized()
    {
        base.OnInitialized();
        Element = "button";
    }
    /// <inheritdoc />
    /// >
    protected override string? RootClass()
    {
        var styles = Theme.RzButton;
        var groupStyles = Theme.RzButtonGroup; // Get group styles
        var groupSpecificClass = string.Empty;
        if (Group != null)
        {
            var idx = Group.Buttons.IndexOf(this);
            if (idx == 0) 
                groupSpecificClass = groupStyles.GroupFirst;
            else if (idx == Group.Buttons.Count - 1) 
                groupSpecificClass = groupStyles.GroupLast;
            else 
                groupSpecificClass = groupStyles.GroupMiddle;
        }
        return TwMerge.Merge(AdditionalAttributes,
            styles.Button,
            Outline ? styles.GetVariantOutlineCss(Variant) : styles.GetVariantCss(Variant),
            Animate ? styles.Animated : "",
            styles.GetSizeCss(Size),
            groupSpecificClass);
    }
    /// <inheritdoc />
    /// >
    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        // Add to group if part of one
        Group?.AddButton(this);
    }
}
</file>

<file path="Components/Form/RzButton/RzButtonGroup.razor">
@namespace RizzyUI
@inherits RzComponent

@* Provides this ButtonGroup instance to child RzButton components *@
<CascadingValue Value="this" IsFixed="true">
	<div @attributes="AdditionalAttributes" class="@RootClass()">
		@ChildContent
	</div>
</CascadingValue>
</file>

<file path="Components/Form/RzButton/RzButtonGroup.razor.cs">
using Microsoft.AspNetCore.Components;
using Microsoft.Extensions.Options;
using RizzyUI.Extensions;
namespace RizzyUI;
/// <xmldoc>
///     Represents a group of <see cref="RzButton" /> components displayed together,
///     often with adjusted styling for adjacent borders and corners.
///     Styling is determined by the active <see cref="RzTheme" />.
/// </xmldoc>
public partial class RzButtonGroup : RzComponent
{
    /// <summary> Internal list that holds the buttons added to the group. </summary>
    private readonly List<RzButton> _buttons = new();
    /// <summary> Gets the read-only list of buttons contained in this button group. </summary>
    public List<RzButton> Buttons => _buttons;
    /// <summary>
    ///     The child content to be rendered inside the button group. Typically includes <see cref="RzButton" />
    ///     components.
    /// </summary>
    [Parameter]
    public RenderFragment? ChildContent { get; set; }
    /// <inheritdoc />
    protected override string? RootClass()
    {
        return TwMerge.Merge(AdditionalAttributes, Theme.RzButtonGroup.Container);
    }
    /// <summary>
    ///     Adds an <see cref="RzButton" /> to the button group if it is not already present.
    ///     Called internally by child buttons.
    /// </summary>
    /// <param name="button">The <see cref="RzButton" /> instance to add to the group.</param>
    internal void AddButton(RzButton button)
    {
        if (!_buttons.Contains(button)) _buttons.Add(button);
        // No need to call StateHasChanged here as the button rendering itself will handle its classes based on index
    }
}
</file>

<file path="Components/Form/RzButton/Styling/DefaultRzButtonGroupStyles.cs">
namespace RizzyUI;
/// <summary>
///     Provides the default styles for the RzButtonGroup component.
/// </summary>
public class DefaultRzButtonGroupStyles : RzStylesBase.RzButtonGroupStylesBase
{
    /// <summary>
    ///     Initializes a new instance of the <see cref="DefaultRzButtonGroupStyles" /> class.
    /// </summary>
    /// <param name="theme">The theme instance to use for styling.</param>
    public DefaultRzButtonGroupStyles(RzTheme theme) : base(theme)
    {
    }
    /// <inheritdoc />
    public override string Container => "inline-flex";
    /// <inheritdoc />
    public override string GroupFirst => "rounded-none rounded-l-borderRadius"; // Use theme token
    /// <inheritdoc />
    public override string GroupLast => "rounded-none rounded-r-borderRadius border-l-0"; // Use theme token
    /// <inheritdoc />
    public override string GroupMiddle => "rounded-none border-l-0";
}
</file>

<file path="Components/Form/RzButton/Styling/DefaultRzButtonStyles.cs">
namespace RizzyUI;
public class DefaultRzButtonStyles : RzStylesBase.RzButtonStylesBase
{
    /// <inheritdoc />
    public DefaultRzButtonStyles(RzTheme theme) : base(theme)
    {
    }
    /// <inheritdoc />
    public override string Button =>
        "inline-flex items-center justify-center gap-2 cursor-pointer whitespace-nowrap rounded-theme font-medium tracking-wide text-center transition hover:opacity-75 active:opacity-100 hover:shadow-sm disabled:opacity-75 disabled:cursor-not-allowed";
    /// <inheritdoc />
    public override string Animated => "transform active:scale-90 motion-reduce:transition-none transition-transform";
    /// <inheritdoc />
    public override string GetVariantCss(ButtonVariant variant)
    {
        return variant switch
        {
            ButtonVariant.Primary =>
                "bg-primary text-on-primary focus-visible:outline-primary dark:focus-visible:outline-primary",
            ButtonVariant.Secondary =>
                $"bg-secondary text-on-secondary focus-visible:outline-secondary dark:focus-visible:outline-secondary",
            ButtonVariant.Alternate =>
                "bg-surface-alt text-on-surface focus-visible:outline-surface-alt dark:focus-visible:outline-surface-alt",
            ButtonVariant.Inverse =>
                $"bg-surface text-on-surface focus-visible:outline-surface dark:bg-surface dark:text-on-surface-strong dark:focus-visible:outline-surface", // Corrected Inverse
            ButtonVariant.Information =>
                $"bg-info text-on-info focus-visible:outline-info dark:bg-info dark:text-on-info dark:focus-visible:outline-info",
            ButtonVariant.Danger =>
                $"bg-danger text-on-danger focus-visible:outline-danger dark:bg-danger dark:text-on-danger dark:focus-visible:outline-danger",
            ButtonVariant.Warning =>
                $"bg-warning text-on-warning focus-visible:outline-warning dark:bg-warning dark:text-on-warning dark:focus-visible:outline-warning",
            ButtonVariant.Success =>
                $"bg-success text-on-success focus-visible:outline-success dark:bg-success dark:text-on-success dark:focus-visible:outline-success",
            ButtonVariant.Ghost => "bg-transparent text-on-surface focus-visible:outline-none",
            _ => GetVariantCss(ButtonVariant.Primary) // Default
        };
    }
    /// <inheritdoc />
    public override string GetVariantOutlineCss(ButtonVariant variant)
    {
        return variant switch
        {
            ButtonVariant.Primary =>
                "bg-transparent border border-primary text-primary focus-visible:outline-primary dark:focus-visible:outline-primary",
            ButtonVariant.Secondary =>
                $"bg-transparent border border-secondary text-secondary focus-visible:outline-secondary dark:focus-visible:outline-secondary",
            ButtonVariant.Alternate =>
                "bg-transparent border border-outline text-outline focus-visible:outline-outline dark:focus-visible:outline-outline",
            ButtonVariant.Inverse =>
                $"bg-transparent border border-on-surface-strong text-on-surface-strong focus-visible:outline-on-surface-strong dark:focus-visible:outline-on-surface-strong",
            ButtonVariant.Information =>
                $"bg-transparent border border-info text-info focus-visible:outline-info dark:border-info dark:text-info dark:focus-visible:outline-info",
            ButtonVariant.Danger =>
                $"bg-transparent border border-danger text-danger focus-visible:outline-danger dark:border-danger dark:text-danger dark:focus-visible:outline-danger",
            ButtonVariant.Warning =>
                $"bg-transparent border border-warning text-warning focus-visible:outline-warning dark:border-warning dark:text-warning dark:focus-visible:outline-warning",
            ButtonVariant.Success =>
                $"bg-transparent border border-success text-success focus-visible:outline-success dark:border-success dark:text-success dark:focus-visible:outline-success",
            ButtonVariant.Ghost => "bg-transparent border text-on-surface hover:opacity-75 focus-visible:outline-none",
            _ => GetVariantOutlineCss(ButtonVariant.Primary) // Default
        };
    }
    /// <inheritdoc />
    public override string GetSizeCss(Size size)
    {
        return size switch
        {
            Size.ExtraSmall => "px-2 py-1 text-sm",
            Size.Small => "px-3 py-2 text-sm",
            Size.Medium => "px-4 py-2 text-md", // Assuming text-md exists or adjust as needed
            Size.Large => "px-6 py-3 text-md",
            Size.ExtraLarge => "px-8 py-4 text-md",
            _ => GetSizeCss(Size.Medium)
        };
    }
}
</file>

<file path="Components/Form/RzCheckbox/RzCheckboxGroup.razor">
@namespace RizzyUI
@typeparam TValue
@inherits RzComponent

<CascadingValue Value="this" IsFixed="true"> @* Cascade self to items *@
	<HtmlElement Element="div" @attributes="@AdditionalAttributes" class="@RootClass()">
		@ChildContent
	</HtmlElement>
</CascadingValue>
</file>

<file path="Components/Form/RzCheckbox/RzCheckboxGroup.razor.cs">
using System.Linq.Expressions;
using Blazicons;
using Microsoft.AspNetCore.Components;
using Microsoft.Extensions.Options;
using RizzyUI.Extensions;
namespace RizzyUI;
/// <xmldoc>
///     Represents a group of checkbox items (<see cref="RzCheckboxGroupItem" />) that support multiple selection.
///     Styling is determined by the active <see cref="RzTheme" />.
/// </xmldoc>
public partial class RzCheckboxGroup<TValue> : RzComponent
{
    /// <summary> Gets or sets the selected values in the checkbox group. </summary>
    [Parameter]
    public IList<TValue> Values { get; set; } = new List<TValue>();
    /// <summary> Gets or sets the event callback when the selected values change. </summary>
    [Parameter]
    public EventCallback<IList<TValue>> ValuesChanged { get; set; }
    /// <summary> Gets or sets the expression for the bound value, used for validation. </summary>
    [Parameter]
    public Expression<Func<IList<TValue>>>? For { get; set; }
    /// <summary> Gets or sets the orientation of the checkbox group (Vertical or Horizontal). Defaults to Vertical. </summary>
    [Parameter]
    public Orientation Orientation { get; set; } = Orientation.Vertical;
    /// <summary> Gets or sets the child content, expected to be <see cref="RzCheckboxGroupItem{TValue}" /> components. </summary>
    [Parameter]
    public RenderFragment? ChildContent { get; set; }
    /// <summary>
    ///     Gets or sets the custom Blazicon SVG icon to display when a checkbox is checked. Defaults to
    ///     MdiIcon.CheckBold.
    /// </summary>
    [Parameter]
    public SvgIcon CheckedIcon { get; set; } = MdiIcon.CheckBold;
    /// <summary> Determines whether the specified value is currently selected in the group. </summary>
    /// <param name="value">The value to check.</param>
    /// <returns>True if the value is selected; otherwise, false.</returns>
    public bool IsSelected(TValue value)
    {
        return Values.Any(x => EqualityComparer<TValue>.Default.Equals(x, value));
    }
    /// <summary> Toggles the selection state of the specified value within the group. </summary>
    /// <param name="value">The value to toggle.</param>
    /// <param name="isChecked">The desired state (true to select, false to deselect).</param>
    /// <returns>A task representing the asynchronous operation.</returns>
    public async Task ToggleValueAsync(TValue value, bool isChecked)
    {
        var changed = false;
        if (isChecked)
        {
            if (!Values.Any(x => EqualityComparer<TValue>.Default.Equals(x, value)))
            {
                Values.Add(value);
                changed = true;
            }
        }
        else
        {
            var existing = Values.FirstOrDefault(x => EqualityComparer<TValue>.Default.Equals(x, value));
            // Ensure existing is not null before checking Contains and removing
            if (existing != null && Values.Contains(existing))
            {
                var removed = Values.Remove(existing);
                if (removed) changed = true;
            }
        }
        if (changed && ValuesChanged.HasDelegate) await ValuesChanged.InvokeAsync(Values);
    }
    /// <inheritdoc />
    protected override string? RootClass()
    {
        var styles = Theme.RzCheckboxGroup;
        return TwMerge.Merge(AdditionalAttributes, styles.Container, styles.GetOrientationCss(Orientation));
    }
}
</file>

<file path="Components/Form/RzCheckbox/RzCheckboxGroupField.razor">
@namespace RizzyUI
@typeparam TValue
@using Rizzy
@inherits RzComponent

<RzField @attributes="AdditionalAttributes" class="@RootClass()">
	<RzFieldLabel DisplayName="@DisplayName" For="@For"/>
	@if (FieldHelp != null)
	{
		<RzFieldHelp>@FieldHelp</RzFieldHelp>
	}
	<RzCheckboxGroup TValue="TValue" For="@For" @Values="CurrentValues" Orientation="@Orientation"
	                 class="@GroupWithinFieldClass">
		@CheckboxGroupContent
	</RzCheckboxGroup>
	<RzValidationMessage For="@For"/>
</RzField>
</file>

<file path="Components/Form/RzCheckbox/RzCheckboxGroupField.razor.cs">
using System.Linq.Expressions;
using Microsoft.AspNetCore.Components;
using Microsoft.AspNetCore.Components.Forms;
using Microsoft.Extensions.Options;
using RizzyUI.Extensions;
namespace RizzyUI;
/// <xmldoc>
///     Represents a form field component that wraps a group of checkbox items (<see cref="RzCheckboxGroup{TValue}" />)
///     with a label, help text, and validation message integration. It leverages the <see cref="RzField" /> component for
///     base structure.
///     Styling is determined by the active <see cref="RzTheme" />.
/// </xmldoc>
public partial class RzCheckboxGroupField<TValue> : RzComponent
{
    private IList<TValue> _currentValues = new List<TValue>();
    private FieldIdentifier _fieldIdentifier;
    /// <summary> Gets the current edit context. </summary>
    [CascadingParameter]
    private EditContext? EditContext { get; set; }
    /// <summary> Gets or sets the display name for the field label. If not set, it's inferred from the `For` expression. </summary>
    [Parameter]
    public string? DisplayName { get; set; }
    /// <summary> Specifies the field the checkbox group is bound to. Required. </summary>
    [Parameter]
    [EditorRequired]
    public Expression<Func<IList<TValue>>>? For { get; set; }
    /// <summary> Gets or sets the list of selected values in the checkbox group. </summary>
    [Parameter]
    public IList<TValue>? Values { get; set; }
    /// <summary> Event callback invoked when the selected values change. </summary>
    [Parameter]
    public EventCallback<IList<TValue>> ValuesChanged { get; set; }
    /// <summary> Gets or sets the orientation of the checkbox group (Vertical or Horizontal). Defaults to Vertical. </summary>
    [Parameter]
    public Orientation Orientation { get; set; } = Orientation.Vertical;
    /// <summary> Child content containing the <see cref="RzCheckboxGroupItem{TValue}" /> components. </summary>
    [Parameter]
    public RenderFragment? CheckboxGroupContent { get; set; }
    /// <summary> Optional content displayed below the group to provide help or context. </summary>
    [Parameter]
    public RenderFragment? FieldHelp { get; set; }
    /// <summary> Internal property to bind the RzCheckboxGroup's Values. </summary>
    protected IList<TValue> CurrentValues
    {
        get => _currentValues;
        set
        {
            if (!EqualityComparer<IList<TValue>>.Default.Equals(_currentValues, value))
            {
                _currentValues = value;
                // Notify EditContext about the change
                EditContext?.NotifyFieldChanged(_fieldIdentifier);
                // Invoke the ValuesChanged callback
                InvokeAsync(() => ValuesChanged.InvokeAsync(_currentValues));
            }
        }
    }
    // --- Style Properties derived from Theme ---
    /// <summary> Gets the computed CSS classes for the RzCheckboxGroup when inside this field. </summary>
    protected string GroupWithinFieldClass => Theme.RzCheckboxGroupField.GroupWithinField;
    /// <inheritdoc />
    protected override void OnInitialized()
    {
        base.OnInitialized();
        if (For == null)
            throw new InvalidOperationException($"{GetType()} requires a value for the 'For' parameter.");
        if (EditContext == null)
            throw new InvalidOperationException($"{GetType()} must be used within an EditForm.");
        _fieldIdentifier = FieldIdentifier.Create(For);
        // Initialize CurrentValues from the parameter or the model
        _currentValues = Values ??
                         _fieldIdentifier.Model.GetType()?.GetProperty(_fieldIdentifier.FieldName)
                             ?.GetValue(_fieldIdentifier.Model) as IList<TValue> ?? new List<TValue>();
    }
    /// <inheritdoc />
    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        // If the Values parameter changes externally, update internal state
        if (Values != null && !ReferenceEquals(Values, _currentValues) && !Values.SequenceEqual(_currentValues))
            _currentValues = new List<TValue>(Values); // Create a copy to avoid mutation issues if needed
    }
    /// <inheritdoc />
    protected override string? RootClass()
    {
        return TwMerge.Merge(AdditionalAttributes);
    }
}
</file>

<file path="Components/Form/RzCheckbox/RzCheckboxGroupItem.razor">
@namespace RizzyUI
@typeparam TValue
@using Blazicons
@using Rizzy
@inherits RzComponent

<HtmlElement Element="@Element" x-data="rzCheckboxGroupItem" @attributes="@AdditionalAttributes" class="@LabelClass">
	<div class="@CheckboxWrapperClass">
		<RzInputCheckbox @bind-Value="IsChecked" class="@CheckboxInputClass" x-on:change="toggleCheckbox" x-ref="chk"/>
		<div class="@IconContainerClass" :class="'@(GetIconVisibilityCss(IsChecked))'">
			<Blazicon Svg="EffectiveCheckedIcon"/>
		</div>
	</div>
	<span class="@TitleSpanClass">@Title</span>
	@ChildContent
</HtmlElement>
</file>

<file path="Components/Form/RzCheckbox/RzCheckboxGroupItem.razor.cs">
using Blazicons;
using Microsoft.AspNetCore.Components;
using Microsoft.Extensions.Options;
using RizzyUI.Extensions;
namespace RizzyUI;
/// <xmldoc>
///     Represents a single checkbox item within a <see cref="RzCheckboxGroup{TValue}" />.
///     Styling is determined by the active <see cref="RzTheme" />.
/// </xmldoc>
public partial class RzCheckboxGroupItem<TValue> : RzComponent
{
    /// <summary> Gets the parent checkbox group context. </summary>
    [CascadingParameter]
    public RzCheckboxGroup<TValue>? Parent { get; set; }
    /// <summary> Gets or sets the value associated with this checkbox item. Required. </summary>
    [Parameter]
    [EditorRequired]
    public TValue? Value { get; set; }
    /// <summary> Gets or sets the display title for this checkbox item. Required. </summary>
    [Parameter]
    [EditorRequired]
    public string Title { get; set; } = string.Empty;
    /// <summary> Gets or sets optional child content displayed alongside the title. </summary>
    [Parameter]
    public RenderFragment? ChildContent { get; set; }
    /// <summary> Gets or sets the custom Blazicon SVG icon to display when checked. Overrides the parent group's icon if set. </summary>
    [Parameter]
    public SvgIcon? CheckedIcon { get; set; }
    /// <summary> The actual icon to use, considering the parameter and the parent group's setting. </summary>
    protected SvgIcon EffectiveCheckedIcon { get; private set; } = default!;
    /// <summary> Gets or sets the checked state, bound to the parent group's selection. </summary>
    private bool IsChecked
    {
        get => Parent != null && Parent.IsSelected(Value!);
        set
        {
            if (Parent != null)
                // Invoke the parent's toggle method asynchronously
                InvokeAsync(() => Parent.ToggleValueAsync(Value!, value));
        }
    }
    // --- Style Properties derived from Theme ---
    /// <summary> Gets the computed CSS classes for the label element. </summary>
    protected string LabelClass => Theme.RzCheckboxGroupItem.Label;
    /// <summary> Gets the computed CSS classes for the checkbox wrapper div. </summary>
    protected string CheckboxWrapperClass => Theme.RzCheckboxGroupItem.CheckboxWrapper;
    /// <summary> Gets the computed CSS classes for the checkbox input element. </summary>
    protected string CheckboxInputClass => Theme.RzCheckboxGroupItem.CheckboxInput;
    /// <summary> Gets the computed CSS classes for the icon container div. </summary>
    protected string IconContainerClass => Theme.RzCheckboxGroupItem.IconContainer;
    /// <summary> Gets the computed CSS classes for the title span. </summary>
    protected string TitleSpanClass => Theme.RzCheckboxGroupItem.TitleSpan;
    /// <inheritdoc />
    protected override void OnInitialized()
    {
        base.OnInitialized();
        if (Parent == null)
            throw new InvalidOperationException($"{GetType()} must be placed within an RzCheckboxGroup.");
        Element = "label"; 
        SetEffectiveIcon();
    }
    /// <inheritdoc />
    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        // Update icon if parameter changes
        if (Theme != null) // Ensure theme is set before accessing Parent
            SetEffectiveIcon();
    }
    private void SetEffectiveIcon()
    {
        EffectiveCheckedIcon = CheckedIcon ?? Parent?.CheckedIcon ?? MdiIcon.CheckBold; // Fallback chain
    }
    /// <inheritdoc />
    protected override string? RootClass()
    {
        return TwMerge.Merge(AdditionalAttributes, LabelClass);
    }
    /// <summary> Gets the CSS class for icon visibility based on the checked state. </summary>
    /// <param name="isChecked">Current checked state.</param>
    /// <returns>CSS class string.</returns>
    protected string GetIconVisibilityCss(bool isChecked)
    {
        return Theme.RzCheckboxGroupItem.GetIconVisibilityCss(isChecked);
    }
}
</file>

<file path="Components/Form/RzCheckbox/Styling/DefaultRzCheckboxStyles.cs">
namespace RizzyUI;
/// <summary> Provides default styles for RzCheckboxGroup. </summary>
public class DefaultRzCheckboxGroupStyles : RzStylesBase.RzCheckboxGroupStylesBase
{
    /// <inheritdoc />    
    public DefaultRzCheckboxGroupStyles(RzTheme theme) : base(theme)
    {
    }
    /// <inheritdoc />
    public override string Container => "flex flex-wrap gap-4"; // Base container
    /// <inheritdoc />
    public override string GetOrientationCss(Orientation orientation)
    {
        return orientation switch
        {
            Orientation.Horizontal => "flex-row items-center", // Keep gap-4 from Container
            Orientation.Vertical => "flex-col", // Keep gap-4 from Container, but vertical
            _ => GetOrientationCss(Orientation.Vertical)
        };
    }
}
/// <summary> Provides default styles for RzCheckboxGroupItem. </summary>
public class DefaultRzCheckboxGroupItemStyles : RzStylesBase.RzCheckboxGroupItemStylesBase
{
    public DefaultRzCheckboxGroupItemStyles(RzTheme theme) : base(theme)
    {
    }
    /// <inheritdoc />
    public override string Label => "inline-flex items-center cursor-pointer"; // Added cursor-pointer
    /// <inheritdoc />
    public override string CheckboxWrapper => "relative";
    /// <inheritdoc />
    // Note: text-primary-500 is hardcoded here, ideally map to theme.Primary or similar if needed for specific check color
    public override string CheckboxInput =>
        $"size-4 rounded-theme-sm border border-outline text-primary-500 focus:border-primary-500 focus:ring-3 focus:ring-primary/50 dark:bg-surface-alt dark:ring-offset-surface dark:checked:border-transparent dark:checked:bg-primary dark:focus:border-primary";
    /// <inheritdoc />
    public override string IconContainer =>
        "absolute inset-0 flex items-center justify-center text-on-primary"; // Text color for icon on checked bg
    /// <inheritdoc />
    public override string TitleSpan => "ml-2";
    /// <inheritdoc />
    public override string GetIconVisibilityCss(bool isChecked)
    {
        return isChecked ? "" : "hidden";
    }
}
/// <summary> Provides default styles for RzCheckboxGroupField. </summary>
public class DefaultRzCheckboxGroupFieldStyles : RzStylesBase.RzCheckboxGroupFieldStylesBase
{
    public DefaultRzCheckboxGroupFieldStyles(RzTheme theme) : base(theme)
    {
    }
    // This field usually relies on the RzField component for its structure.
    /// <inheritdoc />
    public override string Field => ""; // Handled by RzFieldStylesBase
    /// <inheritdoc />
    public override string GroupWithinField => "my-3"; // Default margin for the group inside the field
}
</file>

<file path="Components/Form/RzDateEdit/RzDateEdit.razor">
@using Blazicons
@namespace RizzyUI
@inherits RzComponent

<HtmlElement Element="div"
             @attributes="AdditionalAttributes"
             class="@ContainerClass"
             x-data="rzDateEdit"
             data-config="@_serializedConfig"
             data-uid="@_uid"
             data-assets="@_assets"
             data-nonce="@Nonce"
             role="group" aria-label="Date picker">

	<div class="@InputWrapperClass" x-data="rzPrependInput" x-ref="pickerWrapper">
		@if (!string.IsNullOrEmpty(PrependText) || PrependIcon != null)
		{
			<div x-ref="prependContainer" class="@PrependElementClass">
				@if (!string.IsNullOrEmpty(PrependText))
				{
					@PrependText
				}
				else if (PrependIcon != null)
				{
					<div class="@PrependIconContainerClass"><Blazicon Svg="PrependIcon" /></div>
				}
			</div>
		}

		@* Use a standard input, Flatpickr will enhance it *@
		<input x-ref="textInput"
		       id="@_uidInputId"
		       type="text"
		       @bind="CurrentValue" @* Bind to internal property *@
		       placeholder="@Placeholder"
		       class="@InputClass"
		       data-input @* Flatpickr hook attribute *@
		       aria-label="Select date" />
	</div>
</HtmlElement>
</file>

<file path="Components/Form/RzDateEdit/RzDateEdit.razor.cs">
using Microsoft.AspNetCore.Components;
using Microsoft.Extensions.Options;
using System.Linq.Expressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.Globalization;
using Blazicons;
using Rizzy.Utility;
using RizzyUI.Extensions;
using Microsoft.AspNetCore.Components.Forms; // For EditContext, FieldIdentifier
namespace RizzyUI;
/// <xmldoc>
/// A date input component enhanced with the Flatpickr JavaScript library for a calendar popup.
/// Supports binding to nullable DateTime and configuration via <see cref="FlatpickrOptions"/>.
/// Styling is determined by the active <see cref="RzTheme"/>. Should be used within an EditForm.
/// </xmldoc>
public sealed partial class RzDateEdit : RzComponent
{
    // Theme is inherited from RzComponent
    [CascadingParameter] private EditContext? EditContext { get; set; }
    private static readonly string[] DefaultAssets =
    [
        // Flatpickr JS - CSS is often included via CDN link or build process
        "https://cdn.jsdelivr.net/npm/flatpickr/dist/flatpickr.min.js"
    ];
    private string _serializedConfig = "{}";
    private string _assets = "[]";
    private readonly string _uid = IdGenerator.UniqueId("rzdate");
    private FieldIdentifier _fieldIdentifier;
    private DateTime? _currentValue;
    private string _inputValue = string.Empty; // Value for the input element itself
    /// <summary> Gets the unique ID for the input element. </summary>
    protected string _uidInputId => $"{_uid}-input";
    /// <summary> Gets or sets the expression identifying the DateTime? field to bind to. Required. </summary>
    [Parameter, EditorRequired] public Expression<Func<DateTime?>>? For { get; set; }
    /// <summary> Gets or sets the Flatpickr configuration options. </summary>
    [Parameter] public FlatpickrOptions Options { get; set; } = new() { Locale = "en" }; // Ensure default locale
    /// <summary> Gets or sets the placeholder text for the date input. </summary>
    [Parameter] public string Placeholder { get; set; } = string.Empty;
    /// <summary> Gets or sets optional text to prepend inside the input's visual container. </summary>
    [Parameter] public string? PrependText { get; set; }
    /// <summary> Gets or sets an optional Blazicon SVG icon to prepend inside the input's visual container. </summary>
    [Parameter] public SvgIcon? PrependIcon { get; set; }
    /// <summary> Optional array of asset URLs (JS/CSS) for Flatpickr. Defaults to Flatpickr CDN JS. </summary>
    [Parameter] public string[] ComponentAssets { get; set; } = DefaultAssets;
    /// <summary> Internal property for binding the input value. </summary>
    private string CurrentValue
    {
        get => _inputValue;
        set
        {
            // This setter might be called by Flatpickr changing the input value.
            // We need to parse it back to DateTime? and update the model.
            if (_inputValue != value)
            {
                _inputValue = value;
                if (DateTime.TryParseExact(value, GetFlatpickrFormat(), CultureInfo.InvariantCulture, DateTimeStyles.None, out var parsedDate))
                {
                     UpdateValue(parsedDate);
                }
                else if (string.IsNullOrEmpty(value))
                {
                    UpdateValue(null); // Handle clearing the input
                }
                // If parsing fails, we might want to keep _currentValue as is, or set to null,
                // depending on desired behavior for invalid manual input.
                // For now, we only update if parsing succeeds or input is cleared.
            }
        }
    }
    // --- Style Properties derived from Theme ---
    private string ContainerClass => Theme.RzDateEdit.Container;
    private string InputWrapperClass => Theme.RzDateEdit.InputWrapper;
    private string PrependElementClass => Theme.RzDateEdit.PrependElement;
    private string PrependIconContainerClass => Theme.RzDateEdit.PrependIconContainer;
    private string InputClass => Theme.RzDateEdit.Input; // Base input style
    /// <inheritdoc/>
    protected override void OnInitialized()
    {
        base.OnInitialized(); // Initializes Theme
        if (For == null) throw new InvalidOperationException($"{GetType()} requires a 'For' parameter.");
        if (EditContext == null) throw new InvalidOperationException($"{GetType()} must be used within an EditForm.");
        _fieldIdentifier = FieldIdentifier.Create(For);
        _currentValue = For.Compile().Invoke(); // Get initial value from model
        FormatInputValue(); // Format initial value for display
        SerializeConfigAndAssets(); // Prepare data for Alpine
    }
    /// <inheritdoc/>
    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        // If the bound value changes externally, update our internal state
        var modelValue = For?.Compile().Invoke();
        if (_currentValue != modelValue)
        {
            _currentValue = modelValue;
            FormatInputValue(); // Reformat display value
            // Reserializing might be needed if Options changed, but can be costly.
            // Consider if Options are likely to change dynamically. If not, only do this in OnInitialized.
            // SerializeConfigAndAssets();
        }
         // Re-serialize if options or assets change
        SerializeConfigAndAssets();
    }
    private void UpdateValue(DateTime? newValue)
    {
        bool valueChanged = _currentValue != newValue;
        _currentValue = newValue;
        if (valueChanged)
        {
            EditContext?.NotifyFieldChanged(_fieldIdentifier);
            // Note: We don't invoke a ValueChanged event here as binding is handled by RzInput* components usually.
            // If direct binding support without RzInput* is needed, add [Parameter] Value/ValueChanged.
        }
    }
    private void FormatInputValue()
    {
        // Format the DateTime? value into the string format expected by Flatpickr/the input
        if (_currentValue.HasValue)
        {
            _inputValue = _currentValue.Value.ToString(GetFlatpickrFormat(), CultureInfo.InvariantCulture);
        }
        else
        {
            _inputValue = string.Empty;
        }
    }
    private string GetFlatpickrFormat()
    {
        // Determine the format string based on Flatpickr options
        // This needs to match how Flatpickr parses/formats dates.
        // Defaulting to ISO 8601 date format. Adjust if Options.DateFormat is different.
        return Options.DateFormat ?? "Y-m-d";
    }
    private void SerializeConfigAndAssets()
    {
        // Store default date based on current value if not explicitly set in Options
        if (string.IsNullOrEmpty(Options.DefaultDate) && _currentValue.HasValue)
        {
             // Use a format Flatpickr understands by default
            Options.DefaultDate = _currentValue.Value.ToString("yyyy-MM-dd", CultureInfo.InvariantCulture);
        }
        // Prepare data object for Alpine
        var alpineData = new { options = Options, placeholder = Placeholder, prependText = PrependText ?? string.Empty };
        _serializedConfig = JsonSerializer.Serialize(alpineData, options: new JsonSerializerOptions() { DefaultIgnoreCondition = JsonIgnoreCondition.WhenWritingNull }  );
        _assets = JsonSerializer.Serialize(ComponentAssets);
    }
    /// <inheritdoc/>
    protected override string? RootClass() =>
        TwMerge.Merge(AdditionalAttributes, ContainerClass);
}
</file>

<file path="Components/Form/RzDateEdit/Styling/DefaultRzDateEditStyles.cs">
namespace RizzyUI;
/// <summary> Provides default styles for RzDateEdit. </summary>
public class DefaultRzDateEditStyles : RzStylesBase.RzDateEditStylesBase 
{
	/// <inheritdoc />	
	public DefaultRzDateEditStyles(RzTheme theme) : base(theme) { }
	/// <inheritdoc/>
	public override string Container => "w-full";
	/// <inheritdoc/>
	public override string InputWrapper => "relative";
	/// <inheritdoc/>
	public override string PrependElement => $"pointer-events-none absolute inset-y-0 left-0 my-px ml-px flex items-center rounded-l-theme border-r border-outline bg-surface-alt px-3 text-on-surface dark:border-outline dark:bg-surface-alt dark:text-on-surface"; // Use semantic names
	/// <inheritdoc/>
	public override string PrependIconContainer => "text-xl";
	/// <inheritdoc/>
	public override string Input => $"block w-full rounded-theme border border-outline px-3 py-2 leading-6 placeholder-on-surface-muted focus:border-primary focus:ring focus:ring-primary/50 dark:border-outline dark:bg-surface-alt dark:placeholder-on-surface-muted dark:focus:border-primary flatpickr-input"; // Use semantic names, adjusted focus ring
}
</file>

<file path="Components/Form/RzField/RzField.razor">
@namespace RizzyUI
@inherits RzComponent

<HtmlElement Element="@Element" @attributes="@AdditionalAttributes" class="@RootClass()">
    @ChildContent
</HtmlElement>
</file>

<file path="Components/Form/RzField/RzField.razor.cs">
using Microsoft.AspNetCore.Components;
using Microsoft.Extensions.Options;
using RizzyUI.Extensions;
namespace RizzyUI;
/// <xmldoc>
///     A container component for form fields, typically grouping a label, input, help text, and validation message.
///     Provides consistent spacing. Styling is determined by the active <see cref="RzTheme" />.
/// </xmldoc>
public partial class RzField : RzComponent
{
    /// <summary> The content to be rendered inside the field container (label, input, etc.). </summary>
    [Parameter]
    public RenderFragment? ChildContent { get; set; }
    /// <inheritdoc />
    protected override string? RootClass()
    {
        return TwMerge.Merge(AdditionalAttributes, Theme.RzField.Field);
    }
}
</file>

<file path="Components/Form/RzField/RzFieldHelp.razor">
@namespace RizzyUI
@inherits RzComponent

<p @attributes="AdditionalAttributes" class="@RootClass()">
    @ChildContent
</p>
</file>

<file path="Components/Form/RzField/RzFieldHelp.razor.cs">
using Microsoft.AspNetCore.Components;
using Microsoft.Extensions.Options;
using RizzyUI.Extensions;
namespace RizzyUI;
/// <xmldoc>
///     Renders a paragraph (<c>p</c>) element typically used to provide help text or descriptions
///     for a form field within an <see cref="RzField" />.
///     Styling is determined by the active <see cref="RzTheme" />.
/// </xmldoc>
public partial class RzFieldHelp : RzComponent
{
    /// <summary> The help text or other content to be rendered. </summary>
    [Parameter]
    public RenderFragment? ChildContent { get; set; }
    /// <inheritdoc />
    protected override string? RootClass()
    {
        return TwMerge.Merge(AdditionalAttributes, Theme.RzFieldHelp.HelpText);
    }
}
</file>

<file path="Components/Form/RzField/RzFieldLabel.razor">
@namespace RizzyUI
@inherits RzComponent
@typeparam TValue

@* Only render the label if DisplayName is actually set (either via parameter or inference) *@
@if (!string.IsNullOrEmpty(_effectiveDisplayName))
{
    <label for="@_for" @attributes="AdditionalAttributes" class="@RootClass()">
        @_effectiveDisplayName
        @ChildContent @* Allows adding things like the required indicator span *@
    </label>
}
else
{
    @* Render ChildContent anyway if DisplayName is null/empty, maybe it contains the label text *@
    @ChildContent
}
</file>

<file path="Components/Form/RzField/RzFieldLabel.razor.cs">
using System.ComponentModel.DataAnnotations;
using System.Linq.Expressions;
using System.Reflection;
using Microsoft.AspNetCore.Components;
using Microsoft.AspNetCore.Components.Forms;
using Microsoft.AspNetCore.Http;
using Microsoft.Extensions.Options;
using Rizzy.Htmx;
using RizzyUI.Extensions;
namespace RizzyUI;
/// <xmldoc>
///     Renders a <c>label</c> element typically associated with a form input within an <see cref="RzField" />.
///     Automatically determines the 'for' attribute and infers the display name from the bound field if not explicitly
///     set.
///     Styling is determined by the active <see cref="RzTheme" />.
/// </xmldoc>
[CascadingTypeParameter(nameof(TValue))] // Hint for type inference if used generically
public partial class RzFieldLabel<TValue> : RzComponent
{
    private string? _effectiveDisplayName; // Store the calculated display name
    private string _for = string.Empty;
    [CascadingParameter] private HttpContext? HttpContext { get; set; }
    [CascadingParameter] private EditContext? EditContext { get; set; }
    /// <summary> Optional child content, often used for required indicators or icons. </summary>
    [Parameter]
    public RenderFragment? ChildContent { get; set; }
    /// <summary>
    ///     Specifies the field the label is associated with. Used to determine the 'for' attribute and infer
    ///     DisplayName.
    /// </summary>
    [Parameter]
    public Expression<Func<TValue>>? For { get; set; }
    /// <summary>
    ///     Explicitly sets the text content of the label. If not set, it's inferred from the 'For' expression's display
    ///     attributes or member name.
    /// </summary>
    [Parameter]
    public string? DisplayName { get; set; }
    /// <inheritdoc />
    protected override void OnInitialized()
    {
        base.OnInitialized();
        if (EditContext == null)
            throw new InvalidOperationException($"{GetType()} must be used within an EditForm.");
    }
    /// <inheritdoc />
    protected override void OnParametersSet()
    {
        if (EditContext is null) return; // Should have been caught in OnInitialized, but defensive check
        SetEffectiveDisplayName(); // Calculate display name
        SetForAttribute(); // Calculate 'for' attribute
        base.OnParametersSet();
    }
    private void SetEffectiveDisplayName()
    {
        // If DisplayName is explicitly set, use it.
        if (!string.IsNullOrEmpty(DisplayName))
        {
            _effectiveDisplayName = DisplayName;
            return;
        }
        // If For is not provided, we can't infer, leave it null/empty.
        if (For == null)
        {
            _effectiveDisplayName = null;
            return;
        }
        // Try to infer from DisplayAttribute or member name
        if (For.Body is MemberExpression memberExpression)
        {
            var displayAttribute = memberExpression.Member.GetCustomAttribute<DisplayAttribute>(true);
            _effectiveDisplayName =
                displayAttribute?.GetName() ?? memberExpression.Member.Name; // GetName handles resources
        }
        else
        {
            // Fallback if For is not a simple MemberExpression (less likely for labels)
            _effectiveDisplayName = For.ToString(); // Or some other default
        }
    }
    private void SetForAttribute()
    {
        _for = string.Empty; // Reset
        if (For != null && HttpContext != null && EditContext != null)
            try
            {
                FieldIdentifier field = FieldIdentifier.Create(For);
                var fieldMap = HttpContext.GetOrAddFieldMapping(EditContext); // Use extension method
                if (fieldMap != null && fieldMap.TryGetValue(field, out RzFormFieldMap? map) && map != null)
                    _for = map.Id;
            }
            catch (ArgumentException)
            {
                // Handle cases where For expression is not suitable for FieldIdentifier (e.g., complex expressions)
                // In this case, _for remains empty, and the label won't have a 'for' attribute.
            }
    }
    /// <inheritdoc />
    protected override string? RootClass()
    {
        return TwMerge.Merge(AdditionalAttributes, Theme.RzFieldLabel.Label);
    }
}
</file>

<file path="Components/Form/RzField/Styling/DefaultRzFieldStyles.cs">
namespace RizzyUI;
/// <summary> Provides default styles for RzField. </summary>
public class DefaultRzFieldStyles : RzStylesBase.RzFieldStylesBase
{
    /// <inheritdoc />
    public DefaultRzFieldStyles(RzTheme theme) : base(theme)
    {
    }
    /// <inheritdoc />
    public override string Field => "space-y-1";
}
/// <summary> Provides default styles for RzFieldLabel. </summary>
public class DefaultRzFieldLabelStyles : RzStylesBase.RzFieldLabelStylesBase
{
    public DefaultRzFieldLabelStyles(RzTheme theme) : base(theme)
    {
    }
    /// <inheritdoc />
    public override string Label => "font-medium";
    /// <inheritdoc />
    public override string RequiredIndicator =>
        $"text-sm text-danger dark:text-danger"; // Assuming Danger has dark variant or is same
}
/// <summary> Provides default styles for RzFieldHelp. </summary>
public class DefaultRzFieldHelpStyles : RzStylesBase.RzFieldHelpStylesBase
{
    /// <inheritdoc />
    public DefaultRzFieldHelpStyles(RzTheme theme) : base(theme)
    {
    }
    /// <inheritdoc />
    public override string HelpText => "text-sm text-on-surface";
}
</file>

<file path="Components/Form/RzFormSection/RzFormSection.razor">
@namespace RizzyUI
@inherits RzComponent

<div class="@RootClass()">
	<div class="@DescriptionContainerClass">
		@if (!string.IsNullOrEmpty(Title))
		{
			<h2 class="@TitleClass">@Title</h2>
		}
		@if (Description != null)
		{
			<p class="@DescriptionClass">
				@Description
			</p>
		}
	</div>
	<div class="@ContentContainerClass">
		@Content
	</div>
</div>
</file>

<file path="Components/Form/RzFormSection/RzFormSection.razor.cs">
using Microsoft.AspNetCore.Components;
using Microsoft.Extensions.Options;
using RizzyUI.Extensions;
namespace RizzyUI;
/// <xmldoc>
///     Organizes form content into sections with an optional title and description, supporting different layouts.
///     Styling is determined by the active <see cref="RzTheme" />.
/// </xmldoc>
public partial class RzFormSection : RzComponent
{
    /// <summary> The title of the form section. Required. </summary>
    [Parameter]
    [EditorRequired]
    public string Title { get; set; } = string.Empty;
    /// <summary> Optional descriptive content for the section. </summary>
    [Parameter]
    public RenderFragment? Description { get; set; }
    /// <summary> The main content of the form section (e.g., input fields). </summary>
    [Parameter]
    public RenderFragment? Content { get; set; }
    /// <summary> The layout style for the section (Stacked or TwoColumn). Defaults to TwoColumn. </summary>
    [Parameter]
    public SectionLayout Layout { get; set; } = SectionLayout.TwoColumn;
    // --- Style Properties derived from Theme ---
    /// <summary> Gets the computed CSS classes for the description container div. </summary>
    protected string DescriptionContainerClass => Theme.RzFormSection.GetDescriptionLayoutCss(Layout);
    /// <summary> Gets the computed CSS classes for the title h2 element. </summary>
    protected string TitleClass => Theme.RzFormSection.Title;
    /// <summary> Gets the computed CSS classes for the description p element. </summary>
    protected string DescriptionClass => Theme.RzFormSection.Description;
    /// <summary> Gets the computed CSS classes for the content container div. </summary>
    protected string ContentContainerClass => Theme.RzFormSection.GetContentLayoutCss(Layout);
    /// <inheritdoc />
    protected override string? RootClass()
    {
        return TwMerge.Merge(AdditionalAttributes, Theme.RzFormSection.Container,
            Theme.RzFormSection.GetLayoutCss(Layout));
    }
}
</file>

<file path="Components/Form/RzFormSection/Styling/DefaultRzFormSectionStyles.cs">
namespace RizzyUI;
/// <summary> Provides default styles for RzFormSection. </summary>
public class DefaultRzFormSectionStyles : RzStylesBase.RzFormSectionStylesBase
{
    /// <inheritdoc />    
    public DefaultRzFormSectionStyles(RzTheme theme) : base(theme)
    {
    }
    /// <inheritdoc />
    public override string Container => ""; // Base container style is determined by layout method
    /// <inheritdoc />
    public override string DescriptionContainer => ""; // Determined by layout method
    /// <inheritdoc />
    public override string Title =>
        $"text-base/7 font-semibold text-on-surface-strong"; // Adjusted line height
    /// <inheritdoc />
    public override string Description => "text-sm text-on-surface";
    /// <inheritdoc />
    public override string ContentContainer => ""; // Determined by layout method
    /// <inheritdoc />
    public override string GetLayoutCss(SectionLayout layout)
    {
        return layout switch
        {
            SectionLayout.TwoColumn => "md:flex md:space-x-5",
            SectionLayout.Stacked => "mb-5",
            _ => GetLayoutCss(SectionLayout.TwoColumn)
        };
    }
    /// <inheritdoc />
    public override string GetDescriptionLayoutCss(SectionLayout layout)
    {
        return layout switch
        {
            SectionLayout.TwoColumn => "md:w-1/3 md:flex-none",
            SectionLayout.Stacked => "pb-5 mb-10 border-b border-outline", // Use theme border
            _ => GetDescriptionLayoutCss(SectionLayout.TwoColumn)
        };
    }
    /// <inheritdoc />
    public override string GetContentLayoutCss(SectionLayout layout)
    {
        return layout switch
        {
            SectionLayout.TwoColumn => "space-y-6 md:w-1/2", // space-y might need review depending on RzField margins
            SectionLayout.Stacked => "",
            _ => GetContentLayoutCss(SectionLayout.TwoColumn)
        };
    }
}
</file>

<file path="Components/Form/RzNumber/RzNumberEdit.razor">
@typeparam TValue
@namespace RizzyUI
@using Blazicons
@using Rizzy
@inherits InputBase<TValue>

<div class="@InputWrapperClass" x-data="rzPrependInput">
	@if (!string.IsNullOrEmpty(PrependText) || PrependIcon != null)
	{
		<div x-ref="prependContainer" class="@PrependElementClass">
			@if (!string.IsNullOrEmpty(PrependText))
			{
				@PrependText
			}
			else if (PrependIcon != null)
			{
				<div class="@PrependIconContainerClass">
					<Blazicon Svg="PrependIcon"/>
				</div>
			}
		</div>
	}
	<RzInputNumber x-ref="textInput" TValue="TValue" @ref="_elem" Value="@_value" ValueExpression="For"
	               placeholder="@_placeholder" @attributes="AdditionalAttributes" class="@InputClass"/>
</div>
</file>

<file path="Components/Form/RzNumber/RzNumberEdit.razor.cs">
using Blazicons;
using Microsoft.AspNetCore.Components;
using Microsoft.AspNetCore.Components.Forms;
using Microsoft.Extensions.Options;
using RizzyUI.Extensions;
// For RzInputNumber
// For EditContext
namespace RizzyUI;
/// <xmldoc>
///     Represents a customizable number input component, potentially used within an <see cref="RzNumberField{TValue}" />.
///     Supports prepended text or icons and binding to numeric types. Styling is determined by the active
///     <see cref="RzTheme" />.
/// </xmldoc>
public partial class RzNumberEdit<TValue> : InputBase<TValue> // Inherits InputBase<TValue>
{
    private RzInputNumber<TValue>? _elem; // Reference to the underlying RzInputNumber
    private string _placeholder = string.Empty;
    private TValue _value = default!;
    /// <summary> Gets the current edit context. </summary>
    [CascadingParameter]
    public EditContext? EditContext { get; set; }
    /// <summary> Gets or sets the placeholder text for the input field. </summary>
    [Parameter]
    public string Placeholder { get; set; } = string.Empty;
    /// <summary> Gets or sets optional text to prepend inside the input field's visual container. </summary>
    [Parameter]
    public string? PrependText { get; set; }
    /// <summary>
    ///     Gets or sets an optional Blazicon SVG icon to prepend inside the input field's visual container. Use either
    ///     this or PrependText.
    /// </summary>
    [Parameter]
    public SvgIcon? PrependIcon { get; set; }
    /// <summary> Gets the ID attribute of the underlying input element, if available. </summary>
    public string Id => _elem?.Id ?? string.Empty;
    // --- Style Properties derived from Theme ---
    /// <summary> Gets the computed CSS classes for the input wrapper div. </summary>
    protected string InputWrapperClass => Theme.RzNumberEdit.InputWrapper;
    /// <summary> Gets the computed CSS classes for the prepend element div. </summary>
    protected string PrependElementClass => Theme.RzNumberEdit.PrependElement;
    /// <summary> Gets the computed CSS classes for the prepend icon container. </summary>
    protected string PrependIconContainerClass => Theme.RzNumberEdit.PrependIconContainer;
    /// <summary> Gets the computed CSS classes for the input element itself. </summary>
    protected string InputClass => Theme.RzNumberEdit.Input;
    /// <inheritdoc />
    protected override void OnInitialized()
    {
        base.OnInitialized(); // Call base for InputBase logic
        if (For == null) // For is required by InputBase
            throw new InvalidOperationException($"{GetType()} requires a value for the 'For' parameter.");
        if (EditContext == null) // RzInputNumber requires EditContext
            throw new InvalidOperationException($"{GetType()} must be used within an EditForm.");
    }
    /// <inheritdoc />
    protected override void OnParametersSet()
    {
        base.OnParametersSet(); // Call base for InputBase logic
        _placeholder = Placeholder;
        if (AdditionalAttributes is not null && AdditionalAttributes.TryGetValue("placeholder", out var ph) && ph is string phStr)
        {
            _placeholder = phStr;
        }
        // Compile the field expression to get the initial value.
        _value = For!.Compile().Invoke(); // For is guaranteed non-null by base/OnInitialized
        if (!string.IsNullOrEmpty(PrependText) && PrependIcon != null)
            throw new InvalidOperationException(
                $"{nameof(PrependText)} and {nameof(PrependIcon)} cannot both be set at the same time.");
    }
    /// <inheritdoc />
    protected override string? RootClass()
    {
        return TwMerge.Merge(AdditionalAttributes, InputClass);
        // RzInputNumber handles merging its own class
    }
}
</file>

<file path="Components/Form/RzNumber/RzNumberField.razor">
@typeparam TValue
@namespace RizzyUI
@inherits RzComponent

@* Use the RzField component for the overall structure *@
<RzField @attributes="AdditionalAttributes" class="@RootClass()">
	<RzFieldLabel DisplayName="@DisplayName" For="@For" Required="Required"/>
	@* Pass down relevant parameters to RzNumberEdit *@
	<RzNumberEdit TValue="TValue"
	              For="@For"
	              Placeholder="@Placeholder"
	              PrependIcon="@PrependIcon"
	              PrependText="@PrependText"
	              @attributes="InputAttributes"/> @* Pass down *other* attributes *@
	@if (FieldHelp != null)
	{
		<RzFieldHelp>@FieldHelp</RzFieldHelp>
	}
	<RzValidationMessage For="@For"/>
</RzField>
</file>

<file path="Components/Form/RzNumber/RzNumberField.razor.cs">
using System.Linq.Expressions;
using Blazicons;
using Microsoft.AspNetCore.Components;
using Microsoft.AspNetCore.Components.Forms;
using RizzyUI.Extensions;
namespace RizzyUI;
/// <xmldoc>
///     Represents a complete form field for number input, including a label, the input itself (
///     <see cref="RzNumberEdit{TValue}" />),
///     optional help text, and validation message integration. Leverages <see cref="RzField" /> for structure.
///     Styling is determined by the active <see cref="RzTheme" />.
/// </xmldoc>
public partial class RzNumberField<TValue> : RzComponent
{
    /// <summary> Gets the current edit context. </summary>
    [CascadingParameter]
    private EditContext? EditContext { get; set; }
    /// <summary> Specifies the field the number input is bound to. Required. </summary>
    [Parameter]
    [EditorRequired]
    public Expression<Func<TValue>>? For { get; set; }
    /// <summary> Gets or sets optional text to prepend inside the input's visual container. </summary>
    [Parameter]
    public string? PrependText { get; set; }
    /// <summary> Gets or sets an optional Blazicon SVG icon to prepend inside the input's visual container. </summary>
    [Parameter]
    public SvgIcon? PrependIcon { get; set; }
    /// <summary> Gets or sets the placeholder text displayed in the input field. </summary>
    [Parameter]
    public string Placeholder { get; set; } = string.Empty;
    /// <summary> Gets or sets the display name for the field label. If not set, it's inferred from the 'For' expression. </summary>
    [Parameter]
    public string? DisplayName { get; set; }
    /// <summary> Gets or sets a value indicating whether the field is marked as required. Defaults to false. </summary>
    [Parameter]
    public bool Required { get; set; }
    /// <summary> Gets or sets optional content displayed below the input as help text. </summary>
    [Parameter]
    public RenderFragment? FieldHelp { get; set; }
    /// <summary> Separates AdditionalAttributes intended for RzNumberEdit. </summary>
    protected Dictionary<string, object> InputAttributes => AdditionalAttributes?
        .Where(kvp => kvp.Key.ToLowerInvariant() != "class") // Exclude class from being passed down directly
        .ToDictionary(kvp => kvp.Key, kvp => kvp.Value) ?? new Dictionary<string, object>();
    /// <inheritdoc />
    protected override void OnInitialized()
    {
        base.OnInitialized();
        if (For == null)
            throw new InvalidOperationException($"{GetType()} requires a value for the 'For' parameter.");
        if (EditContext == null)
            throw new InvalidOperationException($"{GetType()} must be used within an EditForm.");
    }
    /// <inheritdoc />
    protected override string? RootClass()
    {
        // Merge class attribute specifically for the RzField container
        return TwMerge.Merge(AdditionalAttributes, Theme.RzNumberField.Field);
    }
}
</file>

<file path="Components/Form/RzNumber/Styling/DefaultRzNumberStyles.cs">
namespace RizzyUI;
/// <summary> Provides default styles for RzNumberEdit. </summary>
public class DefaultRzNumberEditStyles : RzStylesBase.RzNumberEditStylesBase 
{
    public DefaultRzNumberEditStyles(RzTheme theme) : base(theme)
    {
    }
    /// <inheritdoc />
    public override string InputWrapper => "relative";
    /// <inheritdoc />
    public override string PrependElement =>
        $"pointer-events-none absolute inset-y-0 left-0 my-px ml-px flex items-center rounded-l-borderRadius border-r border-outline bg-surface-alt pl-3 pr-1 text-on-surface dark:border-outline dark:bg-surface-alt dark:text-on-surface";
    /// <inheritdoc />
    public override string PrependIconContainer => "text-xl";
    /// <inheritdoc />
    public override string Input =>
        $"block w-full rounded-theme border border-outline px-3 py-2 leading-6 placeholder-on-surface-muted focus:border-primary focus:ring focus:ring-primary/50 transition-opacity text-transparent dark:border-outline dark:bg-surface-alt dark:placeholder-on-surface-muted dark:focus:border-primary";
}
/// <summary> Provides default styles for RzNumberField. </summary>
public class DefaultRzNumberFieldStyles : RzStylesBase.RzNumberFieldStylesBase 
{
    public DefaultRzNumberFieldStyles(RzTheme theme) : base(theme)
    {
    }
    /// <inheritdoc />
    public override string Field => ""; // Handled by RzField component
}
</file>

<file path="Components/Form/RzRadio/RzRadioGroup.razor">
@typeparam TValue
@namespace RizzyUI
@using Rizzy
@inherits RzComponent

<CascadingValue Value="this" IsFixed="true">
    @* RzInputRadioGroup handles the value binding and EditContext integration *@
    <RzInputRadioGroup TValue="TValue" ValueExpression="@For" Value="CurrentValue" Name="@Name">
        <div @attributes="AdditionalAttributes" class="@RootClass()">
            @ChildContent
        </div>
    </RzInputRadioGroup>
</CascadingValue>
</file>

<file path="Components/Form/RzRadio/RzRadioGroup.razor.cs">
using System.Linq.Expressions;
using Blazicons;
using Microsoft.AspNetCore.Components;
using Microsoft.AspNetCore.Components.Forms;
using RizzyUI.Extensions;
namespace RizzyUI;
/// <xmldoc>
///     Represents a group of radio buttons (<see cref="RzRadioGroupItem{TValue}" />) where only one option can be selected
///     at a time.
///     It integrates with Blazor's EditForm for validation and model binding.
///     Styling is determined by the active <see cref="RzTheme" />.
/// </xmldoc>
public partial class RzRadioGroup<TValue> : RzComponent
{
    private TValue? _currentValue = default!;
    private FieldIdentifier _fieldIdentifier;
    private List<RzRadioGroupItem<TValue>> _items = new();
    /// <summary> Gets the current edit context. Required as RzInputRadioGroup needs it. </summary>
    [CascadingParameter]
    private EditContext? EditContext { get; set; }
    /// <summary> Gets or sets the display name (often used by label components, though not directly here). </summary>
    [Parameter]
    public string? DisplayName { get; set; } = string.Empty;
    /// <summary> Gets or sets the orientation of the radio items (Vertical or Horizontal). Defaults to Vertical. </summary>
    [Parameter]
    public Orientation Orientation { get; set; } = Orientation.Vertical;
    /// <summary>
    ///     Specifies the field for which validation messages should be displayed.
    /// </summary>
    [Parameter][EditorRequired]
    public Expression<Func<TValue>>? For { get; set; }
    /// <summary> Gets or sets the 'name' attribute shared by all radio buttons in the group. If empty, one is generated. </summary>
    [Parameter]
    public string Name { get; set; } = string.Empty;
    /// <summary>
    ///     Gets or sets the Blazicon SVG icon displayed inside the selected radio button circle. Defaults to
    ///     CheckboxMarkedCircle.
    /// </summary>
    [Parameter]
    public SvgIcon CheckboxIcon { get; set; } = MdiIcon.CheckboxMarkedCircle;
    /// <summary> Gets or sets the currently selected value in the radio group. </summary>
    [Parameter]
    public TValue? Value { get; set; } = default!;
    /// <summary> Event callback invoked when the selected value changes. </summary>
    [Parameter]
    public EventCallback<TValue> ValueChanged { get; set; }
    /// <summary> Gets or sets the child content, expected to be <see cref="RzRadioGroupItem{TValue}" /> components. </summary>
    [Parameter]
    public RenderFragment? ChildContent { get; set; }
    /// <summary> Internal property for two-way binding with RzInputRadioGroup. </summary>
    protected TValue? CurrentValue
    {
        get => _currentValue;
        set
        {
            if (!EqualityComparer<TValue?>.Default.Equals(_currentValue, value))
            {
                _currentValue = value;
                // Update the original parameter and invoke the callback
                InvokeAsync(async () =>
                {
                    Value = _currentValue; // Update the parameter bound property
                    await ValueChanged.InvokeAsync(_currentValue);
                    // RzInputRadioGroup handles EditContext notification
                });
            }
        }
    }
    /// <inheritdoc />
    protected override void OnInitialized()
    {
        base.OnInitialized();
        if (For == null)
            throw new InvalidOperationException($"{GetType()} requires a value for the 'For' parameter.");
        if (EditContext == null)
            throw new InvalidOperationException($"{GetType()} must be used within an EditForm.");
        _fieldIdentifier = FieldIdentifier.Create(For);
        _currentValue = Value ?? For.Compile().Invoke(); // Initialize from parameter or model
        // Generate a name if not provided
        if (string.IsNullOrEmpty(Name)) Name = _fieldIdentifier.FieldName;
    }
    /// <inheritdoc />
    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        // Update internal value if the parameter changes externally
        if (For != null && Value == null)
        {
            var newValue = Value ?? For.Compile().Invoke();
            if (!EqualityComparer<TValue?>.Default.Equals(_currentValue, newValue)) _currentValue = newValue;
        }        
        // Regenerate name if 'For' changes and Name was auto-generated
        if (For == null) return;
        var newFieldIdentifier = FieldIdentifier.Create(For);
        if (string.IsNullOrEmpty(Name) || Name == _fieldIdentifier.FieldName) 
            Name = newFieldIdentifier.FieldName;
        _fieldIdentifier = newFieldIdentifier;
    }
    /// <summary> Adds an <see cref="RzRadioGroupItem{TValue}" /> to this group. Called by child items. </summary>
    /// <param name="item">The radio group item to add.</param>
    public void AddRadioItem(RzRadioGroupItem<TValue> item)
    {
        if (!_items.Contains(item))
        {
            _items.Add(item);
            StateHasChanged(); // Need to re-render to update grid column count
        }
    }
    /// <inheritdoc />
    protected override string? RootClass()
    {
        var styles = Theme.RzRadioGroup;
        return TwMerge.Merge(AdditionalAttributes, styles.Container,
            styles.GetGridColumnsCss(Orientation, _items.Count));
    }
}
</file>

<file path="Components/Form/RzRadio/RzRadioGroupField.razor">
@typeparam TValue
@namespace RizzyUI
@inherits RzComponent

<RzField @attributes="AdditionalAttributes" class="@RootClass()">
    <RzFieldLabel DisplayName="@DisplayName" For="@For" Required="Required"/>
    @if (FieldHelp != null)
    {
        <RzFieldHelp>@FieldHelp</RzFieldHelp>
    }
    <RzRadioGroup TValue="TValue"
                  @bind-Value="CurrentValue"
                  DisplayName="@DisplayName"
                  Name="@ResolvedName"
                  For="@For"
                  Orientation="@Orientation"
                  CheckboxIcon="@CheckboxIcon"
                  class="@GroupWithinFieldClass">
        @RadioGroupContent @* Pass content down *@
    </RzRadioGroup>
    <RzValidationMessage For="@For"/>
</RzField>
</file>

<file path="Components/Form/RzRadio/RzRadioGroupField.razor.cs">
using System.Linq.Expressions;
using Blazicons;
using Microsoft.AspNetCore.Components;
using Microsoft.AspNetCore.Components.Forms;
using Microsoft.Extensions.Options;
using RizzyUI.Extensions;
// For EditContext, FieldIdentifier
namespace RizzyUI;
/// <xmldoc>
///     Represents a form field containing a group of radio buttons (<see cref="RzRadioGroup{TValue}" />),
///     along with a label, optional help text, and validation message integration.
///     Leverages <see cref="RzField" /> for structure. Styling is determined by the active <see cref="RzTheme" />.
/// </xmldoc>
public partial class RzRadioGroupField<TValue> : RzComponent
{
    private TValue? _currentValue;
    private FieldIdentifier _fieldIdentifier;
    /// <summary> Gets the current edit context. </summary>
    [CascadingParameter]
    private EditContext? EditContext { get; set; }
    /// <summary> Gets or sets the display name for the field label. If not set, it's inferred from the 'For' expression. </summary>
    [Parameter]
    public string? DisplayName { get; set; } = string.Empty;
    /// <summary> Gets or sets the orientation of the radio group (Vertical or Horizontal). Defaults to Vertical. </summary>
    [Parameter]
    public Orientation Orientation { get; set; } = Orientation.Vertical;
    /// <summary>
    ///     Gets or sets the Blazicon SVG icon displayed inside the selected radio button circle. Defaults to
    ///     CheckboxMarkedCircle.
    /// </summary>
    [Parameter]
    public SvgIcon CheckboxIcon { get; set; } = MdiIcon.CheckboxMarkedCircle;
    /// <summary> Specifies the field the radio group is bound to. Required. </summary>
    [Parameter]
    [EditorRequired]
    public required Expression<Func<TValue>>? For { get; set; }
    /// <summary> Gets or sets the current selected value of the radio group. </summary>
    [Parameter]
    public TValue? Value { get; set; }
    /// <summary> Event callback invoked when the selected value changes. </summary>
    [Parameter]
    public EventCallback<TValue> ValueChanged { get; set; }
    /// <summary> Gets or sets the 'name' attribute for the radio group. If empty, it's derived from the 'For' expression. </summary>
    [Parameter]
    public string Name { get; set; } = string.Empty;
    /// <summary> Gets or sets the child content containing the <see cref="RzRadioGroupItem{TValue}" /> components. </summary>
    [Parameter]
    public RenderFragment? RadioGroupContent { get; set; } // Renamed from ChildContent for clarity
    /// <summary> Optional content displayed below the group as help text. </summary>
    [Parameter]
    public RenderFragment? FieldHelp { get; set; }
    /// <summary> Gets or sets a value indicating whether the field is marked as required. Defaults to false. </summary>
    [Parameter]
    public bool Required { get; set; }
    /// <summary> Internal property for two-way binding with RzRadioGroup. </summary>
    protected TValue? CurrentValue
    {
        get => _currentValue;
        set
        {
            if (!EqualityComparer<TValue?>.Default.Equals(_currentValue, value))
            {
                _currentValue = value;
                // Update the original parameter and invoke the callback
                InvokeAsync(async () =>
                {
                    Value = _currentValue; // Update the parameter bound property
                    await ValueChanged.InvokeAsync(_currentValue);
                    EditContext?.NotifyFieldChanged(_fieldIdentifier); // Notify EditContext
                });
            }
        }
    }
    /// <summary> The resolved name attribute for the radio group. </summary>
    protected string ResolvedName { get; private set; } = string.Empty;
    // --- Style Properties derived from Theme ---
    /// <summary> Gets the computed CSS classes for the RzRadioGroup within this field. </summary>
    protected string GroupWithinFieldClass => Theme.RzRadioGroupField.GroupWithinField;
    /// <inheritdoc />
    protected override void OnInitialized()
    {
        base.OnInitialized();
        if (For == null)
            throw new InvalidOperationException($"{GetType()} requires a value for the 'For' parameter.");
        if (EditContext == null)
            throw new InvalidOperationException($"{GetType()} must be used within an EditForm.");
        _fieldIdentifier = FieldIdentifier.Create(For);
        _currentValue = Value ?? For.Compile().Invoke(); // Initialize from parameter or model
        ResolvedName = string.IsNullOrEmpty(Name) ? _fieldIdentifier.FieldName : Name; // Resolve name
    }
    /// <inheritdoc />
    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        // Update internal value if the parameter changes externally
        var newValue = Value ?? For!.Compile().Invoke();
        if (!EqualityComparer<TValue?>.Default.Equals(_currentValue, newValue)) _currentValue = newValue;
        // Update resolved name if 'For' or 'Name' parameter changes
        if (For != null)
        {
            var newFieldIdentifier = FieldIdentifier.Create(For);
            ResolvedName = string.IsNullOrEmpty(Name) ? newFieldIdentifier.FieldName : Name;
            _fieldIdentifier = newFieldIdentifier; // Update field identifier if 'For' changed
        }
        else if (!string.IsNullOrEmpty(Name))
        {
            ResolvedName = Name; // Use explicit name if 'For' is somehow null now
        }
    }
    /// <inheritdoc />
    protected override string? RootClass()
    {
        return TwMerge.Merge(AdditionalAttributes);
        // Styling handled by RzField
    }
}
</file>

<file path="Components/Form/RzRadio/RzRadioGroupItem.razor">
@typeparam TValue
@namespace RizzyUI
@using Blazicons
@inherits RzComponent

<label @attributes="AdditionalAttributes" class="@LabelWrapperClass">
    <RzInputRadio TValue="TValue" class="@RadioInputClass" Name="@ParentRadioGroup?.Name" Id="@Id" Value="@Value"/>
    <span class="@IconContainerClass">
	    <Blazicon Svg="EffectiveCheckboxIcon"/>
    </span>
    <span class="@ClickableContainerClass">
        <div class="@ContentWrapperClass">
            @if (Icon != null)
            {
                <div class="@LeadingIconContainerClass">
	                <Blazicon Svg="Icon"/>
                </div>
            }
            <span class="@TextContainerClass">
                <span class="@LabelTextClass">@Label</span>
                @if (Description != null)
                {
                    <span class="@DescriptionTextClass">@Description</span>
                }
                @ChildContent
            </span>
        </div>
    </span>
</label>
</file>

<file path="Components/Form/RzRadio/RzRadioGroupItem.razor.cs">
using Blazicons;
using Microsoft.AspNetCore.Components;
using Microsoft.Extensions.Options;
using Rizzy.Utility;
// For RzInputRadio
// For IdGenerator
namespace RizzyUI;
/// <xmldoc>
///     Represents a single radio button item within an <see cref="RzRadioGroup{TValue}" />.
///     Includes support for labels, descriptions, and icons.
///     Styling is determined by the active <see cref="RzTheme" />.
/// </xmldoc>
public partial class RzRadioGroupItem<TValue> : RzComponent
{
    /// <summary> Gets the parent radio group. </summary>
    [CascadingParameter]
    public RzRadioGroup<TValue>? ParentRadioGroup { get; set; }
    /// <summary> Gets or sets the Blazicon SVG icon displayed next to the label (optional). </summary>
    [Parameter]
    public SvgIcon? Icon { get; set; }
    /// <summary> Gets or sets the main text label for the radio item. Required. </summary>
    [Parameter]
    [EditorRequired]
    public string Label { get; set; } = string.Empty;
    /// <summary> Gets or sets the value associated with this radio item. </summary>
    [Parameter]
    public TValue? Value { get; set; }
    /// <summary> Gets or sets optional descriptive text displayed below the label. </summary>
    [Parameter]
    public RenderFragment? Description { get; set; }
    /// <summary> Gets or sets the unique ID for the radio input element. Defaults to a generated ID. </summary>
    [Parameter]
    public string Id { get; set; } = IdGenerator.UniqueId("rzrd");
    /// <summary> Optional child content rendered within the text container. </summary>
    [Parameter]
    public RenderFragment? ChildContent { get; set; }
    /// <summary> The effective icon used for the checkmark, determined by the parent group. </summary>
    protected SvgIcon EffectiveCheckboxIcon { get; set; } = default!;
    // --- Style Properties derived from Theme ---
    protected string LabelWrapperClass => Theme.RzRadioGroupItem.LabelWrapper;
    protected string RadioInputClass => Theme.RzRadioGroupItem.RadioInput;
    protected string IconContainerClass => Theme.RzRadioGroupItem.IconContainer;
    protected string ClickableContainerClass => Theme.RzRadioGroupItem.ClickableContainer;
    protected string ContentWrapperClass => Theme.RzRadioGroupItem.ContentWrapper;
    protected string LeadingIconContainerClass => Theme.RzRadioGroupItem.LeadingIconContainer;
    protected string TextContainerClass => Theme.RzRadioGroupItem.TextContainer;
    protected string LabelTextClass => Theme.RzRadioGroupItem.LabelText;
    protected string DescriptionTextClass => Theme.RzRadioGroupItem.DescriptionText;
    /// <inheritdoc />
    protected override void OnInitialized()
    {
        base.OnInitialized();
        if (ParentRadioGroup == null)
            throw new InvalidOperationException($"{GetType()} must be used within an RzRadioGroup.");
        EffectiveCheckboxIcon = ParentRadioGroup.CheckboxIcon; // Get icon from parent
        ParentRadioGroup.AddRadioItem(this); // Register with parent
    }
    // No RootClass needed as the root is the label with styles applied directly
}
</file>

<file path="Components/Form/RzRadio/Styling/DefaultRzRadioStyles.cs">
namespace RizzyUI;
/// <summary> Provides default styles for RzRadioGroup. </summary>
public class DefaultRzRadioGroupStyles : RzStylesBase.RzRadioGroupStylesBase 
{
    public DefaultRzRadioGroupStyles(RzTheme theme) : base(theme)
    {
    }
    /// <inheritdoc />
    public override string Container => "grid gap-2 pt-3"; // Base grid layout
    /// <inheritdoc />
    public override string GetGridColumnsCss(Orientation orientation, int itemCount)
    {
        return orientation switch
        {
            Orientation.Horizontal => $"grid-cols-{itemCount}", // Dynamic columns for horizontal
            Orientation.Vertical => "grid-cols-1", // Single column for vertical
            _ => GetGridColumnsCss(Orientation.Vertical, itemCount)
        };
    }
}
/// <summary> Provides default styles for RzRadioGroupItem. </summary>
public class DefaultRzRadioGroupItemStyles : RzStylesBase.RzRadioGroupItemStylesBase 
{
    public DefaultRzRadioGroupItemStyles(RzTheme theme) : base(theme)
    {
    }
    /// <inheritdoc />
    public override string LabelWrapper => "group relative flex";
    /// <inheritdoc />
    public override string RadioInput => "opacity-0 peer absolute left-0 top-0 appearance-none"; // Hidden input
    /// <inheritdoc />
    // Styling for the checkmark circle indicator
    public override string IconContainer =>
        "z-1 text-primary text-xl opacity-0 absolute bottom-0 right-0 top-0 flex scale-50 cursor-pointer items-center px-4 transition peer-checked:scale-100 peer-checked:opacity-100";
    /// <inheritdoc />
    // Styling for the main visible container that gets border/bg on check/focus
    public override string ClickableContainer =>
        "group-hover:border-primary relative flex grow cursor-pointer rounded-theme border border-outline p-4 peer-checked:bg-surface-alt peer-checked:border-primary dark:peer-checked:border-primary dark:peer-checked:bg-surface-alt dark:peer-checked:bg-opacity-10 peer-focus:ring peer-focus:ring-primary";
    /// <inheritdoc />
    public override string ContentWrapper => "flex";
    /// <inheritdoc />
    public override string LeadingIconContainer => "mr-2 text-2xl content-center";
    /// <inheritdoc />
    public override string TextContainer => "grow pr-8 text-sm"; // Padding right to avoid overlap with check icon
    /// <inheritdoc />
    public override string LabelText => "mb-1 block font-bold";
    /// <inheritdoc />
    public override string DescriptionText => "block text-on-surface";
}
/// <summary> Provides default styles for RzRadioGroupField. </summary>
public class DefaultRzRadioGroupFieldStyles : RzStylesBase.RzRadioGroupFieldStylesBase 
{
    public DefaultRzRadioGroupFieldStyles(RzTheme theme) : base(theme)
    {
    }
    /// <inheritdoc />
    public override string Field => ""; // Handled by RzField component
    /// <inheritdoc />
    public override string GroupWithinField => ""; // No extra styling needed for the group within the field by default
}
</file>

<file path="Components/Form/RzText/RzTextEdit.razor">
@namespace RizzyUI
@using Blazicons
@using Rizzy
@inherits InputBase<string>

<div class="@InputWrapperClass" x-data="rzPrependInput">
    @if (!string.IsNullOrEmpty(PrependText) || PrependIcon != null)
    {
        <div x-ref="prependContainer" class="@PrependElementClass">
            @if (!string.IsNullOrEmpty(PrependText))
            {
                @PrependText
            }
            else if (PrependIcon != null) // Ensure PrependIcon is not null before rendering
            {
                <div class="@PrependIconContainerClass">
                    <Blazicon Svg="PrependIcon"/>
                </div>
            }
        </div>
    }
    <RzInputText x-ref="textInput" @ref="_elem" type="@_role" Value="@_value" ValueExpression="For"
                 placeholder="@_placeholder" @attributes="AdditionalAttributes" class="@InputClass"/>
</div>
</file>

<file path="Components/Form/RzText/RzTextEdit.razor.cs">
using Blazicons;
using Microsoft.AspNetCore.Components;
using Microsoft.AspNetCore.Components.Forms;
using Microsoft.Extensions.Options;
using RizzyUI.Extensions;
// For RzInputText
// For EditContext
namespace RizzyUI;
/// <xmldoc>
///     Represents a customizable text input component, potentially used within an <see cref="RzTextField" />.
///     Supports prepended text or icons. Styling is determined by the active <see cref="RzTheme" />.
/// </xmldoc>
public partial class RzTextEdit : InputBase<string> // Inherits from InputBase<string>
{
    private RzInputText? _elem; // Reference to the underlying RzInputText
    private string _placeholder = string.Empty;
    private string _role = "text";
    private string _value = string.Empty;
    /// <summary> Gets the current edit context. </summary>
    [CascadingParameter]
    public EditContext? EditContext { get; set; } // Cascaded EditContext
    /// <summary> Gets or sets the semantic role of the text input (e.g., Text, Password, Email). Defaults to Text. </summary>
    [Parameter]
    public TextRole Role { get; set; } = TextRole.Text;
    /// <summary> Gets or sets the placeholder text for the input field. </summary>
    [Parameter]
    public string Placeholder { get; set; } = string.Empty;
    /// <summary> Gets or sets optional text to prepend inside the input field's visual container. </summary>
    [Parameter]
    public string? PrependText { get; set; }
    /// <summary>
    ///     Gets or sets an optional Blazicon SVG icon to prepend inside the input field's visual container. Use either
    ///     this or PrependText.
    /// </summary>
    [Parameter]
    public SvgIcon? PrependIcon { get; set; }
    /// <summary> Gets the ID attribute of the underlying input element, if available. </summary>
    public string Id => _elem?.Id ?? string.Empty; // Get ID from RzInputText if possible
    // --- Style Properties derived from Theme ---
    /// <summary> Gets the computed CSS classes for the input wrapper div. </summary>
    protected string InputWrapperClass => Theme.RzTextEdit.InputWrapper;
    /// <summary> Gets the computed CSS classes for the prepend element div. </summary>
    protected string PrependElementClass => Theme.RzTextEdit.PrependElement;
    /// <summary> Gets the computed CSS classes for the prepend icon container. </summary>
    protected string PrependIconContainerClass => Theme.RzTextEdit.PrependIconContainer;
    /// <summary> Gets the computed CSS classes for the input element itself. </summary>
    protected string InputClass => Theme.RzTextEdit.Input;
    /// <inheritdoc />
    protected override void OnInitialized()
    {
        base.OnInitialized();
        if (For == null)
            throw new InvalidOperationException($"{GetType()} requires a value for the 'For' parameter.");
        if (EditContext == null) // RzInputText requires EditContext
            throw new InvalidOperationException($"{GetType()} must be used within an EditForm.");
    }
    /// <inheritdoc />
    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        _role = GetParameterValue("type", Role.ToString().ToLowerInvariant()); // Get type from attributes or Role prop
        _placeholder =
            GetParameterValue("placeholder", Placeholder); // Get placeholder from attributes or Placeholder prop
        _value = For!.Compile().Invoke(); // Get initial value from expression (For is required by base)
        if (!string.IsNullOrEmpty(PrependText) && PrependIcon != null)
            throw new InvalidOperationException(
                $"{nameof(PrependText)} and {nameof(PrependIcon)} cannot both be set at the same time.");
    }
    /// <inheritdoc />
    protected override string? RootClass()
    {
        return TwMerge.Merge(AdditionalAttributes, InputClass);
        // RzInputText handles merging its class
    }
}
</file>

<file path="Components/Form/RzText/RzTextField.razor">
@using Rizzy

@namespace RizzyUI
@inherits RzComponent

@* Use the RzField component for the overall structure *@
<RzField class="@RootClass()">
    <RzFieldLabel DisplayName="@DisplayName" For="@For" Required="Required"/>
    @* Pass Role, Placeholder, PrependIcon, PrependText, and AdditionalAttributes down to RzTextEdit *@
    <RzTextEdit For="@For"
                Role="@Role"
                Placeholder="@Placeholder"
                PrependIcon="@PrependIcon"
                PrependText="@PrependText"
                @attributes="AdditionalAttributes"/>
    @if (FieldHelp != null)
    {
        <RzFieldHelp>@FieldHelp</RzFieldHelp>
    }
    <RzValidationMessage For="@For"/>
</RzField>
</file>

<file path="Components/Form/RzText/RzTextField.razor.cs">
using System.Linq.Expressions;
using Blazicons;
using Microsoft.AspNetCore.Components;
using Microsoft.AspNetCore.Components.Forms;
using Microsoft.Extensions.Options;
using RizzyUI.Extensions;
// For EditContext
namespace RizzyUI;
/// <xmldoc>
///     Represents a complete form field for text input, including a label, the input itself (<see cref="RzTextEdit" />),
///     optional help text, and validation message integration. Leverages <see cref="RzField" /> for structure.
///     Styling is determined by the active <see cref="RzTheme" />.
/// </xmldoc>
public partial class RzTextField : RzComponent
{
    /// <summary> Gets the current edit context. </summary>
    [CascadingParameter]
    private EditContext? EditContext { get; set; }
    /// <summary> Gets or sets the semantic role of the text input (e.g., Text, Password). Defaults to Text. </summary>
    [Parameter]
    public TextRole Role { get; set; } = TextRole.Text;
    /// <summary> Gets or sets the placeholder text displayed in the input field. </summary>
    [Parameter]
    public string Placeholder { get; set; } = string.Empty;
    /// <summary> Gets or sets the display name for the field label. If not set, it's inferred from the 'For' expression. </summary>
    [Parameter]
    public string? DisplayName { get; set; }
    /// <summary>
    ///     Gets or sets a value indicating whether the field is marked as required (adds an indicator to the label).
    ///     Defaults to false.
    /// </summary>
    [Parameter]
    public bool Required { get; set; }
    /// <summary> Gets or sets optional content displayed below the input field as help text. </summary>
    [Parameter]
    public RenderFragment? FieldHelp { get; set; }
    /// <summary> Specifies the field the input is bound to. Required. Used for binding, validation, and label inference. </summary>
    [Parameter]
    [EditorRequired]
    public Expression<Func<string>>? For { get; set; }
    /// <summary> Gets or sets optional text to prepend inside the input field's visual container. </summary>
    [Parameter]
    public string? PrependText { get; set; }
    /// <summary>
    ///     Gets or sets an optional Blazicon SVG icon to prepend inside the input field's visual container. Use either
    ///     this or PrependText.
    /// </summary>
    [Parameter]
    public SvgIcon? PrependIcon { get; set; }
    /// <inheritdoc />
    protected override void OnInitialized()
    {
        base.OnInitialized();
        if (For == null)
            throw new InvalidOperationException($"{GetType()} requires a value for the 'For' parameter.");
        if (EditContext == null)
            throw new InvalidOperationException($"{GetType()} must be used within an EditForm.");
    }
    /// <inheritdoc />
    protected override string? RootClass()
    {
        return TwMerge.Merge(AdditionalAttributes);
        // Styling is primarily handled by the nested RzField component
    }
}
</file>

<file path="Components/Form/RzText/Styling/DefaultRzTextStyles.cs">
namespace RizzyUI;
/// <summary> Provides default styles for RzTextEdit. </summary>
public class DefaultRzTextEditStyles : RzStylesBase.RzTextEditStylesBase
{
    public DefaultRzTextEditStyles(RzTheme theme) : base(theme)
    {
    }
    /// <inheritdoc />
    public override string InputWrapper => "relative";
    /// <inheritdoc />
    public override string PrependElement =>
        $"pointer-events-none absolute inset-y-0 left-0 my-px ml-px flex items-center rounded-l-borderRadius border-r border-outline bg-surface-alt px-3 text-on-surface dark:border-outline dark:bg-surface-alt dark:text-on-surface"; // Adjusted padding slightly, used theme tokens
    /// <inheritdoc />
    public override string PrependIconContainer => "text-xl";
    /// <inheritdoc />
    public override string Input =>
        "block w-full rounded-theme border border-outline px-3 py-2 leading-6 placeholder-on-surface-muted focus:border-primary focus:ring focus:ring-primary/50 dark:border-outline dark:bg-surface-alt dark:placeholder-on-surface-muted dark:focus:border-primary transition-opacity text-transparent"; // text-transparent initially for rzPrependInput
}
/// <summary> Provides default styles for RzTextField. </summary>
public class DefaultRzTextFieldStyles : RzStylesBase.RzTextFieldStylesBase
{
    public DefaultRzTextFieldStyles(RzTheme theme) : base(theme)
    {
    }
    /// <inheritdoc />
    public override string Field => ""; // Handled by RzField component
}
</file>

<file path="Components/Form/RzToggle/RzToggle.razor">
@namespace RizzyUI
@inherits RzComponent

<RzInputCheckbox ValueExpression="@For"
                 Value="CurrentValue" 
                 @attributes="AdditionalAttributes"
                 class="@RootClass()"
                 role="switch"
                 tabindex="0"
                 aria-checked="@AriaCheckedValue"/>
</file>

<file path="Components/Form/RzToggle/RzToggle.razor.cs">
using System.Linq.Expressions;
using Microsoft.AspNetCore.Components;
using Microsoft.AspNetCore.Components.Forms;
using Microsoft.Extensions.Options;
using RizzyUI.Extensions;
// For RzInputCheckbox
// For EditContext
namespace RizzyUI;
/// <xmldoc>
///     Renders a toggle switch (styled checkbox) component.
///     Styling is determined by the active <see cref="RzTheme" />. It should be used within an EditForm context.
/// </xmldoc>
public partial class RzToggle : RzComponent
{
    private bool _currentValue;
    private FieldIdentifier _fieldIdentifier;
    /// <summary> Gets the current edit context. </summary>
    [CascadingParameter]
    private EditContext? EditContext { get; set; }
    /// <summary> Gets or sets the current boolean value of the toggle. </summary>
    [Parameter]
    public bool? Value { get; set; }
    /// <summary> Event callback for when the value changes. </summary>
    [Parameter]
    public EventCallback<bool> ValueChanged { get; set; }
    /// <summary> Specifies the field the toggle is bound to. Required. </summary>
    [Parameter]
    [EditorRequired]
    public Expression<Func<bool>>? For { get; set; }
    /// <summary> Internal property for two-way binding with RzInputCheckbox. </summary>
    protected bool CurrentValue
    {
        get => _currentValue;
        set
        {
            if (_currentValue != value)
            {
                _currentValue = value;
                // Update the original parameter and invoke the callback
                InvokeAsync(async () =>
                {
                    Value = _currentValue; // Update the parameter bound property
                    await ValueChanged.InvokeAsync(_currentValue);
                    EditContext?.NotifyFieldChanged(_fieldIdentifier); // Notify EditContext
                });
            }
        }
    }
    /// <summary> Gets the string representation for the aria-checked attribute. </summary>
    protected string AriaCheckedValue => CurrentValue ? "true" : "false";
    /// <inheritdoc />
    protected override void OnInitialized()
    {
        base.OnInitialized();
        if (For == null)
            throw new InvalidOperationException($"{GetType()} requires a value for the 'For' parameter.");
        if (EditContext == null)
            throw new InvalidOperationException($"{GetType()} must be used within an EditForm.");
        _fieldIdentifier = FieldIdentifier.Create(For);
        // Initialize _currentValue from Value parameter or model
        _currentValue = Value ?? For.Compile().Invoke();
    }
    /// <inheritdoc />
    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        // Update internal value if the parameter changes externally
        var newValue = Value ?? For?.Compile().Invoke() ?? false;
        if (_currentValue != newValue) _currentValue = newValue;
    }
    /// <inheritdoc />
    protected override string? RootClass()
    {
        return TwMerge.Merge(AdditionalAttributes, Theme.RzToggle.Toggle);
    }
}
</file>

<file path="Components/Form/RzToggle/RzToggleField.razor">
@namespace RizzyUI
@inherits RzComponent

<RzField class="@RootClass()">
	<div class="@ContentWrapperClass">
		<div class="@InnerWrapperClass">
			<RzFieldLabel DisplayName="@DisplayName" For="@For" class="@LabelInFieldClass">
				@if (Description != null)
				{
					<span class="@DescriptionInLabelClass">
						@Description
					</span>
				}
			</RzFieldLabel>

			@* Pass Value, For, ValueChanged, and AdditionalAttributes down *@
			<RzToggle For="@For" @bind-Value="CurrentValue" class="@ToggleInFieldClass"
			          @attributes="AdditionalAttributes"/>
		</div>
	</div>
	@* Validation message outside the inner flex container *@
	<RzValidationMessage For="@For"/>
</RzField>
</file>

<file path="Components/Form/RzToggle/RzToggleField.razor.cs">
using System.Linq.Expressions;
using Microsoft.AspNetCore.Components;
using Microsoft.AspNetCore.Components.Forms;
using Microsoft.Extensions.Options;
using RizzyUI.Extensions;
// For IdGenerator if needed, though base RzComponent might handle ID now
// For EditContext
namespace RizzyUI;
/// <xmldoc>
///     Represents a form field containing a toggle switch (<see cref="RzToggle" />), along with a label,
///     optional description, and validation message integration. Leverages <see cref="RzField" /> for structure.
///     Styling is determined by the active <see cref="RzTheme" />.
/// </xmldoc>
public partial class RzToggleField : RzComponent
{
    private bool _currentValue;
    private FieldIdentifier _fieldIdentifier;
    /// <summary> Gets the current edit context. </summary>
    [CascadingParameter]
    private EditContext? EditContext { get; set; }
    /// <summary> Gets or sets the display name for the field label. If not set, it's inferred from the 'For' expression. </summary>
    [Parameter]
    public string? DisplayName { get; set; }
    /// <summary> Gets or sets optional descriptive text displayed below the label. </summary>
    [Parameter]
    public RenderFragment? Description { get; set; }
    /// <summary> Specifies the field the toggle switch is bound to. Required. </summary>
    [Parameter]
    [EditorRequired]
    public Expression<Func<bool>>? For { get; set; }
    /// <summary> Gets or sets the current boolean value of the toggle switch. </summary>
    [Parameter]
    public bool? Value { get; set; }
    /// <summary> Event callback invoked when the toggle's value changes. </summary>
    [Parameter]
    public EventCallback<bool> ValueChanged { get; set; }
    /// <summary> Internal property for two-way binding with RzToggle. </summary>
    protected bool CurrentValue
    {
        get => _currentValue;
        set
        {
            if (_currentValue != value)
            {
                _currentValue = value;
                // Update the original parameter and invoke the callback
                InvokeAsync(async () =>
                {
                    Value = _currentValue; // Update the parameter bound property
                    await ValueChanged.InvokeAsync(_currentValue);
                    EditContext?.NotifyFieldChanged(_fieldIdentifier); // Notify EditContext
                });
            }
        }
    }
    // --- Style Properties derived from Theme ---
    /// <summary> Gets the computed CSS classes for the content wrapper div. </summary>
    protected string ContentWrapperClass => Theme.RzToggleField.ContentWrapper;
    /// <summary> Gets the computed CSS classes for the inner flex container div. </summary>
    protected string InnerWrapperClass => Theme.RzToggleField.InnerWrapper;
    /// <summary> Gets the computed CSS classes for the RzFieldLabel within this field. </summary>
    protected string LabelInFieldClass => Theme.RzToggleField.LabelInField;
    /// <summary> Gets the computed CSS classes for the RzToggle within this field. </summary>
    protected string ToggleInFieldClass => Theme.RzToggleField.ToggleInField;
    /// <summary> Gets the computed CSS classes for the description span within the label. </summary>
    protected string DescriptionInLabelClass => Theme.RzToggleField.DescriptionInLabel;
    /// <inheritdoc />
    protected override void OnInitialized()
    {
        base.OnInitialized();
        if (For == null)
            throw new InvalidOperationException($"{GetType()} requires a value for the 'For' parameter.");
        if (EditContext == null)
            throw new InvalidOperationException($"{GetType()} must be used within an EditForm.");
        _fieldIdentifier = FieldIdentifier.Create(For);
        // Initialize _currentValue from Value parameter or model
        _currentValue = Value ?? For.Compile().Invoke();
    }
    /// <inheritdoc />
    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        // If the Value parameter changes externally, update internal state
        var newValue = Value ?? For?.Compile().Invoke() ?? false;
        if (_currentValue != newValue) _currentValue = newValue;
    }
    /// <inheritdoc />
    protected override string? RootClass()
    {
        return TwMerge.Merge(AdditionalAttributes);
        // Styling handled by RzField
    }
}
</file>

<file path="Components/Form/RzToggle/Styling/DefaultRzToggleStyles.cs">
namespace RizzyUI;
/// <summary> Provides default styles for RzToggle. </summary>
public class DefaultRzToggleStyles : RzStylesBase.RzToggleStylesBase
{
    public DefaultRzToggleStyles(RzTheme theme) : base(theme)
    {
    }
    /// <inheritdoc />
    // Note: Colors like text-primary, checked:bg-primary should ideally use theme tokens if possible,
    // but Tailwind's checked: variant often relies on direct color classes.
    public override string Toggle =>
        $"relative w-[3.25rem] h-7 p-px bg-outline border-transparent text-transparent rounded-full cursor-pointer transition-colors ease-in-out duration-200 focus:ring-primary disabled:opacity-50 disabled:pointer-events-none checked:bg-none checked:bg-primary checked:text-primary checked:border-primary focus:checked:border-primary dark:checked:bg-primary dark:checked:border-primary dark:focus:ring-offset-surface before:inline-block before:size-6 before:bg-on-primary checked:before:bg-on-primary before:translate-x-0 checked:before:translate-x-full before:rounded-full before:shadow before:transform before:ring-0 before:transition before:ease-in-out before:duration-200 dark:before:bg-on-primary dark:checked:before:bg-on-primary";
}
/// <summary> Provides default styles for RzToggleField. </summary>
public class DefaultRzToggleFieldStyles : RzStylesBase.RzToggleFieldStylesBase
{
    public DefaultRzToggleFieldStyles(RzTheme theme) : base(theme)
    {
    }
    /// <inheritdoc />
    public override string Field => ""; // Handled by RzField
    /// <inheritdoc />
    public override string ContentWrapper => "space-x-2";
    /// <inheritdoc />
    public override string InnerWrapper => "flex items-center justify-between space-x-3";
    /// <inheritdoc />
    public override string LabelInField =>
        "font-medium leading-relaxed"; // Specific style for label within toggle field
    /// <inheritdoc />
    public override string ToggleInField => ""; // No specific adjustment needed for the toggle itself usually
    /// <inheritdoc />
    public override string DescriptionInLabel => "block text-sm text-on-surface";
}
</file>

<file path="Components/FragmentComponent.cs">
using Microsoft.AspNetCore.Components;
using Microsoft.AspNetCore.Components.Rendering;
namespace RizzyUI;
/// <summary>
///     Component that encapsulates a RenderFragment for use as a partial or child component.
/// </summary>
public class FragmentComponent : ComponentBase
{
    /// <summary>
    ///     Fragment to render
    /// </summary>
    [Parameter]
    public RenderFragment? Fragment { get; set; }
    /// <summary>
    ///     Construct a component from a fragment
    /// </summary>
    /// <param name="builder"></param>
    protected override void BuildRenderTree(RenderTreeBuilder builder)
    {
        if (Fragment != null) builder.AddContent(0, Fragment);
    }
}
</file>

<file path="Components/HtmlElement.cs">
using Microsoft.AspNetCore.Components;
using Microsoft.AspNetCore.Components.Rendering;
namespace RizzyUI;
/// <summary>
///     A generic Blazor component that renders a specified HTML element with optional content and attributes.
/// </summary>
public sealed class HtmlElement : ComponentBase
{
    /// <summary>
    ///     Specifies the root HTML element to render (e.g., "div", "a", "button").
    ///     If not set, defaults to "div".
    /// </summary>
    [Parameter]
    public string Element { get; set; } = "div";
    /// <summary>
    ///     Represents the content to be rendered inside the HTML element.
    /// </summary>
    [Parameter]
    public RenderFragment? ChildContent { get; set; }
    /// <summary>
    ///     A collection of additional attributes to apply to the HTML element.
    /// </summary>
    [Parameter(CaptureUnmatchedValues = true)]
    public IDictionary<string, object>? AdditionalAttributes { get; set; }
    /// <summary>
    ///     Builds the component's render tree.
    /// </summary>
    /// <param name="builder">An instance of <see cref="RenderTreeBuilder" /> used to build the render tree.</param>
    protected override void BuildRenderTree(RenderTreeBuilder builder)
    {
        var elementName = Element ?? "div";
        builder.OpenElement(0, elementName);
        builder.AddMultipleAttributes(1, AdditionalAttributes);
        builder.AddContent(3, ChildContent);
        builder.CloseElement();
    }
}
</file>

<file path="Components/Layout/RzAccordion/RzAccordion.razor">
@namespace RizzyUI
@inherits RzComponent

<HtmlElement Element="div"
             x-data="rzAccordion" @* Alpine component for interactivity *@
             @attributes="AdditionalAttributes"
             class="@RootClass()"
             data-multiple="@AllowMultipleOpen.ToString().ToLowerInvariant()"> @* Pass setting to Alpine *@
	@ChildContent
</HtmlElement>
</file>

<file path="Components/Layout/RzAccordion/RzAccordion.razor.cs">
using Microsoft.AspNetCore.Components;
using Microsoft.Extensions.Options;
using RizzyUI.Extensions;
namespace RizzyUI;
/// <xmldoc>
///     Represents an accordion component that allows for collapsible sections. Styling is handled by the active theme.
/// </xmldoc>
public partial class RzAccordion : RzComponent
{
    /// <summary> When true, multiple sections may be open simultaneously. </summary>
    [Parameter]
    public bool AllowMultipleOpen { get; set; }
    /// <summary> Child content containing one or more RzAccordionSection components. </summary>
    [Parameter]
    public RenderFragment? ChildContent { get; set; }
    /// <inheritdoc />
    protected override string? RootClass()
    {
        return TwMerge.Merge(AdditionalAttributes, Theme.RzAccordion.Container);
    }
}
</file>

<file path="Components/Layout/RzAccordion/RzAccordionSection.razor">
@namespace RizzyUI
@inherits RzComponent

<div x-data="rzAccordionSection" x-ref="@SectionId" data-is-open="@((!Collapsed).ToString().ToLowerInvariant())"
     data-section-id="@SectionId"
     data-expanded-class="@ChevronIconExpandedClass">
	<button id="@ButtonId" type="button" class="@ButtonClass" aria-controls="@ContentId"
	        x-on:click="toggle" x-bind:aria-expanded="open">
		@Title
		<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke-width="2"
		     stroke="currentColor" class="@ChevronIconClass" aria-hidden="true"
		     x-bind:class="getExpandedCss"> @* Dynamically add expanded class *@
			<path stroke-linecap="round" stroke-linejoin="round" d="M19.5 8.25l-7.5 7.5-7.5-7.5"/>
		</svg>
	</button>
	<div id="@ContentId" role="region" aria-labelledby="@ButtonId"
	     x-cloak x-show="open" x-collapse>
		<div class="@ContentContainerClass">
			@ChildContent
		</div>
	</div>
</div>
</file>

<file path="Components/Layout/RzAccordion/RzAccordionSection.razor.cs">
using Microsoft.AspNetCore.Components;
using Microsoft.Extensions.Options;
using Rizzy.Utility;
using RizzyUI.Extensions;
// Required for RzTheme
namespace RizzyUI;
/// <xmldoc>
///     Represents a section of an accordion component (<see cref="RzAccordion" />) that can be expanded or collapsed
///     to show or hide its content. Styling is managed by the active <see cref="RzTheme" />.
/// </xmldoc>
public partial class RzAccordionSection : RzComponent
{
    // Generate a unique ID for this section.
    private string SectionId { get; } = IdGenerator.UniqueId("rzaccsec");
    /// <summary> Gets the unique ID for the button element. </summary>
    protected string ButtonId => $"rzaccordion-button-{SectionId}";
    /// <summary> Gets the unique ID for the content container element. </summary>
    protected string ContentId => $"rzaccordion-content-{SectionId}";
    /// <summary> The title displayed in the clickable header of the accordion section. </summary>
    [Parameter]
    public string Title { get; set; } = string.Empty;
    /// <summary> Determines if the section is initially collapsed (true) or expanded (false). Defaults to true. </summary>
    [Parameter]
    public bool Collapsed { get; set; } = true;
    /// <summary> The content to be displayed inside the section when it is expanded. </summary>
    [Parameter]
    public RenderFragment? ChildContent { get; set; }
    // --- Style Properties derived from Theme ---
    /// <summary> Gets the computed CSS classes for the section's button element. </summary>
    protected string? ButtonClass => TwMerge.Merge(AdditionalAttributes, Theme.RzAccordionSection.Button);
    /// <summary> Gets the computed CSS classes for the section's content container div. </summary>
    protected string ContentContainerClass => Theme.RzAccordionSection.ContentContainer;
    /// <summary> Gets the base CSS classes for the chevron icon. </summary>
    protected string ChevronIconClass => Theme.RzAccordionSection.ChevronIcon;
    /// <summary> Gets the CSS class applied to the chevron icon when the section is expanded. </summary>
    protected string ChevronIconExpandedClass => Theme.RzAccordionSection.ChevronIconExpanded;
}
</file>

<file path="Components/Layout/RzAccordion/Styling/DefaultRzAccordionSectionStyles.cs">
namespace RizzyUI;
/// <summary>
///     Provides the default styles for the RzAccordionSection component.
/// </summary>
public class DefaultRzAccordionSectionStyles : RzStylesBase.RzAccordionSectionStylesBase
{
    /// <summary>
    ///     Initializes a new instance of the <see cref="DefaultRzAccordionSectionStyles" /> class.
    /// </summary>
    /// <param name="theme">The theme instance to use for styling.</param>
    public DefaultRzAccordionSectionStyles(RzTheme theme) : base(theme)
    {
    }
    /// <inheritdoc />
    public override string Button =>
        "flex w-full items-center justify-between gap-4 bg-surface-alt p-4 text-left underline-offset-2 hover:bg-surface-alt/75 focus-visible:bg-surface-alt/75 focus-visible:underline focus-visible:outline-hidden dark:hover:bg-surface-alt/75 dark:focus-visible:bg-surface-alt/75 text-on-surface font-medium";
    /// <inheritdoc />
    public override string ContentContainer => "p-4 text-sm sm:text-base text-pretty";
    /// <inheritdoc />
    public override string ChevronIcon => "size-5 shrink-0 transition";
    /// <inheritdoc />
    public override string ChevronIconExpanded => "rotate-180"; // Class applied when expanded
}
</file>

<file path="Components/Layout/RzAccordion/Styling/DefaultRzAccordionStyles.cs">
namespace RizzyUI;
public class DefaultRzAccordionStyles : RzStylesBase.RzAccordionStylesBase
{
    public DefaultRzAccordionStyles(RzTheme theme) : base(theme)
    {
    }
    public override string Container =>
        "w-full divide-y divide-outline overflow-hidden rounded-theme border border-outline bg-surface-alt/40 text-on-surface dark:divide-outline";
}
</file>

<file path="Components/Layout/RzCard/RzCard.razor">
@namespace RizzyUI
@inherits RzComponent

<HtmlElement Element="@Element" @attributes="@AdditionalAttributes" class="@RootClass()">
    @ChildContent
</HtmlElement>
</file>

<file path="Components/Layout/RzCard/RzCard.razor.cs">
using Microsoft.AspNetCore.Components;
using Microsoft.Extensions.Options;
using RizzyUI.Extensions;
namespace RizzyUI;
/// <xmldoc>
///     A flexible container component for displaying content in a card format.
///     Styling is determined by the active <see cref="RzTheme" />.
/// </xmldoc>
public partial class RzCard : RzComponent
{
    /// <summary> The content to be rendered inside the card. </summary>
    [Parameter]
    public RenderFragment? ChildContent { get; set; }
    /// <summary> The background color for the card. Defaults to Surface. </summary>
    [Parameter]
    public SemanticColor BackgroundColor { get; set; } = SemanticColor.Surface;
    /// <summary> The text color for the card content. Defaults to OnSurface. </summary>
    [Parameter]
    public SemanticColor TextColor { get; set; } = SemanticColor.OnSurface;
    /// <inheritdoc />
    protected override void OnInitialized()
    {
        base.OnInitialized();
        Element = "div";
    }
    /// <inheritdoc />
    protected override string? RootClass()
    {
        return TwMerge.Merge(AdditionalAttributes,
            Theme.RzCard.Container,
            BackgroundColor != SemanticColor.None
                ? BackgroundColor.ToBackgroundClass()
                : Theme.Light.Surface.ToCssClassString("bg"), // Apply BG color
            TextColor != SemanticColor.None ? TextColor.ToTextClass() : Theme.Light.OnSurface.ToCssClassString("text"));
        // Apply Text color
    }
}
</file>

<file path="Components/Layout/RzCard/RzCardBody.razor">
@namespace RizzyUI
@inherits RzComponent

<HtmlElement Element="@Element" @attributes="AdditionalAttributes" class="@RootClass()">
	@ChildContent
</HtmlElement>
</file>

<file path="Components/Layout/RzCard/RzCardBody.razor.cs">
using Microsoft.AspNetCore.Components;
using Microsoft.Extensions.Options;
using RizzyUI.Extensions;
namespace RizzyUI;
/// <xmldoc>
///     Represents the main content area of an <see cref="RzCard" />.
///     Styling is determined by the active <see cref="RzTheme" />.
/// </xmldoc>
public partial class RzCardBody : RzComponent
{
    /// <summary> The content to be rendered inside the card body. </summary>
    [Parameter]
    public RenderFragment? ChildContent { get; set; }
    /// <summary> The background color for the card body. Defaults to None (inherits from card). </summary>
    [Parameter]
    public SemanticColor BackgroundColor { get; set; } = SemanticColor.None;
    /// <summary> The text color for the card body content. Defaults to None (inherits from card). </summary>
    [Parameter]
    public SemanticColor TextColor { get; set; } = SemanticColor.None;
    /// <inheritdoc />
    protected override string? RootClass()
    {
        return TwMerge.Merge(AdditionalAttributes,
            Theme.RzCardBody.Body,
            BackgroundColor != SemanticColor.None ? BackgroundColor.ToBackgroundClass() : "", // Only apply if set
            TextColor != SemanticColor.None ? TextColor.ToTextClass() : "");
        // Only apply if set
    }
}
</file>

<file path="Components/Layout/RzCard/RzCardButtons.razor">
@namespace RizzyUI
@inherits RzComponent

<HtmlElement Element="@Element" @attributes="AdditionalAttributes" class="@RootClass()">
	@ChildContent
</HtmlElement>
</file>

<file path="Components/Layout/RzCard/RzCardButtons.razor.cs">
using Microsoft.AspNetCore.Components;
using Microsoft.Extensions.Options;
using RizzyUI.Extensions;
namespace RizzyUI;
/// <xmldoc>
///     A container specifically for placing buttons within an <see cref="RzCardHeader" /> or <see cref="RzCardFooter" />.
///     Provides appropriate layout styling based on the active <see cref="RzTheme" />.
/// </xmldoc>
public partial class RzCardButtons : RzComponent
{
    /// <summary> The buttons or other action elements to be rendered within this container. </summary>
    [Parameter]
    public RenderFragment? ChildContent { get; set; }
    /// <inheritdoc />
    protected override string? RootClass()
    {
        return TwMerge.Merge(AdditionalAttributes, Theme.RzCardButtons.ButtonsContainer);
    }
}
</file>

<file path="Components/Layout/RzCard/RzCardFooter.razor">
@namespace RizzyUI
@inherits RzComponent

<HtmlElement Element="@Element" @attributes="AdditionalAttributes" class="@RootClass()">
    @ChildContent
</HtmlElement>
</file>

<file path="Components/Layout/RzCard/RzCardFooter.razor.cs">
using Microsoft.AspNetCore.Components;
using Microsoft.Extensions.Options;
using RizzyUI.Extensions;
namespace RizzyUI;
/// <xmldoc>
///     Represents the footer section of an <see cref="RzCard" />.
///     Styling is determined by the active <see cref="RzTheme" />.
/// </xmldoc>
public partial class RzCardFooter : RzComponent
{
    /// <summary> The content to be rendered inside the card footer. </summary>
    [Parameter]
    public RenderFragment? ChildContent { get; set; }
    /// <summary> The background color for the card footer. Defaults to SurfaceAlt. </summary>
    [Parameter]
    public SemanticColor BackgroundColor { get; set; } = SemanticColor.SurfaceAlt;
    /// <summary> The text color for the card footer content. Defaults to OnSurface. </summary>
    [Parameter]
    public SemanticColor TextColor { get; set; } = SemanticColor.OnSurface;
    /// <inheritdoc />
    protected override string? RootClass()
    {
        return TwMerge.Merge(AdditionalAttributes,
            Theme.RzCardFooter.Footer,
            BackgroundColor != SemanticColor.None
                ? BackgroundColor.ToBackgroundClass()
                : Theme.Light.SurfaceAlt.ToCssClassString("bg"),
            TextColor != SemanticColor.None ? TextColor.ToTextClass() : Theme.Light.OnSurface.ToCssClassString("text"));
    }
}
</file>

<file path="Components/Layout/RzCard/RzCardHeader.razor">
@namespace RizzyUI
@inherits RzComponent

<!-- Card Header -->
<HtmlElement Element="@Element" @attributes="@AdditionalAttributes" role="heading" aria-level="3" class="@RootClass()">
	@ChildContent
</HtmlElement>
<!-- END Card Header -->
</file>

<file path="Components/Layout/RzCard/RzCardHeader.razor.cs">
using Microsoft.AspNetCore.Components;
using Microsoft.Extensions.Options;
using RizzyUI.Extensions;
namespace RizzyUI;
/// <xmldoc>
///     Represents the header section of an <see cref="RzCard" />.
///     Styling is determined by the active <see cref="RzTheme" />.
/// </xmldoc>
public partial class RzCardHeader : RzComponent
{
    /// <summary> The content to be rendered inside the card header. </summary>
    [Parameter]
    public RenderFragment? ChildContent { get; set; }
    /// <summary> The background color for the card header. Defaults to SurfaceAlt. </summary>
    [Parameter]
    public SemanticColor BackgroundColor { get; set; } = SemanticColor.SurfaceAlt;
    /// <summary> The text color for the card header content. Defaults to OnSurface. </summary>
    [Parameter]
    public SemanticColor TextColor { get; set; } = SemanticColor.OnSurface;
    /// <inheritdoc />
    protected override string? RootClass()
    {
        return TwMerge.Merge(AdditionalAttributes,
            Theme.RzCardHeader.Header,
            BackgroundColor != SemanticColor.None
                ? BackgroundColor.ToBackgroundClass()
                : Theme.Light.SurfaceAlt.ToCssClassString("bg"),
            TextColor != SemanticColor.None ? TextColor.ToTextClass() : Theme.Light.OnSurface.ToCssClassString("text"));
    }
}
</file>

<file path="Components/Layout/RzCard/RzCardSubtitle.razor">
@namespace RizzyUI
@inherits RzComponent

<HtmlElement Element="@Element" @attributes="AdditionalAttributes" class="@RootClass()">
	@ChildContent
</HtmlElement>
</file>

<file path="Components/Layout/RzCard/RzCardSubtitle.razor.cs">
using Microsoft.AspNetCore.Components;
using Microsoft.Extensions.Options;
using RizzyUI.Extensions;
namespace RizzyUI;
/// <xmldoc>
///     Represents a subtitle within an <see cref="RzCardHeader" />. Typically renders as an H4 element.
///     Styling is determined by the active <see cref="RzTheme" />.
/// </xmldoc>
public partial class RzCardSubtitle : RzComponent
{
    /// <summary> The text or content to be rendered as the card subtitle. </summary>
    [Parameter]
    public RenderFragment? ChildContent { get; set; }
    /// <inheritdoc />
    protected override void OnInitialized()
    {
        base.OnInitialized();
        Element = "h4"; // Default element for a subtitle
    }
    /// <inheritdoc />
    protected override string? RootClass()
    {
        return TwMerge.Merge(AdditionalAttributes, Theme.RzCardSubtitle.Subtitle);
    }
}
</file>

<file path="Components/Layout/RzCard/RzCardTitle.razor">
@namespace RizzyUI
@inherits RzComponent

<HtmlElement Element="@Element" @attributes="AdditionalAttributes" class="@RootClass()">
	@ChildContent
</HtmlElement>
</file>

<file path="Components/Layout/RzCard/RzCardTitle.razor.cs">
using Microsoft.AspNetCore.Components;
using Microsoft.Extensions.Options;
using RizzyUI.Extensions;
namespace RizzyUI;
/// <xmldoc>
///     Represents the main title within an <see cref="RzCardHeader" />. Typically renders as an H3 element.
///     Styling is determined by the active <see cref="RzTheme" />.
/// </xmldoc>
public partial class RzCardTitle : RzComponent
{
    /// <summary> The text or content to be rendered as the card title. </summary>
    [Parameter]
    public RenderFragment? ChildContent { get; set; }
    /// <inheritdoc />
    protected override void OnInitialized()
    {
        base.OnInitialized();
        Element = "h3"; // Default element for a title
    }
    /// <inheritdoc />
    protected override string? RootClass()
    {
        return TwMerge.Merge(AdditionalAttributes, Theme.RzCardTitle.Title);
    }
}
</file>

<file path="Components/Layout/RzCard/Styling/DefaultRzCardStyles.cs">
namespace RizzyUI;
/// <summary> Provides default styles for RzCard. </summary>
public class DefaultRzCardStyles : RzStylesBase.RzCardStylesBase
{
    public DefaultRzCardStyles(RzTheme theme) : base(theme)
    {
    }
    /// <inheritdoc />
    public override string Container =>
        "flex flex-col rounded-theme overflow-hidden shadow-sm border border-outline";
}
/// <summary> Provides default styles for RzCardHeader. </summary>
public class DefaultRzCardHeaderStyles : RzStylesBase.RzCardHeaderStylesBase
{
    public DefaultRzCardHeaderStyles(RzTheme theme) : base(theme)
    {
    }
    /// <inheritdoc />
    public override string Header =>
        "flex flex-col gap-3 px-5 py-4 text-center sm:flex-row sm:items-center sm:justify-between sm:text-left";
}
/// <summary> Provides default styles for RzCardBody. </summary>
public class DefaultRzCardBodyStyles : RzStylesBase.RzCardBodyStylesBase
{
    public DefaultRzCardBodyStyles(RzTheme theme) : base(theme)
    {
    }
    /// <inheritdoc />
    public override string Body => "grow p-5";
}
/// <summary> Provides default styles for RzCardFooter. </summary>
public class DefaultRzCardFooterStyles : RzStylesBase.RzCardFooterStylesBase
{
    public DefaultRzCardFooterStyles(RzTheme theme) : base(theme)
    {
    }
    /// <inheritdoc />
    public override string Footer => "px-5 py-4 text-sm last:rounded-b-borderRadius";
}
/// <summary> Provides default styles for RzCardTitle. </summary>
public class DefaultRzCardTitleStyles : RzStylesBase.RzCardTitleStylesBase
{
    public DefaultRzCardTitleStyles(RzTheme theme) : base(theme)
    {
    }
    /// <inheritdoc />
    public override string Title =>
        $"flex items-center mb-1 text-lg font-semibold text-on-surface-strong";
}
/// <summary> Provides default styles for RzCardSubtitle. </summary>
public class DefaultRzCardSubtitleStyles : RzStylesBase.RzCardSubtitleStylesBase
{
    public DefaultRzCardSubtitleStyles(RzTheme theme) : base(theme)
    {
    }
    /// <inheritdoc />
    public override string Subtitle => "text-sm font-medium text-on-surface";
}
/// <summary> Provides default styles for RzCardButtons. </summary>
public class DefaultRzCardButtonsStyles : RzStylesBase.RzCardButtonsStylesBase
{
    public DefaultRzCardButtonsStyles(RzTheme theme) : base(theme)
    {
    }
    /// <inheritdoc />
    public override string ButtonsContainer => "md:flex items-center gap-2 md:-my-4";
}
</file>

<file path="Components/Layout/RzSearchButton/RzSearchButton.razor">
@namespace RizzyUI
@using Blazicons
@inherits RzComponent

<HtmlElement Element="button"
             @attributes="AdditionalAttributes"
             class="@RootClass()"
             aria-label="@Label">
	<div class="@InnerContainerClass">
		<span class="@IconSpanClass">
			<Blazicon Svg="MdiIcon.Magnify" />
		</span>
		@Label
	</div>
</HtmlElement>
</file>

<file path="Components/Layout/RzSearchButton/RzSearchButton.razor.cs">
using Microsoft.AspNetCore.Components;
using RizzyUI.Extensions;
namespace RizzyUI;
/// <xmldoc>
/// Represents a search button styled consistently with the application's theme,
/// displaying a search icon and a configurable text label.
/// Styling is determined by the active <see cref="RzTheme"/>.
/// </xmldoc>
public partial class RzSearchButton : RzComponent
{
	// Theme is inherited from RzComponent
	/// <summary> Gets or sets the text label displayed on the button and used for the aria-label. Defaults to "Search". </summary>
	[Parameter] public string Label { get; set; } = "Search";
	// --- Style Properties derived from Theme ---
	/// <summary> Gets the computed CSS classes for the inner div containing icon and label. </summary>
	protected string InnerContainerClass => Theme.RzSearchButton.InnerContainer;
	/// <summary> Gets the computed CSS classes for the span wrapping the search icon. </summary>
	protected string IconSpanClass => Theme.RzSearchButton.IconSpan;
	/// <inheritdoc/>
	protected override string? RootClass() =>
		TwMerge.Merge(AdditionalAttributes, Theme.RzSearchButton.Button);
}
</file>

<file path="Components/Layout/RzSearchButton/Styling/DefaultRzSearchButtonStyles.cs">
namespace RizzyUI;
/// <summary> Provides default styles for RzSearchButton. </summary>
public class DefaultRzSearchButtonStyles : RzStylesBase.RzSearchButtonStylesBase 
{
	public DefaultRzSearchButtonStyles(RzTheme theme) : base(theme) { }
	/// <inheritdoc/>
	public override string Button => $"flex h-10 w-full cursor-pointer items-center justify-between border-outline bg-surface-alt p-2 px-4 font-light transition-all duration-200 rounded-theme border"; // Use semantic names & rounded-theme
	/// <inheritdoc/>
	public override string InnerContainer => "flex items-center gap-2";
	/// <inheritdoc/>
	public override string IconSpan => "text-xl";
}
</file>

<file path="Components/Layout/RzStep/RzStep.cs">
using Blazicons;
using Microsoft.AspNetCore.Components;
namespace RizzyUI;
/// <xmldoc>
/// Represents the data definition for a single step within an <see cref="RzSteps"/> component.
/// This component registers its parameters with the parent <see cref="RzSteps"/> component during initialization.
/// It does not render any HTML directly; the parent <see cref="RzSteps"/> component is responsible for rendering based on the collected data.
/// </xmldoc>
public partial class RzStep : ComponentBase // Doesn't need RzComponent base as it renders nothing itself
{
    /// <summary> Gets or sets the main text label describing the step. Required. </summary>
    [Parameter, EditorRequired] public string Label { get; set; } = string.Empty;
    /// <summary> Gets or sets the current status of the step (Completed, Current, or Upcoming). Required. </summary>
    [Parameter, EditorRequired] public StepStatus Status { get; set; } = StepStatus.Upcoming;
    /// <summary> Gets or sets an optional ARIA label for the step, providing more context for accessibility. If not provided, the <see cref="Label"/> is typically used by the parent component. </summary>
    [Parameter] public string? AriaLabel { get; set; }
    /// <summary> Gets or sets optional caption text displayed below the step label (rendered by the parent <see cref="RzSteps"/> component). </summary>
    [Parameter] public string? Caption { get; set; }
    /// <summary> Gets or sets an optional Blazicon SVG icon to display within the step indicator instead of a number or checkmark. </summary>
    [Parameter] public SvgIcon? Icon { get; set; }
    /// <summary> Gets the parent <see cref="RzSteps"/> component via cascading parameter. </summary>
    [CascadingParameter] private RzSteps? ParentSteps { get; set; }
    /// <inheritdoc />
    protected override void OnInitialized()
    {
        base.OnInitialized();
        if (ParentSteps is not null)
        {
            // Create the StepData record from parameters and register it with the parent
            ParentSteps.RegisterStep(new StepData(Label, Status, AriaLabel, Caption, Icon));
        }
        else
        {
            // Ensure the component is used correctly within the hierarchy
            throw new InvalidOperationException($"{nameof(RzStep)} must be used as a child of an {nameof(RzSteps)} component.");
        }
    }
}
</file>

<file path="Components/Layout/RzStep/RzSteps.razor">
@namespace RizzyUI
@using Blazicons
@inherits RzComponent

<HtmlElement Element="ol" @attributes="AdditionalAttributes" class="@RootClass()" aria-label="@AriaLabel">
	@* Cascading self allows child RzStep components to register *@
	<CascadingValue Value="this" IsFixed="true">
		@ChildContent
	</CascadingValue>

	@* Render registered steps *@
	@for (var i = 0; i < Items.Count; i++)
	{
		var step = Items[i];
		var isFirst = i == 0;
		var prevStep = isFirst ? null : Items[i - 1];

		<li class="@GetStepItemCss(isFirst)"
		    aria-label="@(string.IsNullOrEmpty(step.AriaLabel) ? step.Label : step.AriaLabel)">

			@* Render connector before every step except the first *@
			@if (!isFirst && prevStep != null)
			{
				<span class="@GetConnectorCss(prevStep)" aria-hidden="true"></span>
			}

			<div class="@StepContentContainerClass">
				@if (step.Status == StepStatus.Completed)
				{
					<span class="@CircleCompletedBaseClass @GetCircleCompletedVariantCss()">
						@if (step.Icon is not null)
						{
							<Blazicon Svg="step.Icon" class="@CircleCompletedIconClass"/>
						}
						else
						{
							<svg class="@CircleCompletedIconClass" xmlns="http://www.w3.org/2000/svg" fill="none"
							     viewBox="0 0 24 24" stroke-width="3" stroke="currentColor" aria-hidden="true">
								<path stroke-linecap="round" stroke-linejoin="round" d="m4.5 12.75 6 6 9-13.5"/>
							</svg>
							<span class="@CircleCompletedSrTextClass">completed</span>
						}
					</span>
				}
				else @* Current or Upcoming *@
				{
					<span class="@CircleDefaultBaseClass @GetCircleDefaultVariantCss(step.Status)">
						@if (step.Icon is not null)
						{
							<Blazicon Svg="step.Icon"
							          class="size-4"/> @* Assuming size-4 for icons in default circles *@
						}
						else
						{
							@(i + 1) @* Display step number *@
						}
					</span>
				}
				@if (ShowLabels && !string.IsNullOrEmpty(step.Label))
				{
					<span class="@LabelBaseClass @GetLabelVariantCss(step.Status)">@step.Label</span>
				}
			</div>
			@* Optional: Re-introduce caption if needed, using Theme styles *@
			@* @if (!string.IsNullOrEmpty(step.Caption))
               {
                   <span class="@CaptionClass">@step.Caption</span>
               } *@
		</li>
	}
</HtmlElement>
</file>

<file path="Components/Layout/RzStep/RzSteps.razor.cs">
using Microsoft.AspNetCore.Components;
using Microsoft.Extensions.Options;
using RizzyUI.Extensions;
namespace RizzyUI;
/// <xmldoc>
///     A component that displays a sequence of steps, visually indicating progress through a process.
///     Child <see cref="RzStep" /> components automatically register their data.
///     Styling is determined by the active <see cref="RzTheme" />.
/// </xmldoc>
public partial class RzSteps : RzComponent
{
    /// <summary>
    ///     Gets the list of step data to display. Populated by child <see cref="RzStep" /> components or directly via
    ///     parameter.
    /// </summary>
    [Parameter]
    public List<StepData> Items { get; set; } = new();
    /// <summary> Gets or sets the orientation (Horizontal or Vertical). Defaults to Horizontal. </summary>
    [Parameter]
    public Orientation Orientation { get; set; } = Orientation.Horizontal;
    /// <summary> Gets or sets a value indicating whether step labels are shown. Defaults to true. </summary>
    [Parameter]
    public bool ShowLabels { get; set; } = true;
    /// <summary> Gets or sets the ARIA label for the steps container. Defaults to "steps progress". </summary>
    [Parameter]
    public string AriaLabel { get; set; } = "steps progress";
    /// <summary> Gets or sets the active color used for completed and current steps. Defaults to Primary. </summary>
    [Parameter]
    public StatusColor ActiveColor { get; set; } = StatusColor.Primary;
    /// <summary> The child content, expected to be <see cref="RzStep" /> components. </summary>
    [Parameter]
    public RenderFragment? ChildContent { get; set; }
    // --- Style Properties derived from Theme ---
    protected string StepItemBaseClass => Theme.RzSteps.StepItem;
    protected string StepContentContainerClass => Theme.RzSteps.StepContentContainer;
    protected string CircleCompletedBaseClass => Theme.RzSteps.CircleCompletedBase;
    protected string CircleCompletedIconClass => Theme.RzSteps.CircleCompletedIcon;
    protected string CircleCompletedSrTextClass => Theme.RzSteps.CircleCompletedSrText;
    protected string CircleDefaultBaseClass => Theme.RzSteps.CircleDefaultBase;
    protected string LabelBaseClass => Theme.RzSteps.LabelBase;
    protected string CaptionClass => Theme.RzSteps.Caption;
    /// <inheritdoc />
    protected override string? RootClass()
    {
        return TwMerge.Merge(AdditionalAttributes, Theme.RzSteps.Container,
            Theme.RzSteps.GetOrientationCss(Orientation));
    }
    /// <summary> Registers step data. Called by child <see cref="RzStep" /> components. </summary>
    internal void RegisterStep(StepData data)
    {
        // Avoid adding if already present during potential re-renders
        if (!Items.Exists(i => i.Label == data.Label)) // Simple check based on Label, adjust if needed
        {
            Items.Add(data);
            StateHasChanged(); // Update UI after adding
        }
    }
    // --- Methods to get dynamic CSS classes based on theme and state ---
    protected string GetStepItemCss(bool isFirst)
    {
        return $"{StepItemBaseClass} {Theme.RzSteps.GetStepItemWidthCss(isFirst)}";
    }
    protected string GetConnectorCss(StepData previousStep)
    {
        return Theme.RzSteps.GetConnectorCss(Orientation, previousStep.Status, ActiveColor);
    }
    protected string GetCircleCompletedVariantCss()
    {
        return Theme.RzSteps.GetCircleCompletedCss(ActiveColor);
    }
    protected string GetCircleDefaultVariantCss(StepStatus status)
    {
        return Theme.RzSteps.GetCircleDefaultCss(status, ActiveColor);
    }
    protected string GetLabelVariantCss(StepStatus status)
    {
        return Theme.RzSteps.GetLabelStatusCss(status, ActiveColor);
    }
    /// <inheritdoc />
    protected override void OnAfterRender(bool firstRender)
    {
        // Needed if steps are registered dynamically after initial render
        if (firstRender && ChildContent != null)
        {
            // Re-rendering might be necessary if children register late,
            // but often the initial render catches them.
            // Consider if StateHasChanged() is truly needed here.
        }
        base.OnAfterRender(firstRender);
    }
}
</file>

<file path="Components/Layout/RzStep/StepData.cs">
using Blazicons;
namespace RizzyUI;
/// <xmldoc>
/// Represents the data for a single step.
/// </xmldoc>
public record StepData
{
	/// <summary>
	/// Gets the label text for the step.
	/// </summary>
	public string Label { get; init; }
	/// <summary>
	/// Gets the status of the step (Completed, Current, or Upcoming).
	/// </summary>
	public StepStatus Status { get; init; }
	/// <summary>
	/// Gets the optional ARIA label for accessibility. If not provided, the Label is used.
	/// </summary>
	public string? AriaLabel { get; init; }
	/// <summary>
	/// Gets the optional caption text (a small muted text displayed under the step).
	/// </summary>
	public string? Caption { get; init; }
	/// <summary>
	/// Gets the optional icon to display instead of the step number.
	/// </summary>
	public SvgIcon? Icon { get; init; }
	/// <summary>
	/// Initializes a new instance of the <see cref="StepData"/> record.
	/// </summary>
	/// <param name="label">The label text for the step.</param>
	/// <param name="status">The status of the step.</param>
	/// <param name="ariaLabel">The optional ARIA label for accessibility.</param>
	/// <param name="caption">The optional caption displayed under the step.</param>
	/// <param name="icon">The optional icon to display in place of the step number.</param>
	public StepData(string label, StepStatus status, string? ariaLabel, string? caption, SvgIcon? icon)
	{
		Label = label;
		Status = status;
		AriaLabel = ariaLabel;
		Caption = caption;
		Icon = icon;
	}
}
</file>

<file path="Components/Layout/RzStep/StepStatus.cs">
namespace RizzyUI;
/// <xmldoc>
/// Specifies the status of a step in the Steps component.
/// </xmldoc>
public enum StepStatus
{
	/// <summary>Step is complete.</summary>
	Completed,
	/// <summary>Step is the current active step.</summary>
	Current,
	/// <summary>Step is upcoming.</summary>
	Upcoming
}
</file>

<file path="Components/Layout/RzStep/Styling/DefaultRzStepsStyles.cs">
namespace RizzyUI;
/// <summary> Provides default styles for RzSteps. </summary>
public class DefaultRzStepsStyles : RzStylesBase.RzStepsStylesBase 
{
    public DefaultRzStepsStyles(RzTheme theme) : base(theme)
    {
    }
    /// <inheritdoc />
    public override string Container => "flex gap-2"; // Base flex container
    /// <inheritdoc />
    public override string StepItem => "flex items-center relative text-sm"; // Styles for each <li>
    /// <inheritdoc />
    public override string ConnectorBase => ""; // Base connector, specific styles added by GetConnectorCss
    /// <inheritdoc />
    public override string StepContentContainer => "flex items-center gap-2"; // Container for circle + label
    /// <inheritdoc />
    public override string CircleCompletedBase =>
        "flex size-6 items-center justify-center rounded-full border"; // Base completed circle
    /// <inheritdoc />
    public override string CircleCompletedIcon => "size-4";
    /// <inheritdoc />
    public override string CircleCompletedSrText => "sr-only";
    /// <inheritdoc />
    public override string CircleDefaultBase =>
        "flex size-6 shrink-0 items-center justify-center rounded-full border"; // Base default circle
    /// <inheritdoc />
    public override string LabelBase => "hidden w-max sm:inline"; // Base label style (hidden on small screens)
    /// <inheritdoc />
    public override string Caption =>
        $"text-xs text-on-surface-muted"; // Style for caption
    /// <inheritdoc />
    public override string GetOrientationCss(Orientation orientation)
    {
        return orientation switch
        {
            Orientation.Horizontal => "w-full items-center", // Horizontal layout adjustments
            Orientation.Vertical => "w-min flex-col gap-14", // Vertical layout adjustments
            _ => GetOrientationCss(Orientation.Horizontal)
        };
    }
    /// <inheritdoc />
    public override string GetStepItemWidthCss(bool isFirst)
    {
        return isFirst ? "" : "w-full";
        // Make non-first items take full width in horizontal
    }
    /// <inheritdoc />
    public override string GetConnectorCss(Orientation orientation, StepStatus previousStatus, StatusColor activeColor)
    {
        var isActive = previousStatus == StepStatus.Completed || previousStatus == StepStatus.Current;
        var colorClass = isActive ? GetActiveBackgroundClass(activeColor) : "bg-outline";
        var positionAndSize = orientation == Orientation.Vertical
            ? "absolute bottom-8 left-3 h-10 w-0.5" // Vertical positioning
            : "h-0.5 flex-1 mr-1"; // Horizontal positioning
        return $"{positionAndSize} {colorClass}";
    }
    /// <inheritdoc />
    public override string GetCircleCompletedCss(StatusColor activeColor)
    {
        return
            $"{GetActiveBorderClass(activeColor)} {GetActiveBackgroundClass(activeColor)} {GetActiveTextClass(activeColor)}";
    }
    /// <inheritdoc />
    public override string GetCircleDefaultCss(StepStatus status, StatusColor activeColor)
    {
        return status switch
        {
            // Note: Focus ring style might need theme color variable for consistency
            StepStatus.Current =>
                $"border {GetActiveBorderClass(activeColor)} {GetActiveBackgroundClass(activeColor)} font-bold {GetActiveTextClass(activeColor)} outline outline-2 outline-offset-2 outline-{activeColor.ToString().ToLowerInvariant()} dark:outline-{activeColor.ToString().ToLowerInvariant()}",
            StepStatus.Upcoming => "border border-outline bg-surface-alt font-medium text-on-surface",
            _ => GetCircleDefaultCss(StepStatus.Upcoming, activeColor) // Default to upcoming style
        };
    }
    /// <inheritdoc />
    public override string GetLabelStatusCss(StepStatus status, StatusColor activeColor)
    {
        return status switch
        {
            // Note: Dark mode text color might need specific theme variables if different from light
            StepStatus.Completed =>
                $"text-{activeColor.ToString().ToLowerInvariant()} dark:text-{activeColor.ToString().ToLowerInvariant()}",
            StepStatus.Current =>
                $"font-bold text-{activeColor.ToString().ToLowerInvariant()} dark:text-{activeColor.ToString().ToLowerInvariant()}",
            StepStatus.Upcoming => "text-on-surface",
            _ => GetLabelStatusCss(StepStatus.Upcoming, activeColor)
        };
    }
    // Helper methods to get active color classes based on StatusColor
    private string GetActiveBackgroundClass(StatusColor color)
    {
        return color switch
        {
            StatusColor.Primary => "bg-primary",
            StatusColor.Secondary => "bg-secondary",
            StatusColor.Success => $"bg-success dark:bg-success",
            StatusColor.Info => $"bg-info dark:bg-info",
            StatusColor.Warning => $"bg-warning dark:bg-warning",
            StatusColor.Danger => $"bg-danger dark:bg-danger",
            _ => GetActiveBackgroundClass(StatusColor.Primary)
        };
    }
    private string GetActiveBorderClass(StatusColor color)
    {
        return color switch
        {
            StatusColor.Primary => "border-primary",
            StatusColor.Secondary => "border-secondary",
            StatusColor.Success =>
                $"border-success dark:border-success",
            StatusColor.Info => $"border-info dark:border-info",
            StatusColor.Warning =>
                $"border-warning dark:border-warning",
            StatusColor.Danger =>
                $"border-danger dark:border-danger",
            _ => GetActiveBorderClass(StatusColor.Primary)
        };
    }
    private string GetActiveTextClass(StatusColor color)
    {
        return color switch
        {
            StatusColor.Primary => "text-on-primary",
            StatusColor.Secondary => "text-on-secondary",
            StatusColor.Success =>
                $"text-on-success dark:text-on-success", // Assume dark OnSuccess exists or is same
            StatusColor.Info => $"text-on-info dark:text-on-info",
            StatusColor.Warning =>
                $"text-on-warning dark:text-on-warning",
            StatusColor.Danger =>
                $"text-on-danger dark:text-on-danger",
            _ => GetActiveTextClass(StatusColor.Primary)
        };
    }
}
</file>

<file path="Components/Navigation/RzBreadcrumb/RzBreadcrumb.razor">
@namespace RizzyUI
@using Blazicons
@inherits RzComponent

<CascadingValue Value="this">
	<HtmlElement Element="nav" @attributes="@AdditionalAttributes" class="@RootClass()" aria-label="breadcrumb">
		@* Allow child RzBreadcrumbItems to register themselves *@
		@ChildContent
		<ol class="@ListClass">
			@foreach (var item in Items)
			{
				<li class="@ItemClass">
					@* Render the item's content which handles link vs span *@
					@item.Content
					@if (item != Items.Last())
					{
						@* Use the Separator property for the Blazicon *@
						<Blazicon Svg="Separator"/>
					}
				</li>
			}
		</ol>
	</HtmlElement>
</CascadingValue>
</file>

<file path="Components/Navigation/RzBreadcrumb/RzBreadcrumb.razor.cs">
using Blazicons;
using Microsoft.AspNetCore.Components;
using Microsoft.Extensions.Options;
using RizzyUI.Extensions;
namespace RizzyUI;
/// <xmldoc>
///     Represents a breadcrumb navigation component that displays a list of navigation links.
///     Styling is determined by the active <see cref="RzTheme" />. Child <see cref="RzBreadcrumbItem" />
///     components register themselves with this parent.
/// </xmldoc>
public partial class RzBreadcrumb : RzComponent
{
    /// <summary> Gets the list of breadcrumb items registered with this breadcrumb component. </summary>
    protected readonly List<RzBreadcrumbItem> Items = new();
    /// <summary> Specifies the Blazicon SVG icon to use as a separator between items. Defaults to ChevronRight. </summary>
    [Parameter]
    public SvgIcon Separator { get; set; } = MdiIcon.ChevronRight;
    /// <summary> Child content for the breadcrumb component, should contain <see cref="RzBreadcrumbItem" /> components. </summary>
    [Parameter]
    public RenderFragment? ChildContent { get; set; }
    // --- Style Properties derived from Theme ---
    /// <summary> Gets the computed CSS classes for the wrapping ordered list (ol) element. </summary>
    protected string ListClass => Theme.RzBreadcrumb.List;
    /// <summary> Gets the computed CSS classes for the individual list item (li) element. </summary>
    protected string ItemClass => Theme.RzBreadcrumbItem.ListItem; // Get from Item styles
    /// <inheritdoc />
    protected override string? RootClass()
    {
        return TwMerge.Merge(AdditionalAttributes, Theme.RzBreadcrumb.Container);
    }
    /// <summary>
    ///     Registers a breadcrumb item with this breadcrumb component. Called by child items.
    /// </summary>
    /// <param name="item">The breadcrumb item to register.</param>
    internal void RegisterItem(RzBreadcrumbItem item)
    {
        if (!Items.Contains(item)) // Prevent duplicate registration
        {
            Items.Add(item);
            InvokeAsync(StateHasChanged); // Update UI when items are added
        }
    }
}
</file>

<file path="Components/Navigation/RzBreadcrumb/RzBreadcrumbItem.cs">
using Blazicons;
using Microsoft.AspNetCore.Components;
using Microsoft.AspNetCore.Components.Rendering;
namespace RizzyUI;
/// <xmldoc>
///     Represents an individual item within a <see cref="RzBreadcrumb" /> navigation component.
///     It renders either a link or a span depending on its `IsActive` state.
///     Styling is determined by the active <see cref="RzTheme" />.
/// </xmldoc>
public class RzBreadcrumbItem : RzComponent // Inherit RzComponent for potential future use, though no root element here
{
    /// <summary> Gets or sets the parent <see cref="RzBreadcrumb" /> component. </summary>
    [CascadingParameter]
    private RzBreadcrumb? ParentBreadcrumb { get; set; }
    /// <summary> The URL that the breadcrumb item links to (ignored if IsActive is true). Defaults to "#". </summary>
    [Parameter]
    public string Href { get; set; } = "#";
    /// <summary> The display text of the breadcrumb item. Required. </summary>
    [Parameter]
    [EditorRequired]
    public string Label { get; set; } = string.Empty;
    /// <summary>
    ///     Indicates whether this breadcrumb item represents the current page. If true, renders as a span; otherwise,
    ///     renders as a link.
    /// </summary>
    [Parameter]
    public bool IsActive { get; set; }
    /// <summary> An optional Blazicon SVG icon to display instead of the text label. </summary>
    [Parameter]
    public SvgIcon? Icon { get; set; }
    /// <summary>
    ///     Gets the RenderFragment content to be rendered by the parent <see cref="RzBreadcrumb" />.
    ///     This dynamically creates either an anchor or a span based on the IsActive state.
    /// </summary>
    internal RenderFragment Content => builder =>
    {
        var styles = Theme.RzBreadcrumbItem; // Access styles via Theme
        if (!IsActive)
        {
            builder.OpenElement(0, "a");
            builder.AddAttribute(1, "href", Href);
            builder.AddMultipleAttributes(2, AdditionalAttributes); // Apply extra attributes to the link
            builder.AddAttribute(3, "class", styles.Link); // Apply link styles
            RenderInnerContent(builder, styles);
            builder.CloseElement(); // a
        }
        else
        {
            builder.OpenElement(0, "span");
            builder.AddAttribute(1, "class", styles.ActiveSpan); // Apply active span styles
            builder.AddAttribute(2, "aria-current", "page");
            builder.AddMultipleAttributes(3, AdditionalAttributes); // Apply extra attributes to the span
            RenderInnerContent(builder, styles);
            builder.CloseElement(); // span
        }
    };
    /// <inheritdoc />
    protected override void OnInitialized()
    {
        base.OnInitialized();
        if (ParentBreadcrumb == null)
            throw new InvalidOperationException(
                $"{nameof(RzBreadcrumbItem)} must be used within an {nameof(RzBreadcrumb)} component.");
        ParentBreadcrumb.RegisterItem(this);
    }
    /// <summary>
    ///     Helper method to render the icon or label content.
    /// </summary>
    private void RenderInnerContent(RenderTreeBuilder builder, RzStylesBase.RzBreadcrumbItemStylesBase styles)
    {
        if (Icon != null)
        {
            builder.OpenElement(4, "span");
            builder.AddAttribute(5, "class", styles.IconSpan); // Apply icon span styles
            builder.OpenComponent<Blazicon>(6);
            builder.AddAttribute(7, "Svg", Icon);
            builder.CloseComponent(); // Blazicon
            builder.CloseElement(); // span
        }
        else
        {
            builder.AddContent(8, Label);
        }
    }
}
</file>

<file path="Components/Navigation/RzBreadcrumb/Styling/DefaultRzBreadcrumbStyles.cs">
namespace RizzyUI;
/// <summary>
///     Provides the default styles for the RzBreadcrumb component.
/// </summary>
public class DefaultRzBreadcrumbStyles : RzStylesBase.RzBreadcrumbStylesBase
{
    public DefaultRzBreadcrumbStyles(RzTheme theme) : base(theme)
    {
    }
    /// <inheritdoc />
    public override string Container => "text-sm font-medium text-on-primary mb-4"; // Adjusted color
    /// <inheritdoc />
    public override string List => "flex flex-wrap items-center gap-1";
}
/// <summary>
///     Provides the default styles for the RzBreadcrumbItem component.
/// </summary>
public class DefaultRzBreadcrumbItemStyles : RzStylesBase.RzBreadcrumbItemStylesBase
{
    public DefaultRzBreadcrumbItemStyles(RzTheme theme) : base(theme)
    {
    }
    /// <inheritdoc />
    public override string ListItem => "flex items-center gap-1 text-on-surface";
    /// <inheritdoc />
    public override string Link =>
        $"text-on-surface hover:text-on-surface-strong dark:hover:text-on-surface-strong";
    /// <inheritdoc />
    public override string ActiveSpan => "font-bold text-on-surface";
    /// <inheritdoc />
    public override string IconSpan => "text-xl";
}
</file>

<file path="Components/Navigation/RzDropdown/RzDropdown.razor">
@namespace RizzyUI
@inherits RzComponent

<HtmlElement Element="div" @attributes="@AdditionalAttributes" class="@ContainerClass">
	<div x-data="rzDropdown" data-anchor="@Anchor.ToString().ToLowerInvariant()" class="@RelativeWrapperClass">
		<div
			class="@TriggerWrapperClass"
			aria-haspopup="true"
			x-bind:aria-expanded="dropdownOpen"
			x-on:click="toggleDropdown"
			x-on:keydown.space.prevent="openWithKeyboard"
			x-on:keydown.enter.prevent="openWithKeyboard"
			x-on:keydown.down.prevent="openWithKeyboard"
			x-on:keydown.esc.window="closeDropdown">
			<div>@Trigger</div>
		</div>
		<div x-cloak
		     x-show="dropdownOpen"
		     x-transition:enter="transition ease-out duration-100"
		     x-transition:enter-start="opacity-0 scale-90"
		     x-transition:enter-end="opacity-100 scale-100"
		     x-transition:leave="transition ease-in duration-75"
		     x-transition:leave-start="opacity-100 scale-100"
		     x-transition:leave-end="opacity-0 scale-90"
		     x-on:click.outside="closeDropdown"
		     x-trap="openedWithKeyboard"
		     x-on:keydown.down.prevent="focusWrapNext" x-on:keydown.up.prevent="focusWrapPrevious"
		     role="menu"
		     aria-labelledby="rz-dropdown-trigger" @* Consider making trigger id dynamic if needed *@
		     class="@MenuContainerClass"
		     x-bind:class="anchorCss">
			<div class="@MenuInnerContainerClass">
				@Content
			</div>
		</div>
	</div>
</HtmlElement>
</file>

<file path="Components/Navigation/RzDropdown/RzDropdown.razor.cs">
using Microsoft.AspNetCore.Components;
using Microsoft.Extensions.Options;
using RizzyUI.Extensions;
namespace RizzyUI;
/// <xmldoc>
///     Represents a dropdown component with a customizable trigger and content area.
///     It manages its open/close state and keyboard navigation via Alpine.js.
///     Styling is determined by the active <see cref="RzTheme" />.
/// </xmldoc>
public partial class RzDropdown : RzComponent
{
    /// <summary> Gets or sets the render fragment that defines the dropdown trigger. Required. </summary>
    [Parameter]
    [EditorRequired]
    public RenderFragment? Trigger { get; set; }
    /// <summary> Gets or sets the render fragment that defines the dropdown content. Required. </summary>
    [Parameter]
    [EditorRequired]
    public RenderFragment? Content { get; set; }
    /// <summary> Gets or sets the point on the trigger where the dropdown menu attaches. Defaults to BottomCenter. </summary>
    [Parameter]
    public AnchorPoint Anchor { get; set; } = AnchorPoint.BottomCenter;
    // --- Style Properties derived from Theme ---
    /// <summary> Gets the computed CSS classes for the root container. </summary>
    protected string ContainerClass => Theme.RzDropdown.Container;
    /// <summary> Gets the computed CSS classes for the relative wrapper div. </summary>
    protected string RelativeWrapperClass => Theme.RzDropdown.RelativeWrapper;
    /// <summary> Gets the computed CSS classes for the trigger wrapper div. </summary>
    protected string TriggerWrapperClass => Theme.RzDropdown.TriggerWrapper;
    /// <summary> Gets the computed CSS classes for the floating menu container div. </summary>
    protected string MenuContainerClass => Theme.RzDropdown.MenuContainer;
    /// <summary> Gets the computed CSS classes for the inner div within the menu container. </summary>
    protected string MenuInnerContainerClass => Theme.RzDropdown.MenuInnerContainer;
    /// <inheritdoc />
    protected override string? RootClass()
    {
        return TwMerge.Merge(AdditionalAttributes, ContainerClass);
        // Apply base style from theme
    }
}
</file>

<file path="Components/Navigation/RzDropdown/RzDropdownMenuItem.razor">
@namespace RizzyUI
@using Blazicons
@inherits RzComponent

<a role="menuitem" @attributes="AdditionalAttributes" class="@RootClass()" x-on:click="closeDropdown" tabindex="0">
	@if (Icon != null)
	{
		<span class="@IconSpanClass"><Blazicon Svg="@Icon" class="@IconClass"/></span>
	}
	<span class="@TitleSpanClass">@Title</span>
	@if (Count != null)
	{
		<div class="@CountDivClass">
			@Count
		</div>
	}
</a>
</file>

<file path="Components/Navigation/RzDropdown/RzDropdownMenuItem.razor.cs">
using Blazicons;
using Microsoft.AspNetCore.Components;
using Microsoft.Extensions.Options;
using RizzyUI.Extensions;
namespace RizzyUI;
/// <xmldoc>
///     Represents a clickable menu item within an <see cref="RzDropdownSection" />.
///     Clicking this item typically closes the parent dropdown via Alpine.js.
///     Styling is determined by the active <see cref="RzTheme" />.
/// </xmldoc>
public partial class RzDropdownMenuItem : RzComponent
{
    /// <summary> Gets or sets the optional Blazicon SVG icon to display before the title. </summary>
    [Parameter]
    public SvgIcon? Icon { get; set; }
    /// <summary> Gets or sets the title text of the menu item. Required. </summary>
    [Parameter]
    [EditorRequired]
    public string Title { get; set; } = "Untitled";
    /// <summary> Gets or sets an optional numeric count to display as a badge alongside the title. </summary>
    [Parameter]
    public int? Count { get; set; }
    // --- Style Properties derived from Theme ---
    /// <summary> Gets the computed CSS classes for the icon span. </summary>
    protected string IconSpanClass => Theme.RzDropdownMenuItem.IconSpan;
    /// <summary> Gets the computed CSS classes for the Blazicon component. </summary>
    protected string IconClass => Theme.RzDropdownMenuItem.Icon;
    /// <summary> Gets the computed CSS classes for the title span. </summary>
    protected string TitleSpanClass => Theme.RzDropdownMenuItem.TitleSpan;
    /// <summary> Gets the computed CSS classes for the count badge div. </summary>
    protected string CountDivClass => Theme.RzDropdownMenuItem.CountDiv;
    /// <inheritdoc />
    protected override string? RootClass()
    {
        return TwMerge.Merge(AdditionalAttributes, Theme.RzDropdownMenuItem.MenuItem);
    }
}
</file>

<file path="Components/Navigation/RzDropdown/RzDropdownSection.razor">
@namespace RizzyUI
@inherits RzComponent

<div @attributes="AdditionalAttributes" class="@RootClass()">
	@ChildContent
</div>
</file>

<file path="Components/Navigation/RzDropdown/RzDropdownSection.razor.cs">
using Microsoft.AspNetCore.Components;
using Microsoft.Extensions.Options;
using RizzyUI.Extensions;
namespace RizzyUI;
/// <xmldoc>
///     A container component used to group related <see cref="RzDropdownMenuItem" /> components within an
///     <see cref="RzDropdown" />.
///     Styling is determined by the active <see cref="RzTheme" />.
/// </xmldoc>
public partial class RzDropdownSection : RzComponent
{
    /// <summary> Gets or sets the child content for this dropdown section, typically <see cref="RzDropdownMenuItem" />s. </summary>
    [Parameter]
    public RenderFragment? ChildContent { get; set; }
    /// <inheritdoc />
    protected override string? RootClass()
    {
        return TwMerge.Merge(AdditionalAttributes, Theme.RzDropdownSection.Section);
    }
}
</file>

<file path="Components/Navigation/RzDropdown/Styling/DefaultRzDropdownStyles.cs">
namespace RizzyUI;
/// <summary> Provides default styles for RzDropdown. </summary>
public class DefaultRzDropdownStyles : RzStylesBase.RzDropdownStylesBase
{
    public DefaultRzDropdownStyles(RzTheme theme) : base(theme)
    {
    }
    /// <inheritdoc />
    public override string Container => ""; // Root container has no specific style by default
    /// <inheritdoc />
    public override string RelativeWrapper => "relative inline-block";
    /// <inheritdoc />
    public override string TriggerWrapper => "inline-flex items-center justify-center space-x-2";
    /// <inheritdoc />
    public override string MenuContainer => "z-60 absolute w-64 rounded-theme shadow-xl dark:shadow-gray-900";
    /// <inheritdoc />
    public override string MenuInnerContainer =>
        $"border border-outline divide-y divide-outline rounded-theme bg-surface ring-black dark:divide-outline"; // Simplified ring
}
/// <summary> Provides default styles for RzDropdownSection. </summary>
public class DefaultRzDropdownSectionStyles : RzStylesBase.RzDropdownSectionStylesBase
{
    public DefaultRzDropdownSectionStyles(RzTheme theme) : base(theme)
    {
    }
    /// <inheritdoc />
    public override string Section => "space-y-1 p-2.5";
}
/// <summary> Provides default styles for RzDropdownMenuItem. </summary>
public class DefaultRzDropdownMenuItemStyles : RzStylesBase.RzDropdownMenuItemStylesBase
{
    public DefaultRzDropdownMenuItemStyles(RzTheme theme) : base(theme)
    {
    }
    /// <inheritdoc />
    public override string MenuItem =>
        $"group flex items-center justify-between space-x-2 rounded-theme cursor-pointer border border-transparent px-2.5 py-2 text-sm font-medium text-on-surface hover:bg-primary/10 hover:text-primary focus-visible:bg-primary/10 focus-visible:text-on-surface-strong focus-visible:outline-hidden dark:hover:bg-surface-alt dark:focus-visible:bg-primary/10 dark:focus-visible:text-on-surface-strong";
    /// <inheritdoc />
    public override string IconSpan => "text-xl";
    /// <inheritdoc />
    public override string Icon => "size-5 flex-none opacity-25 group-hover:opacity-50";
    /// <inheritdoc />
    public override string TitleSpan => "grow";
    /// <inheritdoc />
    public override string CountDiv =>
        "inline-flex rounded-full border px-1.5 py-0.5 text-xs font-semibold border-outline"; // Added border color
}
</file>

<file path="Components/Navigation/RzLink/RzLink.razor">
@namespace RizzyUI
@inherits RzComponent

<HtmlElement Element="a" @attributes="CombinedAttributes" class="@RootClass()" href="@Href">
	@ChildContent
</HtmlElement>
</file>

<file path="Components/Navigation/RzLink/RzLink.razor.cs">
using Microsoft.AspNetCore.Components;
using Microsoft.Extensions.Options;
using RizzyUI.Extensions;
// For Dictionary
namespace RizzyUI;
/// <xmldoc>
///     Represents a styled link component that renders an anchor (<c>a</c>) element.
///     Styling is determined by the active <see cref="RzTheme" />.
/// </xmldoc>
public partial class RzLink : RzComponent
{
    /// <summary> Gets or sets the URL to which the link navigates. If null or empty, defaults to "#". </summary>
    [Parameter]
    public string? Href { get; set; }
    /// <summary> Gets or sets whether the link should be underlined on hover and focus. Defaults to true. </summary>
    [Parameter]
    public bool Underline { get; set; } = true;
    /// <summary> Gets or sets the content to be displayed inside the link (e.g., text or icons). </summary>
    [Parameter]
    public RenderFragment? ChildContent { get; set; }
    /// <summary> Combines AdditionalAttributes with the href attribute. </summary>
    protected Dictionary<string, object> CombinedAttributes
    {
        get
        {
            var attributes = AdditionalAttributes ?? new Dictionary<string, object>();
            // Ensure Href is added or updated correctly
            attributes["href"] = string.IsNullOrEmpty(Href) ? "#" : Href;
            return attributes;
        }
    }
    /// <inheritdoc />
    protected override string? RootClass()
    {
        var styles = Theme.RzLink;
        return TwMerge.Merge(AdditionalAttributes,
            styles.Link,
            Underline ? styles.UnderlineEnabled : "");
    }
}
</file>

<file path="Components/Navigation/RzLink/Styling/DefaultRzLinkStyles.cs">
namespace RizzyUI;
/// <summary>
///     Provides the default styles for the RzLink component.
/// </summary>
public class DefaultRzLinkStyles : RzStylesBase.RzLinkStylesBase
{
    public DefaultRzLinkStyles(RzTheme theme) : base(theme)
    {
    }
    /// <inheritdoc />
    // Use theme primary color for link, adjust dark mode as needed by theme
    public override string Link => "font-medium text-primary underline-offset-2 focus:outline-hidden dark:text-primary";
    /// <inheritdoc />
    public override string UnderlineEnabled => "hover:underline focus:underline";
}
</file>

<file path="Components/Navigation/RzNavbar/RzNavbar.razor">
@namespace RizzyUI
@using Blazicons
@inherits RzComponent

<HtmlElement Element="@Element" @attributes="@AdditionalAttributes" class="@RootClass()">
    <!-- Navbar Toggle Button (conditionally rendered based on screen size by CSS) -->
    <button type="button" class="@ToggleButtonClass" x-on:click="toggleSidebar">
        <div class="@ToggleButtonIconContainerClass">
            <Blazicon Svg="MdiIcon.Menu"/>
        </div>
        <span class="@ToggleButtonSrTextClass">@ScreenReaderText</span>
    </button>

    <div class="@ContentContainerClass">
        @ChildContent
    </div>
</HtmlElement>
</file>

<file path="Components/Navigation/RzNavbar/RzNavbar.razor.cs">
using Microsoft.AspNetCore.Components;
using Microsoft.Extensions.Options;
using RizzyUI.Extensions;
namespace RizzyUI;
/// <xmldoc>
///     Renders a fixed top navigation bar component. Includes a responsive toggle button for mobile sidebars.
///     Styling is determined by the active <see cref="RzTheme" />. Typically used within an <see cref="RzSidebar" />
///     layout.
/// </xmldoc>
public partial class RzNavbar : RzComponent
{
    /// <summary> The content to be displayed inside the navbar (e.g., brand logo, navigation links, user controls). </summary>
    [Parameter]
    public RenderFragment? ChildContent { get; set; }
    /// <summary> Screen reader text for the mobile toggle button. Defaults to "Toggle side navigation". </summary>
    [Parameter]
    public string ScreenReaderText { get; set; } = "Toggle side navigation";
    // --- Style Properties derived from Theme ---
    /// <summary> Gets the computed CSS classes for the mobile toggle button. </summary>
    protected string ToggleButtonClass => Theme.RzNavbar.ToggleButton;
    /// <summary> Gets the computed CSS classes for the icon container inside the toggle button. </summary>
    protected string ToggleButtonIconContainerClass => Theme.RzNavbar.ToggleButtonIconContainer;
    /// <summary> Gets the computed CSS classes for the screen-reader text span inside the toggle button. </summary>
    protected string ToggleButtonSrTextClass => Theme.RzNavbar.ToggleButtonSrText;
    /// <summary> Gets the computed CSS classes for the main content container within the navbar. </summary>
    protected string ContentContainerClass => Theme.RzNavbar.ContentContainer;
    /// <inheritdoc />
    protected override void OnInitialized()
    {
        base.OnInitialized();
        Element = "nav"; // Set the root element tag
    }
    /// <inheritdoc />
    protected override string? RootClass()
    {
        return TwMerge.Merge(AdditionalAttributes, Theme.RzNavbar.Navbar);
    }
}
</file>

<file path="Components/Navigation/RzNavbar/Styling/DefaultRzNavbarStyles.cs">
namespace RizzyUI;
/// <summary>
///     Provides the default styles for the RzNavbar component.
/// </summary>
public class DefaultRzNavbarStyles : RzStylesBase.RzNavbarStylesBase
{
    public DefaultRzNavbarStyles(RzTheme theme) : base(theme)
    {
    }
    /// <inheritdoc />
    public override string Navbar =>
        "fixed top-0 z-50 h-16 w-screen items-center justify-between border-outline bg-surface-alt/75 px-4 py-2 backdrop-blur-xl flex border-b";
    /// <inheritdoc />
    public override string ToggleButton => "md:hidden inline-block text-on-surface";
    /// <inheritdoc />
    public override string ToggleButtonIconContainer => "text-xl";
    /// <inheritdoc />
    public override string ToggleButtonSrText => "sr-only";
    /// <inheritdoc />
    public override string ContentContainer => "h-full w-full flex items-center justify-between";
}
</file>

<file path="Components/Navigation/RzSidebar/RzSidebar.razor">
@namespace RizzyUI
@inherits RzComponent

<div x-data="rzSidebar" class="@ContainerClass"> @* Use ContainerClass if needed, else remove class *@
    @if (NavbarContent != null)
    {
        @NavbarContent
    }

    <div class="@LayoutContainerClass @LayoutContainerTopClass">
        <div class="@LayoutInnerContainerClass">
            <!-- Skip Link -->
            <a class="@SkipLinkClass" href="#@MainContentId">skip to the main content</a>

            <!-- Mobile Overlay -->
            <div x-cloak x-show="showSidebar" class="@OverlayClass" aria-hidden="true" x-on:click="hideSidebar"
                 x-transition.opacity></div>

            <!-- Sidebar -->
            <aside x-cloak class="@SidebarClass @SidebarTopClass" :class="getSidebarTranslation"
                   aria-label="sidebar navigation">
                @MenuContent
            </aside>

            <!-- Main Content -->
            <section id="@MainContentId" class="@MainContentContainerClass">
                <div class="@MainContentPaddingClass">
                    @MainContent
                </div>
            </section>
        </div>
    </div>

    @if (NavbarContent == null)
    {
        <!-- Floating Toggle Button (only if no navbar) -->
        <button class="@FloatingToggleButtonClass" x-on:click="toggleSidebar">
            @* Alpine handles showing/hiding based on showSidebar *@
            <svg x-show="showSidebar" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16" fill="currentColor"
                 class="size-5" aria-hidden="true">
                <path
                    d="M2.146 2.854a.5.5 0 1 1 .708-.708L8 7.293l5.146-5.147a.5.5 0 0 1 .708.708L8.707 8l5.147 5.146a.5.5 0 0 1-.708.708L8 8.707l-5.146 5.147a.5.5 0 0 1-.708-.708L7.293 8z"/>
            </svg>
            <svg x-show="isSidebarHidden" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16" fill="currentColor"
                 class="size-5" aria-hidden="true">
                <path
                    d="M0 3a2 2 0 0 1 2-2h12a2 2 0 0 1 2 2v10a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2zm5-1v12h9a1 1 0 0 0 1-1V3a1 1 0 0 0-1-1zM4 2H2a1 1 0 0 0-1 1v10a1 1 0 0 0 1 1h2z"/>
            </svg>
            <span class="sr-only">sidebar toggle</span>
        </button>
    }
</div>
</file>

<file path="Components/Navigation/RzSidebar/RzSidebar.razor.cs">
using Microsoft.AspNetCore.Components;
using RizzyUI.Extensions;
using Microsoft.Extensions.Options;
namespace RizzyUI;
/// <xmldoc>
///     Represents a responsive layout component with a collapsible sidebar and main content area.
///     Includes a toggle mechanism (via Alpine.js) for small screens and accessibility features.
///     Styling is determined by the active <see cref="RzTheme" />.
/// </xmldoc>
public partial class RzSidebar : RzComponent
{
    /// <summary> Gets or sets the identifier for the main content area, used for the skip link. Defaults to "main-content". </summary>
    [Parameter]
    public string MainContentId { get; set; } = "main-content";
    /// <summary>
    ///     Optional content for the <see cref="RzNavbar" /> component, rendered above the sidebar/main content. If set,
    ///     adjusts layout spacing.
    /// </summary>
    [Parameter]
    public RenderFragment? NavbarContent { get; set; }
    /// <summary> Content to be rendered inside the sidebar navigation area (typically <see cref="RzSidebarLinks" />). </summary>
    [Parameter]
    public RenderFragment? MenuContent { get; set; }
    /// <summary> The main content to be displayed in the primary content area. </summary>
    [Parameter]
    public RenderFragment? MainContent { get; set; }
    /// <summary> Determines if a Navbar is present. </summary>
    protected bool HasNavbar => NavbarContent != null;
    // --- Style Properties derived from Theme ---
    /// <summary> Gets computed CSS classes for the main container div (x-data). </summary>
    protected string ContainerClass => Theme.RzSidebar.Container;
    /// <summary> Gets computed CSS classes for the layout container div. </summary>
    protected string LayoutContainerClass => Theme.RzSidebar.LayoutContainer;
    /// <summary> Gets computed CSS classes for the layout container's top margin. </summary>
    protected string LayoutContainerTopClass => Theme.RzSidebar.GetLayoutContainerTopCss(HasNavbar);
    /// <summary> Gets computed CSS classes for the inner layout container. </summary>
    protected string LayoutInnerContainerClass => "relative flex w-full flex-col md:flex-row"; // Added this wrapper
    /// <summary> Gets computed CSS classes for the skip link. </summary>
    protected string SkipLinkClass => Theme.RzSidebar.SkipLink;
    /// <summary> Gets computed CSS classes for the mobile overlay. </summary>
    protected string OverlayClass => Theme.RzSidebar.Overlay;
    /// <summary> Gets computed CSS classes for the sidebar aside element. </summary>
    protected string SidebarClass => Theme.RzSidebar.Sidebar;
    /// <summary> Gets computed CSS classes for the sidebar's top position. </summary>
    protected string SidebarTopClass => Theme.RzSidebar.GetSidebarTopCss(HasNavbar);
    /// <summary> Gets computed CSS classes for the main content section. </summary>
    protected string MainContentContainerClass => Theme.RzSidebar.MainContentContainer;
    /// <summary> Gets computed CSS classes for the main content padding div. </summary>
    protected string MainContentPaddingClass => Theme.RzSidebar.MainContentPadding;
    /// <summary> Gets computed CSS classes for the floating toggle button. </summary>
    protected string FloatingToggleButtonClass => Theme.RzSidebar.FloatingToggleButton;
    protected override string? RootClass() => TwMerge.Merge(AdditionalAttributes, ContainerClass);
}
</file>

<file path="Components/Navigation/RzSidebar/RzSidebarLinkItem.razor">
@namespace RizzyUI
@using Blazicons
@inherits RzComponent

@* Determine root element and classes based on state *@
@if (Collapsible)
{
    <li class="@CollapsibleListItemClass">
        <div data-expanded="@((!Collapsed).ToString().ToLowerInvariant())" x-data="rzSidebarLinkItem"
             data-chevron-expanded-class="@ChevronExpandedClass"
             data-chevron-collapsed-class="@ChevronCollapsedClass"
             class="@CollapsibleInnerDivClass">
            <button type="button" x-on:click="toggleExpanded" id="@ButtonId" aria-controls="@CollapseId"
                    x-bind:aria-expanded="isExpanded" class="@CollapsibleButtonClass">
                @if (Icon != null)
                {
                    <div class="@CollapsibleButtonIconContainerClass" aria-hidden="true">
                        <Blazicon Svg="@Icon"/>
                    </div>
                }
                <span class="@CollapsibleButtonTitleClass">@Title</span>
                @if (TrailerContent != null)
                {
                    <div class="@CollapsibleButtonTrailerClass">@TrailerContent</div>
                }
                <svg xmlns="http://www.w3.org/2000/svg" fill="currentColor" class="@CollapsibleButtonChevronClass"
                     x-bind:class="getExpandedClass" aria-hidden="true">
                    <path fill-rule="evenodd"
                          d="M5.22 8.22a.75.75 0 0 1 1.06 0L10 11.94l3.72-3.72a.75.75 0 1 1 1.06 1.06l-4.25 4.25a.75.75 0 0 1-1.06 0L5.22 9.28a.75.75 0 0 1 0-1.06Z"
                          clip-rule="evenodd"/>
                </svg>
            </button>
            <ul x-cloak x-collapse x-show="isExpanded" aria-labelledby="@ButtonId" id="@CollapseId"
                class="@CollapsibleNestedListClass">
                <CascadingValue Value="this" IsFixed="true">
                    @ChildContent
                </CascadingValue>
            </ul>
        </div>
    </li>
}
else if (Parent is { HasChildren: true, Collapsible: false }) // Sub-item under non-collapsible parent
{
    <li class="@SubListItemClass">
        @if (HasChildren) // Sub-item that itself has children (render as div)
        {
            <div @attributes="AdditionalAttributes" class="@SubLinkOrDivClass">
                @if (Icon != null)
                {
                    <div class="@ItemIconContainerClass" aria-hidden="true">
                        <Blazicon Svg="@Icon"/>
                    </div>
                }
                <span class="@ItemTitleClass">@Title</span>
                @if (TrailerContent != null)
                {
                    <div class="@ItemTrailerClass">@TrailerContent</div>
                }
            </div>
        }
        else // Leaf sub-item (render as link)
        {
            <a @attributes="AdditionalAttributes" href="@Href" target="@Target" class="@SubLinkOrDivClass">
                @if (Icon != null)
                {
                    <div class="@ItemIconContainerClass" aria-hidden="true">
                        <Blazicon Svg="@Icon"/>
                    </div>
                }
                <span class="@ItemTitleClass">@Title</span>
                @if (TrailerContent != null)
                {
                    <div class="@ItemTrailerClass">@TrailerContent</div>
                }
            </a>
        }
        @if (ChildContent != null)
        {
            <ul class="@NonCollapsibleNestedListClass">
                <CascadingValue Value="this" IsFixed="true">
                    @ChildContent
                </CascadingValue>
            </ul>
        }
    </li>
}
else // Top-level non-collapsible item
{
    <li class="@TopLevelListItemClass">
        @if (HasChildren) // Top-level item with children (render as div)
        {
            <div @attributes="AdditionalAttributes" class="@TopLevelNonCollapsibleDivClass">
                @if (Icon != null)
                {
                    <div class="@ItemIconContainerClass" aria-hidden="true">
                        <Blazicon Svg="@Icon"/>
                    </div>
                }
                <span class="@ItemTitleClass">@Title</span>
                @if (TrailerContent != null)
                {
                    <div class="@ItemTrailerClass">@TrailerContent</div>
                }
            </div>
        }
        else // Top-level leaf item (render as link)
        {
            <a @attributes="AdditionalAttributes" href="@Href" target="@Target" class="@TopLevelLinkClass">
                @if (Icon != null)
                {
                    <div class="@ItemIconContainerClass" aria-hidden="true">
                        <Blazicon Svg="@Icon"/>
                    </div>
                }
                <span class="@ItemTitleClass">@Title</span>
                @if (TrailerContent != null)
                {
                    <div class="@ItemTrailerClass">@TrailerContent</div>
                }
            </a>
        }
        @if (ChildContent != null)
        {
            <ul class="@NonCollapsibleNestedListClass">
                <CascadingValue Value="this" IsFixed="true">
                    @ChildContent
                </CascadingValue>
            </ul>
        }
    </li>
}
</file>

<file path="Components/Navigation/RzSidebar/RzSidebarLinkItem.razor.cs">
using Blazicons;
using Microsoft.AspNetCore.Components;
using Microsoft.Extensions.Options;
using Rizzy.Utility;
#pragma warning disable CS1591 // Missing XML comment for publicly visible type or member
namespace RizzyUI;
/// <xmldoc>
///     Represents a single link item within an <see cref="RzSidebarLinks" /> list. Can be a simple link,
///     a collapsible section header, or a non-collapsible header with nested items.
///     Styling is determined by the active <see cref="RzTheme" />.
/// </xmldoc>
public partial class RzSidebarLinkItem : RzComponent
{
    private bool _hasChildren;
    /// <summary> Gets the parent <see cref="RzSidebarLinkItem" /> in a hierarchy, if any. </summary>
    [CascadingParameter]
    public RzSidebarLinkItem? Parent { get; set; }
    /// <summary> Gets or sets the Blazicon SVG icon to display for the link item. </summary>
    [Parameter]
    public SvgIcon? Icon { get; set; }
    /// <summary> Gets or sets the title text of the link item. Required. </summary>
    [Parameter]
    [EditorRequired]
    public string Title { get; set; } = string.Empty;
    /// <summary> Gets or sets the URL to navigate to (used if not collapsible and not a header-only item). Defaults to "#". </summary>
    [Parameter]
    public string Href { get; set; } = "#";
    /// <summary> Gets or sets the target attribute for the link (_self, _blank, etc.). </summary>
    [Parameter]
    public string Target { get; set; } = "_self";
    /// <summary> Gets or sets the child content, typically nested <see cref="RzSidebarLinkItem" /> components. </summary>
    [Parameter]
    public RenderFragment? ChildContent { get; set; }
    /// <summary> Gets or sets additional content to display after the title (e.g., badges). </summary>
    [Parameter]
    public RenderFragment? TrailerContent { get; set; }
    /// <summary>
    ///     Gets or sets a value indicating whether the link item acts as a collapsible section header. Defaults to
    ///     false.
    /// </summary>
    [Parameter]
    public bool Collapsible { get; set; }
    /// <summary> Gets or sets the initial collapsed state if <see cref="Collapsible" /> is true. Defaults to true. </summary>
    [Parameter]
    public bool Collapsed { get; set; } = true;
    /// <summary> Gets or sets a value indicating whether this link item contains child items. Set automatically by children. </summary>
    protected internal bool HasChildren
    {
        get => _hasChildren;
        set
        {
            if (_hasChildren != value)
            {
                _hasChildren = value;
                StateHasChanged();
            }
        }
    }
    /// <summary> Gets the unique ID for the collapsible button element. </summary>
    protected string ButtonId { get; private set; } = string.Empty;
    /// <summary> Gets the unique ID for the collapsible content element. </summary>
    protected string CollapseId { get; private set; } = string.Empty;
    // --- Style Properties derived from Theme ---
    /// <summary>Base CSS for a collapsible list item.</summary>
    protected string CollapsibleListItemClass => Theme.RzSidebarLinkItem.CollapsibleListItem;
    /// <summary>CSS for the inner div within a collapsible item.</summary>
    protected string CollapsibleInnerDivClass => Theme.RzSidebarLinkItem.CollapsibleInnerDiv;
    /// <summary>CSS for the collapsible button element.</summary>
    protected string CollapsibleButtonClass => Theme.RzSidebarLinkItem.CollapsibleButton;
    /// <summary>Styles for the icon container within the button.</summary>
    protected string CollapsibleButtonIconContainerClass => Theme.RzSidebarLinkItem.CollapsibleButtonIconContainer;
    /// <summary>CSS for the title span in the button.</summary>
    protected string CollapsibleButtonTitleClass => Theme.RzSidebarLinkItem.CollapsibleButtonTitle;
    /// <summary>Styles for additional trailer content in the button.</summary>
    protected string CollapsibleButtonTrailerClass => Theme.RzSidebarLinkItem.CollapsibleButtonTrailer;
    /// <summary>CSS for the chevron icon in a collapsible button.</summary>
    protected string CollapsibleButtonChevronClass => Theme.RzSidebarLinkItem.CollapsibleButtonChevron;
    /// <summary>CSS for the nested child list within a collapsible section.</summary>
    protected string CollapsibleNestedListClass => Theme.RzSidebarLinkItem.CollapsibleNestedList;
    /// <summary>Styling for non-collapsible sub list items.</summary>
    protected string SubListItemClass => Theme.RzSidebarLinkItem.SubListItem;
    /// <summary>CSS for the link or div in sub-items.</summary>
    protected string SubLinkOrDivClass => Theme.RzSidebarLinkItem.SubLinkOrDiv;
    /// <summary>CSS for top-level list items.</summary>
    protected string TopLevelListItemClass => Theme.RzSidebarLinkItem.TopLevelListItem;
    /// <summary>Styles for non-collapsible top-level elements with children.</summary>
    protected string TopLevelNonCollapsibleDivClass => Theme.RzSidebarLinkItem.TopLevelNonCollapsibleDiv;
    /// <summary>CSS for top-level anchor elements.</summary>
    protected string TopLevelLinkClass => Theme.RzSidebarLinkItem.TopLevelLink;
    /// <summary>Container classes for the item icon.</summary>
    protected string ItemIconContainerClass => Theme.RzSidebarLinkItem.ItemIconContainer;
    /// <summary>CSS for the item's title.</summary>
    protected string ItemTitleClass => Theme.RzSidebarLinkItem.ItemTitle;
    /// <summary>Styling for additional trailer content of an item.</summary>
    protected string ItemTrailerClass => Theme.RzSidebarLinkItem.ItemTrailer;
    /// <summary>CSS for nested lists in non-collapsible items.</summary>
    protected string NonCollapsibleNestedListClass => Theme.RzSidebarLinkItem.NonCollapsibleNestedList;
    /// <summary>
    /// Gets the CSS class for the chevron icon when the collapsible section is expanded.
    /// </summary>
    protected string ChevronExpandedClass => Theme.RzSidebarLinkItem.GetChevronRotationCss(true);
    /// <summary>
    /// Gets the CSS class for the chevron icon when the collapsible section is collapsed.
    /// </summary>
    protected string ChevronCollapsedClass => Theme.RzSidebarLinkItem.GetChevronRotationCss(false);
    /// <inheritdoc />
    protected override void OnInitialized()
    {
        base.OnInitialized();
        if (Collapsible)
        {
            var guid = IdGenerator.UniqueId("rzsb"); // Use new prefix
            ButtonId = $"rzbtn-{guid}";
            CollapseId = $"rzclps-{guid}";
        }
        Parent?.NotifyChildAdded(this); // Notify parent
    }
    /// <summary>
    /// Called by child components to notify the parent that a child has been added.
    /// </summary>
    /// <param name="child">The child <see cref="RzSidebarLinkItem"/> being added.</param>
    internal void NotifyChildAdded(RzSidebarLinkItem child)
    {
        if (!HasChildren) HasChildren = true;
    }
}
</file>

<file path="Components/Navigation/RzSidebar/RzSidebarLinks.razor">
@namespace RizzyUI
@inherits RzComponent

<ul class="@RootClass()">
    @ChildContent
</ul>
</file>

<file path="Components/Navigation/RzSidebar/RzSidebarLinks.razor.cs">
using Microsoft.AspNetCore.Components;
using Microsoft.Extensions.Options;
using RizzyUI.Extensions;
namespace RizzyUI;
/// <xmldoc>
///     A container component for a list of <see cref="RzSidebarLinkItem" />s within an <see cref="RzSidebar" />.
///     Styling is determined by the active <see cref="RzTheme" />.
/// </xmldoc>
public partial class RzSidebarLinks : RzComponent
{
    /// <summary> The child content, expected to be <see cref="RzSidebarLinkItem" /> components. </summary>
    [Parameter]
    public RenderFragment? ChildContent { get; set; }
    /// <inheritdoc />
    protected override string? RootClass()
    {
        return TwMerge.Merge(AdditionalAttributes, Theme.RzSidebarLinks.List);
    }
}
</file>

<file path="Components/Navigation/RzSidebar/Styling/DefaultRzSidebarStyles.cs">
namespace RizzyUI;
/// <summary>
/// Provides the default styles for the RzSidebar component.
/// </summary>
public class DefaultRzSidebarStyles : RzStylesBase.RzSidebarStylesBase 
{
    /// <summary>
    /// Initializes a new instance of the <see cref="DefaultRzSidebarStyles"/> class.
    /// </summary>
    /// <param name="theme">The theme instance to use for styling.</param>
    public DefaultRzSidebarStyles(RzTheme theme) : base(theme) { }
    /// <inheritdoc/>
    public override string Container => ""; // x-data container usually has no specific style
    /// <inheritdoc/>
    public override string LayoutContainer => "relative flex w-full flex-col md:flex-row";
    /// <inheritdoc/>
    public override string SkipLink => "sr-only";
    /// <inheritdoc/>
    // Use semantic surface color with alpha for overlay
    public override string Overlay => $"z-30 bg-surface/10 fixed inset-0 backdrop-blur-sm md:hidden dark:bg-surface/10";
    /// <inheritdoc/>
    // Use semantic names for background and border
    public override string Sidebar => $"fixed left-0 bottom-0 w-60 overflow-y-auto scrollbar-hover bg-surface-alt border-r border-outline z-40 p-4 transition-transform duration-300 md:w-60 md:translate-x-0";
    /// <inheritdoc/>
    // Use semantic name for background
    public override string MainContentContainer => $"md:pl-60 w-full bg-surface"; // pl matches sidebar width
    /// <inheritdoc/>
    public override string MainContentPadding => "p-4 md:p-6 lg:p-8";
    /// <inheritdoc/>
    // Use semantic names for background and text
    public override string FloatingToggleButton => $"z-50 fixed right-4 top-4 rounded-full bg-primary p-4 text-on-primary md:hidden";
    /// <inheritdoc/>
    public override string GetSidebarTopCss(bool hasNavbar) => hasNavbar ? "top-16" : "top-0"; // Adjust based on standard navbar height (h-16)
     /// <inheritdoc/>
    public override string GetLayoutContainerTopCss(bool hasNavbar) => hasNavbar ? "mt-16" : ""; // Adjust based on standard navbar height (h-16)
    /// <inheritdoc/>
    // Use fixed width value corresponding to 'w-60'
    public override string GetSidebarTranslationCss(bool isVisible) => isVisible ? "translate-x-0" : "-translate-x-60";
}
/// <summary> Provides default styles for RzSidebarLinkItem. </summary>
public class DefaultRzSidebarLinkItemStyles : RzStylesBase.RzSidebarLinkItemStylesBase
{
    public DefaultRzSidebarLinkItemStyles(RzTheme theme) : base(theme)
    {
    }
    /// <inheritdoc />
    public override string CollapsibleListItem => ""; // No specific style on the LI itself usually
    /// <inheritdoc />
    public override string CollapsibleInnerDiv => "flex flex-col";
    /// <inheritdoc />
    public override string CollapsibleButton =>
        $"flex items-center justify-between rounded-theme gap-2 px-2 py-1.5 text-sm font-medium underline-offset-2 focus:outline-none focus-visible:underline text-on-surface hover:bg-primary/5 hover:text-on-surface-strong dark:hover:text-on-surface-strong dark:hover:bg-primary/5";
    /// <inheritdoc />
    public override string CollapsibleButtonIconContainer => "text-xl";
    /// <inheritdoc />
    public override string CollapsibleButtonTitle => "mr-auto text-left";
    /// <inheritdoc />
    public override string CollapsibleButtonTrailer => "ml-auto";
    /// <inheritdoc />
    public override string CollapsibleButtonChevron => "size-5 transition-transform shrink-0";
    /// <inheritdoc />
    public override string CollapsibleNestedList => ""; // No base style needed, relies on children LI styles
    /// <inheritdoc />
    public override string SubListItem =>
        $"border-l px-2 py-0.5 border-outline dark:border-outline transition duration-200 hover:border-l-2 hover:border-outline-strong hover:text-on-surface-strong dark:hover:border-outline-strong dark:hover:text-on-surface-strong";
    /// <inheritdoc />
    public override string SubLinkOrDiv =>
        $"flex items-center gap-2 px-2 py-1.5 text-sm rounded-theme text-on-surface underline-offset-2 hover:bg-primary/5 hover:text-on-surface-strong focus-visible:underline focus:outline-none dark:hover:bg-primary/5 dark:hover:text-on-surface-strong";
    /// <inheritdoc />
    public override string TopLevelListItem => "px-1 py-0.5 first:mt-2";
    /// <inheritdoc />
    public override string TopLevelNonCollapsibleDiv =>
        "flex items-center gap-2 px-2 py-1.5 text-sm font-medium text-on-surface underline-offset-2 rounded-theme"; // Similar to link but not a link
    /// <inheritdoc />
    public override string TopLevelLink =>
        $"flex items-center gap-2 px-2 py-1.5 text-sm font-medium text-on-surface underline-offset-2 hover:bg-primary/5 hover:text-on-surface-strong focus-visible:underline focus:outline-none dark:hover:bg-primary/5 dark:hover:text-on-surface-strong rounded-theme";
    /// <inheritdoc />
    public override string ItemIconContainer => "text-lg";
    /// <inheritdoc />
    public override string ItemTitle => ""; // Just a span
    /// <inheritdoc />
    public override string ItemTrailer => "ml-auto";
    /// <inheritdoc />
    public override string NonCollapsibleNestedList => "pl-4";
    /// <inheritdoc />
    public override string GetChevronRotationCss(bool isExpanded)
    {
        return isExpanded ? "rotate-180" : "rotate-0";
    }
}
/// <summary> Provides default styles for RzSidebarLinks. </summary>
public class DefaultRzSidebarLinksStyles : RzStylesBase.RzSidebarLinksStylesBase
{
    public DefaultRzSidebarLinksStyles(RzTheme theme) : base(theme)
    {
    }
    /// <inheritdoc />
    public override string List => "flex flex-col gap-2 pb-6";
}
</file>

<file path="Components/Navigation/RzTab/RzTab.razor">
@inherits RzComponent
@namespace RizzyUI

<button
    id="@TabId"
    data-name="@NameLower"
    data-selectedtextcolor="@SelectedTextColorClass" @* Pass selected color to Alpine *@
    x-on:click="tabButtonClicked"
    x-on:keydown="handleKeyDown"
    type="button"
    role="tab"
    :aria-selected="tabButtonActive"
    tabindex="0" @* Managed by Alpine for focus *@
    aria-controls="@PanelId"
    @attributes="AdditionalAttributes"
    class="@RootClass()"
    :class="selectedTabTextColor"> @* Alpine applies selected text color *@
    @ChildContent
</button>
</file>

<file path="Components/Navigation/RzTab/RzTab.razor.cs">
using Microsoft.AspNetCore.Components;
using Microsoft.Extensions.Options;
using RizzyUI.Extensions;
namespace RizzyUI;
/// <xmldoc>
///     Represents a single clickable tab button within an <see cref="RzTabStrip" />.
///     Interacts with the parent <see cref="RzTabs" /> component and Alpine.js to manage selection state.
///     Styling is determined by the active <see cref="RzTheme" />.
/// </xmldoc>
public partial class RzTab : RzComponent
{
    /// <summary> Gets the parent Tabs component context. </summary>
    [CascadingParameter]
    private RzTabs? Parent { get; set; }
    /// <summary> Gets the parent TabStrip component context. </summary>
    [CascadingParameter]
    private RzTabStrip? TabStrip { get; set; }
    /// <summary>
    ///     The unique name identifier for this tab. Must match the Name of the corresponding <see cref="RzTabPanel" />.
    ///     Required.
    /// </summary>
    [Parameter]
    [EditorRequired]
    public required string Name { get; set; } = default!;
    /// <summary> The content to be displayed inside the tab button (e.g., text, icon). </summary>
    [Parameter]
    public RenderFragment? ChildContent { get; set; }
    /// <summary> Gets the lowercase name used for data attributes and IDs. </summary>
    protected string NameLower => Name?.ToLowerInvariant() ?? string.Empty;
    /// <summary> Gets the ID for the tab button element. </summary>
    protected string TabId => $"{NameLower}-tab";
    /// <summary> Gets the ID for the corresponding tab panel element. </summary>
    protected string PanelId => $"{NameLower}-panel";
    /// <summary> Gets the CSS class for the selected text color from the parent Tabs. </summary>
    protected string SelectedTextColorClass =>
        Parent?.SelectedTabTextColor.ToTextClass() ?? Theme.Light.Primary.ToCssClassString("text");
    /// <inheritdoc />
    protected override void OnInitialized()
    {
        base.OnInitialized();
        if (Parent == null)
            throw new InvalidOperationException($"{GetType()} must exist within an RzTabs component.");
        if (TabStrip == null)
            throw new InvalidOperationException($"{GetType()} must exist within an RzTabStrip component.");
        Parent.AddTab(this); // Register with Tabs
    }
    /// <inheritdoc />
    protected override string? RootClass()
    {
        var styles = Theme.RzTab;
        return TwMerge.Merge(AdditionalAttributes,
            styles.Button,
            styles.GetBackgroundColorCss(Parent?.TabBackgroundColor ?? SemanticColor.Surface), // Use parent's BG color
            styles.GetTextColorCss(Parent?.TabTextColor ?? SemanticColor.OnSurface), // Use parent's default text color
            styles.GetJustifyCss(TabStrip?.Justify ?? Justify.Center) // Use strip's justify
        );
    }
}
</file>

<file path="Components/Navigation/RzTab/RzTabPanel.razor">
@inherits RzComponent
@namespace RizzyUI

<div
    id="@PanelId"
    data-name="@NameLower"
    x-show="tabContentActive"
    role="tabpanel"
    aria-labelledby="@TabId"
    tabindex="0" @* Managed by Alpine? Check accessibility needs *@
    class="@OuterContainerClass"
    x-cloak
>
    <div @attributes="AdditionalAttributes" class="@InnerContainerClass @TextColorClass">
        @ChildContent
    </div>
</div>
</file>

<file path="Components/Navigation/RzTab/RzTabPanel.razor.cs">
using Microsoft.AspNetCore.Components;
using Microsoft.Extensions.Options;
using RizzyUI.Extensions;
namespace RizzyUI;
/// <xmldoc>
///     Represents the content panel associated with a specific <see cref="RzTab" />.
///     It becomes visible when its corresponding tab is selected. Controlled via Alpine.js.
///     Styling is determined by the active <see cref="RzTheme" />.
/// </xmldoc>
public partial class RzTabPanel : RzComponent
{
    /// <summary> Gets the parent Tabs component context. </summary>
    [CascadingParameter]
    private RzTabs? Parent { get; set; }
    /// <summary>
    ///     The unique name identifier for this panel. Must match the Name of the corresponding <see cref="RzTab" />.
    ///     Required.
    /// </summary>
    [Parameter]
    [EditorRequired]
    public string Name { get; set; } = default!;
    /// <summary> The content to be displayed inside the tab panel when active. </summary>
    [Parameter]
    public RenderFragment? ChildContent { get; set; }
    /// <summary> Gets the lowercase name used for data attributes and IDs. </summary>
    protected string NameLower => Name?.ToLowerInvariant() ?? string.Empty;
    /// <summary> Gets the ID for the corresponding tab button element. </summary>
    protected string TabId => $"{NameLower}-tab";
    /// <summary> Gets the ID for this panel element. </summary>
    protected string PanelId => $"{NameLower}-panel";
    // --- Style Properties derived from Theme ---
    /// <summary> Gets the computed CSS classes for the outer container div. </summary>
    protected string OuterContainerClass => Theme.RzTabPanel.OuterContainer;
    /// <summary> Gets the computed CSS classes for the inner content div. </summary>
    protected string InnerContainerClass => Theme.RzTabPanel.InnerContainer;
    /// <summary> Gets the computed CSS classes for the text color, inheriting from the parent Tabs component. </summary>
    protected string TextColorClass =>
        Theme.RzTabPanel.GetTextColorCss(Parent?.TabTextColor ?? SemanticColor.OnSurface);
    /// <inheritdoc />
    protected override void OnInitialized()
    {
        base.OnInitialized();
        if (Parent == null)
            throw new InvalidOperationException($"{GetType()} must exist within an RzTabs component.");
    }
    /// <inheritdoc />
    protected override string? RootClass()
    {
        // RootClass is now applied to the inner div via the markup
        return TwMerge.Merge(AdditionalAttributes, InnerContainerClass, TextColorClass);
    }
}
</file>

<file path="Components/Navigation/RzTab/RzTabs.razor">
@inherits RzComponent
@namespace RizzyUI

<CascadingValue Value="this" IsFixed="true">
    <div
        data-tabselected="@ActiveTabNameLower"
        data-buttonref="@ButtonRefId"
        x-data="rzTabs"
        x-on:resize.window="handleResize"
        @attributes="AdditionalAttributes"
        class="@RootClass()"
    >
        @Menu

        <div class="@PanelsContainerClass">
            @TabPanels
        </div>
    </div>
</CascadingValue>
</file>

<file path="Components/Navigation/RzTab/RzTabs.razor.cs">
using Microsoft.AspNetCore.Components;
using Microsoft.Extensions.Options;
using Rizzy.Utility;
using RizzyUI.Extensions;
namespace RizzyUI;
/// <xmldoc>
///     A container component for managing a set of tabs (<see cref="RzTab" />) and their corresponding content panels (
///     <see cref="RzTabPanel" />).
///     Handles tab selection state and interaction via Alpine.js.
///     Styling is determined by the active <see cref="RzTheme" />.
/// </xmldoc>
public partial class RzTabs : RzComponent
{
    /// <summary> Internal list holding registered Tab components. </summary>
    internal List<RzTab> _tabs = new();
    /// <summary> The unique ID reference for the tab button container element (<see cref="RzTabStrip" />). </summary>
    internal string ButtonRefId { get; } = IdGenerator.UniqueId("rztabBtns");
    /// <summary> Gets or sets the name of the tab that should be initially selected. If empty, the first tab is selected. </summary>
    [Parameter]
    public string SelectedTabName { get; set; } = string.Empty;
    /// <summary> Gets or sets the text color for non-selected tabs. Defaults to OnSurface. </summary>
    [Parameter]
    public SemanticColor TabTextColor { get; set; } = SemanticColor.OnSurface;
    /// <summary> Gets or sets the text color for the selected tab. Defaults to Primary. </summary>
    [Parameter]
    public SemanticColor SelectedTabTextColor { get; set; } = SemanticColor.Primary;
    /// <summary> Gets or sets the color for the underline marker of the selected tab. Defaults to Primary. </summary>
    [Parameter]
    public SemanticColor SelectedTabUnderlineColor { get; set; } = SemanticColor.Primary;
    /// <summary> Gets or sets the background color for the tabs (applied to individual tabs). Defaults to Surface. </summary>
    [Parameter]
    public SemanticColor TabBackgroundColor { get; set; } = SemanticColor.Surface;
    /// <summary> The required RenderFragment containing the tab menu structure (usually includes <see cref="RzTabStrip" />). </summary>
    [Parameter]
    [EditorRequired]
    public required RenderFragment Menu { get; set; } = default!;
    /// <summary> The required RenderFragment containing the <see cref="RzTabPanel" /> components. </summary>
    [Parameter]
    [EditorRequired]
    public required RenderFragment TabPanels { get; set; } = default!;
    /// <summary> Gets the currently active/selected Tab component. </summary>
    public RzTab? ActiveTab { get; private set; }
    /// <summary> Gets the lowercase name of the active tab for data binding. </summary>
    protected string ActiveTabNameLower => ActiveTab?.Name?.ToLowerInvariant() ?? string.Empty;
    // --- Style Properties derived from Theme ---
    /// <summary> Gets the computed CSS classes for the panels container div. </summary>
    protected string PanelsContainerClass => Theme.RzTabs.PanelsContainer;
    /// <inheritdoc />
    protected override string? RootClass()
    {
        return TwMerge.Merge(AdditionalAttributes, Theme.RzTabs.Container);
    }
    /// <summary> Registers an <see cref="RzTab" /> component with this container. Called by child tabs. </summary>
    /// <param name="tab">The tab component to register.</param>
    internal void AddTab(RzTab tab)
    {
        if (!_tabs.Contains(tab))
        {
            _tabs.Add(tab);
            // Determine initial active tab
            if (ActiveTab == null && (_tabs.Count == 1 || string.IsNullOrEmpty(SelectedTabName)))
                ActiveTab = tab;
            else if (!string.IsNullOrEmpty(SelectedTabName) &&
                     tab.Name.Equals(SelectedTabName, StringComparison.OrdinalIgnoreCase)) ActiveTab = tab;
            StateHasChanged(); // Update if active tab might have changed
        }
    }
}
</file>

<file path="Components/Navigation/RzTab/RzTabStrip.razor">
@inherits RzComponent
@namespace RizzyUI

<CascadingValue Value="this" IsFixed="true">
    <div id="@Parent?.ButtonRefId"
         role="tablist"
         @attributes="AdditionalAttributes"
         class="@RootClass()">
        @ChildContent
        @* The selection marker, positioned by Alpine *@
        <div x-ref="tabMarker" class="@MarkerClass @MarkerAfterBackgroundClass" x-cloak>
            <div class="@MarkerInnerClass"></div>
        </div>
    </div>
</CascadingValue>
</file>

<file path="Components/Navigation/RzTab/RzTabStrip.razor.cs">
using Microsoft.AspNetCore.Components;
using Microsoft.Extensions.Options;
using RizzyUI.Extensions;
// For Count()
namespace RizzyUI;
/// <xmldoc>
///     Represents the container for the clickable tab buttons within an <see cref="RzTabs" /> component.
///     It manages the layout (grid columns, gap) and the visual selection marker.
///     Styling is determined by the active <see cref="RzTheme" />.
/// </xmldoc>
public partial class RzTabStrip : RzComponent
{
    /// <summary> Gets the parent Tabs component context. </summary>
    [CascadingParameter]
    private RzTabs? Parent { get; set; }
    /// <summary> Horizontal alignment of tab content within the strip. Defaults to Center. </summary>
    [Parameter]
    public Justify Justify { get; set; } = Justify.Center;
    /// <summary> Gap spacing between tabs. Defaults to Medium. </summary>
    [Parameter]
    public Size SpaceBetween { get; set; } = Size.Medium;
    /// <summary> The child content, expected to be <see cref="RzTab" /> components. </summary>
    [Parameter]
    public RenderFragment? ChildContent { get; set; }
    // --- Style Properties derived from Theme ---
    /// <summary> Gets the computed CSS classes for the selection marker div. </summary>
    protected string MarkerClass => Theme.RzTabStrip.Marker;
    /// <summary> Gets the computed CSS classes for the marker's ::after background color. </summary>
    protected string MarkerAfterBackgroundClass => Parent != null
        ? Theme.RzTabStrip.GetMarkerAfterBackgroundCss(Parent.SelectedTabUnderlineColor)
        : "";
    /// <summary> Gets the computed CSS classes for the inner div within the marker. </summary>
    protected string MarkerInnerClass => Theme.RzTabStrip.MarkerInner;
    /// <inheritdoc />
    protected override void OnInitialized()
    {
        base.OnInitialized();
        if (Parent == null)
            throw new InvalidOperationException($"{GetType()} must exist within an RzTabs component.");
    }
    /// <inheritdoc />
    protected override string? RootClass()
    {
        var styles = Theme.RzTabStrip;
        return TwMerge.Merge(AdditionalAttributes,
            styles.Strip,
            Parent?._tabs != null ? styles.GetColumnsCss(Parent._tabs.Count) : "grid-cols-1", // Handle null case
            styles.GetGapCss(SpaceBetween),
            Parent?.TabTextColor.ToTextClass() ?? "" // Inherit text color from Tabs
        );
    }
}
</file>

<file path="Components/Navigation/RzTab/Styling/DefaultRzTabStyles.cs">
namespace RizzyUI;
/// <summary> Provides default styles for RzTabs. </summary>
public class DefaultRzTabsStyles : RzStylesBase.RzTabsStylesBase 
{
    public DefaultRzTabsStyles(RzTheme theme) : base(theme)
    {
    }
    /// <inheritdoc />
    public override string Container => ""; // Base container usually has no style
    /// <inheritdoc />
    public override string PanelsContainer => ""; // Container for panels usually has no specific style
}
/// <summary> Provides default styles for RzTabStrip. </summary>
public class DefaultRzTabStripStyles : RzStylesBase.RzTabStripStylesBase 
{
    public DefaultRzTabStripStyles(RzTheme theme) : base(theme)
    {
    }
    /// <inheritdoc />
    public override string Strip => "relative inline-grid select-none items-center";
    /// <inheritdoc />
    public override string Marker =>
        "z-20 opacity-0 absolute pointer-events-none left-0 h-full w-1/2 duration-300 ease-out after:absolute after:left-0 after:bottom-0 after:h-0.5 after:w-full";
    /// <inheritdoc />
    public override string MarkerInner => "h-full w-full"; // Inner div might not need styles
    /// <inheritdoc />
    public override string GetColumnsCss(int tabCount)
    {
        return tabCount switch
        {
            1 => "grid-cols-1", 2 => "grid-cols-2", 3 => "grid-cols-3", 4 => "grid-cols-4",
            5 => "grid-cols-5", 6 => "grid-cols-6", 7 => "grid-cols-7", 8 => "grid-cols-8",
            9 => "grid-cols-9", 10 => "grid-cols-10", 11 => "grid-cols-11", 12 => "grid-cols-12",
            _ => "grid-cols-1" // Fallback or handle more if needed
        };
    }
    /// <inheritdoc />
    public override string GetGapCss(Size spaceBetween)
    {
        return spaceBetween switch
        {
            Size.ExtraSmall => "gap-0", Size.Small => "gap-1", Size.Medium => "gap-2",
            Size.Large => "gap-3", Size.ExtraLarge => "gap-4",
            _ => GetGapCss(Size.Medium)
        };
    }
    /// <inheritdoc />
    public override string GetMarkerAfterBackgroundCss(SemanticColor color)
    {
        return color.ToBackgroundClass("after");
        // Use ColorUtil extension
    }
}
/// <summary> Provides default styles for RzTab. </summary>
public class DefaultRzTabStyles : RzStylesBase.RzTabStylesBase 
{
    public DefaultRzTabStyles(RzTheme theme) : base(theme)
    {
    }
    /// <inheritdoc />
    public override string Button =>
        "z-10 relative inline-flex h-8 px-2 w-full cursor-pointer items-center whitespace-nowrap rounded-theme rounded-b-none font-medium transition-all mr-1";
    /// <inheritdoc />
    public override string GetJustifyCss(Justify justify)
    {
        return justify switch
        {
            Justify.Start => "justify-start", Justify.Center => "justify-center", Justify.End => "justify-end",
            _ => GetJustifyCss(Justify.Center)
        };
    }
    /// <inheritdoc />
    public override string GetTextColorCss(SemanticColor color)
    {
        return color.ToTextClass();
    }
    /// <inheritdoc />
    public override string GetBackgroundColorCss(SemanticColor color)
    {
        return color.ToBackgroundClass();
    }
}
/// <summary> Provides default styles for RzTabPanel. </summary>
public class DefaultRzTabPanelStyles : RzStylesBase.RzTabPanelStylesBase 
{
    public DefaultRzTabPanelStyles(RzTheme theme) : base(theme)
    {
    }
    /// <inheritdoc />
    public override string OuterContainer => "relative"; // For positioning if needed
    /// <inheritdoc />
    public override string InnerContainer => ""; // Base inner container, padding/bg added via attributes usually
    /// <inheritdoc />
    public override string GetTextColorCss(SemanticColor color)
    {
        return color.ToTextClass();
    }
}
</file>

<file path="Components/Theme/RzDarkMode/RzDarkModeToggle.razor">
@using Blazicons
@namespace RizzyUI
@inherits RzComponent

<HtmlElement Element="button"
             @attributes="AdditionalAttributes"
             class="@RootClass()"
             type="button"
             aria-label="Toggle dark mode"
             x-data="rzDarkModeToggle"
             x-on:click="toggle"
             :aria-pressed="isDark">
	<div x-show="isLight" x-cloak>
		<Blazicon Svg="@DarkIcon" class="@IconClass" />
	</div>
	<div x-show="isDark" x-cloak>
		<Blazicon Svg="@LightIcon" class="@IconClass" />
	</div>
</HtmlElement>
</file>

<file path="Components/Theme/RzDarkMode/RzDarkModeToggle.razor.cs">
using Blazicons;
using Microsoft.AspNetCore.Components;
using Microsoft.Extensions.Options;
using RizzyUI.Extensions;
namespace RizzyUI;
/// <xmldoc>
/// Renders a button that toggles between light and dark color themes for the application.
/// Interactivity (state management and class toggling on `&lt;html>`) is handled via the `rzDarkModeToggle` Alpine.js component.
/// Styling is determined by the active <see cref="RzTheme"/>.
/// </xmldoc>
public partial class RzDarkModeToggle : RzComponent
{
	/// <summary> Icon shown when light mode is active (clicking enables dark mode). Defaults to MoonOutline. </summary>
	[Parameter] public SvgIcon DarkIcon { get; set; } = Ionicon.MoonOutline;
	/// <summary> Icon shown when dark mode is active (clicking enables light mode). Defaults to SunnyOutline. </summary>
	[Parameter] public SvgIcon LightIcon { get; set; } = Ionicon.SunnyOutline;
	// --- Style Properties derived from Theme ---
	/// <summary> Gets the computed CSS classes for the icon elements. </summary>
	protected string IconClass => Theme.RzDarkmodeToggle.Icon;
	/// <inheritdoc />
	protected override string? RootClass() =>
		TwMerge.Merge(AdditionalAttributes, Theme.RzDarkmodeToggle.Button);
}
</file>

<file path="Components/Theme/RzDarkMode/Styling/RzDarkmodeToggleStyles.cs">
namespace RizzyUI;
/// <summary> Provides default styles for RzDarkmodeToggle. </summary>
public class DefaultRzDarkmodeToggleStyles : RzStylesBase.RzDarkmodeToggleStylesBase
{
    public DefaultRzDarkmodeToggleStyles(RzTheme theme) : base(theme) { }
    /// <inheritdoc/>
    public override string Button => $"inline-flex text-xl items-center justify-center p-2 mr-2 rounded-theme transition-colors ease-in-out duration-300 focus:outline-none text-on-surface bg-surface hover:bg-surface-alt/75 dark:hover:bg-surface-alt/75"; // Use semantic names, adjusted hover slightly
    /// <inheritdoc/>
    public override string Icon => "transition-transform duration-300 ease-out";
}
</file>

<file path="Components/Theme/RzThemeProvider.cs">
using System.Text;
using Microsoft.AspNetCore.Components;
using Microsoft.AspNetCore.Components.Rendering;
using Microsoft.AspNetCore.Components.Web; // Required for HeadContent
using Microsoft.Extensions.Options;
using Rizzy.Htmx;
namespace RizzyUI;
/// <summary>
/// A Blazor component that provides the current theme's CSS variables and initial dark mode script
/// into the document head via <see cref="HeadOutlet"/>. It also cascades the resolved theme
/// to its child content. If no theme parameter is provided, it uses the default theme specified
/// in <see cref="RizzyUIConfig"/> or falls back to <see cref="RzTheme.Default"/>.
/// </summary>
public class RzThemeProvider : ComponentBase
{
    [Inject] private IOptions<RizzyUIConfig>? RizzyConfig { get; set; }
    /// <summary>
    /// NonceProvider service that provides scoped per-request nonce values to RizzyUI components.
    /// </summary>
    [Inject]
    protected IRizzyNonceProvider RizzyNonceProvider { get; set; } = default!;
    /// <summary>
    /// Gets or sets the theme to apply. If null, defaults to the theme configured in
    /// <see cref="RizzyUIConfig.DefaultTheme"/> or <see cref="RzTheme.Default"/>.
    /// </summary>
    [Parameter]
    public RzTheme? Theme { get; set; }
    /// <summary>
    /// Gets or sets the child content to render within the theme provider context.
    /// The resolved theme will be cascaded to this content.
    /// </summary>
    [Parameter]
    public RenderFragment? ChildContent { get; set; }
    /// <summary>
    /// Builds the render tree for the component, injecting a &lt;style> tag with CSS variables
    /// and an initial dark mode script into the head via <see cref="HeadContent"/>. It also
    /// renders the <see cref="ChildContent"/> wrapped in a <see cref="CascadingValue{TValue}"/>
    /// providing the resolved <see cref="RzTheme"/>.
    /// </summary>
    /// <param name="builder">The <see cref="RenderTreeBuilder"/> used to build the component's output.</param>
    protected override void BuildRenderTree(RenderTreeBuilder builder)
    {
        // Determine the theme to use based on priority: Parameter > Config > Default
        var actualTheme = Theme ?? RizzyConfig?.Value.DefaultTheme ?? RzTheme.Default;
        // Generate the CSS variables string
        var css = GenerateRootVariables(actualTheme);
        var nonce = RizzyNonceProvider.GetNonce(); // Get nonce once for efficiency
        // Render HeadContent to inject style and script into <head>
        builder.OpenComponent<RzHeadContent>(0);
        builder.AddAttribute(1, "ChildContent", (RenderFragment)(headBuilder =>
        {
            // Inject the style tag with theme variables
            headBuilder.AddMarkupContent(2, $"<style nonce=\"{nonce}\">{css}</style>");
            // Inject the initial dark mode script
            headBuilder.AddMarkupContent(3, $@"<script nonce=""{nonce}"">
                const storedMode = localStorage.getItem('darkMode') ?? 'auto';
                const prefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches;
                document.documentElement.classList.toggle('dark', storedMode === 'dark' || (storedMode === 'auto' && prefersDark));
            </script>");
        }));
        builder.CloseComponent(); // Close HeadContent
        // Render ChildContent wrapped in a CascadingValue to provide the theme
        builder.OpenComponent<CascadingValue<RzTheme>>(4); // Use specific type RzTheme
        builder.AddAttribute(5, "Value", actualTheme);
        builder.AddAttribute(6, "IsFixed", true); // Theme instance is fixed for this provider's scope
        builder.AddAttribute(7, "ChildContent", (RenderFragment)(cascadeBuilder =>
        {
            cascadeBuilder.AddContent(8, ChildContent); // Render the actual child content
        }));
        builder.CloseComponent(); // Close CascadingValue<RzTheme>
    }
    /// <summary>
    /// Generates the CSS variable definitions for the given theme.
    /// </summary>
    /// <param name="theme">The theme to generate variables from.</param>
    /// <returns>A string containing a :root CSS block with the theme variables.</returns>
    private string GenerateRootVariables(RzTheme theme)
    {
        var sb = new StringBuilder();
        sb.AppendLine(":root {");
        // --- Base (Light) Variables ---
        sb.AppendLine($"--color-surface: {theme.Light.Surface.ToCssColorString()};");
        sb.AppendLine($"--color-on-surface: {theme.Light.OnSurface.ToCssColorString()};");
        sb.AppendLine($"--color-on-surface-strong: {theme.Light.OnSurfaceStrong.ToCssColorString()};");
        sb.AppendLine($"--color-on-surface-muted: {theme.Light.OnSurfaceMuted.ToCssColorString()};");
        sb.AppendLine($"--color-surface-alt: {theme.Light.SurfaceAlt.ToCssColorString()};");
        sb.AppendLine($"--color-surface-tertiary: {theme.Light.SurfaceTertiary.ToCssColorString()};");
        sb.AppendLine($"--color-on-surface-tertiary: {theme.Light.OnSurfaceTertiary.ToCssColorString()};");
        sb.AppendLine($"--color-primary: {theme.Light.Primary.ToCssColorString()};");
        sb.AppendLine($"--color-on-primary: {theme.Light.OnPrimary.ToCssColorString()};");
        sb.AppendLine($"--color-secondary: {theme.Light.Secondary.ToCssColorString()};");
        sb.AppendLine($"--color-on-secondary: {theme.Light.OnSecondary.ToCssColorString()};");
        sb.AppendLine($"--color-outline: {theme.Light.Outline.ToCssColorString()};");
        sb.AppendLine($"--color-outline-strong: {theme.Light.OutlineStrong.ToCssColorString()};");
        // --- Status Colors (Same for Light/Dark in current definition) ---
        sb.AppendLine($"--color-danger: {theme.Danger.ToCssColorString()};");
        sb.AppendLine($"--color-on-danger: {theme.OnDanger.ToCssColorString()};");
        sb.AppendLine($"--color-info: {theme.Info.ToCssColorString()};");
        sb.AppendLine($"--color-onInfo: {theme.OnInfo.ToCssColorString()};"); // Consistent naming needed
        sb.AppendLine($"--color-warning: {theme.Warning.ToCssColorString()};");
        sb.AppendLine($"--color-on-warning: {theme.OnWarning.ToCssColorString()};");
        sb.AppendLine($"--color-success: {theme.Success.ToCssColorString()};");
        sb.AppendLine($"--color-on-success: {theme.OnSuccess.ToCssColorString()};");
        // --- Border Variables ---
        sb.AppendLine($"--borderWidth: {theme.BorderWidth};");
        sb.AppendLine($"--borderRadius: {theme.BorderRadius};");
        // --- Highlight.js (Light) Variables ---
        sb.AppendLine($"--highlight-bg: {theme.Light.Code.Background.ToCssColorString()};");
        sb.AppendLine($"--highlight-color: {theme.Light.Code.Color.ToCssColorString()};");
        sb.AppendLine($"--highlight-comment: {theme.Light.Code.Comment.ToCssColorString()};");
        sb.AppendLine($"--highlight-keyword: {theme.Light.Code.Keyword.ToCssColorString()};");
        sb.AppendLine($"--highlight-attribute: {theme.Light.Code.Attribute.ToCssColorString()};");
        sb.AppendLine($"--highlight-symbol: {theme.Light.Code.Symbol.ToCssColorString()};");
        sb.AppendLine($"--highlight-namespace: {theme.Light.Code.Namespace.ToCssColorString()};");
        sb.AppendLine($"--highlight-variable: {theme.Light.Code.Variable.ToCssColorString()};");
        sb.AppendLine($"--highlight-literal: {theme.Light.Code.Literal.ToCssColorString()};");
        sb.AppendLine($"--highlight-punctuation: {theme.Light.Code.Punctuation.ToCssColorString()};");
        sb.AppendLine($"--highlight-deletion: {theme.Light.Code.Deletion.ToCssColorString()};");
        sb.AppendLine($"--highlight-addition: {theme.Light.Code.Addition.ToCssColorString()};");
        // Link highlight variables to Tailwind Prose variables
        sb.AppendLine(".prose {");
        sb.AppendLine("  --tw-prose-code: var(--highlight-color);");
        sb.AppendLine("  --tw-prose-pre-code: var(--highlight-color);"); // Ensure pre code also uses it
        sb.AppendLine("  --tw-prose-pre-bg: var(--highlight-bg);");
        sb.AppendLine("}");
        // --- Dark Mode Overrides
        sb.AppendLine("&:where(.dark, .dark *) {");
        sb.AppendLine($"  --color-surface: {theme.Dark.Surface.ToCssColorString()};");
        sb.AppendLine($"  --color-on-surface: {theme.Dark.OnSurface.ToCssColorString()};");
        sb.AppendLine($"  --color-on-surface-strong: {theme.Dark.OnSurfaceStrong.ToCssColorString()};");
        sb.AppendLine($"  --color-on-surface-muted: {theme.Dark.OnSurfaceMuted.ToCssColorString()};");
        sb.AppendLine($"  --color-surface-alt: {theme.Dark.SurfaceAlt.ToCssColorString()};");
        sb.AppendLine($"  --color-surface-tertiary: {theme.Dark.SurfaceTertiary.ToCssColorString()};");
        sb.AppendLine($"  --color-on-surface-tertiary: {theme.Dark.OnSurfaceTertiary.ToCssColorString()};");
        sb.AppendLine($"  --color-primary: {theme.Dark.Primary.ToCssColorString()};");
        sb.AppendLine($"  --color-on-primary: {theme.Dark.OnPrimary.ToCssColorString()};");
        sb.AppendLine($"  --color-secondary: {theme.Dark.Secondary.ToCssColorString()};");
        sb.AppendLine($"  --color-on-secondary: {theme.Dark.OnSecondary.ToCssColorString()};");
        sb.AppendLine($"  --color-outline: {theme.Dark.Outline.ToCssColorString()};");
        sb.AppendLine($"  --color-outline-strong: {theme.Dark.OutlineStrong.ToCssColorString()};");
        // Highlight.js (Dark) Variables
        sb.AppendLine($"  --highlight-bg: {theme.Dark.Code.Background.ToCssColorString()};");
        sb.AppendLine($"  --highlight-color: {theme.Dark.Code.Color.ToCssColorString()};");
        sb.AppendLine($"  --highlight-comment: {theme.Dark.Code.Comment.ToCssColorString()};");
        sb.AppendLine($"  --highlight-keyword: {theme.Dark.Code.Keyword.ToCssColorString()};");
        sb.AppendLine($"  --highlight-attribute: {theme.Dark.Code.Attribute.ToCssColorString()};");
        sb.AppendLine($"  --highlight-symbol: {theme.Dark.Code.Symbol.ToCssColorString()};");
        sb.AppendLine($"  --highlight-namespace: {theme.Dark.Code.Namespace.ToCssColorString()};");
        sb.AppendLine($"  --highlight-variable: {theme.Dark.Code.Variable.ToCssColorString()};");
        sb.AppendLine($"  --highlight-literal: {theme.Dark.Code.Literal.ToCssColorString()};");
        sb.AppendLine($"  --highlight-punctuation: {theme.Dark.Code.Punctuation.ToCssColorString()};");
        sb.AppendLine($"  --highlight-deletion: {theme.Dark.Code.Deletion.ToCssColorString()};");
        sb.AppendLine($"  --highlight-addition: {theme.Dark.Code.Addition.ToCssColorString()};");
        // Note: Status colors (Danger, Info, etc.) don't have dark overrides in RzTheme current definition
        sb.AppendLine("}"); // Close &:where(...)
        sb.AppendLine("}"); // Close :root
        return sb.ToString();
    }
}
</file>

<file path="Components/Theme/Themes/ArcticTheme.cs">
namespace RizzyUI;
/// <summary>
///     The default theme used for the application, inheriting from <see cref="RzTheme" />.
///     Initializes the theme using the Tailwind color palette via the <see cref="Colors" /> class.
/// </summary>
public class ArcticTheme : RzTheme
{
    /// <summary>
    ///     Initializes a new instance of the <see cref="RzTheme" /> class with predefined values.
    /// </summary>
    public ArcticTheme() : base("Arctic", "arctic")
    {
        // Light mode colors
        Light = new RzThemeVariant
        {
            Surface = Colors.White, // White
            OnSurface = Colors.Slate.L700, // #334155 (51,65,85)
            OnSurfaceStrong = Colors.Black, // Black
            OnSurfaceMuted = Colors.Neutral.L500,
            SurfaceAlt = Colors.Slate.L100, // #F1F5F9 (241,245,249)
            SurfaceTertiary = Colors.Slate.L200,
            OnSurfaceTertiary = Colors.Slate.L600,
            Primary = Colors.Blue.L700, // #1D4ED8 (29,78,216)
            OnPrimary = Colors.Slate.L100, // #F1F5F9
            Secondary = Colors.Indigo.L700, // #4338CA (67,56,202)
            OnSecondary = Colors.Slate.L100, // #F1F5F9
            Outline = Colors.Slate.L300, // #CBD5E1 (203,213,225)
            OutlineStrong = Colors.Slate.L800, // #1E293B (30,41,59)
            Code = CodeThemes.Github
        };
        // Dark mode colors
        Dark = new RzThemeVariant
        {
            Surface = Colors.Slate.L900, // #0F172A (15,23,42)
            OnSurface = Colors.Slate.L300, // #CBD5E1 (203,213,225)
            OnSurfaceStrong = Colors.White, // White
            OnSurfaceMuted = Colors.Neutral.L500,
            SurfaceAlt = Colors.Slate.L800,
            SurfaceTertiary = Colors.Slate.L700,
            OnSurfaceTertiary = Colors.Slate.L300,
            Primary = Colors.Blue.L600, // #2563EB (37,99,235)
            OnPrimary = Colors.Slate.L100, // #F1F5F9
            Secondary = Colors.Indigo.L600, // #4F46E5 (79,70,229)
            OnSecondary = Colors.Slate.L100, // #F1F5F9
            Outline = Colors.Slate.L700, // #334155 (51,65,85)
            OutlineStrong = Colors.Slate.L300, // #CBD5E1 (203,213,225)
            Code = CodeThemes.DefaultDark
        };
        // Status colors
        Danger = Colors.Red.L600; // #DC2626 (220,38,38)
        OnDanger = Colors.White; // white
        Info = Colors.Sky.L600; // #0284C7 (2,132,199)
        OnInfo = Colors.White; // white
        Warning = Colors.Amber.L500; // #F59E0B (245,158,11)
        OnWarning = Colors.White; // #FFFFFF
        Success = Colors.Green.L600; // #16A34A (22,163,74)
        OnSuccess = Colors.White; // #FFFFFF
        // Borders and radius
        BorderWidth = "1px";
        BorderRadius = "6px";
    }
}
</file>

<file path="Components/Theme/Themes/Code/CodeThemes.cs">
#pragma warning disable CS1591 // Missing XML comment for publicly visible type or member
namespace RizzyUI;
/// <summary>
///     Provides static RizzyCodeTheme instances for each theme in your JSON.
/// </summary>
public static class CodeThemes
{
    public static RizzyCodeTheme Apathy { get; } = new("#031A16", "#81B5AC", "#2B685E", "#4C963E", "#3E7996", "#96883E",
        "#3E9688", "#883E96", "#963E4C", "#81B5AC", "#3E9688", "#883E96");
    public static RizzyCodeTheme Ashes { get; } = new("#1C2023", "#C7CCD1", "#747C84", "#C795AE", "#C7C795", "#AE95C7",
        "#C7AE95", "#95C7AE", "#95AEC7", "#C7CCD1", "#C7AE95", "#95C7AE");
    public static RizzyCodeTheme AtelierCaveLight { get; } = new("#efecf4", "#585260", "#7e7887", "#955ae7", "#aa573c",
        "#576ddb", "#be4678", "#2a9292", "#398bc6", "#585260", "#be4678", "#2a9292");
    public static RizzyCodeTheme AtelierCave { get; } = new("#19171c", "#8b8792", "#655f6d", "#955ae7", "#aa573c",
        "#576ddb", "#be4678", "#2a9292", "#398bc6", "#8b8792", "#be4678", "#2a9292");
    public static RizzyCodeTheme AtelierDuneLight { get; } = new("#fefbec", "#6e6b5e", "#999580", "#b854d4", "#b65611",
        "#6684e1", "#d73737", "#60ac39", "#1fad83", "#6e6b5e", "#d73737", "#60ac39");
    public static RizzyCodeTheme AtelierDune { get; } = new("#20201d", "#a6a28c", "#7d7a68", "#b854d4", "#b65611",
        "#6684e1", "#d73737", "#60ac39", "#1fad83", "#a6a28c", "#d73737", "#60ac39");
    public static RizzyCodeTheme AtelierEstuaryLight { get; } = new("#f4f3ec", "#5f5e4e", "#878573", "#5f9182",
        "#ae7313", "#36a166", "#ba6236", "#7d9726", "#5b9d48", "#5f5e4e", "#ba6236", "#7d9726");
    public static RizzyCodeTheme AtelierEstuary { get; } = new("#22221b", "#929181", "#6c6b5a", "#5f9182", "#ae7313",
        "#36a166", "#ba6236", "#7d9726", "#5b9d48", "#929181", "#ba6236", "#7d9726");
    public static RizzyCodeTheme AtelierForestLight { get; } = new("#f1efee", "#68615e", "#9c9491", "#6666ea",
        "#df5320", "#407ee7", "#f22c40", "#7b9726", "#3d97b8", "#68615e", "#f22c40", "#7b9726");
    public static RizzyCodeTheme AtelierForest { get; } = new("#1b1918", "#a8a19f", "#766e6b", "#6666ea", "#df5320",
        "#407ee7", "#f22c40", "#7b9726", "#3d97b8", "#a8a19f", "#f22c40", "#7b9726");
    public static RizzyCodeTheme AtelierHeathLight { get; } = new("#f7f3f7", "#695d69", "#9e8f9e", "#7b59c0", "#a65926",
        "#516aec", "#ca402b", "#918b3b", "#159393", "#695d69", "#ca402b", "#918b3b");
    public static RizzyCodeTheme AtelierHeath { get; } = new("#1b181b", "#ab9bab", "#776977", "#7b59c0", "#a65926",
        "#516aec", "#ca402b", "#918b3b", "#159393", "#ab9bab", "#ca402b", "#918b3b");
    public static RizzyCodeTheme AtelierLakesideLight { get; } = new("#ebf8ff", "#516d7b", "#7195a8", "#6b6bb8",
        "#935c25", "#257fad", "#d22d72", "#568c3b", "#2d8f6f", "#516d7b", "#d22d72", "#568c3b");
    public static RizzyCodeTheme AtelierLakeside { get; } = new("#161b1d", "#7ea2b4", "#5a7b8c", "#6b6bb8", "#935c25",
        "#257fad", "#d22d72", "#568c3b", "#2d8f6f", "#7ea2b4", "#d22d72", "#568c3b");
    public static RizzyCodeTheme AtelierPlateauLight { get; } = new("#f4ecec", "#585050", "#7e7777", "#8464c4",
        "#b45a3c", "#7272ca", "#ca4949", "#4b8b8b", "#5485b6", "#585050", "#ca4949", "#4b8b8b");
    public static RizzyCodeTheme AtelierPlateau { get; } = new("#1b1818", "#8a8585", "#655d5d", "#8464c4", "#b45a3c",
        "#7272ca", "#ca4949", "#4b8b8b", "#5485b6", "#8a8585", "#ca4949", "#4b8b8b");
    public static RizzyCodeTheme AtelierSavannaLight { get; } = new("#ecf4ee", "#526057", "#78877d", "#55859b",
        "#9f713c", "#478c90", "#b16139", "#489963", "#1c9aa0", "#526057", "#b16139", "#489963");
    public static RizzyCodeTheme AtelierSavanna { get; } = new("#171c19", "#87928a", "#5f6d64", "#55859b", "#9f713c",
        "#478c90", "#b16139", "#489963", "#1c9aa0", "#87928a", "#b16139", "#489963");
    public static RizzyCodeTheme AtelierSeasideLight { get; } = new("#f4fbf4", "#5e6e5e", "#809980", "#ad2bee",
        "#87711d", "#3d62f5", "#e6193c", "#29a329", "#1999b3", "#5e6e5e", "#e6193c", "#29a329");
    public static RizzyCodeTheme AtelierSeaside { get; } = new("#131513", "#8ca68c", "#687d68", "#ad2bee", "#87711d",
        "#3d62f5", "#e6193c", "#29a329", "#1999b3", "#8ca68c", "#e6193c", "#29a329");
    public static RizzyCodeTheme AtelierSulphurpoolLight { get; } = new("#f5f7ff", "#5e6687", "#898ea4", "#6679cc",
        "#c76b29", "#3d8fd1", "#c94922", "#ac9739", "#22a2c9", "#5e6687", "#c94922", "#ac9739");
    public static RizzyCodeTheme AtelierSulphurpool { get; } = new("#202746", "#979db4", "#6b7394", "#6679cc",
        "#c76b29", "#3d8fd1", "#c94922", "#ac9739", "#22a2c9", "#979db4", "#c94922", "#ac9739");
    public static RizzyCodeTheme Bespin { get; } = new("#28211c", "#8a8986", "#666666", "#9b859d", "#cf7d34", "#5ea6ea",
        "#cf6a4c", "#54be0d", "#afc4db", "#8a8986", "#cf6a4c", "#54be0d");
    public static RizzyCodeTheme Brewer { get; } = new("#0c0d0e", "#b7b8b9", "#737475", "#756bb1", "#e6550d", "#3182bd",
        "#e31a1c", "#31a354", "#80b1d3", "#b7b8b9", "#e31a1c", "#31a354");
    public static RizzyCodeTheme Bright { get; } = new("#000000", "#e0e0e0", "#b0b0b0", "#d381c3", "#fc6d24", "#6fb3d2",
        "#fb0120", "#a1c659", "#76c7b7", "#e0e0e0", "#fb0120", "#a1c659");
    public static RizzyCodeTheme BrushtreesDark { get; } = new("#485867", "#B0C5C8", "#8299A1", "#b386b2", "#d8bba2",
        "#868cb3", "#b38686", "#87b386", "#86b3b3", "#B0C5C8", "#b38686", "#87b386");
    public static RizzyCodeTheme Brushtrees { get; } = new("#E3EFEF", "#6D828E", "#98AFB5", "#b386b2", "#d8bba2",
        "#868cb3", "#b38686", "#87b386", "#86b3b3", "#6D828E", "#b38686", "#87b386");
    public static RizzyCodeTheme Chalk { get; } = new("#151515", "#d0d0d0", "#505050", "#e1a3ee", "#eda987", "#6fc2ef",
        "#fb9fb1", "#acc267", "#12cfc0", "#d0d0d0", "#fb9fb1", "#acc267");
    public static RizzyCodeTheme Circus { get; } = new("#191919", "#a7a7a7", "#5f5a60", "#b888e2", "#4bb1a7", "#639ee4",
        "#dc657d", "#84b97c", "#4bb1a7", "#a7a7a7", "#dc657d", "#84b97c");
    public static RizzyCodeTheme ClassicDark { get; } = new("#151515", "#D0D0D0", "#505050", "#AA759F", "#D28445",
        "#6A9FB5", "#AC4142", "#90A959", "#75B5AA", "#D0D0D0", "#AC4142", "#90A959");
    public static RizzyCodeTheme ClassicLight { get; } = new("#F5F5F5", "#303030", "#B0B0B0", "#AA759F", "#D28445",
        "#6A9FB5", "#AC4142", "#90A959", "#75B5AA", "#303030", "#AC4142", "#90A959");
    public static RizzyCodeTheme Codeschool { get; } = new("#232c31", "#9ea7a6", "#3f4944", "#c59820", "#43820d",
        "#484d79", "#2a5491", "#237986", "#b02f30", "#9ea7a6", "#2a5491", "#237986");
    public static RizzyCodeTheme Cupcake { get; } = new("#fbf1f2", "#8b8198", "#bfb9c6", "#BB99B4", "#EBB790",
        "#7297B9", "#D57E85", "#A3B367", "#69A9A7", "#8b8198", "#D57E85", "#A3B367");
    public static RizzyCodeTheme Cupertino { get; } = new("#5e5e5e", "#c0c0c0", "#808080", "#a90d91", "#eb8500",
        "#0000ff", "#c41a15", "#007400", "#318495", "#c0c0c0", "#c41a15", "#007400");
    public static RizzyCodeTheme Darktooth { get; } = new("#1D2021", "#A89984", "#665C54", "#8F4673", "#FE8625",
        "#0D6678", "#FB543F", "#95C085", "#8BA59B", "#A89984", "#FB543F", "#95C085");
    public static RizzyCodeTheme DefaultDark { get; } = new("#181818", "#d8d8d8", "#585858", "#ba8baf", "#dc9656",
        "#7cafc2", "#ab4642", "#a1b56c", "#86c1b9", "#d8d8d8", "#ab4642", "#a1b56c");
    public static RizzyCodeTheme DefaultLight { get; } = new("#f8f8f8", "#383838", "#b8b8b8", "#ba8baf", "#dc9656",
        "#7cafc2", "#ab4642", "#a1b56c", "#86c1b9", "#383838", "#ab4642", "#a1b56c");
    public static RizzyCodeTheme Dracula { get; } = new("#282936", "#e9e9f4", "#4d4f68", "#b45bcf", "#b45bcf",
        "#62d6e8", "#ea51b2", "#00f769", "#a1efe4", "#e9e9f4", "#ea51b2", "#00f769");
    public static RizzyCodeTheme Eighties { get; } = new("#2d2d2d", "#d3d0c8", "#747369", "#cc99cc", "#f99157",
        "#6699cc", "#f2777a", "#99cc99", "#66cccc", "#d3d0c8", "#f2777a", "#99cc99");
    public static RizzyCodeTheme Embers { get; } = new("#16130F", "#A39A90", "#5A5047", "#82576D", "#828257", "#6D5782",
        "#826D57", "#57826D", "#576D82", "#A39A90", "#826D57", "#57826D");
    public static RizzyCodeTheme Flat { get; } = new("#2C3E50", "#e0e0e0", "#95A5A6", "#9B59B6", "#E67E22", "#3498DB",
        "#E74C3C", "#2ECC71", "#1ABC9C", "#e0e0e0", "#E74C3C", "#2ECC71");
    public static RizzyCodeTheme Github { get; } = new("#ffffff", "#333333", "#969896", "#a71d5d", "#0086b3", "#795da3",
        "#ed6a43", "#183691", "#183691", "#333333", "#ed6a43", "#183691");
    public static RizzyCodeTheme GoogleDark { get; } = new("#1d1f21", "#c5c8c6", "#969896", "#A36AC7", "#F96A38",
        "#3971ED", "#CC342B", "#198844", "#3971ED", "#c5c8c6", "#CC342B", "#198844");
    public static RizzyCodeTheme GoogleLight { get; } = new("#ffffff", "#373b41", "#b4b7b4", "#A36AC7", "#F96A38",
        "#3971ED", "#CC342B", "#198844", "#3971ED", "#373b41", "#CC342B", "#198844");
    public static RizzyCodeTheme GrayscaleDark { get; } = new("#101010", "#b9b9b9", "#525252", "#747474", "#999999",
        "#686868", "#7c7c7c", "#8e8e8e", "#868686", "#b9b9b9", "#7c7c7c", "#8e8e8e");
    public static RizzyCodeTheme GrayscaleLight { get; } = new("#f7f7f7", "#464646", "#ababab", "#747474", "#999999",
        "#686868", "#7c7c7c", "#8e8e8e", "#868686", "#464646", "#7c7c7c", "#8e8e8e");
    public static RizzyCodeTheme Greenscreen { get; } = new("#001100", "#00bb00", "#007700", "#00bb00", "#009900",
        "#009900", "#007700", "#00bb00", "#005500", "#00bb00", "#007700", "#00bb00");
    public static RizzyCodeTheme GruvboxDarkHard { get; } = new("#1d2021", "#d5c4a1", "#665c54", "#d3869b", "#fe8019",
        "#83a598", "#fb4934", "#b8bb26", "#8ec07c", "#d5c4a1", "#fb4934", "#b8bb26");
    public static RizzyCodeTheme GruvboxDarkMedium { get; } = new("#282828", "#d5c4a1", "#665c54", "#d3869b", "#fe8019",
        "#83a598", "#fb4934", "#b8bb26", "#8ec07c", "#d5c4a1", "#fb4934", "#b8bb26");
    public static RizzyCodeTheme GruvboxDarkPale { get; } = new("#262626", "#dab997", "#8a8a8a", "#d485ad", "#ff8700",
        "#83adad", "#d75f5f", "#afaf00", "#85ad85", "#dab997", "#d75f5f", "#afaf00");
    public static RizzyCodeTheme GruvboxDarkSoft { get; } = new("#32302f", "#d5c4a1", "#665c54", "#d3869b", "#fe8019",
        "#83a598", "#fb4934", "#b8bb26", "#8ec07c", "#d5c4a1", "#fb4934", "#b8bb26");
    public static RizzyCodeTheme GruvboxLightHard { get; } = new("#f9f5d7", "#504945", "#bdae93", "#8f3f71", "#af3a03",
        "#076678", "#9d0006", "#79740e", "#427b58", "#504945", "#9d0006", "#79740e");
    public static RizzyCodeTheme GruvboxLightMedium { get; } = new("#fbf1c7", "#504945", "#bdae93", "#8f3f71",
        "#af3a03", "#076678", "#9d0006", "#79740e", "#427b58", "#504945", "#9d0006", "#79740e");
    public static RizzyCodeTheme GruvboxLightSoft { get; } = new("#f2e5bc", "#504945", "#bdae93", "#8f3f71", "#af3a03",
        "#076678", "#9d0006", "#79740e", "#427b58", "#504945", "#9d0006", "#79740e");
    public static RizzyCodeTheme HarmonicDark { get; } = new("#0b1c2c", "#cbd6e2", "#627e99", "#bf568b", "#bfbf56",
        "#8b56bf", "#bf8b56", "#56bf8b", "#568bbf", "#cbd6e2", "#bf8b56", "#56bf8b");
    public static RizzyCodeTheme HarmonicLight { get; } = new("#f7f9fb", "#405c79", "#aabcce", "#bf568b", "#bfbf56",
        "#8b56bf", "#bf8b56", "#56bf8b", "#568bbf", "#405c79", "#bf8b56", "#56bf8b");
    public static RizzyCodeTheme Hopscotch { get; } = new("#322931", "#b9b5b8", "#797379", "#c85e7c", "#fd8b19",
        "#1290bf", "#dd464c", "#8fc13e", "#149b93", "#b9b5b8", "#dd464c", "#8fc13e");
    public static RizzyCodeTheme IaDark { get; } = new("#1a1a1a", "#cccccc", "#767676", "#b98eb2", "#d86868", "#8eccdd",
        "#d88568", "#83a471", "#7c9cae", "#cccccc", "#d88568", "#83a471");
    public static RizzyCodeTheme IaLight { get; } = new("#f6f6f6", "#181818", "#898989", "#a94598", "#c43e18",
        "#48bac2", "#9c5a02", "#38781c", "#2d6bb1", "#181818", "#9c5a02", "#38781c");
    public static RizzyCodeTheme Icy { get; } = new("#021012", "#095b67", "#052e34", "#00acc1", "#b3ebf2", "#00bcd4",
        "#16c1d9", "#4dd0e1", "#26c6da", "#095b67", "#16c1d9", "#4dd0e1");
    public static RizzyCodeTheme Irblack { get; } = new("#000000", "#b5b3aa", "#6c6c66", "#ff73fd", "#e9c062",
        "#96cbfe", "#ff6c60", "#a8ff60", "#c6c5fe", "#b5b3aa", "#ff6c60", "#a8ff60");
    public static RizzyCodeTheme Isotope { get; } = new("#000000", "#d0d0d0", "#808080", "#cc00ff", "#ff9900",
        "#0066ff", "#ff0000", "#33ff00", "#00ffff", "#d0d0d0", "#ff0000", "#33ff00");
    public static RizzyCodeTheme Macintosh { get; } = new("#000000", "#c0c0c0", "#808080", "#4700a5", "#ff6403",
        "#0000d3", "#dd0907", "#1fb714", "#02abea", "#c0c0c0", "#dd0907", "#1fb714");
    public static RizzyCodeTheme Marrakesh { get; } = new("#201602", "#948e48", "#6c6823", "#8868b3", "#b36144",
        "#477ca1", "#c35359", "#18974e", "#75a738", "#948e48", "#c35359", "#18974e");
    public static RizzyCodeTheme Materia { get; } = new("#263238", "#CDD3DE", "#707880", "#82AAFF", "#EA9560",
        "#89DDFF", "#EC5F67", "#8BD649", "#80CBC4", "#CDD3DE", "#EC5F67", "#8BD649");
    public static RizzyCodeTheme MaterialDarker { get; } = new("#212121", "#EEFFFF", "#4A4A4A", "#C792EA", "#F78C6C",
        "#82AAFF", "#F07178", "#C3E88D", "#89DDFF", "#EEFFFF", "#F07178", "#C3E88D");
    public static RizzyCodeTheme MaterialLighter { get; } = new("#FAFAFA", "#80CBC4", "#CCD7DA", "#7C4DFF", "#F76D47",
        "#6182B8", "#FF5370", "#91B859", "#39ADB5", "#80CBC4", "#FF5370", "#91B859");
    public static RizzyCodeTheme MaterialPalenight { get; } = new("#292D3E", "#959DCB", "#676E95", "#C792EA", "#F78C6C",
        "#82AAFF", "#F07178", "#C3E88D", "#89DDFF", "#959DCB", "#F07178", "#C3E88D");
    public static RizzyCodeTheme MaterialVivid { get; } = new("#263238", "#B0BEC5", "#546E7A", "#651FFF", "#FF9100",
        "#2979FF", "#FF1744", "#00E676", "#00B0FF", "#B0BEC5", "#FF1744", "#00E676");
    public static RizzyCodeTheme Material { get; } = new("#263238", "#EEFFFF", "#546E7A", "#C792EA", "#F78C6C",
        "#82AAFF", "#F07178", "#C3E88D", "#89DDFF", "#EEFFFF", "#F07178", "#C3E88D");
    public static RizzyCodeTheme MellowPurple { get; } = new("#1e0528", "#ffeeff", "#320f55", "#8991bb", "#aa00a3",
        "#550068", "#00d9e9", "#05cb0d", "#b900b1", "#ffeeff", "#00d9e9", "#05cb0d");
    public static RizzyCodeTheme MexicoLight { get; } = new("#f8f8f8", "#383838", "#b8b8b8", "#96609e", "#dc9656",
        "#7cafc2", "#ab4642", "#538947", "#4b8093", "#383838", "#ab4642", "#538947");
    public static RizzyCodeTheme Mocha { get; } = new("#3B3228", "#d0c8c6", "#7e705a", "#a89bb9", "#d28b71", "#8ab3b5",
        "#cb6077", "#beb55b", "#7bbda4", "#d0c8c6", "#cb6077", "#beb55b");
    public static RizzyCodeTheme Monokai { get; } = new("#272822", "#f8f8f2", "#75715e", "#ae81ff", "#fd971f",
        "#66d9ef", "#f92672", "#a6e22e", "#a1efe4", "#f8f8f2", "#f92672", "#a6e22e");
    public static RizzyCodeTheme Nord { get; } = new("#2E3440", "#E5E9F0", "#4C566A", "#A3BE8C", "#81A1C1", "#EBCB8B",
        "#88C0D0", "#BF616A", "#D08770", "#E5E9F0", "#88C0D0", "#BF616A");
    public static RizzyCodeTheme Ocean { get; } = new("#2b303b", "#c0c5ce", "#65737e", "#b48ead", "#d08770", "#8fa1b3",
        "#bf616a", "#a3be8c", "#96b5b4", "#c0c5ce", "#bf616a", "#a3be8c");
    public static RizzyCodeTheme OceanicNext { get; } = new("#1B2B34", "#C0C5CE", "#65737E", "#C594C5", "#F99157",
        "#6699CC", "#EC5f67", "#99C794", "#5FB3B3", "#C0C5CE", "#EC5f67", "#99C794");
    public static RizzyCodeTheme OneLight { get; } = new("#fafafa", "#383a42", "#a0a1a7", "#a626a4", "#d75f00",
        "#4078f2", "#ca1243", "#50a14f", "#0184bc", "#383a42", "#ca1243", "#50a14f");
    public static RizzyCodeTheme Onedark { get; } = new("#282c34", "#abb2bf", "#545862", "#c678dd", "#d19a66",
        "#61afef", "#e06c75", "#98c379", "#56b6c2", "#abb2bf", "#e06c75", "#98c379");
    public static RizzyCodeTheme OutrunDark { get; } = new("#00002A", "#D0D0FA", "#50507A", "#F10596", "#FC8D28",
        "#66B0FF", "#FF4242", "#59F176", "#0EF0F0", "#D0D0FA", "#FF4242", "#59F176");
    public static RizzyCodeTheme Paraiso { get; } = new("#2f1e2e", "#a39e9b", "#776e71", "#815ba4", "#f99b15",
        "#06b6ef", "#ef6155", "#48b685", "#5bc4bf", "#a39e9b", "#ef6155", "#48b685");
    public static RizzyCodeTheme Phd { get; } = new("#061229", "#b8bbc2", "#717885", "#9989cc", "#f0a000", "#5299bf",
        "#d07346", "#99bf52", "#72b9bf", "#b8bbc2", "#d07346", "#99bf52");
    public static RizzyCodeTheme Pico { get; } = new("#000000", "#5f574f", "#008751", "#ff77a8", "#ffa300", "#83769c",
        "#ff004d", "#00e756", "#29adff", "#5f574f", "#ff004d", "#00e756");
    public static RizzyCodeTheme Pop { get; } = new("#000000", "#d0d0d0", "#505050", "#b31e8d", "#f29333", "#0e5a94",
        "#eb008a", "#37b349", "#00aabb", "#d0d0d0", "#eb008a", "#37b349");
    public static RizzyCodeTheme Porple { get; } = new("#292c36", "#d8d8d8", "#65568a", "#b74989", "#d28e5d", "#8485ce",
        "#f84547", "#95c76f", "#64878f", "#d8d8d8", "#f84547", "#95c76f");
    public static RizzyCodeTheme Railscasts { get; } = new("#2b2b2b", "#e6e1dc", "#5a647e", "#b6b3eb", "#cc7833",
        "#6d9cbe", "#da4939", "#a5c261", "#519f50", "#e6e1dc", "#da4939", "#a5c261");
    public static RizzyCodeTheme Rebecca { get; } = new("#292a44", "#f1eff8", "#666699", "#7aa5ff", "#efe4a1",
        "#2de0a7", "#a0a0c5", "#6dfedf", "#8eaee0", "#f1eff8", "#a0a0c5", "#6dfedf");
    public static RizzyCodeTheme Seti { get; } = new("#151718", "#d6d6d6", "#41535B", "#a074c4", "#db7b55", "#55b5db",
        "#Cd3f45", "#9fca56", "#55dbbe", "#d6d6d6", "#Cd3f45", "#9fca56");
    public static RizzyCodeTheme Shapeshifter { get; } = new("#f9f9f9", "#102015", "#555555", "#f996e2", "#e09448",
        "#3b48e3", "#e92f2f", "#0ed839", "#23edda", "#102015", "#e92f2f", "#0ed839");
    public static RizzyCodeTheme Snazzy { get; } = new("#1e1f29", "#eff0eb", "#78787e", "#ff6ac1", "#ff9f43", "#57c7ff",
        "#ff5c57", "#5af78e", "#9aedfe", "#eff0eb", "#ff5c57", "#5af78e");
    public static RizzyCodeTheme Solarflare { get; } = new("#18262F", "#A6AFB8", "#667581", "#A363D5", "#E66B2B",
        "#33B5E1", "#EF5253", "#7CC844", "#52CBB0", "#A6AFB8", "#EF5253", "#7CC844");
    public static RizzyCodeTheme SolarizedDark { get; } = new("#002b36", "#93a1a1", "#657b83", "#6c71c4", "#cb4b16",
        "#268bd2", "#dc322f", "#859900", "#2aa198", "#93a1a1", "#dc322f", "#859900");
    public static RizzyCodeTheme SolarizedLight { get; } = new("#fdf6e3", "#586e75", "#839496", "#6c71c4", "#cb4b16",
        "#268bd2", "#dc322f", "#859900", "#2aa198", "#586e75", "#dc322f", "#859900");
    public static RizzyCodeTheme Spacemacs { get; } = new("#1f2022", "#a3a3a3", "#585858", "#a31db1", "#ffa500",
        "#4f97d7", "#f2241f", "#67b11d", "#2d9574", "#a3a3a3", "#f2241f", "#67b11d");
    public static RizzyCodeTheme SummerfruitDark { get; } = new("#151515", "#D0D0D0", "#505050", "#AD00A1", "#FD8900",
        "#3777E6", "#FF0086", "#00C918", "#1FAAAA", "#D0D0D0", "#FF0086", "#00C918");
    public static RizzyCodeTheme SummerfruitLight { get; } = new("#FFFFFF", "#101010", "#B0B0B0", "#AD00A1", "#FD8900",
        "#3777E6", "#FF0086", "#00C918", "#1FAAAA", "#101010", "#FF0086", "#00C918");
    public static RizzyCodeTheme TomorrowNight { get; } = new("#1d1f21", "#c5c8c6", "#969896", "#b294bb", "#de935f",
        "#81a2be", "#cc6666", "#b5bd68", "#8abeb7", "#c5c8c6", "#cc6666", "#b5bd68");
    public static RizzyCodeTheme Tomorrow { get; } = new("#ffffff", "#4d4d4c", "#8e908c", "#8959a8", "#f5871f",
        "#4271ae", "#c82829", "#718c00", "#3e999f", "#4d4d4c", "#c82829", "#718c00");
    public static RizzyCodeTheme Tube { get; } = new("#231f20", "#d9d8d8", "#737171", "#98005d", "#f386a1", "#009ddc",
        "#ee2e24", "#00853e", "#85cebc", "#d9d8d8", "#ee2e24", "#00853e");
    public static RizzyCodeTheme Twilight { get; } = new("#1e1e1e", "#a7a7a7", "#5f5a60", "#9b859d", "#cda869",
        "#7587a6", "#cf6a4c", "#8f9d6a", "#afc4db", "#a7a7a7", "#cf6a4c", "#8f9d6a");
    public static RizzyCodeTheme UnikittyDark { get; } = new("#2e2a31", "#bcbabe", "#838085", "#bb60ea", "#d65407",
        "#796af5", "#d8137f", "#17ad98", "#149bda", "#bcbabe", "#d8137f", "#17ad98");
    public static RizzyCodeTheme UnikittyLight { get; } = new("#ffffff", "#6c696e", "#a7a5a8", "#aa17e6", "#d65407",
        "#775dff", "#d8137f", "#17ad98", "#149bda", "#6c696e", "#d8137f", "#17ad98");
    public static RizzyCodeTheme UnikittyReversible { get; } = new("#2e2a31", "#c3c2c4", "#878589", "#b33ce8",
        "#d65407", "#7864fa", "#d8137f", "#17ad98", "#149bda", "#c3c2c4", "#d8137f", "#17ad98");
    public static RizzyCodeTheme Woodland { get; } = new("#231e18", "#cabcb1", "#9d8b70", "#bb90e2", "#ca7f32",
        "#88a4d3", "#d35c5c", "#b7ba53", "#6eb958", "#cabcb1", "#d35c5c", "#b7ba53");
    public static RizzyCodeTheme XcodeDusk { get; } = new("#282B35", "#939599", "#686A71", "#B21889", "#786DC5",
        "#790EAD", "#B21889", "#DF0002", "#00A0BE", "#939599", "#B21889", "#DF0002");
    public static RizzyCodeTheme Zenburn { get; } = new("#3f3f3f", "#dcdccc", "#4f4f4f", "#dc8cc3", "#dfaf8f",
        "#7cb8bb", "#dca3a3", "#5f7f5f", "#93e0e3", "#dcdccc", "#dca3a3", "#5f7f5f");
}
</file>

<file path="Components/Theme/Themes/Code/RizzyCodeTheme.cs">
#pragma warning disable CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider adding the 'required' modifier or declaring as nullable.
namespace RizzyUI;
/// <summary>
///     Defines a syntax highlighting color theme for code.
/// </summary>
public class RizzyCodeTheme
{
	/// <summary>
	///     Initialize theme
	/// </summary>
	/// <param name="background"></param>
	/// <param name="color"></param>
	/// <param name="comment"></param>
	/// <param name="keyword"></param>
	/// <param name="attribute"></param>
	/// <param name="symbol"></param>
	/// <param name="nameSpace"></param>
	/// <param name="variable"></param>
	/// <param name="literal"></param>
	/// <param name="punctuation"></param>
	/// <param name="deletion"></param>
	/// <param name="addition"></param>
	public RizzyCodeTheme(
        string background,
        string color,
        string comment,
        string keyword,
        string attribute,
        string symbol,
        string nameSpace,
        string variable,
        string literal,
        string punctuation,
        string deletion,
        string addition)
    {
        Background = new Color(background);
        Color = new Color(color);
        Comment = new Color(comment);
        Keyword = new Color(keyword);
        Attribute = new Color(attribute);
        Symbol = new Color(symbol);
        Namespace = new Color(nameSpace);
        Variable = new Color(variable);
        Literal = new Color(literal);
        Punctuation = new Color(punctuation);
        Deletion = new Color(deletion);
        Addition = new Color(addition);
    }
	/// <summary>
	///     Gets the background color used for code highlighting.
	/// </summary>
	public Color Background { get; init; }
	/// <summary>
	///     Gets the default color used for code highlighting.
	/// </summary>
	public Color Color { get; init; }
	/// <summary>
	///     Gets the color used for comments.
	/// </summary>
	public Color Comment { get; init; }
	/// <summary>
	///     Gets the color used for keywords.
	/// </summary>
	public Color Keyword { get; init; }
	/// <summary>
	///     Gets the color used for attributes.
	/// </summary>
	public Color Attribute { get; init; }
	/// <summary>
	///     Gets the color used for symbols.
	/// </summary>
	public Color Symbol { get; init; }
	/// <summary>
	///     Gets the color used for namespaces.
	/// </summary>
	public Color Namespace { get; init; }
	/// <summary>
	///     Gets the color used for variables.
	/// </summary>
	public Color Variable { get; init; }
	/// <summary>
	///     Gets the color used for literals.
	/// </summary>
	public Color Literal { get; init; }
	/// <summary>
	///     Gets the color used for punctuation.
	/// </summary>
	public Color Punctuation { get; init; }
	/// <summary>
	///     Gets the color used to indicate deletions.
	/// </summary>
	public Color Deletion { get; init; }
	/// <summary>
	///     Gets the color used to indicate additions.
	/// </summary>
	public Color Addition { get; init; }
}
</file>

<file path="Components/Theme/Themes/HighContrastTheme.cs">
namespace RizzyUI;
/// <summary>
///     Represents the High Contrast theme for the application. Inherits from <see cref="RzTheme" />.
///     Initializes the theme using the specified Tailwind color palette.
/// </summary>
public class HighContrastTheme : RzTheme
{
    /// <summary>
    ///     Initializes a new instance of the <see cref="HighContrastTheme" /> class with predefined high-contrast values.
    /// </summary>
    public HighContrastTheme() : base("High Contrast", "highcontrast")
    {
        // Light mode colors
        Light = new RzThemeVariant
        {
            Surface = Colors.Gray.L50, // gray-50: (249, 250, 251)
            OnSurface = Colors.Gray.L800, // gray-800: (31, 41, 55)
            OnSurfaceStrong = Colors.Gray.L950, // gray-950: (10, 10, 10)
            OnSurfaceMuted = Colors.Neutral.L500,
            SurfaceAlt = Colors.Gray.L200, // gray-200: (229, 231, 235)
            SurfaceTertiary = Colors.Gray.L300,
            OnSurfaceTertiary = Colors.Gray.L700,
            Primary = Colors.Sky.L900, // sky-900: (8, 51, 68)
            OnPrimary = Colors.White, // white: (255, 255, 255)
            Secondary = Colors.Indigo.L900, // indigo-900: (17, 24, 39)
            OnSecondary = Colors.White, // white: (255, 255, 255)
            Outline = Colors.Gray.L500, // gray-500: (107, 114, 128)
            OutlineStrong = Colors.Gray.L900, // gray-900: (17, 24, 39)
            Code = CodeThemes.Github
        };
        // Dark mode colors
        Dark = new RzThemeVariant
        {
            Surface = Colors.Gray.L900, // gray-900: (17, 24, 39)
            OnSurface = Colors.Gray.L300, // gray-300: (209, 213, 219)
            OnSurfaceStrong = Colors.Gray.L100, // gray-100: (245, 245, 245)
            OnSurfaceMuted = Colors.Neutral.L500,
            SurfaceAlt = Colors.Gray.L800, // gray-800: (31, 41, 55)
            SurfaceTertiary = Colors.Gray.L700,
            OnSurfaceTertiary = Colors.Gray.L300,
            Primary = Colors.Sky.L400, // sky-400: (14, 165, 233)
            OnPrimary = Colors.Black, // black: (0, 0, 0)
            Secondary = Colors.Indigo.L400, // indigo-400: (147, 51, 234)
            OnSecondary = Colors.Black, // black: (0, 0, 0)
            Outline = Colors.Gray.L500, // gray-500: (107, 114, 128)
            OutlineStrong = Colors.Gray.L300, // gray-300: (209, 213, 219)
            Code = CodeThemes.DefaultDark
        };
        // Shared Colors
        Danger = Colors.Red.L500; // red-500: (239, 68, 68)
        OnDanger = Colors.Black; // black: (0, 0, 0)
        Info = Colors.Sky.L500; // sky-500: (14, 165, 233)
        OnInfo = Colors.Black; // black: (0, 0, 0)
        Warning = Colors.Yellow.L500; // yellow-500: (234, 179, 8)
        OnWarning = Colors.Black; // black: (0, 0, 0)
        Success = Colors.Green.L500; // green-500: (34, 197, 94)
        OnSuccess = Colors.Black; // black: (0, 0, 0)
        // Borders and Radius
        BorderWidth = "1px";
        BorderRadius = "6px";
    }
}
</file>

<file path="Components/Theme/Themes/ModernTheme.cs">
namespace RizzyUI;
/// <summary>
///     Represents the Modern theme for the application. Inherits from <see cref="RzTheme" />.
///     Initializes the theme using the specified Tailwind color palette.
/// </summary>
public class ModernTheme : RzTheme
{
    /// <summary>
    ///     Initializes a new instance of the <see cref="ModernTheme" /> class with predefined modern values.
    /// </summary>
    public ModernTheme() : base("Modern", "modern")
    {
        // Light mode colors
        Light = new RzThemeVariant
        {
            Surface = Colors.White, // white: (255, 255, 255)
            OnSurface = Colors.Neutral.L600, // neutral-600: (75, 85, 99)
            OnSurfaceStrong = Colors.Neutral.L900, // neutral-900: (17, 24, 39)
            OnSurfaceMuted = Colors.Neutral.L500,
            SurfaceAlt = Colors.Neutral.L50, // neutral-50: (249, 250, 251)
            SurfaceTertiary = Colors.Neutral.L100,
            OnSurfaceTertiary = Colors.Neutral.L500,
            Primary = Colors.Black, // black: (0, 0, 0)
            OnPrimary = Colors.Neutral.L100, // neutral-100: (245, 245, 245)
            Secondary = Colors.Neutral.L800, // neutral-800: (31, 41, 55)
            OnSecondary = Colors.White, // white: (255, 255, 255)
            Outline = Colors.Neutral.L300, // neutral-300: (209, 213, 219)
            OutlineStrong = Colors.Neutral.L800, // neutral-800: (31, 41, 55)
            Code = CodeThemes.Github
        };
        // Dark mode colors
        Dark = new RzThemeVariant
        {
            Surface = Colors.Neutral.L950, // neutral-950: (7, 7, 7)
            OnSurface = Colors.Neutral.L300, // neutral-300: (209, 213, 219)
            OnSurfaceStrong = Colors.White, // white: (255, 255, 255)
            OnSurfaceMuted = Colors.Neutral.L500,
            SurfaceAlt = Colors.Neutral.L900, // neutral-900: (17, 24, 39)
            SurfaceTertiary = Colors.Neutral.L800,
            OnSurfaceTertiary = Colors.Neutral.L300,
            Primary = Colors.White, // white: (255, 255, 255)
            OnPrimary = Colors.Black, // black: (0, 0, 0)
            Secondary = Colors.Neutral.L300, // neutral-300: (209, 213, 219)
            OnSecondary = Colors.Black, // black: (0, 0, 0)
            Outline = Colors.Neutral.L700, // neutral-700: (55, 65, 81)
            OutlineStrong = Colors.Neutral.L300, // neutral-300: (209, 213, 219)
            Code = CodeThemes.DefaultDark
        };
        // Shared Colors
        Danger = Colors.Red.L500; // red-500: (239, 68, 68)
        OnDanger = Colors.White; // white: (255, 255, 255)
        Info = Colors.Sky.L500; // sky-500: (14, 165, 233)
        OnInfo = Colors.White; // white: (255, 255, 255)
        Warning = Colors.Amber.L500; // amber-500: (245, 158, 11)
        OnWarning = Colors.White; // white: (255, 255, 255)
        Success = Colors.Green.L500; // green-500: (34, 197, 94)
        OnSuccess = Colors.White; // white: (255, 255, 255)
        // Borders and Radius
        BorderWidth = "1px";
        BorderRadius = "6px";
    }
}
</file>

<file path="Components/Theme/Themes/NewsTheme.cs">
namespace RizzyUI;
/// <summary>
///     Represents the News theme for the application. Inherits from <see cref="RzTheme" />.
///     Initializes the theme using the specified Tailwind color palette.
/// </summary>
public class NewsTheme : RzTheme
{
    /// <summary>
    ///     Initializes a new instance of the <see cref="NewsTheme" /> class with predefined news-oriented values.
    /// </summary>
    public NewsTheme() : base("News", "news")
    {
        // Light mode colors
        Light = new RzThemeVariant
        {
            Surface = Colors.Zinc.L50, // zinc-50: (250, 250, 249)
            OnSurface = Colors.Neutral.L600, // neutral-600: (75, 85, 99)
            OnSurfaceStrong = Colors.Neutral.L900, // neutral-900: (17, 24, 39)
            OnSurfaceMuted = Colors.Neutral.L500,
            SurfaceAlt = Colors.Zinc.L100, // zinc-100: (244, 244, 245)
            SurfaceTertiary = Colors.Zinc.L200,
            OnSurfaceTertiary = Colors.Zinc.L500,
            Primary = Colors.Sky.L700, // sky-700: (14, 165, 233)
            OnPrimary = Colors.White, // white: (255, 255, 255)
            Secondary = Colors.Black, // black: (0, 0, 0)
            OnSecondary = Colors.White, // white: (255, 255, 255)
            Outline = Colors.Zinc.L300, // zinc-300: (209, 213, 219)
            OutlineStrong = Colors.Zinc.L500, // zinc-500: (113, 113, 122)
            Code = CodeThemes.Github
        };
        // Dark mode colors
        Dark = new RzThemeVariant
        {
            Surface = Colors.Zinc.L900, // zinc-900: (15, 23, 42)
            OnSurface = Colors.Zinc.L200, // zinc-200: (229, 231, 235)
            OnSurfaceStrong = Colors.Zinc.L50, // zinc-50: (250, 250, 249)
            OnSurfaceMuted = Colors.Neutral.L500,
            SurfaceAlt = Colors.Zinc.L800, // zinc-800: (31, 41, 55)
            SurfaceTertiary = Colors.Zinc.L700,
            OnSurfaceTertiary = Colors.Zinc.L200,
            Primary = Colors.Sky.L600, // sky-600: (8, 51, 68)
            OnPrimary = Colors.White, // white: (255, 255, 255)
            Secondary = Colors.White, // white: (255, 255, 255)
            OnSecondary = Colors.Black, // black: (0, 0, 0)
            Outline = Colors.Zinc.L700, // zinc-700: (38, 38, 38)
            OutlineStrong = Colors.Zinc.L500, // zinc-500: (113, 113, 122)
            Code = CodeThemes.DefaultDark
        };
        // Shared Colors
        Danger = Colors.Red.L700; // red-700: (185, 28, 28)
        OnDanger = Colors.Slate.L100; // slate-100: (245, 245, 245)
        Info = Colors.Sky.L700; // sky-700: (14, 165, 233)
        OnInfo = Colors.Slate.L100; // slate-100: (245, 245, 245)
        Warning = Colors.Amber.L600; // amber-600: (217, 119, 6)
        OnWarning = Colors.Amber.L50; // amber-50: (255, 251, 235)
        Success = Colors.Green.L700; // green-700: (34, 197, 94)
        OnSuccess = Colors.White; // white: (255, 255, 255)
        // Borders and Radius
        BorderWidth = "1px";
        BorderRadius = "6px";
    }
}
</file>

<file path="Components/Typography/RzHeading.razor">
@namespace RizzyUI
@inherits RzTypographyBase

<HtmlElement Element="@Element" @attributes="@AdditionalAttributes" id="@Id" class="@RootClass()"
             x-data="rzHeading"> @* Alpine data remains if needed for interaction *@
    @if (ChildContent == null && !string.IsNullOrEmpty(QuickReferenceTitle))
    {
        @QuickReferenceTitle @* Render QR title if no children provided *@
    }
    else
    {
        @ChildContent
    }
</HtmlElement>
</file>

<file path="Components/Typography/RzHeading.razor.cs">
using Microsoft.AspNetCore.Components;
using Rizzy.Utility;
using RizzyUI.Extensions;
namespace RizzyUI;
/// <xmldoc>
///     Renders an HTML heading element (h1-h4) with appropriate typography styling based on the level and active
///     <see cref="RzTheme" />.
///     Inherits common text styling options from <see cref="RzTypographyBase" />. Can register itself with an
///     <see cref="RzQuickReferenceContainer" />.
/// </xmldoc>
public partial class RzHeading : RzTypographyBase 
{
    private bool _registered;
    /// <summary> Represents the heading level (H1-H4), determining the HTML tag and base styles. Required. </summary>
    [Parameter]
    [EditorRequired]
    public required HeadingLevel Level { get; set; }
    /// <summary> The content to be rendered inside the heading tag. </summary>
    [Parameter]
    public RenderFragment? ChildContent { get; set; }
    /// <summary>
    ///     The title text to use when registering this heading with an <see cref="RzQuickReferenceContainer" />. If null
    ///     or empty, the heading will not be registered.
    /// </summary>
    [Parameter]
    public string? QuickReferenceTitle { get; set; }
    /// <summary> Gets the parent <see cref="RzQuickReferenceContainer" /> if this heading is nested within one. </summary>
    [CascadingParameter]
    private RzQuickReferenceContainer? QuickReferenceContainer { get; set; }
    /// <summary> The unique ID automatically generated for this heading element, used for linking. </summary>
    public string Id { get; } = IdGenerator.UniqueId("rzheading"); // Use new prefix
    /// <inheritdoc />
    protected override void OnParametersSet()
    {
        // Initialize base (gets theme) before using it
        base.OnParametersSet();
        Element = Level switch // Set the HTML tag based on Level
        {
            HeadingLevel.H1 => "h1", HeadingLevel.H2 => "h2",
            HeadingLevel.H3 => "h3", HeadingLevel.H4 => "h4",
            _ => "h1" // Default to h1
        };
        // Apply default text colors based on level if not explicitly set
        if (TextColor is null)
            TextColor = Level is HeadingLevel.H1 or HeadingLevel.H2
                ? SemanticColor.OnSurfaceStrong
                : SemanticColor.OnSurface;
        // Register with Quick Reference if applicable
        if (!_registered && QuickReferenceContainer != null && !string.IsNullOrEmpty(QuickReferenceTitle))
        {
            QuickReferenceContainer.RegisterHeading(Level, QuickReferenceTitle, Id);
            _registered = true;
        }
    }
    /// <inheritdoc />
    protected override string? RootClass()
    {
        var headingStyles = Theme.RzHeading;
        // Merge base typography styles with level-specific styles
        return TwMerge.Merge(AdditionalAttributes,
            GetTypographyBaseCss(), // From RzTypographyBase
            headingStyles.GetLevelCss(Level) // From RzHeadingStyles
        );
    }
}
</file>

<file path="Components/Typography/RzParagraph.razor">
@namespace RizzyUI

@inherits RzTypographyBase

<HtmlElement Element="@Element" @attributes="@AdditionalAttributes" class="@RootClass()">
	@ChildContent
</HtmlElement>
</file>

<file path="Components/Typography/RzParagraph.razor.cs">
using Microsoft.AspNetCore.Components;
using RizzyUI.Extensions;
namespace RizzyUI;
/// <xmldoc>
///     Renders a paragraph (<c>p</c>) element with standard typography styling.
///     Inherits text styling options from <see cref="RzTypographyBase" />.
///     Styling, including prose width, is determined by the active <see cref="RzTheme" />.
/// </xmldoc>
public partial class RzParagraph : RzTypographyBase
{
    // Theme is inherited from RzTypographyBase
    /// <summary> The content to be rendered inside the paragraph. </summary>
    [Parameter]
    public RenderFragment? ChildContent { get; set; }
    /// <summary> Gets or sets the maximum character width of the paragraph. Defaults to Full. </summary>
    [Parameter]
    public ProseWidth ProseWidth { get; set; } = ProseWidth.Full;
    /// <inheritdoc />
    protected override void OnInitialized()
    {
        // Initialize inherited properties first
        base.OnInitialized();
        Element = "p"; // Set the specific element tag
        TextColor ??= SemanticColor.OnSurface; // Default paragraph text color if not set by base or parameter
    }
    /// <inheritdoc />
    protected override string? RootClass()
    {
        var styles = Theme.RzParagraph;
        return TwMerge.Merge(AdditionalAttributes,
            styles.Paragraph, // Base paragraph styles (margin, leading)
            GetTypographyBaseCss(), // Common typography styles (color, weight, size etc. from base)
            styles.GetProseWidthCss(ProseWidth) // Prose width class
        );
    }
}
</file>

<file path="Components/Typography/RzTypographyBase.cs">
using Microsoft.AspNetCore.Components;
using Microsoft.Extensions.Options;
// Required for TwMerge if used directly (though RootClass does it)
namespace RizzyUI;
/// <xmldoc>
///     Base class for typography components like <see cref="RzHeading" /> and <see cref="RzParagraph" />.
///     Provides common parameters for text styling (color, weight, size, etc.) and access to the theme's typography
///     styles.
/// </xmldoc>
public abstract class RzTypographyBase : RzComponent
{
    /// <summary> Gets or sets the text color. If null, defaults are often applied by inheriting components. </summary>
    [Parameter]
    public SemanticColor? TextColor { get; set; }
    /// <summary> Gets or sets the font weight. </summary>
    [Parameter]
    public TextWeight? Weight { get; set; }
    /// <summary> Gets or sets the text size. </summary>
    [Parameter]
    public TextSize? Size { get; set; }
    /// <summary> Gets or sets the line height (leading). </summary>
    [Parameter]
    public Leading? LineHeight { get; set; }
    /// <summary> Gets or sets the text decoration (underline, etc.). </summary>
    [Parameter]
    public TextDecoration? Decoration { get; set; }
    /// <summary> Gets or sets the text transformation (uppercase, etc.). </summary>
    [Parameter]
    public TextTransform? Transform { get; set; }
    /// <summary> Builds a string of combined typography CSS classes based on the component's parameters and the active theme. </summary>
    /// <returns>A string containing Tailwind CSS classes for typography styling.</returns>
    protected virtual string GetTypographyBaseCss()
    {
        return Theme.RzTypography.GetBaseCss(TextColor, Weight, Size, LineHeight, Decoration, Transform);
    }
}
</file>

<file path="Components/Typography/Styles.cs">
namespace RizzyUI;
/// <summary>
///     Represents the heading level, corresponding to HTML heading tags.
/// </summary>
public enum HeadingLevel
{
    /// <summary>
    ///     Heading level 1 (&lt;h1&gt;), typically the largest heading.
    /// </summary>
    H1,
    /// <summary>
    ///     Heading level 2 (&lt;h2&gt;), typically used for main sections.
    /// </summary>
    H2,
    /// <summary>
    ///     Heading level 3 (&lt;h3&gt;), typically used for subsections.
    /// </summary>
    H3,
    /// <summary>
    ///     Heading level 4 (&lt;h4&gt;), typically used for smaller subsections.
    /// </summary>
    H4
}
/// <summary>
///     Represents the font weight.
/// </summary>
public enum TextWeight
{
    /// <summary>
    ///     Thin font weight (font-weight: 100).
    /// </summary>
    Thin,
    /// <summary>
    ///     Normal font weight (font-weight: 400).
    /// </summary>
    Normal,
    /// <summary>
    ///     Bold font weight (font-weight: 700).
    /// </summary>
    Bold,
    /// <summary>
    ///     Extra bold font weight (font-weight: 800).
    /// </summary>
    ExtraBold
}
/// <summary>
///     Represents the font size.
/// </summary>
public enum TextSize
{
    /// <summary>
    ///     Small text size (font-size: 0.875rem; 14px).
    /// </summary>
    Small,
    /// <summary>
    ///     Medium text size (font-size: 1rem; 16px).
    /// </summary>
    Medium,
    /// <summary>
    ///     Large text size (font-size: 1.125rem; 18px).
    /// </summary>
    Large,
    /// <summary>
    ///     Extra large text size (font-size: 1.25rem; 20px).
    /// </summary>
    ExtraLarge,
    /// <summary>
    ///     2XL text size (font-size: 1.5rem; 24px).
    /// </summary>
    TwoXL,
    /// <summary>
    ///     3XL text size (font-size: 1.875rem; 30px).
    /// </summary>
    ThreeXL,
    /// <summary>
    ///     4XL text size (font-size: 2.25rem; 36px).
    /// </summary>
    FourXL,
    /// <summary>
    ///     5XL text size (font-size: 3rem; 48px).
    /// </summary>
    FiveXL
}
/// <summary>
///     Represents text decoration styles.
/// </summary>
public enum TextDecoration
{
    /// <summary>
    ///     No text decoration (text-decoration: none).
    /// </summary>
    None,
    /// <summary>
    ///     Underlined text (text-decoration: underline).
    /// </summary>
    Underline,
    /// <summary>
    ///     Overlined text (text-decoration: overline).
    /// </summary>
    Overline,
    /// <summary>
    ///     Line-through text (text-decoration: line-through).
    /// </summary>
    LineThrough
}
/// <summary>
///     Represents text transformation styles.
/// </summary>
public enum TextTransform
{
    /// <summary>
    ///     Normal text (text-transform: none).
    /// </summary>
    None,
    /// <summary>
    ///     Uppercase text (text-transform: uppercase).
    /// </summary>
    Uppercase,
    /// <summary>
    ///     Lowercase text (text-transform: lowercase).
    /// </summary>
    Lowercase,
    /// <summary>
    ///     Capitalized text (text-transform: capitalize).
    /// </summary>
    Capitalize
}
/// <summary>
///     Represents the line height.
/// </summary>
public enum Leading
{
    /// <summary>
    ///     None line height (line-height: 1).
    /// </summary>
    None,
    /// <summary>
    ///     Tight line height (line-height: 1.25).
    /// </summary>
    Tight,
    /// <summary>
    ///     Snug line height (line-height: 1.375).
    /// </summary>
    Snug,
    /// <summary>
    ///     Normal line height (line-height: 1.5).
    /// </summary>
    Normal,
    /// <summary>
    ///     Relaxed line height (line-height: 1.625).
    /// </summary>
    Relaxed,
    /// <summary>
    ///     Loose line height (line-height: 2).
    /// </summary>
    Loose
}
</file>

<file path="Components/Typography/Styling/DefaultRzTypographyStyles.cs">
namespace RizzyUI;
/// <summary> Provides default styles for base typography settings. </summary>
public class DefaultRzTypographyStyles : RzStylesBase.RzTypographyStylesBase 
{
    public DefaultRzTypographyStyles(RzTheme theme) : base(theme)
    {
    }
    /// <inheritdoc />
    public override string GetTextWeightCss(TextWeight? weight)
    {
        return weight switch
        {
            TextWeight.Thin => "font-thin", TextWeight.Normal => "font-normal",
            TextWeight.Bold => "font-bold", TextWeight.ExtraBold => "font-extrabold",
            _ => ""
        };
    }
    /// <inheritdoc />
    public override string GetTextSizeCss(TextSize? size)
    {
        return size switch
        {
            TextSize.Small => "text-sm", TextSize.Medium => "text-base", TextSize.Large => "text-lg",
            TextSize.ExtraLarge => "text-xl", TextSize.TwoXL => "text-2xl", TextSize.ThreeXL => "text-3xl",
            TextSize.FourXL => "text-4xl", TextSize.FiveXL => "text-5xl",
            _ => ""
        };
    }
    /// <inheritdoc />
    public override string GetTextTransformCss(TextTransform? transform)
    {
        return transform switch
        {
            TextTransform.None => "normal-case", TextTransform.Uppercase => "uppercase",
            TextTransform.Lowercase => "lowercase", TextTransform.Capitalize => "capitalize",
            _ => ""
        };
    }
    /// <inheritdoc />
    public override string GetTextDecorationCss(TextDecoration? decoration)
    {
        return decoration switch
        {
            TextDecoration.None => "no-underline", TextDecoration.Underline => "underline",
            TextDecoration.Overline => "overline", TextDecoration.LineThrough => "line-through",
            _ => ""
        };
    }
    /// <inheritdoc />
    public override string GetLineHeightCss(Leading? leading)
    {
        return leading switch
        {
            Leading.None => "leading-none", Leading.Tight => "leading-tight", Leading.Snug => "leading-snug",
            Leading.Normal => "leading-normal", Leading.Relaxed => "leading-relaxed", Leading.Loose => "leading-loose",
            _ => ""
        };
    }
    /// <inheritdoc />
    public override string GetBaseCss(SemanticColor? textColor, TextWeight? weight, TextSize? size, Leading? lineHeight,
        TextDecoration? decoration, TextTransform? transform)
    {
        // Combine all individual style parts
        return
            $"{textColor?.ToTextClass() ?? ""} {GetTextWeightCss(weight)} {GetTextSizeCss(size)} {GetLineHeightCss(lineHeight)} {GetTextDecorationCss(decoration)} {GetTextTransformCss(transform)}"
                .Trim();
    }
}
/// <summary> Provides default styles for RzHeading. </summary>
public class DefaultRzHeadingStyles : RzStylesBase.RzHeadingStylesBase 
{
    public DefaultRzHeadingStyles(RzTheme theme) : base(theme)
    {
    }
    /// <inheritdoc />
    public override string GetLevelCss(HeadingLevel level)
    {
        return level switch
        {
            // Tailwind defaults provide good responsive sizing based on H tag
            HeadingLevel.H1 => "mb-5 text-xl sm:text-2xl md:text-3xl lg:text-4xl font-bold",
            HeadingLevel.H2 => "mb-4 text-lg sm:text-xl md:text-2xl lg:text-3xl font-semibold",
            HeadingLevel.H3 => "mb-3 text-base sm:text-lg md:text-xl lg:text-2xl font-medium",
            HeadingLevel.H4 => "mb-2 text-base sm:text-lg md:text-xl lg:text-2xl font-normal", // Adjusted H4 slightly
            _ => GetLevelCss(HeadingLevel.H1) // Default to H1 style if needed
        };
    }
}
/// <summary> Provides default styles for RzParagraph. </summary>
public class DefaultRzParagraphStyles : RzStylesBase.RzParagraphStylesBase 
{
    public DefaultRzParagraphStyles(RzTheme theme) : base(theme)
    {
    }
    /// <inheritdoc />
    public override string Paragraph => "my-4 leading-relaxed"; // Base margin and leading
    /// <inheritdoc />
    public override string GetProseWidthCss(ProseWidth width)
    {
        return width switch
        {
            ProseWidth.Compact => "max-w-prose prose-compact", // Use standard prose and potentially a custom compact utility if defined
            ProseWidth.Comfortable => "max-w-prose prose-comfortable",
            ProseWidth.Relaxed => "max-w-prose prose-relaxed",
            ProseWidth.Wide => "max-w-prose prose-wide",
            ProseWidth.UltraWide => "max-w-prose prose-ultrawide",
            ProseWidth.Full => "max-w-none", // No max-width constraint
            _ => GetProseWidthCss(ProseWidth.Full) // Default Paragraphs to full width unless specified
        };
    }
}
</file>

<file path="Components/Utility/ColorUtil.cs">
using System.Diagnostics.CodeAnalysis;
namespace RizzyUI;
/// <summary>
///     Provides utility methods for converting accent and semantic color values to complete Tailwind CSS class strings for
///     background and text styling.
/// </summary>
public static class ColorUtil
{
    // ReSharper disable once UnusedMember.Local
    [SuppressMessage("CodeQuality", "IDE0051:Remove unused private members",
        Justification = "This is to allow Tailwind utilities to discover used classes")]
#pragma warning disable CS0414 // Field is assigned but its value is never used
    private static readonly string TwBackgroundClassAfterDiscovery =
#pragma warning restore CS0414 // Field is assigned but its value is never used
        "after:bg-surface after:bg-on-surface after:bg-on-surface-strong after:bg-surface-alt after:bg-primary after:bg-on-primary after:bg-secondary after:bg-on-secondary after:bg-outline after:bg-outline-strong after:bg-danger after:bg-on-danger after:bg-info after:bg-on-info after:bg-warning after:bg-on-warning after:bg-success after:bg-on-success after:bg-surface";
    /// <summary>
    ///     Converts an AccentColor to a background class string
    /// </summary>
    /// <param name="accentColor"></param>
    /// <returns></returns>
    public static string ToLightBackgroundClass(this AccentColor accentColor)
    {
        return accentColor switch
        {
            AccentColor.Inherit => "",
            AccentColor.Gray => "bg-gray-100",
            AccentColor.Emerald => "bg-emerald-200",
            AccentColor.Teal => "bg-teal-200",
            AccentColor.Blue => "bg-blue-200",
            AccentColor.Indigo => "bg-indigo-200",
            AccentColor.Purple => "bg-purple-200",
            AccentColor.Pink => "bg-pink-200",
            AccentColor.Red => "bg-red-200",
            AccentColor.Orange => "bg-orange-200",
            AccentColor.Yellow => "bg-yellow-300",
            _ => "bg-gray-100"
        };
    }
    /// <summary>
    ///     Converts an AccentColor to a background class string
    /// </summary>
    /// <param name="accentColor"></param>
    /// <returns></returns>
    public static string ToDarkBackgroundClass(this AccentColor accentColor)
    {
        return accentColor switch
        {
            AccentColor.Inherit => "",
            AccentColor.Gray => "bg-gray-400",
            AccentColor.Emerald => "bg-emerald-800",
            AccentColor.Teal => "bg-teal-600",
            AccentColor.Blue => "bg-blue-600",
            AccentColor.Indigo => "bg-indigo-700",
            AccentColor.Purple => "bg-purple-600",
            AccentColor.Pink => "bg-pink-500",
            AccentColor.Red => "bg-red-500",
            AccentColor.Orange => "bg-orange-500",
            AccentColor.Yellow => "bg-yellow-300",
            _ => "bg-gray-400"
        };
    }
    /// <summary>
    ///     Converts an AccentColor to a text class string
    /// </summary>
    /// <param name="accentColor"></param>
    /// <returns></returns>
    public static string ToTextClass(AccentColor accentColor)
    {
        return accentColor switch
        {
            AccentColor.Inherit => "",
            AccentColor.Gray => "text-gray-600",
            AccentColor.Emerald => "text-emerald-700",
            AccentColor.Teal => "text-teal-700",
            AccentColor.Blue => "text-blue-700",
            AccentColor.Indigo => "text-indigo-700",
            AccentColor.Purple => "text-purple-700",
            AccentColor.Pink => "text-pink-700",
            AccentColor.Red => "text-red-700",
            AccentColor.Orange => "text-orange-700",
            AccentColor.Yellow => "text-yellow-800",
            _ => "text-gray-600"
        };
    }
    /// <summary>
    ///     Converts a SemanticColor to a text class string, including dark mode variants for Surface colors.
    /// </summary>
    /// <param name="color">The color enum value.</param>
    /// <returns>A string representing the corresponding CSS class.</returns>
    public static string ToTextClass(this SemanticColor color)
    {
        return color switch
        {
            SemanticColor.None => "",
            // Surface Colors
            SemanticColor.Surface => "text-surface ",
            SemanticColor.OnSurface => "text-on-surface ",
            SemanticColor.OnSurfaceStrong => "text-on-surface-strong ",
            SemanticColor.SurfaceAlt => "text-surface-alt ",
            SemanticColor.Primary => "text-primary ",
            SemanticColor.OnPrimary => "text-on-primary ",
            SemanticColor.Secondary => "text-secondary ",
            SemanticColor.OnSecondary => "text-on-secondary ",
            SemanticColor.Outline => "text-outline ",
            SemanticColor.OutlineStrong => "text-outline-strong ",
            // Status Colors (no dark variants)
            SemanticColor.Danger => "text-danger",
            SemanticColor.OnDanger => "text-on-danger",
            SemanticColor.Info => "text-info",
            SemanticColor.OnInfo => "text-onInfo",
            SemanticColor.Warning => "text-warning",
            SemanticColor.OnWarning => "text-on-warning",
            SemanticColor.Success => "text-success",
            SemanticColor.OnSuccess => "text-on-success",
            _ => "text-on-surface "
        };
    }
    /// <summary>
    ///     Converts a StatusColor to a text class string, including dark mode variants for Status colors.
    /// </summary>
    /// <param name="color">The color enum value.</param>
    /// <returns>A string representing the corresponding CSS class.</returns>
    public static string ToTextClass(this StatusColor color)
    {
        return color switch
        {
            StatusColor.Primary => "text-on-primary ",
            StatusColor.Danger => "text-on-danger",
            StatusColor.Info => "text-onInfo",
            StatusColor.Secondary => "text-on-secondary",
            StatusColor.Success => "text-on-success",
            StatusColor.Warning => "text-on-warning",
            _ => "text-on-primary "
        };
    }
    /// <summary>
    ///     Converts a SemanticColor to a background class string, including dark mode variants for Surface colors.
    /// </summary>
    /// <param name="color">The color enum value.</param>
    /// <returns>A string representing the corresponding CSS background class.</returns>
    public static string ToBackgroundClass(this SemanticColor color)
    {
        return color switch
        {
            SemanticColor.None => "",
            // Surface Colors
            SemanticColor.Surface => "bg-surface",
            SemanticColor.OnSurface => "bg-on-surface",
            SemanticColor.OnSurfaceStrong => "bg-on-surface-strong",
            SemanticColor.SurfaceAlt => "bg-surface-alt",
            SemanticColor.Primary => "bg-primary",
            SemanticColor.OnPrimary => "bg-on-primary",
            SemanticColor.Secondary => "bg-secondary",
            SemanticColor.OnSecondary => "bg-on-secondary",
            SemanticColor.Outline => "bg-outline",
            SemanticColor.OutlineStrong => "bg-outline-strong",
            // Status Colors (no dark variants)
            SemanticColor.Danger => "bg-danger",
            SemanticColor.OnDanger => "bg-on-danger",
            SemanticColor.Info => "bg-info",
            SemanticColor.OnInfo => "bg-onInfo",
            SemanticColor.Warning => "bg-warning",
            SemanticColor.OnWarning => "bg-on-warning",
            SemanticColor.Success => "bg-success",
            SemanticColor.OnSuccess => "bg-on-success",
            _ => "bg-surface "
        };
    }
    /// <summary>
    ///     Converts a SemanticColor to a background class string, including dark mode variants for Surface colors.
    /// </summary>
    /// <param name="color">The color enum value.</param>
    /// <param name="pseudoSelector">Tailwind pseudo element modifier ("before" or "after")</param>
    /// <returns>A string representing the corresponding CSS background class.</returns>
    public static string ToBackgroundClass(this SemanticColor color, string pseudoSelector)
    {
        var ps = pseudoSelector + ":";
        return color switch
        {
            SemanticColor.None => "",
            // Surface Colors
            SemanticColor.Surface => $"{ps}bg-surface",
            SemanticColor.OnSurface => $"{ps}bg-on-surface",
            SemanticColor.OnSurfaceStrong => $"{ps}bg-on-surface-strong",
            SemanticColor.SurfaceAlt => $"{ps}bg-surface-alt",
            SemanticColor.Primary => $"{ps}bg-primary",
            SemanticColor.OnPrimary => $"{ps}bg-on-primary",
            SemanticColor.Secondary => $"{ps}bg-secondary",
            SemanticColor.OnSecondary => $"{ps}bg-on-secondary",
            SemanticColor.Outline => $"{ps}bg-outline",
            SemanticColor.OutlineStrong => $"{ps}bg-outline-strong",
            // Status Colors (no dark variants)
            SemanticColor.Danger => ps + "bg-danger",
            SemanticColor.OnDanger => ps + "bg-on-danger",
            SemanticColor.Info => ps + "bg-info",
            SemanticColor.OnInfo => ps + "bg-onInfo",
            SemanticColor.Warning => ps + "bg-warning",
            SemanticColor.OnWarning => ps + "bg-on-warning",
            SemanticColor.Success => ps + "bg-success",
            SemanticColor.OnSuccess => ps + "bg-on-success",
            _ => "bg-surface "
        };
    }
}
</file>

<file path="Components/Variants.cs">
using System.Diagnostics.CodeAnalysis;
namespace RizzyUI;
/// <summary>
///     Variants for alert components, defining their visual appearance.
/// </summary>
public enum AlertVariant
{
	/// <summary>
	///     Alert using the alternate background color
	/// </summary>
	Alternate,
    /// <summary>Informational alert, typically blue or neutral.</summary>
    Information,
    /// <summary>Success alert, often green to indicate positive feedback.</summary>
    Success,
    /// <summary>Warning alert, often yellow to indicate caution.</summary>
    Warning,
    /// <summary>Danger alert, often red to indicate errors or critical issues.</summary>
    Danger
}
/// <summary>
///     Variants for badge components, defining their style and context.
/// </summary>
public enum BadgeVariant
{
    /// <summary>Default badge styling.</summary>
    Default,
    /// <summary>Secondary badge, typically for less emphasized content.</summary>
    Secondary,
    /// <summary>Outlined badge for a minimal look.</summary>
    Outline,
    /// <summary>Success badge, often green for positive actions or states.</summary>
    Success,
    /// <summary>Informational badge, often blue or neutral.</summary>
    Info,
    /// <summary>Warning badge, often yellow for caution.</summary>
    Warning,
    /// <summary>Destructive badge, often red to indicate critical actions.</summary>
    Destructive
}
/// <summary>
///     Variants for button components, defining their appearance and purpose.
/// </summary>
public enum ButtonVariant
{
    /// <summary>Default button styling.</summary>
    Default,
    /// <summary>Primary button for main actions, often bold and attention-grabbing.</summary>
    Primary,
    /// <summary>Secondary button for supporting actions.</summary>
    Secondary,
    /// <summary>Alternate button styling for varied contexts.</summary>
    Alternate,
    /// <summary>Inverse button styling for dark backgrounds.</summary>
    Inverse,
    /// <summary>Information button, typically blue for neutral actions.</summary>
    Information,
    /// <summary>Danger button, often red for critical actions.</summary>
    Danger,
    /// <summary>Warning button, often yellow for cautionary actions.</summary>
    Warning,
    /// <summary>Success button, often green for positive actions.</summary>
    Success,
    /// <summary>Ghost button for minimal and subtle interactions.</summary>
    Ghost
}
/// <summary>
///     Appearance option for divider
/// </summary>
public enum DividerStyle
{
	/// <summary>
	///     Solid line
	/// </summary>
	Solid,
	/// <summary>
	///     Dashed line
	/// </summary>
	Dashed,
	/// <summary>
	///     Dotted line
	/// </summary>
	Dotted
}
/// <summary>
///     Size options for various components to define their dimensions.
/// </summary>
public enum Size
{
    /// <summary>Extra small size, for compact components.</summary>
    ExtraSmall,
    /// <summary>Small size, smaller than the default.</summary>
    Small,
    /// <summary>Medium size, the default size.</summary>
    Medium,
    /// <summary>Large size, for bigger components.</summary>
    Large,
    /// <summary>Extra large size, for oversized components.</summary>
    ExtraLarge
}
/// <summary>
///     Defines available width options for prose content, measured in approximate characters per line (CPL).
/// </summary>
public enum ProseWidth
{
	/// <summary>
	///     A compact width, approximately 56 characters per line.
	///     Best for sidebars, footnotes, or narrow content blocks.
	/// </summary>
	Compact,
	/// <summary>
	///     A comfortable width, approximately 64 characters per line.
	///     Ideal for general prose readability in documentation and articles.
	/// </summary>
	Comfortable,
	/// <summary>
	///     A relaxed width, approximately 72 characters per line.
	///     Provides more space while maintaining good readability.
	/// </summary>
	Relaxed,
	/// <summary>
	///     A wide width, approximately 80 characters per line.
	///     Suitable for blog posts, long-form content, and expanded reading areas.
	/// </summary>
	Wide,
	/// <summary>
	///     An ultrawide width, approximately 100 characters per line.
	///     Best for technical documentation, research papers, or code-heavy content.
	/// </summary>
	UltraWide,
	/// <summary>
	///     No maximum width constraint.
	///     Useful for tables, charts, or content requiring full-width display.
	/// </summary>
	Full
}
/// <summary>
///     Justification options for layout alignment.
/// </summary>
public enum Justify
{
    /// <summary>Align items to the start.</summary>
    Start,
    /// <summary>Center align items.</summary>
    Center,
    /// <summary>Align items to the end.</summary>
    End
}
/// <summary>
///     Alignment options.
/// </summary>
public enum Align
{
    /// <summary>Align items to the start.</summary>
    Start,
    /// <summary>Center align items.</summary>
    Center,
    /// <summary>Align items to the end.</summary>
    End
}
/// <summary>
///     Anchor point options
/// </summary>
public enum AnchorPoint
{
	/// <summary>
	///     Anchor to top start
	/// </summary>
	TopStart,
	/// <summary>
	///     Anchor to top with center-alignment
	/// </summary>
	TopCenter,
	/// <summary>
	///     Anchor to top end
	/// </summary>
	TopEnd,
	/// <summary>
	///     Anchor to Start middle
	/// </summary>
	Start,
	/// <summary>
	///     Anchor to end middle
	/// </summary>
	End,
	/// <summary>
	///     Anchor to bottom end
	/// </summary>
	BottomEnd,
	/// <summary>
	///     Anchor to bottom start
	/// </summary>
	BottomStart,
	/// <summary>
	///     Anchor to bottom center
	/// </summary>
	BottomCenter
}
/// <summary>
///     Specifies the origin point for transformations.
/// </summary>
public enum OriginPoint
{
	/// <summary>
	///     Origin at the center.
	/// </summary>
	OriginCenter,
	/// <summary>
	///     Origin at the top.
	/// </summary>
	OriginTop,
	/// <summary>
	///     Origin at the top-right.
	/// </summary>
	OriginTopRight,
	/// <summary>
	///     Origin at the right.
	/// </summary>
	OriginRight,
	/// <summary>
	///     Origin at the bottom-right.
	/// </summary>
	OriginBottomRight,
	/// <summary>
	///     Origin at the bottom.
	/// </summary>
	OriginBottom,
	/// <summary>
	///     Origin at the bottom-left.
	/// </summary>
	OriginBottomLeft,
	/// <summary>
	///     Origin at the left.
	/// </summary>
	OriginLeft,
	/// <summary>
	///     Origin at the top-left.
	/// </summary>
	OriginTopLeft
}
/// <summary>
///     Shape options for avatar components.
/// </summary>
public enum AvatarShape
{
    /// <summary>Circle-shaped avatar.</summary>
    Circle,
    /// <summary>Square-shaped avatar.</summary>
    Square
}
/// <summary>
///     Size options for modal components based on Tailwind's max-width utilities.
/// </summary>
[SuppressMessage("ReSharper", "InconsistentNaming")]
public enum ModalSize
{
    /// <summary>Extra small modal, max-width: 320px.</summary>
    ExtraSmall,
    /// <summary>Small modal, max-width: 384px.</summary>
    Small,
    /// <summary>Medium modal, max-width: 448px.</summary>
    Medium,
    /// <summary>Large modal, max-width: 512px.</summary>
    Large,
    /// <summary>Extra large modal, max-width: 576px.</summary>
    ExtraLarge,
    /// <summary>2XL modal, max-width: 672px.</summary>
    TwoXL,
    /// <summary>3XL modal, max-width: 768px.</summary>
    ThreeXL,
    /// <summary>4XL modal, max-width: 896px.</summary>
    FourXL,
    /// <summary>5XL modal, max-width: 1024px.</summary>
    FiveXL,
    /// <summary>6XL modal, max-width: 1152px.</summary>
    SixXL,
    /// <summary>7XL modal, max-width: 1280px.</summary>
    SevenXL
}
/// <summary>
///     SemanticColor options for components, including surface and status colors.
/// </summary>
public enum SemanticColor
{
    /// <summary>No color specified.</summary>
    None,
    /// <summary>Surface color, typically for backgrounds.</summary>
    Surface,
    /// <summary>Foreground color on surface.</summary>
    OnSurface,
    /// <summary>Strong foreground color on surface.</summary>
    OnSurfaceStrong,
    /// <summary>Alternate surface color for secondary areas.</summary>
    SurfaceAlt,
    /// <summary>Primary color for highlights or accents.</summary>
    Primary,
    /// <summary>Foreground color on primary background.</summary>
    OnPrimary,
    /// <summary>Secondary color for less emphasized elements.</summary>
    Secondary,
    /// <summary>Foreground color on secondary background.</summary>
    OnSecondary,
    /// <summary>Outline color for borders or separators.</summary>
    Outline,
    /// <summary>Strong outline color for emphasis.</summary>
    OutlineStrong,
    /// <summary>Danger color, often red for errors.</summary>
    Danger,
    /// <summary>Foreground color on danger background.</summary>
    OnDanger,
    /// <summary>Informational color, often blue or neutral.</summary>
    Info,
    /// <summary>Foreground color on info background.</summary>
    OnInfo,
    /// <summary>Warning color, often yellow for caution.</summary>
    Warning,
    /// <summary>Foreground color on warning background.</summary>
    OnWarning,
    /// <summary>Success color, often green for positive feedback.</summary>
    Success,
    /// <summary>Foreground color on success background.</summary>
    OnSuccess
}
/// <summary>
///     Accent color options for highlighting elements.
/// </summary>
public enum AccentColor
{
    /// <summary>Inherit accent color from parent context.</summary>
    Inherit,
    /// <summary>Gray accent color.</summary>
    Gray,
    /// <summary>Emerald green accent color.</summary>
    Emerald,
    /// <summary>Teal accent color.</summary>
    Teal,
    /// <summary>Blue accent color.</summary>
    Blue,
    /// <summary>Indigo accent color.</summary>
    Indigo,
    /// <summary>Purple accent color.</summary>
    Purple,
    /// <summary>Pink accent color.</summary>
    Pink,
    /// <summary>Red accent color.</summary>
    Red,
    /// <summary>Orange accent color.</summary>
    Orange,
    /// <summary>Yellow accent color.</summary>
    Yellow
}
/// <summary>
///     Defines the status color variants
/// </summary>
public enum StatusColor
{
    /// <summary>Primary status color.</summary>
    Primary,
    /// <summary>Secondary status color.</summary>
    Secondary,
    /// <summary>Success status color.</summary>
    Success,
    /// <summary>Info status color.</summary>
    Info,
    /// <summary>Warning status color.</summary>
    Warning,
    /// <summary>Danger status color.</summary>
    Danger
}
/// <summary>
///     Defines the label position options for the Progress component.
/// </summary>
public enum ProgressLabelPosition
{
    /// <summary>Label is positioned inside the progress bar.</summary>
    Inside,
    /// <summary>Label is positioned outside the progress bar.</summary>
    Outside
}
</file>

<file path="Constants.cs">
namespace RizzyUI;
internal class Constants
{
    /// <summary>
    ///     Package name
    /// </summary>
    public const string PackageName = "RizzyUI";
    /// <summary>
    ///     Resolves path to internal package assets
    /// </summary>
    /// <param name="path"></param>
    /// <returns></returns>
    public static string ContentUrl(string path)
    {
        return $"/_content/{PackageName}/{path}";
    }
}
</file>

<file path="Extensions/MarkdigExtensions.cs">
using Markdig;
using Markdig.Renderers;
using Markdig.Renderers.Html;
using Markdig.Renderers.Html.Inlines;
using Markdig.Syntax;
using Markdig.Syntax.Inlines;
namespace RizzyUI.Extensions;
/// <summary>
///     A Markdown extension that customizes the rendering of both block and inline code.
///     It ensures that all code tags include the "hljs" class, wraps fenced code blocks in a &lt;pre&gt; tag,
///     and renders inline code without a &lt;pre&gt; wrapper.
/// </summary>
public class RizzyCodeBlockExtension : IMarkdownExtension
{
    /// <summary>
    ///     Performs initial setup for the Markdown pipeline.
    /// </summary>
    /// <param name="pipeline">The Markdown pipeline builder.</param>
    public void Setup(MarkdownPipelineBuilder pipeline)
    {
        // No additional setup required.
    }
    /// <summary>
    ///     Configures the Markdown renderer to use custom renderers for code blocks and inline code.
    /// </summary>
    /// <param name="pipeline">The Markdown pipeline.</param>
    /// <param name="renderer">The Markdown renderer.</param>
    public void Setup(MarkdownPipeline pipeline, IMarkdownRenderer renderer)
    {
        if (renderer is HtmlRenderer htmlRenderer)
        {
            // Remove and replace the existing CodeBlockRenderer.
            var originalCodeBlockRenderer = htmlRenderer.ObjectRenderers.FindExact<CodeBlockRenderer>();
            if (originalCodeBlockRenderer != null) htmlRenderer.ObjectRenderers.Remove(originalCodeBlockRenderer);
            htmlRenderer.ObjectRenderers.AddIfNotAlready(new RizzyCodeBlockRenderer(originalCodeBlockRenderer));
            // Remove and replace the existing CodeInlineRenderer.
            var originalCodeInlineRenderer = htmlRenderer.ObjectRenderers.FindExact<CodeInlineRenderer>();
            if (originalCodeInlineRenderer != null) htmlRenderer.ObjectRenderers.Remove(originalCodeInlineRenderer);
            htmlRenderer.ObjectRenderers.AddIfNotAlready(new RizzyCodeInlineRenderer(originalCodeInlineRenderer));
        }
    }
}
/// <summary>
///     A custom HTML renderer for Markdown code blocks that outputs them with the "hljs" class and an optional language
///     class.
///     Fenced code blocks are wrapped in &lt;pre&gt; tags, while non-fenced blocks are rendered with just a &lt;code&gt;
///     tag.
/// </summary>
public class RizzyCodeBlockRenderer : HtmlObjectRenderer<CodeBlock>
{
    private readonly CodeBlockRenderer? _originalRenderer;
    /// <summary>
    ///     Initializes a new instance of the <see cref="RizzyCodeBlockRenderer" /> class.
    /// </summary>
    /// <param name="originalRenderer">The original code block renderer, if any.</param>
    public RizzyCodeBlockRenderer(CodeBlockRenderer? originalRenderer = null)
    {
        _originalRenderer = originalRenderer;
    }
    /// <summary>
    ///     Writes the specified <see cref="CodeBlock" /> as HTML.
    /// </summary>
    /// <param name="renderer">The HTML renderer.</param>
    /// <param name="obj">The code block to render.</param>
    protected override void Write(HtmlRenderer renderer, CodeBlock obj)
    {
        // Build the base class attribute value with "hljs".
        var classes = "hljs";
        if (obj is FencedCodeBlock fencedCodeBlock)
        {
            var language = fencedCodeBlock.Info?.Trim() ?? string.Empty;
            if (!string.IsNullOrEmpty(language)) classes += $" language-{language}";
            // Write the opening tags for a fenced code block.
            renderer.Write("<pre><code");
            renderer.Write($" class=\"{classes}\"");
            renderer.Write(">");
        }
        else
        {
            // For non-fenced code blocks, only write the <code> tag.
            renderer.Write("<code");
            renderer.Write($" class=\"{classes}\"");
            renderer.Write(">");
        }
        // Write the content of the code block with HTML escaping.
        var content = obj.Lines.ToString();
        renderer.WriteEscape(content);
        // Write the closing tags.
        if (obj is FencedCodeBlock)
            renderer.Write("</code></pre>");
        else
            renderer.Write("</code>");
    }
}
/// <summary>
///     A custom HTML renderer for inline code that outputs code spans with the "hljs" class.
///     Inline code is rendered without a wrapping &lt;pre&gt; tag.
/// </summary>
public class RizzyCodeInlineRenderer : HtmlObjectRenderer<CodeInline>
{
    private readonly CodeInlineRenderer? _originalRenderer;
    /// <summary>
    ///     Initializes a new instance of the <see cref="RizzyCodeInlineRenderer" /> class.
    /// </summary>
    /// <param name="originalRenderer">The original inline code renderer, if any.</param>
    public RizzyCodeInlineRenderer(CodeInlineRenderer? originalRenderer = null)
    {
        _originalRenderer = originalRenderer;
    }
    /// <summary>
    ///     Writes the specified <see cref="CodeInline" /> as HTML.
    /// </summary>
    /// <param name="renderer">The HTML renderer.</param>
    /// <param name="obj">The inline code element to render.</param>
    protected override void Write(HtmlRenderer renderer, CodeInline obj)
    {
        renderer.Write("<code class=\"hljs\">");
        renderer.WriteEscape(obj.Content);
        renderer.Write("</code>");
    }
}
/// <summary>
///     Provides extension methods for <see cref="MarkdownPipelineBuilder" /> to add Rizzy syntax highlighting.
/// </summary>
public static class MarkdownPipelineBuilderExtensions
{
    /// <summary>
    ///     Adds the Rizzy syntax highlighting extension to the Markdown pipeline.
    /// </summary>
    /// <param name="pipeline">The Markdown pipeline builder.</param>
    /// <returns>The updated Markdown pipeline builder.</returns>
    public static MarkdownPipelineBuilder UseRizzySyntaxHighlighting(this MarkdownPipelineBuilder pipeline)
    {
        pipeline.Extensions.Add(new RizzyCodeBlockExtension());
        return pipeline;
    }
}
</file>

<file path="Extensions/ServiceCollectionExtensions.cs">
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.DependencyInjection.Extensions;
using Rizzy.Htmx;
using TailwindMerge.Extensions;
namespace RizzyUI;
/// <summary>
///     Set of extensions to add RizzyUI services
/// </summary>
public static class ServiceCollectionExtensions
{
    /// <summary>
    ///     Adds RizzyUI services to the specified <see cref="IServiceCollection" />.
    /// </summary>
    /// <param name="services">The service collection to add RizzyUI services to.</param>
    /// <param name="configure">An action to configure RizzyUI options.</param>
    /// <returns>The updated service collection.</returns>
    // ReSharper disable once InconsistentNaming
    public static IServiceCollection AddRizzyUI(this IServiceCollection services, Action<RizzyUIConfig> configure)
    {
        if (configure == null) throw new ArgumentNullException(nameof(configure));
        // Register the options and apply the configuration
        services.Configure(configure);
        return services.AddRizzyUI();
    }
    /// <summary>
    ///     Adds RizzyUI services to the specified <see cref="IServiceCollection" />.
    /// </summary>
    /// <param name="services">The service collection to add RizzyUI services to.</param>
    /// <returns>The updated service collection.</returns>
    // ReSharper disable once InconsistentNaming
    public static IServiceCollection AddRizzyUI(this IServiceCollection services)
    {
        services.AddTailwindMerge();
        // Ensure IHttpContextAccessor is registered
        services.AddHttpContextAccessor();
        // Register the default RizzyNonceProvider only if IRizzyNonceProvider hasn't been registered
        services.TryAddScoped<IRizzyNonceProvider, RizzyNonceProvider>();
        services.Configure<RizzyUIConfig>(config => { });
        return services;
    }
}
</file>

<file path="Extensions/StringExtensions.cs">
using System.Text;
namespace RizzyUI.Extensions;
internal static class StringExtensions
{
    private static readonly Random _random = new(Environment.TickCount);
    /// <summary>
    ///     Removes the minimum shared run of leading whitespace characters
    ///     (spaces, tabs, etc.) from each non-empty line in the given text.
    /// </summary>
    /// <param name="text">Multi-line string input.</param>
    /// <returns>
    ///     A new string with each non-empty line outdented by the
    ///     minimal number of leading whitespace characters found.
    /// </returns>
    public static string Outdent(this string text)
    {
        // Early exit for null or empty input
        if (string.IsNullOrEmpty(text))
            return text;
        // Split the input text into lines, preserving empty lines
        var lines = text.Split(new[] { "\r\n", "\n" }, StringSplitOptions.None);
        var minLeadingWhitespace = int.MaxValue;
        // 1st pass: Determine the minimum number of consecutive leading whitespace chars on non-whitespace lines
        foreach (var line in lines)
        {
            // Skip lines that are blank or entirely whitespace
            if (string.IsNullOrWhiteSpace(line))
                continue;
            var count = 0;
            while (count < line.Length && char.IsWhiteSpace(line[count])) count++;
            if (count < minLeadingWhitespace)
            {
                minLeadingWhitespace = count;
                if (minLeadingWhitespace == 0)
                    // Can't do better than zero; break early
                    break;
            }
        }
        // If no non-whitespace lines were found, or minLeadingWhitespace is zero, no outdent needed
        if (minLeadingWhitespace == int.MaxValue || minLeadingWhitespace == 0)
            return text;
        // 2nd pass: Build a new string with the computed leading whitespace removed
        var sb = new StringBuilder(text.Length);
        for (var i = 0; i < lines.Length; i++)
        {
            var line = lines[i];
            if (string.IsNullOrEmpty(line))
            {
                // Preserve blank lines as-is (including whitespace-only lines)
                sb.AppendLine(line);
            }
            else
            {
                // Remove exactly minLeadingWhitespace characters from the start,
                // or use an empty string if the line is shorter.
                var outdentedLine = line.Length >= minLeadingWhitespace
                    ? line.Substring(minLeadingWhitespace)
                    : string.Empty;
                sb.AppendLine(outdentedLine);
            }
        }
        // Optionally remove the final newline if you prefer not to have one
        if (sb.Length > 0 && sb[sb.Length - 1] == '\n')
        {
            sb.Length--;
            // If the preceding char is '\r', remove that too
            if (sb.Length > 0 && sb[sb.Length - 1] == '\r')
                sb.Length--;
        }
        return sb.ToString();
    }
    /// <summary>
    ///     Shuffle the characters in a string
    /// </summary>
    /// <param name="input"></param>
    /// <returns></returns>
    public static string Shuffle(this string input)
    {
        return new string(input.ToCharArray()
            .OrderBy(x => _random.Next())
            .ToArray());
    }
    public static string TrimEmptyLines(this string input)
    {
        if (string.IsNullOrWhiteSpace(input)) return string.Empty;
        // Split the string into lines
        var lines = input.Split(new[] { "\r\n", "\r", "\n" }, StringSplitOptions.None);
        // Find the first non-empty line
        var start = 0;
        while (start < lines.Length && string.IsNullOrWhiteSpace(lines[start])) start++;
        // Find the last non-empty line
        var end = lines.Length - 1;
        while (end >= start && string.IsNullOrWhiteSpace(lines[end])) end--;
        // Join the lines back together, trimming the empty ones
        return string.Join(Environment.NewLine, lines[start..(end + 1)]);
    }
}
</file>

<file path="Extensions/TwMergeExtensions.cs">
using System.Globalization;
using TailwindMerge;
namespace RizzyUI.Extensions;
internal static class TwMergeExtensions
{
    public static string? Merge(this TwMerge twMerge, IReadOnlyDictionary<string, object>? additionalAttributes,
        params string[] classNames)
    {
        if (additionalAttributes is null || !additionalAttributes.TryGetValue("class", out var @class))
            return classNames.Length == 1 ? classNames[0] : twMerge.Merge(classNames);
        var classAttributeValue = Convert.ToString(@class, CultureInfo.InvariantCulture);
        if (string.IsNullOrEmpty(classAttributeValue))
            return classNames.Length == 1 ? classNames[0] : twMerge.Merge(classNames);
        if (classNames.Length == 0) return classAttributeValue;
        return twMerge.Merge([.. classNames, classAttributeValue]) ?? string.Empty;
    }
}
</file>

<file path="GlobalSuppressions.cs">
// This file is used by Code Analysis to maintain SuppressMessage
// attributes that are applied to this project.
// Project-level suppressions either have no target or are given
// a specific target and scoped to a namespace, type, member, etc.
using System.Diagnostics.CodeAnalysis;
[assembly:
    SuppressMessage("Style", "IDE0130:Namespace does not match folder structure", Justification = "<Pending>",
        Scope = "namespace", Target = "~N:RizzyUI")]
</file>

<file path="GlobalUsings.cs">
// Global using directives
global using Rizzy;
</file>

<file path="Oklch.cs">
using System.Text.RegularExpressions;
namespace RizzyUI;
/*
/// <summary>
/// Represents a defined Semantic theme color
/// </summary>
public record SemanticColor : Color
{
    private Color? _dark;
    private SemanticColor(Color color) : base(color)
    {
    }
    private SemanticColor(Color light, Color dark) : base(light)
    {
        _dark = dark;
    }
    /// <summary>No color specified.</summary>
    public static SemanticColor None => new SemanticColor(Colors.Transparent);
    /// <summary>Surface color, typically for backgrounds.</summary>
    public static SemanticColor Surface => new SemanticColor(new ("--color-surface", "surface"),
        new ("--color-surface-dark", "surface-dark"));
    /// <summary>Foreground color on surface.</summary>
    public static SemanticColor OnSurface => new SemanticColor(new ("--color-on-surface", "on-surface"),
        new ("--color-on-surface-dark", "on-surface-dark"));
    /// <summary>Strong foreground color on surface.</summary>
    public static SemanticColor OnSurfaceStrong => new SemanticColor(new ("--color-on-surface-strong", "on-surface-strong"),
        new ("--color-on-surface-dark-strong", "on-surface-dark-strong"));
    /// <summary>Muted foreground color on surface.</summary>
    public static SemanticColor OnSurfaceMuted => new SemanticColor(new("--color-on-surface-muted", "on-surface-muted"),
        new("--color-on-surface-dark-muted", "on-surface-dark-muted"));
    /// <summary>Alternate surface color for secondary areas.</summary>
    public static SemanticColor SurfaceAlt => new SemanticColor(new ("--color-surface-alt", "surface-alt"),
        new ("--color-surface-dark-alt", "surface-dark-alt"));
    /// <summary>Primary color for highlights or accents.</summary>
    public static SemanticColor Primary => new SemanticColor(new Color("--color-primary", "primary"));
    /// <summary>Foreground color on primary background.</summary>
    public static SemanticColor OnPrimary => new SemanticColor(new ("--color-on-primary", "on-primary"),
        new ("--color-on-primary-dark", "on-primary-dark"));
    /// <summary>Secondary color for less emphasized elements.</summary>
    public static SemanticColor Secondary => new SemanticColor(new Color("--color-secondary", "secondary"),
        new Color("--color-secondary-dark", "secondary-dark"));
    /// <summary>Foreground color on secondary background.</summary>
    public static SemanticColor OnSecondary => new SemanticColor(new Color("--color-on-secondary", "on-secondary"),
        new Color("--color-on-secondary-dark", "on-secondary-dark"));
    /// <summary>Outline color for borders or separators.</summary>
    public static SemanticColor Outline => new SemanticColor(new Color("--color-outline", "outline"),
        new Color("--color-outline-dark", "outline-dark"));
    /// <summary>Strong outline color for emphasis.</summary>
    public static SemanticColor OutlineStrong => new SemanticColor(new Color("--color-outline-strong", "outline-strong"),
        new Color("--color-outline-dark-strong", "outline-dark-strong"));
    /// <summary>Danger color, often red for errors.</summary>
    public static SemanticColor Danger => new SemanticColor(new Color("--color-danger", "danger"));
    /// <summary>Foreground color on danger background.</summary>
    public static SemanticColor OnDanger => new SemanticColor(new Color("--color-on-danger", "on-danger"));
    /// <summary>Informational color, often blue or neutral.</summary>
    public static SemanticColor Info => new SemanticColor(new Color("--color-info", "info"));
    /// <summary>Foreground color on info background.</summary>
    public static SemanticColor OnInfo => new SemanticColor(new Color("--color-on-info", "on-info"));
    /// <summary>Warning color, often yellow for caution.</summary>
    public static SemanticColor Warning => new SemanticColor(new Color("--color-warning", "warning"));
    /// <summary>Foreground color on warning background.</summary>
    public static SemanticColor OnWarning => new SemanticColor(new Color("--color-on-warning", "on-warning"));
    /// <summary>Success color, often green for positive feedback.</summary>
    public static SemanticColor Success => new SemanticColor(new Color("--color-success", "success"));
    /// <summary>Foreground color on success background.</summary>
    public static SemanticColor OnSuccess => new SemanticColor(new Color("--color-on-success", "on-success"));
    /// <summary>
    /// Creates a Tailwind class string that optionally includes a dark mode class
    /// </summary>
    /// <param name="utility"></param>
    /// <returns></returns>
    public override string ToCssClassString(string utility)
    {
        if (_dark == null)
            return base.ToCssClassString(utility);
        return $"{utility}-{_tailwindClass} dark:{_dark.ToCssClassString(utility)}";
    }
}
*/
/// <summary>
///     Represents a CSS color variable or Oklch color
/// </summary>
public record Color
{
	/// <summary>
	///     Stores oklch color (if _type is ColorType.Oklch)
	/// </summary>
	private readonly Oklch _oklchColor;
	/// <summary>
	///     Stores tailwind classname for color (e.g. rose-500)
	/// </summary>
	private readonly string _tailwindClass;
	/// <summary>
	///     Type of color
	/// </summary>
	protected readonly ColorType _type;
	/// <summary>
	///     Stores variable string name (if _type is ColorType.Variable)
	/// </summary>
	private readonly string _variable;
	/// <summary>
	///     Stores a color in Oklch format
	/// </summary>
	/// <param name="color"></param>
	public Color(Oklch color)
    {
        _type = ColorType.Oklch;
        _oklchColor = color;
        _variable = string.Empty;
        _tailwindClass = $"[{ToCssColorString()}]";
    }
	/// <summary>
	///     Stores a color as a variable
	/// </summary>
	/// <param name="colorVariable"></param>
	/// <param name="colorName"></param>
	public Color(string colorVariable, string colorName)
    {
        _type = ColorType.Variable;
        _variable = colorVariable;
        _tailwindClass = colorName;
    }
	/// <summary>
	///     Stores a color as RGB
	/// </summary>
	/// <param name="rgbHexColor">Hex color starting with a pound sign</param>
	public Color(string rgbHexColor)
    {
        if (!IsValidHexColor(rgbHexColor))
            throw new ArgumentException($"{nameof(rgbHexColor)} must be a valid CSS rgb hex color starting with a #");
        _type = ColorType.Rgb;
        _variable = rgbHexColor;
        _tailwindClass = string.Empty;
    }
	/// <summary>
	///     Initializes a color using another color as a base
	/// </summary>
	/// <param name="other"></param>
	public Color(Color other)
    {
        _type = other._type;
        _oklchColor = other._oklchColor;
        _variable = other._variable.ToLowerInvariant();
        _tailwindClass = other._tailwindClass;
    }
	/// <summary>
	///     Returns a Tailwind CSS utility class fragment corresponding to this color.
	///     - For Variable: The provided tailwind class name (e.g., "primary", "red-500").
	///     - For OKLCH/RgbHex: An arbitrary value class (e.g., "[oklch(0.5_0.1_20)]", "[#ff0000]").
	/// </summary>
	public string TailwindClassName => _tailwindClass;
    private static bool IsValidHexColor(string color)
    {
        return Regex.IsMatch(color, @"^#(?:[0-9A-Fa-f]{3,4}|[0-9A-Fa-f]{6,8})$");
    }
    /// <summary>
    ///     Outputs the standard CSS function syntax: oklch(L C H / Alpha) or var(--color-rose-500)
    /// </summary>
    public string ToCssColorString()
    {
        return _type switch
        {
            ColorType.Oklch => _oklchColor.Alpha < 1f
                ? $"oklch({_oklchColor.L} {_oklchColor.C} {_oklchColor.H})"
                : $"oklch({_oklchColor.L} {_oklchColor.C} {_oklchColor.H} / {_oklchColor.Alpha})",
            ColorType.Rgb => _variable,
            ColorType.Variable => $"var({_variable})",
            _ => throw new NotImplementedException()
        };
    }
    /// <summary>
    ///     Outputs a Tailwind class that can be directly used in a class attribute
    /// </summary>
    /// <param name="utility">bg, text, accent, etc. (as part of bg-rose-500, text-rose-500)</param>
    /// <returns></returns>
    public virtual string ToCssClassString(string utility)
    {
        return $"{utility}-{_tailwindClass}";
    }
    /// <summary>
    ///     Identifies color type internally
    /// </summary>
    protected enum ColorType
    {
	    /// <summary>
	    ///     Color is a CSS variable
	    /// </summary>
	    Variable,
	    /// <summary>
	    ///     Color is in Oklch format
	    /// </summary>
	    Oklch,
	    /// <summary>
	    ///     Color is in Rgb format (unsupported for now)
	    /// </summary>
	    Rgb
    }
}
/// <summary>
///     Represents a color in OKLCH space, plus an alpha (default 1.0).
/// </summary>
// ReSharper disable once IdentifierTypo
public readonly record struct Oklch(float L, float C, float H, float Alpha = 1.0f)
{
}
</file>

<file path="RizzyUIConfig.cs">
namespace RizzyUI;
/// <summary>
///     Configuration for RizzyUI
/// </summary>
public sealed class RizzyUIConfig
{
    /// <summary>
    ///     Default theme for RizzyUI (defaults to ArcticTheme)
    /// </summary>
    public RzTheme DefaultTheme { get; set; } = RzTheme.Default;
}
</file>

<file path="RzComponent.cs">
using System.Diagnostics.CodeAnalysis;
using Microsoft.AspNetCore.Components;
using Microsoft.Extensions.Options;
using Rizzy.Htmx;
using TailwindMerge;
namespace RizzyUI;
/// <summary>
///     Base class for all RizzyUI components
/// </summary>
public class RzComponent : ComponentBase
{
    private string? _nonce;
    /// <summary> Get the currently active theme via Cascading Parameter </summary>
    [CascadingParameter]
    protected RzTheme? CascadedTheme { get; set; }
    /// <summary> Injected configuration to get the default theme as fallback. </summary>
    [Inject]
    private IOptions<RizzyUIConfig>? Config { get; set; }
    /// <summary> The effective theme being used (Cascaded or Default). </summary>
    protected RzTheme Theme { get; private set; } = RzTheme.Default;
    /// <summary>
    ///     Reference to Tailwind Merge service
    /// </summary>
    [Inject]
    protected TwMerge TwMerge { get; set; } = default!;
    /// <summary>
    ///     NonceProvider service that provides scoped per-request nonce values to RizzyUI
    ///     components
    /// </summary>
    [Inject]
    protected IRizzyNonceProvider RizzyNonceProvider { get; set; } = default!;
    /// <summary>
    ///     Specifies the root HTML element to render (e.g., "div", "a", "button").
    ///     If not set, defaults to "div".
    /// </summary>
    [Parameter]
    public string Element { get; set; } = "div";
    /// <summary>
    ///     Captures any additional unmatched attributes
    /// </summary>
    [SuppressMessage("Usage", "CA2227:Collection properties should be read only",
        Justification = "False positive. This is a parameter.")]
    [Parameter(CaptureUnmatchedValues = true)]
    public Dictionary<string, object>? AdditionalAttributes { get; set; }
    /// <summary>
    ///     Nonce values used if component requires dynamic script loading.  If needed, Nonce
    ///     should be updated by calling Nonce = RizzyNonceProvider.GetNonce() in OnParametersSet
    ///     to match scoped nonce value
    /// </summary>
    protected string Nonce => _nonce ??= RizzyNonceProvider.GetNonce();
    /// <summary>
    ///     Method that provides a set of CSS root classes to the component
    /// </summary>
    /// <returns></returns>
    protected virtual string? RootClass()
    {
        return AdditionalAttributes?.GetValueOrDefault("class", string.Empty).ToString();
    }
    /// <summary>
    ///  Configure the theme based on the CascadedTheme or the default theme from the configuration.
    /// </summary>
    protected override void OnInitialized()
    {
        base.OnInitialized();
        Theme = CascadedTheme ?? Config?.Value.DefaultTheme ?? RzTheme.Default;
    }
}
</file>

<file path="RzStylesBase.cs">
namespace RizzyUI;
/// <summary>
///     Abstract base class defining the structure for component style definitions.
///     Concrete themes (<see cref="RzTheme" />) will provide instances derived from these nested abstract classes,
///     allowing for customizable component styling across the application.
/// </summary>
public abstract class RzStylesBase
{
    #region RzAvatar Styles
    /// <summary>
    ///     Defines the abstract structure for styling the <see cref="RzAvatar" /> component.
    /// </summary>
    public abstract class RzAvatarStylesBase
    {
        /// <summary> The theme instance providing color and sizing tokens. </summary>
        protected readonly RzTheme Theme;
        /// <summary> Initializes a new instance of the <see cref="RzAvatarStylesBase" /> class. </summary>
        protected RzAvatarStylesBase(RzTheme theme)
        {
            Theme = theme;
        }
        /// <summary>
        ///     Gets the base CSS classes for the main RzAvatar container element (positioning and object-fit). Size is
        ///     applied separately.
        /// </summary>
        public abstract string Container { get; }
        /// <summary>
        ///     Gets the CSS classes for the status indicator div (base style, border). Size and color are applied
        ///     separately.
        /// </summary>
        public abstract string Indicator { get; }
        /// <summary> Gets the base CSS classes for the img element. Size and shape are applied separately. </summary>
        public abstract string Image { get; }
        /// <summary>
        ///     Gets the base CSS classes for the initials container div (flex, alignment, base colors). Size, shape, and
        ///     text size are applied separately.
        /// </summary>
        public abstract string InitialsContainer { get; }
        /// <summary>
        ///     Gets the base CSS classes for the placeholder container div (flex, alignment, base colors). Size and shape
        ///     are applied separately.
        /// </summary>
        public abstract string PlaceholderContainer { get; }
        /// <summary> Gets the base CSS classes for the placeholder SVG icon. Size is applied separately. </summary>
        public abstract string PlaceholderIcon { get; }
        /// <summary> Gets the CSS classes for the avatar's shape (e.g., rounded-full, rounded-lg). </summary>
        /// <param name="shape">The desired avatar shape.</param>
        /// <returns>A string of CSS classes.</returns>
        public abstract string GetShapeCss(AvatarShape shape);
        /// <summary> Gets the CSS classes for the avatar's overall size (width and height). </summary>
        /// <param name="size">The desired avatar size.</param>
        /// <returns>A string of CSS classes (e.g., "size-10").</returns>
        public abstract string GetSizeCss(Size size);
        /// <summary> Gets the CSS classes for the text size of the initials. </summary>
        /// <param name="size">The corresponding avatar size.</param>
        /// <returns>A string of CSS classes (e.g., "text-base").</returns>
        public abstract string GetInitialsSizeCss(Size size);
        /// <summary> Gets the CSS classes for the size of the placeholder icon. </summary>
        /// <param name="size">The corresponding avatar size.</param>
        /// <returns>A string of CSS classes (e.g., "size-6").</returns>
        public abstract string GetPlaceholderSizeCss(Size size);
        /// <summary> Gets the CSS classes for the size of the status indicator. </summary>
        /// <param name="size">The corresponding avatar size.</param>
        /// <returns>A string of CSS classes (e.g., "size-3").</returns>
        public abstract string GetIndicatorSizeCss(Size size);
        /// <summary> Gets the CSS background color classes (light and dark) for the status indicator. </summary>
        /// <param name="color">The desired accent color.</param>
        /// <returns>A string of CSS classes (e.g., "bg-emerald-200 dark:bg-emerald-800").</returns>
        public abstract string GetIndicatorColorCss(AccentColor color);
    }
    #endregion
    #region RzBadge Styles
    /// <summary>
    ///     Defines the abstract structure for styling the <see cref="RzBadge" /> component.
    /// </summary>
    public abstract class RzBadgeStylesBase
    {
        /// <summary> The theme instance providing color and sizing tokens. </summary>
        protected readonly RzTheme Theme;
        /// <summary> Initializes a new instance of the <see cref="RzBadgeStylesBase" /> class. </summary>
        protected RzBadgeStylesBase(RzTheme theme)
        {
            Theme = theme;
        }
        /// <summary> Gets the base CSS classes for the RzBadge span element (layout, border, font). </summary>
        public abstract string Badge { get; }
        /// <summary> Gets the CSS classes for the inner span containing the icon and text content (padding, alignment). </summary>
        public abstract string InnerSpan { get; }
        /// <summary> Gets the variant-specific CSS classes (border, background, text color) for a standard badge. </summary>
        /// <param name="color">The semantic color for the badge.</param>
        /// <returns>A string of CSS classes.</returns>
        public abstract string GetVariantCss(SemanticColor color);
        /// <summary> Gets the variant-specific CSS classes (border, background, text color) for a "soft" badge. </summary>
        /// <param name="color">The semantic color for the badge.</param>
        /// <returns>A string of CSS classes.</returns>
        public abstract string GetVariantSoftCss(SemanticColor color);
    }
    #endregion
    #region RzCodeViewer Styles
    /// <summary>
    ///     Defines the abstract structure for styling the <see cref="RzCodeViewer" /> component.
    /// </summary>
    public abstract class RzCodeViewerStylesBase
    {
        /// <summary> The theme instance providing color and sizing tokens. </summary>
        protected readonly RzTheme Theme;
        /// <summary> Initializes a new instance of the <see cref="RzCodeViewerStylesBase" /> class. </summary>
        protected RzCodeViewerStylesBase(RzTheme theme)
        {
            Theme = theme;
        }
        /// <summary> Gets the base CSS classes for the main RzCodeViewer container div (margin, overflow). </summary>
        public abstract string Container { get; }
        /// <summary> Gets the CSS classes for the configuration header div (layout, padding, border, background, typography). </summary>
        public abstract string Header { get; }
        /// <summary> Gets the CSS classes for the title span within the header. </summary>
        public abstract string HeaderTitle { get; }
        /// <summary> Gets the CSS classes for the main code display container div (border, rounding, overflow). </summary>
        public abstract string CodeContainer { get; }
        /// <summary> Gets the CSS classes for the div containing the copy button (layout, border, background). </summary>
        public abstract string CopyButtonContainer { get; }
        /// <summary> Gets the CSS classes for the copy button (layout, padding, rounding, focus styles). </summary>
        public abstract string CopyButton { get; }
        /// <summary> Gets the CSS classes for the SVG icon when the content is not yet copied. </summary>
        public abstract string CopyIconDefault { get; }
        /// <summary> Gets the CSS classes for the SVG icon when the content has been copied. </summary>
        public abstract string CopyIconCopied { get; }
        /// <summary> Gets the CSS classes for the div wrapping the pre/code block (positioning, overflow). </summary>
        public abstract string PreWrapper { get; }
        /// <summary> Gets the CSS classes for the pre element (typography, padding, overflow, border). </summary>
        public abstract string PreElement { get; }
        // Note: Code element classes are added by Highlight.js and theme variables
        /// <summary> Gets the CSS classes for the expand/collapse button (layout, padding, border, background, focus styles). </summary>
        public abstract string ExpandButton { get; }
        /// <summary> Gets the CSS classes for the expand/collapse SVG icon (size, transition). </summary>
        public abstract string ExpandIcon { get; }
        /// <summary> Gets the CSS classes for the PreWrapper div based on the expand state (e.g., max-height). </summary>
        /// <param name="isExpanded">Whether the code view is expanded.</param>
        /// <returns>A string of CSS classes.</returns>
        public abstract string GetExpandContentCss(bool isExpanded);
        /// <summary> Gets the CSS classes for the expand icon based on the expand state (e.g., rotate-180). </summary>
        /// <param name="isExpanded">Whether the code view is expanded.</param>
        /// <returns>A string of CSS classes.</returns>
        public abstract string GetExpandButtonIconCss(bool isExpanded);
        /// <summary> Gets the CSS classes for the copy button based on the copied state (e.g., focus outline color). </summary>
        /// <param name="isCopied">Whether the code has just been copied.</param>
        /// <returns>A string of CSS classes.</returns>
        public abstract string GetCopyButtonStateCss(bool isCopied);
    }
    #endregion
    #region RzDateEdit Styles
    /// <summary>
    ///     Defines the abstract structure for styling the <see cref="RzDateEdit" /> component.
    /// </summary>
    public abstract class RzDateEditStylesBase
    {
        /// <summary> The theme instance providing color and sizing tokens. </summary>
        protected readonly RzTheme Theme;
        /// <summary> Initializes a new instance of the <see cref="RzDateEditStylesBase" /> class. </summary>
        protected RzDateEditStylesBase(RzTheme theme)
        {
            Theme = theme;
        }
        /// <summary> Gets the base CSS classes for the main RzDateEdit container div (width). </summary>
        public abstract string Container { get; }
        /// <summary> Gets the CSS classes for the relative div wrapping the input and prepend element. </summary>
        public abstract string InputWrapper { get; }
        /// <summary>
        ///     Gets the CSS classes for the prepend element div (positioning, layout, padding, border, background,
        ///     typography).
        /// </summary>
        public abstract string PrependElement { get; }
        /// <summary> Gets the CSS classes for the Blazicon component if PrependIcon is used (text size). </summary>
        public abstract string PrependIconContainer { get; }
        /// <summary>
        ///     Gets the base CSS classes for the input element (layout, rounding, border, padding, typography, focus
        ///     styles).
        /// </summary>
        public abstract string Input { get; }
        // Note: Flatpickr calendar styles are handled separately by its CSS file.
    }
    #endregion
    #region RzDivider Styles
    /// <summary>
    ///     Defines the abstract structure for styling the <see cref="RzDivider" /> component.
    /// </summary>
    public abstract class RzDividerStylesBase
    {
        /// <summary> The theme instance providing color and sizing tokens. </summary>
        protected readonly RzTheme Theme;
        /// <summary> Initializes a new instance of the <see cref="RzDividerStylesBase" /> class. </summary>
        protected RzDividerStylesBase(RzTheme theme)
        {
            Theme = theme;
        }
        /// <summary> Gets the base CSS classes for the RzDivider hr or div element (margin, layout, typography). </summary>
        public abstract string Divider { get; }
        /// <summary>
        ///     Gets the CSS classes for the divider style (solid, dashed, dotted) when rendered as an <c>hr</c> (no
        ///     ChildContent).
        /// </summary>
        /// <param name="style">The desired divider style.</param>
        /// <returns>A string of CSS classes (e.g., "border-solid border-t border-outline").</returns>
        public abstract string GetStyleCss(DividerStyle style);
        /// <summary>
        ///     Gets the CSS classes for the divider when rendered as a <c>div</c> with ChildContent, including alignment and
        ///     style for pseudo-elements.
        /// </summary>
        /// <param name="alignment">The alignment of the content (Start, Center, End).</param>
        /// <param name="style">The desired divider line style.</param>
        /// <returns>A string of CSS classes utilizing ::before and ::after pseudo-elements.</returns>
        public abstract string GetAlignmentCss(Align alignment, DividerStyle style);
    }
    #endregion
    #region RzEmbeddedPreview Styles
    /// <summary>
    ///     Defines the abstract structure for styling the <see cref="RzEmbeddedPreview" /> component.
    /// </summary>
    public abstract class RzEmbeddedPreviewStylesBase
    {
        /// <summary> The theme instance providing color and sizing tokens. </summary>
        protected readonly RzTheme Theme;
        /// <summary> Initializes a new instance of the <see cref="RzEmbeddedPreviewStylesBase" /> class. </summary>
        protected RzEmbeddedPreviewStylesBase(RzTheme theme)
        {
            Theme = theme;
        }
        /// <summary> Gets the base CSS classes for the RzEmbeddedPreview container div (typically just width). </summary>
        public abstract string Container { get; }
        /// <summary> Gets the CSS classes for the iframe element (width, height, transitions). </summary>
        public abstract string IFrame { get; }
    }
    #endregion
    #region RzFormSection Styles
    /// <summary>
    ///     Defines the abstract structure for styling the <see cref="RzFormSection" /> component.
    /// </summary>
    public abstract class RzFormSectionStylesBase
    {
        /// <summary> The theme instance providing color and sizing tokens. </summary>
        protected readonly RzTheme Theme;
        /// <summary> Initializes a new instance of the <see cref="RzFormSectionStylesBase" /> class. </summary>
        protected RzFormSectionStylesBase(RzTheme theme)
        {
            Theme = theme;
        }
        /// <summary> Gets the base CSS classes for the RzFormSection container div (layout determined by method). </summary>
        public abstract string Container { get; }
        /// <summary> Gets the CSS classes for the description container div (layout determined by method). </summary>
        public abstract string DescriptionContainer { get; }
        /// <summary> Gets the CSS classes for the title h2 element (typography). </summary>
        public abstract string Title { get; }
        /// <summary> Gets the CSS classes for the description p element (typography). </summary>
        public abstract string Description { get; }
        /// <summary> Gets the CSS classes for the content container div (layout determined by method). </summary>
        public abstract string ContentContainer { get; }
        /// <summary> Gets the layout-specific CSS classes for the main container div. </summary>
        /// <param name="layout">The section layout type.</param>
        /// <returns>A string of CSS classes.</returns>
        public abstract string GetLayoutCss(SectionLayout layout);
        /// <summary> Gets the layout-specific CSS classes for the description container div. </summary>
        /// <param name="layout">The section layout type.</param>
        /// <returns>A string of CSS classes.</returns>
        public abstract string GetDescriptionLayoutCss(SectionLayout layout);
        /// <summary> Gets the layout-specific CSS classes for the content container div. </summary>
        /// <param name="layout">The section layout type.</param>
        /// <returns>A string of CSS classes.</returns>
        public abstract string GetContentLayoutCss(SectionLayout layout);
    }
    #endregion
    #region RzHeading Styles
    /// <summary>
    ///     Defines the abstract structure for styling the <see cref="RzHeading" /> component.
    /// </summary>
    public abstract class RzHeadingStylesBase
    {
        /// <summary> The theme instance providing color and sizing tokens. </summary>
        protected readonly RzTheme Theme;
        /// <summary> Initializes a new instance of the <see cref="RzHeadingStylesBase" /> class. </summary>
        protected RzHeadingStylesBase(RzTheme theme)
        {
            Theme = theme;
        }
        /// <summary> Gets the level-specific CSS classes for the heading element (margins, responsive text sizes, font weight). </summary>
        /// <param name="level">The heading level (H1-H4).</param>
        /// <returns>A string of CSS classes.</returns>
        public abstract string GetLevelCss(HeadingLevel level);
    }
    #endregion
    #region RzLink Styles
    /// <summary>
    ///     Defines the abstract structure for styling the <see cref="RzLink" /> component.
    /// </summary>
    public abstract class RzLinkStylesBase
    {
        /// <summary> The theme instance providing color and sizing tokens. </summary>
        protected readonly RzTheme Theme;
        /// <summary> Initializes a new instance of the <see cref="RzLinkStylesBase" /> class. </summary>
        protected RzLinkStylesBase(RzTheme theme)
        {
            Theme = theme;
        }
        /// <summary> Gets the base CSS classes for the RzLink anchor (a) element (typography, color, focus styles). </summary>
        public abstract string Link { get; }
        /// <summary> Gets the CSS classes applied when underlining is enabled (hover/focus states). </summary>
        public abstract string UnderlineEnabled { get; }
    }
    #endregion
    #region RzMarkdown Styles
    /// <summary>
    ///     Defines the abstract structure for styling the <see cref="RzMarkdown" /> component container.
    /// </summary>
    public abstract class RzMarkdownStylesBase
    {
        /// <summary> The theme instance providing color and sizing tokens. </summary>
        protected readonly RzTheme Theme;
        /// <summary> Initializes a new instance of the <see cref="RzMarkdownStylesBase" /> class. </summary>
        protected RzMarkdownStylesBase(RzTheme theme)
        {
            Theme = theme;
        }
        /// <summary>
        ///     Gets the base CSS classes for the RzMarkdown container div (prose base, dark mode, text color, max-width
        ///     reset).
        /// </summary>
        public abstract string Container { get; }
        /// <summary> Gets the prose width utility class based on the specified width. </summary>
        /// <param name="width">The desired prose width.</param>
        /// <returns>A string representing a Tailwind prose width class (e.g., "prose-wide").</returns>
        public abstract string GetProseWidthCss(ProseWidth width);
    }
    #endregion
    #region RzNavbar Styles
    /// <summary>
    ///     Defines the abstract structure for styling the <see cref="RzNavbar" /> component.
    /// </summary>
    public abstract class RzNavbarStylesBase
    {
        /// <summary> The theme instance providing color and sizing tokens. </summary>
        protected readonly RzTheme Theme;
        /// <summary> Initializes a new instance of the <see cref="RzNavbarStylesBase" /> class. </summary>
        protected RzNavbarStylesBase(RzTheme theme)
        {
            Theme = theme;
        }
        /// <summary> Gets the base CSS classes for the RzNavbar nav element (positioning, size, layout, border, background, blur). </summary>
        public abstract string Navbar { get; }
        /// <summary> Gets the CSS classes for the mobile toggle button (visibility, layout, text color). </summary>
        public abstract string ToggleButton { get; }
        /// <summary> Gets the CSS classes for the icon container inside the toggle button (text size). </summary>
        public abstract string ToggleButtonIconContainer { get; }
        /// <summary> Gets the CSS classes for the screen-reader-only span inside the toggle button. </summary>
        public abstract string ToggleButtonSrText { get; }
        /// <summary> Gets the CSS classes for the main content container div within the navbar (size, layout). </summary>
        public abstract string ContentContainer { get; }
    }
    #endregion
    #region RzParagraph Styles
    /// <summary>
    ///     Defines the abstract structure for styling the <see cref="RzParagraph" /> component.
    /// </summary>
    public abstract class RzParagraphStylesBase
    {
        /// <summary> The theme instance providing color and sizing tokens. </summary>
        protected readonly RzTheme Theme;
        /// <summary> Initializes a new instance of the <see cref="RzParagraphStylesBase" /> class. </summary>
        protected RzParagraphStylesBase(RzTheme theme)
        {
            Theme = theme;
        }
        /// <summary> Gets the base CSS classes for the RzParagraph p element (margin, leading). </summary>
        public abstract string Paragraph { get; }
        /// <summary> Gets the prose width utility class based on the specified width. </summary>
        /// <param name="width">The desired prose width.</param>
        /// <returns>A string representing a Tailwind prose width class.</returns>
        public abstract string GetProseWidthCss(ProseWidth width);
    }
    #endregion
    #region RzProgress Styles
    /// <summary>
    ///     Defines the abstract structure for styling the <see cref="RzProgress" /> component.
    /// </summary>
    public abstract class RzProgressStylesBase
    {
        /// <summary> The theme instance providing color and sizing tokens. </summary>
        protected readonly RzTheme Theme;
        /// <summary> Initializes a new instance of the <see cref="RzProgressStylesBase" /> class. </summary>
        protected RzProgressStylesBase(RzTheme theme)
        {
            Theme = theme;
        }
        /// <summary> Gets the base CSS classes for the main RzProgress container div (width). </summary>
        public abstract string Container { get; }
        /// <summary> Gets the CSS classes for the optional outside label container div (layout, margin). </summary>
        public abstract string OutsideLabelContainer { get; }
        /// <summary> Gets the CSS classes for the outside label text span (text color). </summary>
        public abstract string OutsideLabelText { get; }
        /// <summary>
        ///     Gets the CSS classes for the outer progress bar container div (track styling: layout, overflow, rounding,
        ///     background).
        /// </summary>
        public abstract string OuterBar { get; }
        /// <summary>
        ///     Gets the base CSS classes for the inner progress bar div (value indicator: layout, typography, transitions).
        ///     Variant styles are applied separately.
        /// </summary>
        public abstract string InnerBarBase { get; }
        /// <summary> Gets the CSS classes for the inside label container div (positioning). </summary>
        public abstract string InsideLabelContainer { get; }
        /// <summary> Gets the base CSS classes for the inside label text span (usually empty, styled by container). </summary>
        public abstract string InsideLabelText { get; }
        /// <summary> Gets the height CSS class for the OuterBar based on the label's position. </summary>
        /// <param name="position">The position of the label.</param>
        /// <returns>A string representing a height class (e.g., "h-4").</returns>
        public abstract string GetOuterBarHeightCss(ProgressLabelPosition position);
        /// <summary> Gets the variant-specific CSS classes for the InnerBar (height, rounding, background, text color). </summary>
        /// <param name="variant">The status color variant.</param>
        /// <returns>A string of CSS classes.</returns>
        public abstract string GetInnerBarVariantCss(StatusColor variant);
        /// <summary> Gets the text color CSS class for the InsideLabel when it overflows the InnerBar. </summary>
        /// <param name="overflows">Whether the label overflows the bar.</param>
        /// <returns>A string representing a text color class or an empty string.</returns>
        public abstract string GetInsideLabelColorCss(bool overflows);
    }
    #endregion
    #region RzStep Styles
    /// <summary>
    ///     Defines the abstract structure for styling the <see cref="RzSteps" /> component.
    /// </summary>
    public abstract class RzStepsStylesBase
    {
        /// <summary> The theme instance providing color and sizing tokens. </summary>
        protected readonly RzTheme Theme;
        /// <summary> Initializes a new instance of the <see cref="RzStepsStylesBase" /> class. </summary>
        protected RzStepsStylesBase(RzTheme theme)
        {
            Theme = theme;
        }
        /// <summary> Gets the base CSS classes for the RzSteps ordered list (ol) element (layout, gap). </summary>
        public abstract string Container { get; }
        /// <summary>
        ///     Gets the base CSS classes for the list item (li) element representing a step (layout, positioning,
        ///     typography).
        /// </summary>
        public abstract string StepItem { get; }
        /// <summary> Gets the base CSS classes for the connector span element between steps. </summary>
        public abstract string ConnectorBase { get; }
        /// <summary> Gets the CSS classes for the div wrapping the step circle and label (layout, gap). </summary>
        public abstract string StepContentContainer { get; }
        /// <summary>
        ///     Gets the base CSS classes for the span representing the step circle when completed (layout, size, rounding,
        ///     border).
        /// </summary>
        public abstract string CircleCompletedBase { get; }
        /// <summary> Gets the CSS classes for the SVG icon within the completed circle (size). </summary>
        public abstract string CircleCompletedIcon { get; }
        /// <summary> Gets the CSS classes for the screen reader text within the completed circle. </summary>
        public abstract string CircleCompletedSrText { get; }
        /// <summary>
        ///     Gets the base CSS classes for the span representing the step circle for current or upcoming steps (layout,
        ///     size, rounding, border).
        /// </summary>
        public abstract string CircleDefaultBase { get; }
        /// <summary>
        ///     Gets the base CSS classes for the step label span (visibility, width). Status-specific styles are applied
        ///     separately.
        /// </summary>
        public abstract string LabelBase { get; }
        /// <summary> Gets the CSS classes for the optional caption span (typography). </summary>
        public abstract string Caption { get; }
        /// <summary> Gets the layout-specific CSS classes for the main container based on Orientation. </summary>
        /// <param name="orientation">The layout orientation.</param>
        /// <returns>A string of CSS classes.</returns>
        public abstract string GetOrientationCss(Orientation orientation);
        /// <summary>
        ///     Gets the width CSS class for a step list item based on whether it's the first item (relevant for horizontal
        ///     layout).
        /// </summary>
        /// <param name="isFirst">True if this is the first step item.</param>
        /// <returns>A string like "w-full" or "".</returns>
        public abstract string GetStepItemWidthCss(bool isFirst);
        /// <summary>
        ///     Gets the CSS classes for the connector line between steps, considering orientation, previous step status, and
        ///     the active color.
        /// </summary>
        /// <param name="orientation">The layout orientation.</param>
        /// <param name="previousStatus">The status of the preceding step.</param>
        /// <param name="activeColor">The theme's active status color.</param>
        /// <returns>A string of CSS classes for positioning, size, and color.</returns>
        public abstract string GetConnectorCss(Orientation orientation, StepStatus previousStatus,
            StatusColor activeColor);
        /// <summary> Gets the variant-specific CSS classes for the completed step circle (border, background, text color). </summary>
        /// <param name="activeColor">The theme's active status color.</param>
        /// <returns>A string of CSS classes.</returns>
        public abstract string GetCircleCompletedCss(StatusColor activeColor);
        /// <summary>
        ///     Gets the variant-specific CSS classes for the step circle based on its status (Current or Upcoming) and the
        ///     active color.
        /// </summary>
        /// <param name="status">The current status of the step.</param>
        /// <param name="activeColor">The theme's active status color.</param>
        /// <returns>A string of CSS classes.</returns>
        public abstract string GetCircleDefaultCss(StepStatus status, StatusColor activeColor);
        /// <summary> Gets the variant-specific CSS classes for the step label based on its status and the active color. </summary>
        /// <param name="status">The current status of the step.</param>
        /// <param name="activeColor">The theme's active status color.</param>
        /// <returns>A string representing text color and font weight classes.</returns>
        public abstract string GetLabelStatusCss(StepStatus status, StatusColor activeColor);
    }
    // RzStep component itself doesn't render HTML, so no RzStepStylesBase needed.
    #endregion
    #region Typography Styles (Shared by RzHeading, RzParagraph)
    /// <summary>
    ///     Defines the abstract structure for base typography styling utilities used by components like
    ///     <see cref="RzHeading" /> and <see cref="RzParagraph" />.
    /// </summary>
    public abstract class RzTypographyStylesBase
    {
        /// <summary> The theme instance providing color and sizing tokens. </summary>
        protected readonly RzTheme Theme;
        /// <summary> Initializes a new instance of the <see cref="RzTypographyStylesBase" /> class. </summary>
        protected RzTypographyStylesBase(RzTheme theme)
        {
            Theme = theme;
        }
        /// <summary> Gets the CSS class corresponding to the specified text weight. </summary>
        /// <param name="weight">The desired text weight.</param>
        /// <returns>A string like "font-bold" or "".</returns>
        public abstract string GetTextWeightCss(TextWeight? weight);
        /// <summary> Gets the CSS class corresponding to the specified text size. </summary>
        /// <param name="size">The desired text size.</param>
        /// <returns>A string like "text-lg" or "".</returns>
        public abstract string GetTextSizeCss(TextSize? size);
        /// <summary> Gets the CSS class corresponding to the specified text transformation. </summary>
        /// <param name="transform">The desired text transformation.</param>
        /// <returns>A string like "uppercase" or "".</returns>
        public abstract string GetTextTransformCss(TextTransform? transform);
        /// <summary> Gets the CSS class corresponding to the specified text decoration. </summary>
        /// <param name="decoration">The desired text decoration.</param>
        /// <returns>A string like "underline" or "".</returns>
        public abstract string GetTextDecorationCss(TextDecoration? decoration);
        /// <summary> Gets the CSS class corresponding to the specified line height (leading). </summary>
        /// <param name="leading">The desired line height.</param>
        /// <returns>A string like "leading-relaxed" or "".</returns>
        public abstract string GetLineHeightCss(Leading? leading);
        /// <summary> Combines all individual typography style classes (color, weight, size, etc.) into a single string. </summary>
        /// <param name="textColor">Optional text color.</param>
        /// <param name="weight">Optional text weight.</param>
        /// <param name="size">Optional text size.</param>
        /// <param name="lineHeight">Optional line height.</param>
        /// <param name="decoration">Optional text decoration.</param>
        /// <param name="transform">Optional text transformation.</param>
        /// <returns>A consolidated string of CSS classes.</returns>
        public abstract string GetBaseCss(SemanticColor? textColor, TextWeight? weight, TextSize? size,
            Leading? lineHeight, TextDecoration? decoration, TextTransform? transform);
    }
    #endregion
    #region RzArticle Styles
    /// <summary>
    ///     Defines the abstract structure for styling the <see cref="RzArticle" /> layout component.
    /// </summary>
    public abstract class RzArticleStylesBase
    {
        /// <summary> The theme instance providing color and sizing tokens. </summary>
        protected readonly RzTheme Theme;
        /// <summary> Initializes a new instance of the <see cref="RzArticleStylesBase" /> class. </summary>
        protected RzArticleStylesBase(RzTheme theme)
        {
            Theme = theme;
        }
        /// <summary> Gets the base CSS classes for the RzArticle container div (layout, text color). </summary>
        public abstract string Container { get; }
        /// <summary> Gets the CSS classes for the inner div wrapping the article and aside (layout, max-width, overflow). </summary>
        public abstract string InnerContainer { get; }
        /// <summary> Gets the base CSS classes for the article element. Prose width is applied separately. </summary>
        public abstract string Article { get; }
        /// <summary>
        ///     Gets the base CSS classes for the aside element (side content: layout, overflow, padding, typography). Width
        ///     and positioning are applied separately.
        /// </summary>
        public abstract string Aside { get; }
        /// <summary> Gets the prose width utility class based on the specified width. </summary>
        /// <param name="width">The desired prose width.</param>
        /// <returns>A string representing a Tailwind prose width class.</returns>
        public abstract string GetArticleProseCss(ProseWidth width);
        /// <summary> Gets the CSS classes for the aside element based on column width and fixed state. </summary>
        /// <param name="columnWidth">The desired width of the aside column.</param>
        /// <param name="isFixed">Whether the aside should be fixed-positioned.</param>
        /// <returns>A string of CSS classes including width and positioning.</returns>
        public abstract string GetAsideCss(Size columnWidth, bool isFixed);
        /// <summary>
        ///     Gets the CSS class for the main container's right padding, used to prevent content overlap with a fixed
        ///     aside.
        /// </summary>
        /// <param name="columnWidth">The width of the aside column.</param>
        /// <returns>A string representing a right padding class (e.g., "xl:pr-72").</returns>
        public abstract string GetContainerPaddingCss(Size columnWidth);
    }
    #endregion
    #region RzAccordion Styles
    /// <summary>
    ///     Defines the abstract structure for styling the <see cref="RzAccordion" /> component.
    /// </summary>
    public abstract class RzAccordionStylesBase
    {
        /// <summary> The theme instance providing color and sizing tokens. </summary>
        protected readonly RzTheme Theme;
        /// <summary> Initializes a new instance of the <see cref="RzAccordionStylesBase" /> class. </summary>
        protected RzAccordionStylesBase(RzTheme theme)
        {
            Theme = theme;
        }
        /// <summary> Gets the base CSS classes for the main RzAccordion container div. </summary>
        public abstract string Container { get; }
    }
    /// <summary>
    ///     Defines the abstract structure for styling the <see cref="RzAccordionSection" /> component.
    /// </summary>
    public abstract class RzAccordionSectionStylesBase
    {
        /// <summary> The theme instance providing color and sizing tokens. </summary>
        protected readonly RzTheme Theme;
        /// <summary> Initializes a new instance of the <see cref="RzAccordionSectionStylesBase" /> class. </summary>
        protected RzAccordionSectionStylesBase(RzTheme theme)
        {
            Theme = theme;
        }
        /// <summary> Gets the base CSS classes for the section's clickable button element. </summary>
        public abstract string Button { get; }
        /// <summary> Gets the base CSS classes for the section's collapsible content container div. </summary>
        public abstract string ContentContainer { get; }
        /// <summary> Gets the CSS classes for the chevron indicator icon. </summary>
        public abstract string ChevronIcon { get; }
        /// <summary> Gets the CSS classes applied to the chevron icon when the section is expanded. </summary>
        public abstract string ChevronIconExpanded { get; }
    }
    #endregion
    #region RzAlert Styles
    /// <summary>
    ///     Defines the abstract structure for styling the <see cref="RzAlert" /> component.
    /// </summary>
    public abstract class RzAlertStylesBase
    {
        /// <summary> The theme instance providing color and sizing tokens. </summary>
        protected readonly RzTheme Theme;
        /// <summary> Initializes a new instance of the <see cref="RzAlertStylesBase" /> class. </summary>
        protected RzAlertStylesBase(RzTheme theme)
        {
            Theme = theme;
        }
        /// <summary> Gets the base CSS classes for the main RzAlert container element. </summary>
        public abstract string Container { get; }
        /// <summary> Gets the CSS classes for the inner div containing icon, content, and close button. </summary>
        public abstract string InnerContainer { get; }
        /// <summary> Gets the CSS classes for the div wrapping the alert icon. </summary>
        public abstract string IconContainer { get; }
        /// <summary> Gets the CSS classes for the pulsing animation div behind the icon (when applicable). </summary>
        public abstract string IconPulse { get; }
        /// <summary> Gets the CSS classes for the div containing the alert title and description. </summary>
        public abstract string ContentContainer { get; }
        /// <summary> Gets the CSS classes for the alert's close button. </summary>
        public abstract string CloseButton { get; }
        /// <summary> Gets the CSS classes for the SVG icon within the close button. </summary>
        public abstract string CloseButtonIcon { get; }
        /// <summary> Gets the variant-specific CSS classes (border, background, text color) for the alert container. </summary>
        /// <param name="variant">The alert variant type.</param>
        /// <returns>A string of CSS classes.</returns>
        public abstract string GetVariantCss(AlertVariant variant);
        /// <summary> Gets the variant-specific light background CSS class for the inner container or icon background. </summary>
        /// <param name="variant">The alert variant type.</param>
        /// <returns>A string representing a background CSS class (e.g., "bg-info/10").</returns>
        public abstract string GetVariantBackgroundLightCss(AlertVariant variant);
        /// <summary> Gets the variant-specific lighter background CSS class, often used for icon pulse or hover states. </summary>
        /// <param name="variant">The alert variant type.</param>
        /// <returns>A string representing a background CSS class (e.g., "bg-info/15").</returns>
        public abstract string GetVariantBackgroundLighterCss(AlertVariant variant);
        /// <summary> Gets the variant-specific text color CSS class, typically used for the icon. </summary>
        /// <param name="variant">The alert variant type.</param>
        /// <returns>A string representing a text color CSS class (e.g., "text-info").</returns>
        public abstract string GetVariantIconColorCss(AlertVariant variant);
    }
    /// <summary>
    ///     Defines the abstract structure for styling the <see cref="RzAlertTitle" /> component.
    /// </summary>
    public abstract class RzAlertTitleStylesBase
    {
        /// <summary> The theme instance providing color and sizing tokens. </summary>
        protected readonly RzTheme Theme;
        /// <summary> Initializes a new instance of the <see cref="RzAlertTitleStylesBase" /> class. </summary>
        protected RzAlertTitleStylesBase(RzTheme theme)
        {
            Theme = theme;
        }
        /// <summary> Gets the base CSS classes for the RzAlertTitle h3 element. </summary>
        public abstract string Title { get; }
        /// <summary> Gets the variant-specific text color CSS class for the alert title. </summary>
        /// <param name="variant">The alert variant type (can be null if context is unavailable).</param>
        /// <returns>A string representing a text color CSS class.</returns>
        public abstract string GetVariantTextColorCss(AlertVariant? variant);
    }
    /// <summary>
    ///     Defines the abstract structure for styling the <see cref="RzAlertDescription" /> component.
    /// </summary>
    public abstract class RzAlertDescriptionStylesBase
    {
        /// <summary> The theme instance providing color and sizing tokens. </summary>
        protected readonly RzTheme Theme;
        /// <summary> Initializes a new instance of the <see cref="RzAlertDescriptionStylesBase" /> class. </summary>
        protected RzAlertDescriptionStylesBase(RzTheme theme)
        {
            Theme = theme;
        }
        /// <summary> Gets the base CSS classes for the RzAlertDescription p element. </summary>
        public abstract string Description { get; }
    }
    #endregion
    #region RzBreadcrumb Styles
    /// <summary>
    ///     Defines the abstract structure for styling the <see cref="RzBreadcrumb" /> component container.
    /// </summary>
    public abstract class RzBreadcrumbStylesBase
    {
        /// <summary> The theme instance providing color and sizing tokens. </summary>
        protected readonly RzTheme Theme;
        /// <summary> Initializes a new instance of the <see cref="RzBreadcrumbStylesBase" /> class. </summary>
        protected RzBreadcrumbStylesBase(RzTheme theme)
        {
            Theme = theme;
        }
        /// <summary> Gets the base CSS classes for the RzBreadcrumb nav element (typography, margin). </summary>
        public abstract string Container { get; }
        /// <summary> Gets the CSS classes for the ordered list (ol) element wrapping the items (layout, gap). </summary>
        public abstract string List { get; }
    }
    /// <summary>
    ///     Defines the abstract structure for styling individual items within the <see cref="RzBreadcrumb" /> component.
    /// </summary>
    public abstract class RzBreadcrumbItemStylesBase
    {
        /// <summary> The theme instance providing color and sizing tokens. </summary>
        protected readonly RzTheme Theme;
        /// <summary> Initializes a new instance of the <see cref="RzBreadcrumbItemStylesBase" /> class. </summary>
        protected RzBreadcrumbItemStylesBase(RzTheme theme)
        {
            Theme = theme;
        }
        /// <summary> Gets the CSS classes for the list item (li) element (layout, gap, base text color). </summary>
        public abstract string ListItem { get; }
        /// <summary> Gets the CSS classes for the anchor (a) element used for non-active items (hover states). </summary>
        public abstract string Link { get; }
        /// <summary> Gets the CSS classes for the span element used for the active item (font weight). </summary>
        public abstract string ActiveSpan { get; }
        /// <summary> Gets the CSS classes for the span wrapping an icon, if used. </summary>
        public abstract string IconSpan { get; }
    }
    #endregion
    #region RzBrowser Styles
    /// <summary>
    /// Defines the abstract structure for styling the <see cref="RzBrowser"/> component.
    /// </summary>
    public abstract class RzBrowserStylesBase
    {
        /// <summary> The theme instance providing color and sizing tokens. </summary>
        protected readonly RzTheme Theme;
        /// <summary> Initializes a new instance of the <see cref="RzBrowserStylesBase"/> class. </summary>
        protected RzBrowserStylesBase(RzTheme theme) => Theme = theme;
        /// <summary> Gets the base CSS classes for the main RzBrowser container div. </summary>
        public abstract string Container { get; }
        /// <summary> Gets the CSS classes for the browser top bar (holding traffic lights and controls). </summary>
        public abstract string TopBar { get; }
        /// <summary> Gets the CSS classes for the traffic lights container. </summary>
        public abstract string TrafficLightsContainer { get; }
        /// <summary> Gets the CSS class for the red traffic light. </summary>
        public abstract string TrafficLightRed { get; }
        /// <summary> Gets the CSS class for the yellow traffic light. </summary>
        public abstract string TrafficLightYellow { get; }
        /// <summary> Gets the CSS class for the green traffic light. </summary>
        public abstract string TrafficLightGreen { get; }
        /// <summary> Gets the CSS classes for the screen size controls container (desktop only). </summary>
        public abstract string ScreenSizeControlsContainer { get; }
        /// <summary> Gets the CSS classes for the screen size control buttons' shared style. </summary>
        public abstract string ScreenSizeButton { get; }
        /// <summary> Gets the CSS classes for the inner div grouping the screen size buttons </summary>
        public abstract string ScreenSizeButtonGroup { get; }
        // Note: ScreenSizeButtonIcon is removed as its dynamic part is handled by Alpine :class
        /// <summary> Gets the CSS classes for the main content area div with the grid pattern. </summary>
        public abstract string ContentArea { get; }
        /// <summary> Gets the CSS classes for the inner container div that holds the actual preview/iframe. </summary>
        public abstract string PreviewContainer { get; }
        // Note: Methods for dynamic classes (GetBrowserBorderCss, GetDesktopScreenButtonCss, etc.) are REMOVED
    }
    #endregion
    #region RzButton Styles
    /// <summary>
    ///     Defines the abstract structure for styling the <see cref="RzButton" /> component.
    /// </summary>
    public abstract class RzButtonStylesBase
    {
        /// <summary> The theme instance providing color and sizing tokens. </summary>
        protected readonly RzTheme Theme;
        /// <summary> Initializes a new instance of the <see cref="RzButtonStylesBase" /> class. </summary>
        protected RzButtonStylesBase(RzTheme theme)
        {
            Theme = theme;
        }
        /// <summary> Gets the base CSS classes for the button element (layout, cursor, base typography, transitions). </summary>
        public abstract string Button { get; }
        /// <summary> Gets the CSS classes applied when the button has animation enabled (transforms, transitions). </summary>
        public abstract string Animated { get; }
        /// <summary> Gets the variant-specific CSS classes (background, text, focus styles) for a standard (solid) button. </summary>
        /// <param name="variant">The button variant type.</param>
        /// <returns>A string of CSS classes.</returns>
        public abstract string GetVariantCss(ButtonVariant variant);
        /// <summary> Gets the variant-specific CSS classes (background, border, text, focus styles) for an outlined button. </summary>
        /// <param name="variant">The button variant type.</param>
        /// <returns>A string of CSS classes.</returns>
        public abstract string GetVariantOutlineCss(ButtonVariant variant);
        /// <summary> Gets the size-specific CSS classes (padding, text size) for the button. </summary>
        /// <param name="size">The desired button size.</param>
        /// <returns>A string of CSS classes.</returns>
        public abstract string GetSizeCss(Size size);
    }
    /// <summary>
    ///     Defines the abstract structure for styling the <see cref="RzButtonGroup" /> component and its interaction with
    ///     child buttons.
    /// </summary>
    public abstract class RzButtonGroupStylesBase
    {
        /// <summary> The theme instance providing color and sizing tokens. </summary>
        protected readonly RzTheme Theme;
        /// <summary> Initializes a new instance of the <see cref="RzButtonGroupStylesBase" /> class. </summary>
        protected RzButtonGroupStylesBase(RzTheme theme)
        {
            Theme = theme;
        }
        /// <summary> Gets the base CSS classes for the ButtonGroup container div (layout). </summary>
        public abstract string Container { get; }
        /// <summary> Gets the CSS classes applied to the first button in a group (corner rounding). </summary>
        public abstract string GroupFirst { get; }
        /// <summary> Gets the CSS classes applied to the last button in a group (corner rounding, border adjustment). </summary>
        public abstract string GroupLast { get; }
        /// <summary>
        ///     Gets the CSS classes applied to buttons that are neither first nor last in a group (corner rounding, border
        ///     adjustment).
        /// </summary>
        public abstract string GroupMiddle { get; }
    }
    /// <summary>
    ///     Defines the abstract structure for styling the <see cref="RzDarkmodeToggle" /> button.
    /// </summary>
    public abstract class RzDarkmodeToggleStylesBase
    {
        /// <summary> The theme instance providing color and sizing tokens. </summary>
        protected readonly RzTheme Theme;
        /// <summary> Initializes a new instance of the <see cref="RzDarkmodeToggleStylesBase" /> class. </summary>
        protected RzDarkmodeToggleStylesBase(RzTheme theme)
        {
            Theme = theme;
        }
        /// <summary> Gets the base CSS classes for the DarkmodeToggle button element (layout, padding, base colors, transitions). </summary>
        public abstract string Button { get; }
        /// <summary> Gets the CSS classes for the icons (SVG/Blazicon) within the button (transitions). </summary>
        public abstract string Icon { get; }
    }
    /// <summary>
    ///     Defines the abstract structure for styling the <see cref="RzSearchButton" /> component.
    /// </summary>
    public abstract class RzSearchButtonStylesBase
    {
        /// <summary> The theme instance providing color and sizing tokens. </summary>
        protected readonly RzTheme Theme;
        /// <summary> Initializes a new instance of the <see cref="RzSearchButtonStylesBase" /> class. </summary>
        protected RzSearchButtonStylesBase(RzTheme theme)
        {
            Theme = theme;
        }
        /// <summary>
        ///     Gets the base CSS classes for the SearchButton button element (layout, border, background, typography,
        ///     transitions).
        /// </summary>
        public abstract string Button { get; }
        /// <summary> Gets the CSS classes for the inner div containing the icon and label (layout, gap). </summary>
        public abstract string InnerContainer { get; }
        /// <summary> Gets the CSS classes for the span wrapping the search icon (text size). </summary>
        public abstract string IconSpan { get; }
    }
    #endregion
    #region RzCard Styles
    /// <summary>
    ///     Defines the abstract structure for styling the <see cref="RzCard" /> component container.
    /// </summary>
    public abstract class RzCardStylesBase
    {
        /// <summary> The theme instance providing color and sizing tokens. </summary>
        protected readonly RzTheme Theme;
        /// <summary> Initializes a new instance of the <see cref="RzCardStylesBase" /> class. </summary>
        protected RzCardStylesBase(RzTheme theme)
        {
            Theme = theme;
        }
        /// <summary> Gets the base CSS classes for the RzCard container div (layout, rounding, overflow, shadow, border). </summary>
        public abstract string Container { get; }
    }
    /// <summary>
    ///     Defines the abstract structure for styling the <see cref="RzCardHeader" /> section.
    /// </summary>
    public abstract class RzCardHeaderStylesBase
    {
        /// <summary> The theme instance providing color and sizing tokens. </summary>
        protected readonly RzTheme Theme;
        /// <summary> Initializes a new instance of the <see cref="RzCardHeaderStylesBase" /> class. </summary>
        protected RzCardHeaderStylesBase(RzTheme theme)
        {
            Theme = theme;
        }
        /// <summary> Gets the base CSS classes for the RzCardHeader div (layout, padding, alignment). </summary>
        public abstract string Header { get; }
    }
    /// <summary>
    ///     Defines the abstract structure for styling the <see cref="RzCardBody" /> section.
    /// </summary>
    public abstract class RzCardBodyStylesBase
    {
        /// <summary> The theme instance providing color and sizing tokens. </summary>
        protected readonly RzTheme Theme;
        /// <summary> Initializes a new instance of the <see cref="RzCardBodyStylesBase" /> class. </summary>
        protected RzCardBodyStylesBase(RzTheme theme)
        {
            Theme = theme;
        }
        /// <summary> Gets the base CSS classes for the RzCardBody div (flex grow, padding). </summary>
        public abstract string Body { get; }
    }
    /// <summary>
    ///     Defines the abstract structure for styling the <see cref="RzCardFooter" /> section.
    /// </summary>
    public abstract class RzCardFooterStylesBase
    {
        /// <summary> The theme instance providing color and sizing tokens. </summary>
        protected readonly RzTheme Theme;
        /// <summary> Initializes a new instance of the <see cref="RzCardFooterStylesBase" /> class. </summary>
        protected RzCardFooterStylesBase(RzTheme theme)
        {
            Theme = theme;
        }
        /// <summary> Gets the base CSS classes for the RzCardFooter div (padding, typography, bottom rounding). </summary>
        public abstract string Footer { get; }
    }
    /// <summary>
    ///     Defines the abstract structure for styling the <see cref="RzCardTitle" />.
    /// </summary>
    public abstract class RzCardTitleStylesBase
    {
        /// <summary> The theme instance providing color and sizing tokens. </summary>
        protected readonly RzTheme Theme;
        /// <summary> Initializes a new instance of the <see cref="RzCardTitleStylesBase" /> class. </summary>
        protected RzCardTitleStylesBase(RzTheme theme)
        {
            Theme = theme;
        }
        /// <summary> Gets the base CSS classes for the RzCardTitle h3 element (layout, margin, typography). </summary>
        public abstract string Title { get; }
    }
    /// <summary>
    ///     Defines the abstract structure for styling the <see cref="RzCardSubtitle" />.
    /// </summary>
    public abstract class RzCardSubtitleStylesBase
    {
        /// <summary> The theme instance providing color and sizing tokens. </summary>
        protected readonly RzTheme Theme;
        /// <summary> Initializes a new instance of the <see cref="RzCardSubtitleStylesBase" /> class. </summary>
        protected RzCardSubtitleStylesBase(RzTheme theme)
        {
            Theme = theme;
        }
        /// <summary> Gets the base CSS classes for the RzCardSubtitle h4 element (typography). </summary>
        public abstract string Subtitle { get; }
    }
    /// <summary>
    ///     Defines the abstract structure for styling the <see cref="RzCardButtons" /> container in a card header.
    /// </summary>
    public abstract class RzCardButtonsStylesBase
    {
        /// <summary> The theme instance providing color and sizing tokens. </summary>
        protected readonly RzTheme Theme;
        /// <summary> Initializes a new instance of the <see cref="RzCardButtonsStylesBase" /> class. </summary>
        protected RzCardButtonsStylesBase(RzTheme theme)
        {
            Theme = theme;
        }
        /// <summary> Gets the base CSS classes for the RzCardButtons div (layout, gap, negative margin for alignment). </summary>
        public abstract string ButtonsContainer { get; }
    }
    #endregion
    #region RzCheckbox Styles
    /// <summary>
    ///     Defines the abstract structure for styling the <see cref="RzCheckboxGroup{TValue}" /> container.
    /// </summary>
    public abstract class RzCheckboxGroupStylesBase
    {
        /// <summary> The theme instance providing color and sizing tokens. </summary>
        protected readonly RzTheme Theme;
        /// <summary> Initializes a new instance of the <see cref="RzCheckboxGroupStylesBase" /> class. </summary>
        protected RzCheckboxGroupStylesBase(RzTheme theme)
        {
            Theme = theme;
        }
        /// <summary> Gets the base CSS classes for the RzCheckboxGroup container div (layout, gap). </summary>
        public abstract string Container { get; }
        /// <summary> Gets the layout-specific CSS classes based on the Orientation (flex direction). </summary>
        /// <param name="orientation">The layout orientation.</param>
        /// <returns>A string of CSS classes.</returns>
        public abstract string GetOrientationCss(Orientation orientation);
    }
    /// <summary>
    ///     Defines the abstract structure for styling individual <see cref="RzCheckboxGroupItem{TValue}" /> components.
    /// </summary>
    public abstract class RzCheckboxGroupItemStylesBase
    {
        /// <summary> The theme instance providing color and sizing tokens. </summary>
        protected readonly RzTheme Theme;
        /// <summary> Initializes a new instance of the <see cref="RzCheckboxGroupItemStylesBase" /> class. </summary>
        protected RzCheckboxGroupItemStylesBase(RzTheme theme)
        {
            Theme = theme;
        }
        /// <summary> Gets the base CSS classes for the RzCheckboxGroupItem label element (layout, cursor). </summary>
        public abstract string Label { get; }
        /// <summary> Gets the CSS classes for the relative div wrapping the checkbox input and icon. </summary>
        public abstract string CheckboxWrapper { get; }
        /// <summary> Gets the CSS classes for the checkbox input element itself (size, border, rounding, focus styles). </summary>
        public abstract string CheckboxInput { get; }
        /// <summary> Gets the CSS classes for the div containing the check icon (positioning, text color). </summary>
        public abstract string IconContainer { get; }
        /// <summary> Gets the CSS classes for the span containing the title text (margin). </summary>
        public abstract string TitleSpan { get; }
        /// <summary>
        ///     Returns the CSS class ("hidden" or "") to control the visibility of the check icon based on the checked
        ///     state.
        /// </summary>
        /// <param name="isChecked">Whether the checkbox is checked.</param>
        /// <returns>A string ("hidden" or "").</returns>
        public abstract string GetIconVisibilityCss(bool isChecked);
    }
    /// <summary>
    ///     Defines the abstract structure for styling the <see cref="RzCheckboxGroupField{TValue}" /> component.
    /// </summary>
    public abstract class RzCheckboxGroupFieldStylesBase
    {
        /// <summary> The theme instance providing color and sizing tokens. </summary>
        protected readonly RzTheme Theme;
        /// <summary> Initializes a new instance of the <see cref="RzCheckboxGroupFieldStylesBase" /> class. </summary>
        protected RzCheckboxGroupFieldStylesBase(RzTheme theme)
        {
            Theme = theme;
        }
        /// <summary>
        ///     Gets the base CSS classes for the RzCheckboxGroupField container (typically handled by
        ///     <see cref="RzFieldStylesBase" />).
        /// </summary>
        public abstract string Field { get; }
        /// <summary>
        ///     Gets the CSS classes applied specifically to the <see cref="RzCheckboxGroup{TValue}" /> when it's rendered
        ///     inside this field container (e.g., margins).
        /// </summary>
        public abstract string GroupWithinField { get; }
    }
    #endregion
    #region RzDropdown Styles
    /// <summary>
    ///     Defines the abstract structure for styling the <see cref="RzDropdown" /> component.
    /// </summary>
    public abstract class RzDropdownStylesBase
    {
        /// <summary> The theme instance providing color and sizing tokens. </summary>
        protected readonly RzTheme Theme;
        /// <summary> Initializes a new instance of the <see cref="RzDropdownStylesBase" /> class. </summary>
        protected RzDropdownStylesBase(RzTheme theme)
        {
            Theme = theme;
        }
        /// <summary> Gets the base CSS classes for the main RzDropdown container div (usually empty or just display property). </summary>
        public abstract string Container { get; }
        /// <summary> Gets the CSS classes for the relative div that wraps both the trigger and the floating menu. </summary>
        public abstract string RelativeWrapper { get; }
        /// <summary> Gets the CSS classes for the div that wraps the trigger content (layout properties). </summary>
        public abstract string TriggerWrapper { get; }
        /// <summary>
        ///     Gets the CSS classes for the dropdown menu container div (positioning, width, rounding, shadow). Anchor
        ///     positioning classes are added dynamically.
        /// </summary>
        public abstract string MenuContainer { get; }
        /// <summary>
        ///     Gets the CSS classes for the inner div inside the menu container, which typically holds sections and provides
        ///     background/border styling.
        /// </summary>
        public abstract string MenuInnerContainer { get; }
    }
    /// <summary>
    ///     Defines the abstract structure for styling sections within an <see cref="RzDropdown" />.
    /// </summary>
    public abstract class RzDropdownSectionStylesBase
    {
        /// <summary> The theme instance providing color and sizing tokens. </summary>
        protected readonly RzTheme Theme;
        /// <summary> Initializes a new instance of the <see cref="RzDropdownSectionStylesBase" /> class. </summary>
        protected RzDropdownSectionStylesBase(RzTheme theme)
        {
            Theme = theme;
        }
        /// <summary> Gets the base CSS classes for the RzDropdownSection div (layout, padding). </summary>
        public abstract string Section { get; }
    }
    /// <summary>
    ///     Defines the abstract structure for styling individual items within an <see cref="RzDropdownSection" />.
    /// </summary>
    public abstract class RzDropdownMenuItemStylesBase
    {
        /// <summary> The theme instance providing color and sizing tokens. </summary>
        protected readonly RzTheme Theme;
        /// <summary> Initializes a new instance of the <see cref="RzDropdownMenuItemStylesBase" /> class. </summary>
        protected RzDropdownMenuItemStylesBase(RzTheme theme)
        {
            Theme = theme;
        }
        /// <summary>
        ///     Gets the base CSS classes for the RzDropdownMenuItem anchor (a) element (layout, rounding, cursor, border,
        ///     padding, typography, transitions, focus styles).
        /// </summary>
        public abstract string MenuItem { get; }
        /// <summary> Gets the CSS classes for the span wrapping the icon (typography size). </summary>
        public abstract string IconSpan { get; }
        /// <summary> Gets the CSS classes for the Blazicon component within the icon span (size, layout, opacity). </summary>
        public abstract string Icon { get; }
        /// <summary> Gets the CSS classes for the span containing the title text (flex grow). </summary>
        public abstract string TitleSpan { get; }
        /// <summary>
        ///     Gets the CSS classes for the div displaying the optional count badge (layout, rounding, border, padding,
        ///     typography).
        /// </summary>
        public abstract string CountDiv { get; }
    }
    #endregion
    #region RzField Styles
    /// <summary>
    ///     Defines the abstract structure for styling the <see cref="RzField" /> container component.
    /// </summary>
    public abstract class RzFieldStylesBase
    {
        /// <summary> The theme instance providing color and sizing tokens. </summary>
        protected readonly RzTheme Theme;
        /// <summary> Initializes a new instance of the <see cref="RzFieldStylesBase" /> class. </summary>
        protected RzFieldStylesBase(RzTheme theme)
        {
            Theme = theme;
        }
        /// <summary> Gets the base CSS classes for the RzField container div (layout, spacing). </summary>
        public abstract string Field { get; }
    }
    /// <summary>
    ///     Defines the abstract structure for styling the <see cref="RzFieldLabel{TValue}" /> component.
    /// </summary>
    public abstract class RzFieldLabelStylesBase
    {
        /// <summary> The theme instance providing color and sizing tokens. </summary>
        protected readonly RzTheme Theme;
        /// <summary> Initializes a new instance of the <see cref="RzFieldLabelStylesBase" /> class. </summary>
        protected RzFieldLabelStylesBase(RzTheme theme)
        {
            Theme = theme;
        }
        /// <summary> Gets the base CSS classes for the RzFieldLabel label element (typography). </summary>
        public abstract string Label { get; }
        /// <summary> Gets the CSS classes for the required indicator span (color, typography). </summary>
        public abstract string RequiredIndicator { get; }
    }
    /// <summary>
    ///     Defines the abstract structure for styling the <see cref="RzFieldHelp" /> component.
    /// </summary>
    public abstract class RzFieldHelpStylesBase
    {
        /// <summary> The theme instance providing color and sizing tokens. </summary>
        protected readonly RzTheme Theme;
        /// <summary> Initializes a new instance of the <see cref="RzFieldHelpStylesBase" /> class. </summary>
        protected RzFieldHelpStylesBase(RzTheme theme)
        {
            Theme = theme;
        }
        /// <summary> Gets the base CSS classes for the RzFieldHelp p element (typography, color). </summary>
        public abstract string HelpText { get; }
    }
    #endregion
    #region RzNumber Styles
    /// <summary>
    ///     Defines the abstract structure for styling the <see cref="RzNumberEdit{TValue}" /> component.
    /// </summary>
    public abstract class RzNumberEditStylesBase
    {
        /// <summary> The theme instance providing color and sizing tokens. </summary>
        protected readonly RzTheme Theme;
        /// <summary> Initializes a new instance of the <see cref="RzNumberEditStylesBase" /> class. </summary>
        protected RzNumberEditStylesBase(RzTheme theme)
        {
            Theme = theme;
        }
        /// <summary> Gets the CSS classes for the relative div wrapping the input and prepend element. </summary>
        public abstract string InputWrapper { get; }
        /// <summary>
        ///     Gets the CSS classes for the prepend element div (positioning, layout, padding, border, background,
        ///     typography).
        /// </summary>
        public abstract string PrependElement { get; }
        /// <summary> Gets the CSS classes for the Blazicon component if PrependIcon is used (text size). </summary>
        public abstract string PrependIconContainer { get; }
        /// <summary>
        ///     Gets the base CSS classes for the input element (layout, rounding, border, padding, typography, focus
        ///     styles).
        /// </summary>
        public abstract string Input { get; }
    }
    /// <summary>
    ///     Defines the abstract structure for styling the <see cref="RzNumberField{TValue}" /> component.
    /// </summary>
    public abstract class RzNumberFieldStylesBase
    {
        /// <summary> The theme instance providing color and sizing tokens. </summary>
        protected readonly RzTheme Theme;
        /// <summary> Initializes a new instance of the <see cref="RzNumberFieldStylesBase" /> class. </summary>
        protected RzNumberFieldStylesBase(RzTheme theme)
        {
            Theme = theme;
        }
        /// <summary>
        ///     Gets the base CSS classes for the RzNumberField container (typically handled by
        ///     <see cref="RzFieldStylesBase" />).
        /// </summary>
        public abstract string Field { get; }
    }
    #endregion
    #region RzQuickReference Styles
    /// <summary>
    ///     Defines the abstract structure for styling the <see cref="RzQuickReference" /> component.
    /// </summary>
    public abstract class RzQuickReferenceStylesBase
    {
        /// <summary> The theme instance providing color and sizing tokens. </summary>
        protected readonly RzTheme Theme;
        /// <summary> Initializes a new instance of the <see cref="RzQuickReferenceStylesBase" /> class. </summary>
        protected RzQuickReferenceStylesBase(RzTheme theme)
        {
            Theme = theme;
        }
        /// <summary> Gets the base CSS classes for the RzQuickReference container div (base text color). </summary>
        public abstract string Container { get; }
        /// <summary> Gets the CSS classes for the title paragraph (margin, font weight). </summary>
        public abstract string Title { get; }
        /// <summary> Gets the CSS classes for the list (ul) element containing heading links (layout, gap). </summary>
        public abstract string List { get; }
        /// <summary> Gets the base CSS classes for individual list items (li). Indentation is applied separately. </summary>
        public abstract string ListItem { get; }
        /// <summary> Gets the base CSS classes for the anchor (a) tag linking to headings. </summary>
        public abstract string Link { get; }
        /// <summary> Gets the CSS class applied to the link when it corresponds to the currently highlighted heading. </summary>
        public abstract string LinkSelected { get; }
        /// <summary>
        ///     Gets the indentation CSS class (e.g., "ml-4") for a list item based on its heading level relative to the
        ///     minimum level shown.
        /// </summary>
        /// <param name="level">The heading level of the item.</param>
        /// <param name="minLevel">The minimum heading level being displayed in the quick reference.</param>
        /// <returns>A string representing a margin-left class.</returns>
        public abstract string GetIndentationCss(HeadingLevel level, HeadingLevel minLevel);
    }
    /// <summary>
    ///     Defines the abstract structure for styling the <see cref="RzQuickReferenceContainer" /> component.
    /// </summary>
    public abstract class RzQuickReferenceContainerStylesBase
    {
        /// <summary> The theme instance providing color and sizing tokens. </summary>
        protected readonly RzTheme Theme;
        /// <summary> Initializes a new instance of the <see cref="RzQuickReferenceContainerStylesBase" /> class. </summary>
        protected RzQuickReferenceContainerStylesBase(RzTheme theme)
        {
            Theme = theme;
        }
        /// <summary> Gets the base CSS classes for the RzQuickReferenceContainer div (usually none). </summary>
        public abstract string Container { get; }
    }
    #endregion
    #region RzRadio Styles
    /// <summary>
    ///     Defines the abstract structure for styling the <see cref="RzRadioGroup{TValue}" /> container.
    /// </summary>
    public abstract class RzRadioGroupStylesBase
    {
        /// <summary> The theme instance providing color and sizing tokens. </summary>
        protected readonly RzTheme Theme;
        /// <summary> Initializes a new instance of the <see cref="RzRadioGroupStylesBase" /> class. </summary>
        protected RzRadioGroupStylesBase(RzTheme theme)
        {
            Theme = theme;
        }
        /// <summary> Gets the base CSS classes for the RzRadioGroup container div (layout, gap, padding). </summary>
        public abstract string Container { get; }
        /// <summary> Gets the grid column CSS class based on the orientation and item count. </summary>
        /// <param name="orientation">The layout orientation.</param>
        /// <param name="itemCount">The number of radio items.</param>
        /// <returns>A string representing a grid columns class (e.g., "grid-cols-1").</returns>
        public abstract string GetGridColumnsCss(Orientation orientation, int itemCount);
    }
    /// <summary>
    ///     Defines the abstract structure for styling individual <see cref="RzRadioGroupItem{TValue}" /> components.
    /// </summary>
    public abstract class RzRadioGroupItemStylesBase
    {
        /// <summary> The theme instance providing color and sizing tokens. </summary>
        protected readonly RzTheme Theme;
        /// <summary> Initializes a new instance of the <see cref="RzRadioGroupItemStylesBase" /> class. </summary>
        protected RzRadioGroupItemStylesBase(RzTheme theme)
        {
            Theme = theme;
        }
        /// <summary> Gets the base CSS classes for the RzRadioGroupItem label element (layout). </summary>
        public abstract string LabelWrapper { get; }
        /// <summary> Gets the CSS classes for the visually hidden radio input element. </summary>
        public abstract string RadioInput { get; }
        /// <summary> Gets the CSS classes for the check icon container span (positioning, appearance, transitions). </summary>
        public abstract string IconContainer { get; }
        /// <summary>
        ///     Gets the CSS classes for the main clickable container span (layout, cursor, rounding, border, padding, peer
        ///     states).
        /// </summary>
        public abstract string ClickableContainer { get; }
        /// <summary> Gets the CSS classes for the div containing the optional icon and text content (layout). </summary>
        public abstract string ContentWrapper { get; }
        /// <summary> Gets the CSS classes for the optional leading icon div (margin, typography). </summary>
        public abstract string LeadingIconContainer { get; }
        /// <summary> Gets the CSS classes for the span holding the label and description (layout, padding). </summary>
        public abstract string TextContainer { get; }
        /// <summary> Gets the CSS classes for the label text span (margin, typography). </summary>
        public abstract string LabelText { get; }
        /// <summary> Gets the CSS classes for the description text span (layout, typography). </summary>
        public abstract string DescriptionText { get; }
    }
    /// <summary>
    ///     Defines the abstract structure for styling the <see cref="RzRadioGroupField{TValue}" /> component.
    /// </summary>
    public abstract class RzRadioGroupFieldStylesBase
    {
        /// <summary> The theme instance providing color and sizing tokens. </summary>
        protected readonly RzTheme Theme;
        /// <summary> Initializes a new instance of the <see cref="RzRadioGroupFieldStylesBase" /> class. </summary>
        protected RzRadioGroupFieldStylesBase(RzTheme theme)
        {
            Theme = theme;
        }
        /// <summary>
        ///     Gets the base CSS classes for the RzRadioGroupField container (typically handled by
        ///     <see cref="RzFieldStylesBase" />).
        /// </summary>
        public abstract string Field { get; }
        /// <summary>
        ///     Gets the CSS classes applied specifically to the <see cref="RzRadioGroup{TValue}" /> when it's rendered
        ///     inside this field container.
        /// </summary>
        public abstract string GroupWithinField { get; }
    }
    #endregion
    #region RzSidebar Styles
    /// <summary>
    ///     Defines the abstract structure for styling the <see cref="RzSidebar" /> component and layout.
    /// </summary>
    public abstract class RzSidebarStylesBase
    {
        /// <summary> The theme instance providing color and sizing tokens. </summary>
        protected readonly RzTheme Theme;
        /// <summary> Initializes a new instance of the <see cref="RzSidebarStylesBase" /> class. </summary>
        protected RzSidebarStylesBase(RzTheme theme)
        {
            Theme = theme;
        }
        /// <summary>
        ///     Gets the base CSS classes for the main RzSidebar container div (which holds the Alpine.js x-data). Usually
        ///     empty.
        /// </summary>
        public abstract string Container { get; }
        /// <summary> Gets the CSS classes for the primary div containing both the sidebar (aside) and main content area (section). </summary>
        public abstract string LayoutContainer { get; }
        /// <summary> Gets the CSS classes for the screen reader skip link. </summary>
        public abstract string SkipLink { get; }
        /// <summary> Gets the CSS classes for the dark overlay div shown on mobile when the sidebar is open. </summary>
        public abstract string Overlay { get; }
        /// <summary>
        ///     Gets the base CSS classes for the aside element (sidebar container: positioning, width, overflow, background,
        ///     border, z-index, padding, transitions).
        /// </summary>
        public abstract string Sidebar { get; }
        /// <summary> Gets the CSS classes for the main content section element (padding-left offset, width, background). </summary>
        public abstract string MainContentContainer { get; }
        /// <summary> Gets the CSS classes for the inner div providing padding within the main content area. </summary>
        public abstract string MainContentPadding { get; }
        /// <summary> Gets the CSS classes for the floating toggle button used when no <see cref="RzNavbar" /> is provided. </summary>
        public abstract string FloatingToggleButton { get; }
        /// <summary> Gets the CSS 'top' positioning class for the sidebar based on whether a navbar is present. </summary>
        /// <param name="hasNavbar">True if a navbar is rendered within the sidebar.</param>
        /// <returns>A string like "top-16" or "top-0".</returns>
        public abstract string GetSidebarTopCss(bool hasNavbar);
        /// <summary> Gets the CSS top margin class for the main layout container based on whether a navbar is present. </summary>
        /// <param name="hasNavbar">True if a navbar is rendered within the sidebar.</param>
        /// <returns>A string like "mt-16" or "".</returns>
        public abstract string GetLayoutContainerTopCss(bool hasNavbar);
        /// <summary> Gets the CSS transform class for the sidebar's visibility state (used by Alpine.js binding). </summary>
        /// <param name="isVisible">True if the sidebar should be visible.</param>
        /// <returns>A string like "translate-x-0" or "-translate-x-60".</returns>
        public abstract string GetSidebarTranslationCss(bool isVisible);
    }
    /// <summary>
    ///     Defines the abstract structure for styling individual items (<see cref="RzSidebarLinkItem" />) within the sidebar.
    /// </summary>
    public abstract class RzSidebarLinkItemStylesBase
    {
        /// <summary> The theme instance providing color and sizing tokens. </summary>
        protected readonly RzTheme Theme;
        /// <summary> Initializes a new instance of the <see cref="RzSidebarLinkItemStylesBase" /> class. </summary>
        protected RzSidebarLinkItemStylesBase(RzTheme theme)
        {
            Theme = theme;
        }
        /// <summary> Gets the base CSS classes for the list item (li) when it represents a collapsible section. </summary>
        public abstract string CollapsibleListItem { get; }
        /// <summary> Gets the CSS classes for the inner div used within a collapsible list item. </summary>
        public abstract string CollapsibleInnerDiv { get; }
        /// <summary> Gets the base CSS classes for the button element used as the header for a collapsible section. </summary>
        public abstract string CollapsibleButton { get; }
        /// <summary> Gets the CSS classes for the icon container div within the collapsible button. </summary>
        public abstract string CollapsibleButtonIconContainer { get; }
        /// <summary> Gets the CSS classes for the title span within the collapsible button. </summary>
        public abstract string CollapsibleButtonTitle { get; }
        /// <summary> Gets the CSS classes for the trailer content div (e.g., badge) within the collapsible button. </summary>
        public abstract string CollapsibleButtonTrailer { get; }
        /// <summary> Gets the base CSS classes for the expand/collapse chevron icon. </summary>
        public abstract string CollapsibleButtonChevron { get; }
        /// <summary> Gets the CSS classes for the nested list (ul) containing child items within a collapsible section. </summary>
        public abstract string CollapsibleNestedList { get; }
        /// <summary> Gets the CSS classes for the list item (li) when it's a non-collapsible sub-item (indented style). </summary>
        public abstract string SubListItem { get; }
        /// <summary> Gets the CSS classes for the anchor (a) or div element used for a non-collapsible sub-item. </summary>
        public abstract string SubLinkOrDiv { get; }
        /// <summary> Gets the CSS classes for the list item (li) when it's a non-collapsible top-level item. </summary>
        public abstract string TopLevelListItem { get; }
        /// <summary> Gets the CSS classes for the div element used when a top-level item has children but is not collapsible. </summary>
        public abstract string TopLevelNonCollapsibleDiv { get; }
        /// <summary> Gets the CSS classes for the anchor (a) element used for a non-collapsible top-level item. </summary>
        public abstract string TopLevelLink { get; }
        /// <summary> Gets the CSS classes for the icon container div used within non-collapsible items. </summary>
        public abstract string ItemIconContainer { get; }
        /// <summary> Gets the CSS classes for the title span used within non-collapsible items. </summary>
        public abstract string ItemTitle { get; }
        /// <summary> Gets the CSS classes for the trailer content div used within non-collapsible items. </summary>
        public abstract string ItemTrailer { get; }
        /// <summary> Gets the CSS classes for the nested list (ul) used within non-collapsible items that have children. </summary>
        public abstract string NonCollapsibleNestedList { get; }
        /// <summary> Gets the CSS transform class (e.g., "rotate-180") for the chevron icon based on the expanded state. </summary>
        /// <param name="isExpanded">True if the collapsible section is expanded.</param>
        /// <returns>A string representing a rotation class.</returns>
        public abstract string GetChevronRotationCss(bool isExpanded);
    }
    /// <summary>
    ///     Defines the abstract structure for styling the <see cref="RzSidebarLinks" /> container list.
    /// </summary>
    public abstract class RzSidebarLinksStylesBase
    {
        /// <summary> The theme instance providing color and sizing tokens. </summary>
        protected readonly RzTheme Theme;
        /// <summary> Initializes a new instance of the <see cref="RzSidebarLinksStylesBase" /> class. </summary>
        protected RzSidebarLinksStylesBase(RzTheme theme)
        {
            Theme = theme;
        }
        /// <summary> Gets the base CSS classes for the RzSidebarLinks ul element (layout, spacing). </summary>
        public abstract string List { get; }
    }
    #endregion
    #region RzTab Styles
    /// <summary>
    ///     Defines the abstract structure for styling the <see cref="RzTabs" /> container.
    /// </summary>
    public abstract class RzTabsStylesBase
    {
        /// <summary> The theme instance providing color and sizing tokens. </summary>
        protected readonly RzTheme Theme;
        /// <summary> Initializes a new instance of the <see cref="RzTabsStylesBase" /> class. </summary>
        protected RzTabsStylesBase(RzTheme theme)
        {
            Theme = theme;
        }
        /// <summary> Gets the base CSS classes for the main RzTabs container div (which holds Alpine.js x-data). </summary>
        public abstract string Container { get; }
        /// <summary> Gets the CSS classes for the div containing the TabPanels. </summary>
        public abstract string PanelsContainer { get; }
    }
    /// <summary>
    ///     Defines the abstract structure for styling the <see cref="RzTabStrip" /> component.
    /// </summary>
    public abstract class RzTabStripStylesBase
    {
        /// <summary> The theme instance providing color and sizing tokens. </summary>
        protected readonly RzTheme Theme;
        /// <summary> Initializes a new instance of the <see cref="RzTabStripStylesBase" /> class. </summary>
        protected RzTabStripStylesBase(RzTheme theme)
        {
            Theme = theme;
        }
        /// <summary> Gets the base CSS classes for the RzTabStrip container div (positioning, layout). </summary>
        public abstract string Strip { get; }
        /// <summary>
        ///     Gets the CSS classes for the tab marker div used for selection indication (positioning, size, transitions,
        ///     pseudo-element setup).
        /// </summary>
        public abstract string Marker { get; }
        /// <summary> Gets the CSS classes for the inner div within the marker. </summary>
        public abstract string MarkerInner { get; }
        /// <summary> Gets the grid columns CSS class based on the number of tabs. </summary>
        /// <param name="tabCount">The number of tabs.</param>
        /// <returns>A string representing a grid columns class (e.g., "grid-cols-3").</returns>
        public abstract string GetColumnsCss(int tabCount);
        /// <summary> Gets the gap CSS class based on the specified spacing size. </summary>
        /// <param name="spaceBetween">The desired gap size.</param>
        /// <returns>A string representing a gap class (e.g., "gap-2").</returns>
        public abstract string GetGapCss(Size spaceBetween);
        /// <summary> Gets the background color class for the marker's ::after pseudo-element based on the specified SemanticColor. </summary>
        /// <param name="color">The semantic color for the marker underline.</param>
        /// <returns>A string representing a background color class prefixed with 'after:' (e.g., "after:bg-primary").</returns>
        public abstract string GetMarkerAfterBackgroundCss(SemanticColor color);
    }
    /// <summary>
    ///     Defines the abstract structure for styling the <see cref="RzTab" /> button component.
    /// </summary>
    public abstract class RzTabStylesBase
    {
        /// <summary> The theme instance providing color and sizing tokens. </summary>
        protected readonly RzTheme Theme;
        /// <summary> Initializes a new instance of the <see cref="RzTabStylesBase" /> class. </summary>
        protected RzTabStylesBase(RzTheme theme)
        {
            Theme = theme;
        }
        /// <summary>
        ///     Gets the base CSS classes for the RzTab button element (positioning, layout, size, cursor, whitespace,
        ///     rounding, typography, transitions).
        /// </summary>
        public abstract string Button { get; }
        /// <summary> Gets the justification CSS class based on the Justify enum. </summary>
        /// <param name="justify">The desired justification.</param>
        /// <returns>A string representing a justify-content class (e.g., "justify-center").</returns>
        public abstract string GetJustifyCss(Justify justify);
        /// <summary> Gets the text color CSS class for the tab in its non-selected state. </summary>
        /// <param name="color">The semantic color specified by the parent RzTabs.</param>
        /// <returns>A string representing a text color class.</returns>
        public abstract string GetTextColorCss(SemanticColor color);
        /// <summary> Gets the background color CSS class for the tab in its non-selected state. </summary>
        /// <param name="color">The semantic color specified by the parent RzTabs.</param>
        /// <returns>A string representing a background color class.</returns>
        public abstract string GetBackgroundColorCss(SemanticColor color);
        // Note: Selected text color is handled dynamically via Alpine :class binding based on RzTabs parameter
    }
    /// <summary>
    ///     Defines the abstract structure for styling the <see cref="RzTabPanel" /> component.
    /// </summary>
    public abstract class RzTabPanelStylesBase
    {
        /// <summary> The theme instance providing color and sizing tokens. </summary>
        protected readonly RzTheme Theme;
        /// <summary> Initializes a new instance of the <see cref="RzTabPanelStylesBase" /> class. </summary>
        protected RzTabPanelStylesBase(RzTheme theme)
        {
            Theme = theme;
        }
        /// <summary> Gets the base CSS classes for the outer container div of the RzTabPanel (positioning). </summary>
        public abstract string OuterContainer { get; }
        /// <summary>
        ///     Gets the base CSS classes for the inner content div of the RzTabPanel (padding/background are often applied
        ///     via attributes).
        /// </summary>
        public abstract string InnerContainer { get; }
        /// <summary> Gets the text color CSS class, typically inherited from the parent RzTabs component. </summary>
        /// <param name="color">The semantic text color specified by the parent RzTabs.</param>
        /// <returns>A string representing a text color class.</returns>
        public abstract string GetTextColorCss(SemanticColor color);
    }
    #endregion
    #region RzText Styles
    /// <summary>
    ///     Defines the abstract structure for styling the <see cref="RzTextEdit" /> component.
    /// </summary>
    public abstract class RzTextEditStylesBase
    {
        /// <summary> The theme instance providing color and sizing tokens. </summary>
        protected readonly RzTheme Theme;
        /// <summary> Initializes a new instance of the <see cref="RzTextEditStylesBase" /> class. </summary>
        protected RzTextEditStylesBase(RzTheme theme)
        {
            Theme = theme;
        }
        /// <summary> Gets the CSS classes for the relative div wrapping the input and optional prepend element. </summary>
        public abstract string InputWrapper { get; }
        /// <summary>
        ///     Gets the CSS classes for the prepend element div (positioning, layout, padding, border, background,
        ///     typography).
        /// </summary>
        public abstract string PrependElement { get; }
        /// <summary> Gets the CSS classes for the Blazicon component if PrependIcon is used (text size). </summary>
        public abstract string PrependIconContainer { get; }
        /// <summary>
        ///     Gets the base CSS classes for the input element (layout, rounding, border, padding, typography, focus styles,
        ///     initial transition state).
        /// </summary>
        public abstract string Input { get; }
    }
    /// <summary>
    ///     Defines the abstract structure for styling the <see cref="RzTextField" /> component.
    /// </summary>
    public abstract class RzTextFieldStylesBase
    {
        /// <summary> The theme instance providing color and sizing tokens. </summary>
        protected readonly RzTheme Theme;
        /// <summary> Initializes a new instance of the <see cref="RzTextFieldStylesBase" /> class. </summary>
        protected RzTextFieldStylesBase(RzTheme theme)
        {
            Theme = theme;
        }
        /// <summary>
        ///     Gets the base CSS classes for the RzTextField container (typically handled by
        ///     <see cref="RzFieldStylesBase" />).
        /// </summary>
        public abstract string Field { get; }
    }
    #endregion
    #region RzToggle Styles
    /// <summary>
    ///     Defines the abstract structure for styling the <see cref="RzToggle" /> switch component.
    /// </summary>
    public abstract class RzToggleStylesBase
    {
        /// <summary> The theme instance providing color and sizing tokens. </summary>
        protected readonly RzTheme Theme;
        /// <summary> Initializes a new instance of the <see cref="RzToggleStylesBase" /> class. </summary>
        protected RzToggleStylesBase(RzTheme theme)
        {
            Theme = theme;
        }
        /// <summary>
        ///     Gets the base CSS classes for the RzToggle input (checkbox) element, including base appearance, ::before
        ///     pseudo-element styles, and checked state styles.
        /// </summary>
        public abstract string Toggle { get; }
    }
    /// <summary>
    ///     Defines the abstract structure for styling the <see cref="RzToggleField" /> component.
    /// </summary>
    public abstract class RzToggleFieldStylesBase
    {
        /// <summary> The theme instance providing color and sizing tokens. </summary>
        protected readonly RzTheme Theme;
        /// <summary> Initializes a new instance of the <see cref="RzToggleFieldStylesBase" /> class. </summary>
        protected RzToggleFieldStylesBase(RzTheme theme)
        {
            Theme = theme;
        }
        /// <summary>
        ///     Gets the base CSS classes for the RzToggleField container (typically handled by
        ///     <see cref="RzFieldStylesBase" />).
        /// </summary>
        public abstract string Field { get; }
        /// <summary> Gets the CSS classes for the div containing the label and toggle switch (layout). </summary>
        public abstract string ContentWrapper { get; }
        /// <summary> Gets the CSS classes for the inner div structuring the label and toggle (layout, alignment). </summary>
        public abstract string InnerWrapper { get; }
        /// <summary> Gets the CSS classes for the <see cref="RzFieldLabel{TValue}" /> component when used within this field. </summary>
        public abstract string LabelInField { get; }
        /// <summary> Gets the CSS classes for the <see cref="RzToggle" /> component when used within this field (usually empty). </summary>
        public abstract string ToggleInField { get; }
        /// <summary> Gets the CSS classes for the Description span within the label. </summary>
        public abstract string DescriptionInLabel { get; }
    }
    #endregion
}
</file>

<file path="RzTheme.cs">
#pragma warning disable CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider adding the 'required' modifier or declaring as nullable.
namespace RizzyUI;
/// <summary>
///     Represents the comprehensive theme data for the RizzyUI application.
///     It holds semantic colors (light/dark variants), status colors, border settings,
///     and references to style definitions for all individual RizzyUI components.
///     This class allows for theme customization and provides styling context to components.
/// </summary>
public partial class RzTheme
{
    /// <summary>
    ///     Initializes a new instance of the <see cref="RzTheme" /> class, setting the name, code,
    ///     and instantiating all default component style definitions.
    /// </summary>
    /// <param name="name">The full, human-readable name of the theme.</param>
    /// <param name="themeCode">The short, lowercase code name for the theme.</param>
    public RzTheme(string name, string themeCode)
    {
        Name = name;
        ThemeCode = themeCode;
        // Instantiate default styles for all components
        RzAccordion = new DefaultRzAccordionStyles(this);
        RzAccordionSection = new DefaultRzAccordionSectionStyles(this);
        RzAlert = new DefaultRzAlertStyles(this);
        RzAlertTitle = new DefaultRzAlertTitleStyles(this);
        RzAlertDescription = new DefaultRzAlertDescriptionStyles(this);
        RzArticle = new DefaultRzArticleStyles(this);
        RzAvatar = new DefaultRzAvatarStyles(this);
        RzBadge = new DefaultRzBadgeStyles(this);
        RzBreadcrumb = new DefaultRzBreadcrumbStyles(this);
        RzBreadcrumbItem = new DefaultRzBreadcrumbItemStyles(this);
        RzBrowser = new DefaultRzBrowserStyles(this);
        RzButton = new DefaultRzButtonStyles(this);
        RzButtonGroup = new DefaultRzButtonGroupStyles(this);
        RzCard = new DefaultRzCardStyles(this);
        RzCardBody = new DefaultRzCardBodyStyles(this);
        RzCardButtons = new DefaultRzCardButtonsStyles(this);
        RzCardFooter = new DefaultRzCardFooterStyles(this);
        RzCardHeader = new DefaultRzCardHeaderStyles(this);
        RzCardSubtitle = new DefaultRzCardSubtitleStyles(this);
        RzCardTitle = new DefaultRzCardTitleStyles(this);
        RzCheckboxGroup = new DefaultRzCheckboxGroupStyles(this);
        RzCheckboxGroupField = new DefaultRzCheckboxGroupFieldStyles(this);
        RzCheckboxGroupItem = new DefaultRzCheckboxGroupItemStyles(this);
        RzCodeViewer = new DefaultRzCodeViewerStyles(this);
        RzDarkmodeToggle = new DefaultRzDarkmodeToggleStyles(this);
        RzDateEdit = new DefaultRzDateEditStyles(this);
        RzDivider = new DefaultRzDividerStyles(this);
        RzDropdown = new DefaultRzDropdownStyles(this);
        RzDropdownMenuItem = new DefaultRzDropdownMenuItemStyles(this);
        RzDropdownSection = new DefaultRzDropdownSectionStyles(this);
        RzEmbeddedPreview = new DefaultRzEmbeddedPreviewStyles(this);
        RzField = new DefaultRzFieldStyles(this);
        RzFieldHelp = new DefaultRzFieldHelpStyles(this);
        RzFieldLabel = new DefaultRzFieldLabelStyles(this);
        RzFormSection = new DefaultRzFormSectionStyles(this);
        RzHeading = new DefaultRzHeadingStyles(this);
        RzLink = new DefaultRzLinkStyles(this);
        RzMarkdown = new DefaultRzMarkdownStyles(this);
        RzNavbar = new DefaultRzNavbarStyles(this);
        RzNumberEdit = new DefaultRzNumberEditStyles(this);
        RzNumberField = new DefaultRzNumberFieldStyles(this);
        RzParagraph = new DefaultRzParagraphStyles(this);
        RzProgress = new DefaultRzProgressStyles(this);
        RzQuickReferenceContainer = new DefaultRzQuickReferenceContainerStyles(this);
        RzQuickReference = new DefaultRzQuickReferenceStyles(this);
        RzRadioGroup = new DefaultRzRadioGroupStyles(this);
        RzRadioGroupField = new DefaultRzRadioGroupFieldStyles(this);
        RzRadioGroupItem = new DefaultRzRadioGroupItemStyles(this);
        RzSearchButton = new DefaultRzSearchButtonStyles(this);
        RzSidebar = new DefaultRzSidebarStyles(this);
        RzSidebarLinkItem = new DefaultRzSidebarLinkItemStyles(this);
        RzSidebarLinks = new DefaultRzSidebarLinksStyles(this);
        RzSteps = new DefaultRzStepsStyles(this);
        RzTabs = new DefaultRzTabsStyles(this);
        RzTab = new DefaultRzTabStyles(this);
        RzTabPanel = new DefaultRzTabPanelStyles(this);
        RzTabStrip = new DefaultRzTabStripStyles(this);
        RzTextEdit = new DefaultRzTextEditStyles(this);
        RzTextField = new DefaultRzTextFieldStyles(this);
        RzToggle = new DefaultRzToggleStyles(this);
        RzToggleField = new DefaultRzToggleFieldStyles(this);
        RzTypography = new DefaultRzTypographyStyles(this);
    }
    /// <summary>
    ///     Gets the full, human-readable name of the theme (e.g., "Arctic", "High Contrast").
    /// </summary>
    public string Name { get; init; }
    /// <summary>
    ///     Gets the short code name of the theme (lowercase, no spaces, e.g., "arctic", "highcontrast").
    ///     Used internally, such as for generating theme-specific CSS token names.
    /// </summary>
    public string ThemeCode { get; init; }
    /// <summary>
    ///     Gets or sets the color scheme definitions for the light mode variant of the theme.
    /// </summary>
    public RzThemeVariant Light { get; set; } = new();
    /// <summary>
    ///     Gets or sets the color scheme definitions for the dark mode variant of the theme.
    /// </summary>
    public RzThemeVariant Dark { get; set; } = new();
    /// <summary>
    ///     Gets the <see cref="Color" /> used to indicate dangerous states or error conditions.
    /// </summary>
    public Color Danger { get; protected init; }
    /// <summary>
    ///     Gets the <see cref="Color" /> used for text or icons placed on a <see cref="Danger" /> background.
    /// </summary>
    public Color OnDanger { get; protected init; }
    /// <summary>
    ///     Gets the <see cref="Color" /> used for informational messages or states.
    /// </summary>
    public Color Info { get; protected init; }
    /// <summary>
    ///     Gets the <see cref="Color" /> used for text or icons placed on an <see cref="Info" /> background.
    /// </summary>
    public Color OnInfo { get; protected init; }
    /// <summary>
    ///     Gets the <see cref="Color" /> used to indicate warning or cautionary states.
    /// </summary>
    public Color Warning { get; protected init; }
    /// <summary>
    ///     Gets the <see cref="Color" /> used for text or icons placed on a <see cref="Warning" /> background.
    /// </summary>
    public Color OnWarning { get; protected init; }
    /// <summary>
    ///     Gets the <see cref="Color" /> used to indicate success or positive states.
    /// </summary>
    public Color Success { get; protected init; }
    /// <summary>
    ///     Gets the <see cref="Color" /> used for text or icons placed on a <see cref="Success" /> background.
    /// </summary>
    public Color OnSuccess { get; protected init; }
    /// <summary>
    ///     Gets the default border width value used across components (e.g., "1px").
    /// </summary>
    public string BorderWidth { get; protected init; }
    /// <summary>
    ///     Gets the default border radius value used across components (e.g., "6px", "0.5rem").
    /// </summary>
    public string BorderRadius { get; protected init; }
    /// <summary>
    ///     Gets the default Arctic theme instance.
    /// </summary>
    public static RzTheme Default => ArcticTheme;
    /// <summary>
    ///     Gets a new instance of the Arctic theme.
    /// </summary>
    public static RzTheme ArcticTheme => new ArcticTheme();
    /// <summary>
    ///     Gets a new instance of the High Contrast theme.
    /// </summary>
    public static RzTheme HighContrastTheme => new HighContrastTheme();
    /// <summary>
    ///     Gets a new instance of the Modern theme.
    /// </summary>
    public static RzTheme ModernTheme => new ModernTheme();
    /// <summary>
    ///     Gets a new instance of the News theme.
    /// </summary>
    public static RzTheme NewsTheme => new NewsTheme();
}
#pragma warning restore CS8618
</file>

<file path="RzTheme.StyleProviders.cs">
namespace RizzyUI;
/// <summary>
/// Tailwind classname providers for all components
/// </summary>
public partial class RzTheme
{
    // --- Component Style Properties ---
    /// <summary> Gets or sets the style definitions for the <see cref="RzAccordion" /> component. </summary>
    public virtual RzStylesBase.RzAccordionStylesBase RzAccordion { get; }
    /// <summary> Gets or sets the style definitions for the <see cref="RzAccordionSection" /> component. </summary>
    public virtual RzStylesBase.RzAccordionSectionStylesBase RzAccordionSection { get; }
    /// <summary> Gets or sets the style definitions for the <see cref="RzAlert" /> component. </summary>
    public virtual RzStylesBase.RzAlertStylesBase RzAlert { get; }
    /// <summary> Gets or sets the style definitions for the <see cref="RzAlertTitle" /> component. </summary>
    public virtual RzStylesBase.RzAlertTitleStylesBase RzAlertTitle { get; }
    /// <summary> Gets or sets the style definitions for the <see cref="RzAlertDescription" /> component. </summary>
    public virtual RzStylesBase.RzAlertDescriptionStylesBase RzAlertDescription { get; }
    /// <summary> Gets or sets the style definitions for the <see cref="RzArticle" /> component. </summary>
    public virtual RzStylesBase.RzArticleStylesBase RzArticle { get; }
    /// <summary> Gets or sets the style definitions for the <see cref="RzAvatar" /> component. </summary>
    public virtual RzStylesBase.RzAvatarStylesBase RzAvatar { get; }
    /// <summary> Gets or sets the style definitions for the <see cref="RzBadge" /> component. </summary>
    public virtual RzStylesBase.RzBadgeStylesBase RzBadge { get; }
    /// <summary> Gets or sets the style definitions for the <see cref="RzBreadcrumb" /> component. </summary>
    public virtual RzStylesBase.RzBreadcrumbStylesBase RzBreadcrumb { get; }
    /// <summary> Gets or sets the style definitions for the <see cref="RzBreadcrumbItem" /> component. </summary>
    public virtual RzStylesBase.RzBreadcrumbItemStylesBase RzBreadcrumbItem { get; }
    /// <summary>
    /// Gets or sets the style definitions for the <see cref="RzBrowser" /> component.
    /// </summary>
    public virtual RzStylesBase.RzBrowserStylesBase RzBrowser { get; }
    /// <summary> Gets or sets the style definitions for the <see cref="RzButton" /> component. </summary>
    public virtual RzStylesBase.RzButtonStylesBase RzButton { get; }
    /// <summary> Gets or sets the style definitions for the <see cref="RzButtonGroup" /> component. </summary>
    public virtual RzStylesBase.RzButtonGroupStylesBase RzButtonGroup { get; }
    /// <summary> Gets or sets the style definitions for the <see cref="RzCard" /> component. </summary>
    public virtual RzStylesBase.RzCardStylesBase RzCard { get; }
    /// <summary> Gets or sets the style definitions for the <see cref="RzCardBody" /> component. </summary>
    public virtual RzStylesBase.RzCardBodyStylesBase RzCardBody { get; }
    /// <summary> Gets or sets the style definitions for the <see cref="RzCardButtons" /> component. </summary>
    public virtual RzStylesBase.RzCardButtonsStylesBase RzCardButtons { get; }
    /// <summary> Gets or sets the style definitions for the <see cref="RzCardFooter" /> component. </summary>
    public virtual RzStylesBase.RzCardFooterStylesBase RzCardFooter { get; }
    /// <summary> Gets or sets the style definitions for the <see cref="RzCardHeader" /> component. </summary>
    public virtual RzStylesBase.RzCardHeaderStylesBase RzCardHeader { get; }
    /// <summary> Gets or sets the style definitions for the <see cref="RzCardSubtitle" /> component. </summary>
    public virtual RzStylesBase.RzCardSubtitleStylesBase RzCardSubtitle { get; }
    /// <summary> Gets or sets the style definitions for the <see cref="RzCardTitle" /> component. </summary>
    public virtual RzStylesBase.RzCardTitleStylesBase RzCardTitle { get; }
    /// <summary> Gets or sets the style definitions for the <see cref="RzCheckboxGroup{TValue}" /> component. </summary>
    public virtual RzStylesBase.RzCheckboxGroupStylesBase RzCheckboxGroup { get; }
    /// <summary> Gets or sets the style definitions for the <see cref="RzCheckboxGroupField{TValue}" /> component. </summary>
    public virtual RzStylesBase.RzCheckboxGroupFieldStylesBase RzCheckboxGroupField { get; }
    /// <summary> Gets or sets the style definitions for the <see cref="RzCheckboxGroupItem{TValue}" /> component. </summary>
    public virtual RzStylesBase.RzCheckboxGroupItemStylesBase RzCheckboxGroupItem { get; }
    /// <summary> Gets or sets the style definitions for the <see cref="RzCodeViewer" /> component. </summary>
    public virtual RzStylesBase.RzCodeViewerStylesBase RzCodeViewer { get; }
    /// <summary> Gets or sets the style definitions for the <see cref="RzDarkmodeToggle" /> component. </summary>
    public virtual RzStylesBase.RzDarkmodeToggleStylesBase RzDarkmodeToggle { get; }
    /// <summary> Gets or sets the style definitions for the <see cref="RzDateEdit" /> component. </summary>
    public virtual RzStylesBase.RzDateEditStylesBase RzDateEdit { get; }
    /// <summary> Gets or sets the style definitions for the <see cref="RzDivider" /> component. </summary>
    public virtual RzStylesBase.RzDividerStylesBase RzDivider { get; }
    /// <summary> Gets or sets the style definitions for the <see cref="RzDropdown" /> component. </summary>
    public virtual RzStylesBase.RzDropdownStylesBase RzDropdown { get; }
    /// <summary> Gets or sets the style definitions for the <see cref="RzDropdownMenuItem" /> component. </summary>
    public virtual RzStylesBase.RzDropdownMenuItemStylesBase RzDropdownMenuItem { get; }
    /// <summary> Gets or sets the style definitions for the <see cref="RzDropdownSection" /> component. </summary>
    public virtual RzStylesBase.RzDropdownSectionStylesBase RzDropdownSection { get; }
    /// <summary> Gets or sets the style definitions for the <see cref="RzEmbeddedPreview" /> component. </summary>
    public virtual RzStylesBase.RzEmbeddedPreviewStylesBase RzEmbeddedPreview { get; }
    /// <summary> Gets or sets the style definitions for the <see cref="RzField" /> component. </summary>
    public virtual RzStylesBase.RzFieldStylesBase RzField { get; }
    /// <summary> Gets or sets the style definitions for the <see cref="RzFieldHelp" /> component. </summary>
    public virtual RzStylesBase.RzFieldHelpStylesBase RzFieldHelp { get; }
    /// <summary> Gets or sets the style definitions for the <see cref="RzFieldLabel{TValue}" /> component. </summary>
    public virtual RzStylesBase.RzFieldLabelStylesBase RzFieldLabel { get; }
    /// <summary> Gets or sets the style definitions for the <see cref="RzFormSection" /> component. </summary>
    public virtual RzStylesBase.RzFormSectionStylesBase RzFormSection { get; }
    /// <summary> Gets or sets the style definitions for the <see cref="RzHeading" /> component. </summary>
    public virtual RzStylesBase.RzHeadingStylesBase RzHeading { get; }
    /// <summary> Gets or sets the style definitions for the <see cref="RzLink" /> component. </summary>
    public virtual RzStylesBase.RzLinkStylesBase RzLink { get; }
    /// <summary> Gets or sets the style definitions for the <see cref="RzMarkdown" /> component. </summary>
    public virtual RzStylesBase.RzMarkdownStylesBase RzMarkdown { get; }
    /// <summary> Gets or sets the style definitions for the <see cref="RzNavbar" /> component. </summary>
    public virtual RzStylesBase.RzNavbarStylesBase RzNavbar { get; }
    /// <summary> Gets or sets the style definitions for the <see cref="RzNumberEdit{TValue}" /> component. </summary>
    public virtual RzStylesBase.RzNumberEditStylesBase RzNumberEdit { get; }
    /// <summary> Gets or sets the style definitions for the <see cref="RzNumberField{TValue}" /> component. </summary>
    public virtual RzStylesBase.RzNumberFieldStylesBase RzNumberField { get; }
    /// <summary> Gets or sets the style definitions for the <see cref="RzParagraph" /> component. </summary>
    public virtual RzStylesBase.RzParagraphStylesBase RzParagraph { get; }
    /// <summary> Gets or sets the style definitions for the <see cref="RzProgress" /> component. </summary>
    public virtual RzStylesBase.RzProgressStylesBase RzProgress { get; }
    /// <summary> Gets or sets the style definitions for the <see cref="RzQuickReferenceContainer" /> component. </summary>
    public virtual RzStylesBase.RzQuickReferenceContainerStylesBase RzQuickReferenceContainer { get; }
    /// <summary> Gets or sets the style definitions for the <see cref="RzQuickReference" /> component. </summary>
    public virtual RzStylesBase.RzQuickReferenceStylesBase RzQuickReference { get; }
    /// <summary> Gets or sets the style definitions for the <see cref="RzRadioGroup{TValue}" /> component. </summary>
    public virtual RzStylesBase.RzRadioGroupStylesBase RzRadioGroup { get; }
    /// <summary> Gets or sets the style definitions for the <see cref="RzRadioGroupField{TValue}" /> component. </summary>
    public virtual RzStylesBase.RzRadioGroupFieldStylesBase RzRadioGroupField { get; }
    /// <summary> Gets or sets the style definitions for the <see cref="RzRadioGroupItem{TValue}" /> component. </summary>
    public virtual RzStylesBase.RzRadioGroupItemStylesBase RzRadioGroupItem { get; }
    /// <summary> Gets or sets the style definitions for the <see cref="RzSearchButton" /> component. </summary>
    public virtual RzStylesBase.RzSearchButtonStylesBase RzSearchButton { get; }
    /// <summary> Gets or sets the style definitions for the <see cref="RzSidebar" /> component. </summary>
    public virtual RzStylesBase.RzSidebarStylesBase RzSidebar { get; }
    /// <summary> Gets or sets the style definitions for the <see cref="RzSidebarLinkItem" /> component. </summary>
    public virtual RzStylesBase.RzSidebarLinkItemStylesBase RzSidebarLinkItem { get; }
    /// <summary> Gets or sets the style definitions for the <see cref="RzSidebarLinks" /> component. </summary>
    public virtual RzStylesBase.RzSidebarLinksStylesBase RzSidebarLinks { get; }
    /// <summary> Gets or sets the style definitions for the <see cref="RzSteps" /> component. </summary>
    public virtual RzStylesBase.RzStepsStylesBase RzSteps { get; }
    /// <summary> Gets or sets the style definitions for the <see cref="RzTabs" /> component. </summary>
    public virtual RzStylesBase.RzTabsStylesBase RzTabs { get; }
    /// <summary> Gets or sets the style definitions for the <see cref="RzTab" /> component. </summary>
    public virtual RzStylesBase.RzTabStylesBase RzTab { get; }
    /// <summary> Gets or sets the style definitions for the <see cref="RzTabPanel" /> component. </summary>
    public virtual RzStylesBase.RzTabPanelStylesBase RzTabPanel { get; }
    /// <summary> Gets or sets the style definitions for the <see cref="RzTabStrip" /> component. </summary>
    public virtual RzStylesBase.RzTabStripStylesBase RzTabStrip { get; }
    /// <summary> Gets or sets the style definitions for the <see cref="RzTextEdit" /> component. </summary>
    public virtual RzStylesBase.RzTextEditStylesBase RzTextEdit { get; }
    /// <summary> Gets or sets the style definitions for the <see cref="RzTextField" /> component. </summary>
    public virtual RzStylesBase.RzTextFieldStylesBase RzTextField { get; }
    /// <summary> Gets or sets the style definitions for the <see cref="RzToggle" /> component. </summary>
    public virtual RzStylesBase.RzToggleStylesBase RzToggle { get; }
    /// <summary> Gets or sets the style definitions for the <see cref="RzToggleField" /> component. </summary>
    public virtual RzStylesBase.RzToggleFieldStylesBase RzToggleField { get; }
    /// <summary> Gets or sets the style definitions for base typography used by multiple components. </summary>
    public virtual RzStylesBase.RzTypographyStylesBase RzTypography { get; }
}
</file>

<file path="RzThemeVariant.cs">
#pragma warning disable CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider adding the 'required' modifier or declaring as nullable.
namespace RizzyUI;
/// <summary>
///     Defines a base shared color theme
/// </summary>
public class RzThemeVariant
{
    /// <summary>
    ///     Gets the surface background color
    /// </summary>
    public Color Surface { get; init; }
    /// <summary>
    ///     Gets the color used for content displayed on the surface.
    /// </summary>
    public Color OnSurface { get; init; }
    /// <summary>
    ///     Gets the color used for strongly emphasized content displayed on the surface.
    /// </summary>
    public Color OnSurfaceStrong { get; init; }
    /// <summary>
    ///     Gets the color used for disabled or inactive text elements.
    /// </summary>
    public Color OnSurfaceMuted { get; init; }
    /// <summary>
    ///     Gets the alternate surface background color.
    /// </summary>
    public Color SurfaceAlt { get; init; }
    /// <summary>
    ///     Gets the tertiary surface background color.
    /// </summary>
    public Color SurfaceTertiary { get; init; }
    /// <summary>
    ///     Gets the color used for content displayed on the tertiary surface.
    /// </summary>
    public Color OnSurfaceTertiary { get; init; }
    /// <summary>
    ///     Gets the primary brand color.
    /// </summary>
    public Color Primary { get; init; }
    /// <summary>
    ///     Gets the color used for content displayed on the primary color.
    /// </summary>
    public Color OnPrimary { get; init; }
    /// <summary>
    ///     Gets the secondary brand color.
    /// </summary>
    public Color Secondary { get; init; }
    /// <summary>
    ///     Gets the color used for content displayed on the secondary color.
    /// </summary>
    public Color OnSecondary { get; init; }
    /// <summary>
    ///     Gets the outline color used for borders and dividers.
    /// </summary>
    public Color Outline { get; init; }
    /// <summary>
    ///     Gets the stronger outline color used for heavier borders.
    /// </summary>
    public Color OutlineStrong { get; init; }
    /// <summary>
    ///     Gets the code theme for this variant
    /// </summary>
    public RizzyCodeTheme Code { get; init; }
}
</file>

<file path="Utility/Serialization/Converters/CalendarPositionConverter.cs">
using System.Text.Json;
using System.Text.Json.Serialization;
using RizzyUI;
namespace Jalex.UI.Components.Form.Converters;
/// <summary>
///     Converts a Flatpickr CalendarPosition to/from json
/// </summary>
public class CalendarPositionConverter : JsonConverter<CalendarPosition>
{
    /// <summary>
    ///     Converts string enum representation of CalendarPosition into it's enum counterpart
    /// </summary>
    /// <param name="reader"></param>
    /// <param name="typeToConvert"></param>
    /// <param name="options"></param>
    /// <returns></returns>
    /// <exception cref="ArgumentOutOfRangeException"></exception>
    public override CalendarPosition Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
    {
        var value = reader.GetString() ?? string.Empty;
        // Convert string values back to enum values during deserialization
        return value switch
        {
            "auto" => CalendarPosition.Auto,
            "above" => CalendarPosition.Above,
            "below" => CalendarPosition.Below,
            "auto left" => CalendarPosition.AutoLeft,
            "auto center" => CalendarPosition.AutoCenter,
            "auto right" => CalendarPosition.AutoRight,
            "above left" => CalendarPosition.AboveLeft,
            "above center" => CalendarPosition.AboveCenter,
            "above right" => CalendarPosition.AboveRight,
            "below left" => CalendarPosition.BelowLeft,
            "below center" => CalendarPosition.BelowCenter,
            "below right" => CalendarPosition.BelowRight,
            _ => throw new ArgumentOutOfRangeException($"Unexpected value when parsing CalendarPosition: {value}")
        };
    }
    /// <summary>
    ///     Converts CalendarPosition enum to text
    /// </summary>
    /// <param name="writer"></param>
    /// <param name="value"></param>
    /// <param name="options"></param>
    /// <exception cref="ArgumentOutOfRangeException"></exception>
    public override void Write(Utf8JsonWriter writer, CalendarPosition value, JsonSerializerOptions options)
    {
        // Convert enum values to specific string representations for serialization
        var stringValue = value switch
        {
            CalendarPosition.Auto => "auto",
            CalendarPosition.Above => "above",
            CalendarPosition.Below => "below",
            CalendarPosition.AutoLeft => "auto left",
            CalendarPosition.AutoCenter => "auto center",
            CalendarPosition.AutoRight => "auto right",
            CalendarPosition.AboveLeft => "above left",
            CalendarPosition.AboveCenter => "above center",
            CalendarPosition.AboveRight => "above right",
            CalendarPosition.BelowLeft => "below left",
            CalendarPosition.BelowCenter => "below center",
            CalendarPosition.BelowRight => "below right",
            _ => throw new ArgumentOutOfRangeException($"Unexpected CalendarPosition value: {value}")
        };
        writer.WriteStringValue(stringValue);
    }
}
</file>

<file path="Utility/Serialization/Converters/RawStringConverter.cs">
using System.Text.Json;
using System.Text.Json.Serialization;
namespace RizzyUI.Utility.Serialization.Converters;
/// <summary>
///     A custom JSON converter that serializes and deserializes strings as raw values. This allows a developer to embed
///     javascript code in an object and it will serialize that value without any quotation or JSON escaping.
/// </summary>
public class RawStringConverter : JsonConverter<string>
{
    /// <summary>
    ///     Deserialization of json objects with raw values not supported
    /// </summary>
    /// <param name="reader"></param>
    /// <param name="typeToConvert"></param>
    /// <param name="options"></param>
    /// <returns></returns>
    public override string Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
    {
        return string.Empty;
    }
    /// <summary>
    ///     Writes the raw value, bypassing JSON escaping and quotation marks
    /// </summary>
    /// <param name="writer"></param>
    /// <param name="value"></param>
    /// <param name="options"></param>
    public override void Write(Utf8JsonWriter writer, string value, JsonSerializerOptions options)
    {
        writer.WriteRawValue(value, true);
    }
}
</file>

<file path="Utility/Serialization/Converters/SingleQuoteStringConverter.cs">
using System.Text.Json;
using System.Text.Json.Serialization;
namespace RizzyUI.Utility.Serialization.Converters;
internal class SingleQuoteStringConverter : JsonConverter<string>
{
    public override string Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
    {
        // Reading logic (not relevant for serialization)
        return reader.GetString() ?? string.Empty;
    }
    public override void Write(Utf8JsonWriter writer, string value, JsonSerializerOptions options)
    {
        // Attempt to write single-quoted string
        writer.WriteRawValue($"'{value.Replace("'", "\\'")}'", true);
    }
}
</file>

<file path="wwwroot/js/antiforgerySnippet.js">
if (!document.body.attributes.__htmx_antiforgery) {
    document.addEventListener("htmx:configRequest", evt => {
        let httpVerb = evt.detail.verb.toUpperCase();
        if (httpVerb === 'GET') return;
        let antiforgery = htmx.config.antiforgery;
        if (antiforgery) {
            // already specified on the form, short circuit
            if (evt.detail.parameters[antiforgery.formFieldName])
                return;
            if (antiforgery.headerName) {
                evt.detail.headers[antiforgery.headerName]
                    = antiforgery.requestToken;
            } else {
                evt.detail.parameters[antiforgery.formFieldName]
                    = antiforgery.requestToken;
            }
        }
    });
    document.addEventListener("htmx:afterOnLoad", evt => {
        if (evt.detail.boosted) {
            const parser = new DOMParser();
            const html = parser.parseFromString(evt.detail.xhr.responseText, 'text/html');
            const selector = 'meta[name=htmx-config]';
            const config = html.querySelector(selector);
            if (config) {
                const current = document.querySelector(selector);
                // only change the anti-forgery token
                const key = 'antiforgery';
                htmx.config[key] = JSON.parse(config.attributes['content'].value)[key];
                // update DOM, probably not necessary, but for sanity's sake
                current.replaceWith(config);
            }
        }
    });
    document.body.attributes.__htmx_antiforgery = true;
}
</file>

<file path="wwwroot/js/antiforgerySnippet.min.js">
document.body.attributes.__htmx_antiforgery || (document.addEventListener("htmx:configRequest", e => { if ("GET" === e.detail.verb.toUpperCase()) return; let t = htmx.config.antiforgery; if (t) { if (e.detail.parameters[t.formFieldName]) return; t.headerName ? e.detail.headers[t.headerName] = t.requestToken : e.detail.parameters[t.formFieldName] = t.requestToken } }), document.addEventListener("htmx:afterOnLoad", e => { if (e.detail.boosted) { let t = new DOMParser, r = t.parseFromString(e.detail.xhr.responseText, "text/html"), a = "meta[name=htmx-config]", i = r.querySelector(a); if (i) { let n = document.querySelector(a), o = "antiforgery"; htmx.config[o] = JSON.parse(i.attributes.content.value)[o], n.replaceWith(i) } } }), document.body.attributes.__htmx_antiforgery = !0);
</file>

<file path="wwwroot/js/rizzyui-csp.js">
import Alpine from '@alpinejs/csp';
import collapse from '@alpinejs/collapse';
import intersect from '@alpinejs/intersect';
import focus from '@alpinejs/focus';
import { registerComponents, require } from './alpine/components.js';
// Register Alpine.js extensions
Alpine.plugin(collapse);
Alpine.plugin(intersect);
Alpine.plugin(focus)
registerComponents(Alpine);
window.Alpine = Alpine
Alpine.start()
export { Alpine, require };
</file>

<file path="wwwroot/js/rizzyui.js">
import Alpine from 'alpinejs';
import collapse from '@alpinejs/collapse';
import intersect from '@alpinejs/intersect';
import focus from '@alpinejs/focus';
import toast from "./vendor/notify/toast";
import { registerComponents, require } from './alpine/components.js';
// Register Alpine.js extensions
Alpine.plugin(collapse);
Alpine.plugin(intersect);
Alpine.plugin(focus)
registerComponents(Alpine);
const RizzyUI = {
    Alpine,
    require,
    toast,
}
window.Alpine = Alpine
window.Rizzy = { ...(window.Rizzy || {}), RizzyUI };
Alpine.start()
export default RizzyUI;
</file>

</files>

<instruction>
﻿Your Role: Senior C# Developer
Specialization: ASP.NET and Blazor Razor Components
Context: Static Server-Side Rendered (SSR) Blazor component development for the RizzyUI library. **Crucially, Blazor's built-in interactivity (`@onclick`, `@bind`, etc.) is disabled in this context. All UI interactivity MUST be implemented using Alpine.js.**

You will use the "RizzyUI Component Coding Guidelines", outlined below, to perform your role as a developer. You will be asked to
potentially develop new components, review code, or answer questions. You are required to be an expert on RizzyUI, so understanding
the guidelines below and the code provided is extremely important.

# RizzyUI Component Coding Guidelines (Static SSR Context)

> **Note:** These guidelines assume access to the source code (e.g., `RzComponent.cs`, `RzTheme.cs`, `DefaultRzButtonStyles.cs`, etc.) and enforce strict design, accessibility, and security requirements via a structured styling approach and exclusive reliance on Alpine.js for client-side interactivity.

---

## 1. Component File Structure

- **Two-File Separation**
  - **Each component must be split into two files:**
    - **Markup File (.razor):** Contains *only* markup (`<HtmlElement>`, Alpine directives like `x-data`, `x-on`, `:class`, etc.) and the `@inherits RzComponent` directive. **No direct Tailwind classes or inline styles.** Style application occurs via `@RootClass()` and potentially Alpine's `:class`. **No Blazor event handlers (`@onclick`, etc.).**
    - **Code-Behind File (.razor.cs):** Contains a partial class with all C# logic (properties, methods) executed *during server-side rendering*. Style selection logic relies exclusively on the `Theme` object.
  - **Benefits:** Improves clarity, maintainability, and separation of concerns between static render output and client-side enhancements.

- **Styling File Structure**
  - **Each component requiring specific styles must have a corresponding `Styling` subfolder.**
  - Inside `Styling`, create a default implementation class (e.g., `DefaultRzButtonStyles.cs`) inheriting from the appropriate abstract base in `RzStylesBase.cs`. This class defines the **literal Tailwind class strings** (e.g., `"bg-primary text-on-primary"`, `"rounded-theme"`).
  - **The `RzTheme` class aggregates instances of these default style implementations.**

- **File-Scoped Namespaces**
  - **Rule:** Every C# file (`.cs`, `.razor.cs`) *must* begin with the file-scoped namespace declaration: `namespace RizzyUI;`.

- **Inheritance**
  - **All components must directly inherit from `RzComponent`.** Provides `AdditionalAttributes`, `Nonce`, `Theme` access, `RootClass()`.

- **Required `using` Directives (Code Review Checklist)**
  - `.razor` files using Blazicons: Ensure `@using Blazicons`.
  - `.razor.cs` files: *Always* ensure `using Microsoft.AspNetCore.Components;`.
  - `.razor.cs` files using `TwMerge.Merge`: Ensure `using RizzyUI.Extensions;`.
  - `.razor.cs` files accessing Theme/Config: Ensure `using Microsoft.Extensions.Options;` if injecting `IOptions<RizzyUIConfig>`.

---

## 2. Root Element and Class Generation

- **Use `<HtmlElement>` for the Root Element**
  - **Why?** Standardizes root element rendering, allows tag control via `Element` parameter.
  - **Mandatory Markup:** The root element must always include: `@attributes="@AdditionalAttributes" class="@RootClass()"`. Alpine directives (`x-data`, etc.) are added here as needed.
  - **Example:**
    ```razor
    <HtmlElement Element="button" @attributes="@AdditionalAttributes" class="@RootClass()"
                 aria-label="@AssistiveLabel" x-data="rzButton" x-on:click="handleClick">
         @ChildContent
    </HtmlElement>
    ```
    *(Note: `handleClick` refers to an Alpine method in `rizzyui.js`)*

- **`RootClass()` Method in Code-Behind (SSR)**
  - **Purpose:** Computes the *initial* CSS class string during server-side rendering.
  - **Implementation:**
    - Retrieve the component's style object from `Theme` (e.g., `var styles = Theme.RzButton;`).
    - Call `TwMerge.Merge(AdditionalAttributes, ...)` passing `AdditionalAttributes` and style properties/method results from the `styles` object (which contain *literal Tailwind strings*).
  - **Key Rule:** Styles sourced *only* from the `Theme` object. No hardcoded Tailwind strings in `.razor.cs`.
  - **Example (`RzButton.razor.cs`):**
    ```csharp
    namespace RizzyUI; // Ensure namespace
    // ... other usings ...
    public partial class RzButton : RzComponent
    {
        // ... parameters ...
        protected override string? RootClass()
        {
            var styles = Theme.RzButton; // Get component styles from Theme
            var groupStyles = Theme.RzButtonGroup;
            var groupSpecificClass = string.Empty;
            // ... [logic to determine groupSpecificClass based on groupStyles] ...

            // Merge AdditionalAttributes with styles retrieved ONLY from the Theme object
            return TwMerge.Merge(AdditionalAttributes,
                styles.Button,                         // Base style property from Theme.RzButton
                Outline ? styles.GetVariantOutlineCss(Variant) : styles.GetVariantCss(Variant), // Variant helper from Theme.RzButton
                Animate ? styles.Animated : "",        // State property from Theme.RzButton
                styles.GetSizeCss(Size),               // Size helper from Theme.RzButton
                groupSpecificClass);                   // Logic derived using Theme.RzButtonGroup
        }
        // ... other SSR methods ...
    }
    ```

---

## 3. Styling Abstraction via RzTheme and RzStylesBase

- **Centralized Style Definitions:** All Tailwind CSS class strings defined *only* within `Styling/Default*.cs` implementation classes. Use **literal Tailwind class strings**.
- **Strict Access via `Theme` Object:** Components *must* access styles exclusively through the `Theme` object during SSR.
- **`RzStylesBase.cs`:** Defines abstract contracts for component styles.
- **Theme Defines Token *Values*:** `RzTheme` and theme files (e.g., `ArcticTheme.cs`) define *values* for CSS custom properties (e.g., `--color-primary`, `--borderRadius`).
- **Style Implementations Use Token *Classes*:** `Default*.cs` files use the **literal Tailwind classes** referencing those tokens (e.g., `bg-primary`, `rounded-theme`). **Do not** use `Color.TailwindClassName` or similar dynamic name generation.
- **Border Radius:** Always use the literal class `rounded-theme` for standard themed rounding.

  ### **Tailwind Semantic Color Tokens (Context for Theme Definition)**
  *(The `Default*.cs` style files use the Tailwind classes associated with these tokens, e.g., `bg-surface`, `text-on-primary`)*

  #### **Core Semantic Colors (Light/Dark Resolved via CSS)**
  - **surface:** (`--color-surface`) Primary background.
  - **on-surface:** (`--color-on-surface`) Text/icons on surface.
  - **on-surface-strong:** (`--color-on-surface-strong`) Stronger text/icons on surface.
  - **on-surface-muted:** (`--color-on-surface-muted`) Muted text/icons on surface.
  - **surface-alt:** (`--color-surface-alt`) Alternate background.
  - **surface-tertiary:** (`--color-surface-tertiary`) Tertiary background.
  - **on-surface-tertiary:** (`--color-on-surface-tertiary`) Text/icons on tertiary surface.
  - **primary:** (`--color-primary`) Primary brand/action color.
  - **on-primary:** (`--color-on-primary`) Text/icons on primary background.
  - **secondary:** (`--color-secondary`) Secondary accent color.
  - **on-secondary:** (`--color-on-secondary`) Text/icons on secondary background.
  - **outline:** (`--color-outline`) Borders/outlines.
  - **outline-strong:** (`--color-outline-strong`) Stronger outline.

  #### **Status & Utility Colors**
  *(Values defined per theme)*
  - **danger:** (`--color-danger`) Error/danger states.
  - **on-danger:** (`--color-on-danger`) Text/icons on danger background.
  - **info:** (`--color-info`) Informational color.
  - **onInfo:** (`--color-onInfo`) Text/icons on info background.
  - **warning:** (`--color-warning`) Warnings.
  - **on-warning:** (`--color-on-warning`) Text/icons on warning background.
  - **success:** (`--color-success`) Success/confirmation.
  - **on-success:** (`--color-on-success`) Text/icons on success background.

---

## 4. Alpine.js Integration and Content Security Policy (CSP) - **CRITICAL for SSR**

- **Exclusive Interactivity via Alpine.js**
  - **Rule:** Since Blazor interactivity is disabled, **all** dynamic UI updates, event handling, and state changes *must* be implemented using Alpine.js in the client's browser.
  - **Alpine Data Naming Convention:** Prefix data objects with `rz` (e.g., `rzAlert`, `rzDropdown`).
  - **Event Handling:** Use `x-on:` directives (e.g., `x-on:click="dismiss"`) in `.razor` markup to call methods defined in the corresponding Alpine data object.

- **External Alpine.js Definitions**
  - **All Alpine logic resides in external JavaScript files** (e.g., **wwwroot/js/rizzyui.js**). Define component logic within `Alpine.data('rzComponentName', () => ({ ... }));`. No inline scripts in `.razor` files.

- **CSP-Compatible Alpine.js Build & Nonce Usage**
  - **Requirement:** Use the Alpine.js CSP-compatible build.
  - **Nonce Application:** The `Nonce` property (from `RzComponent`) *must* be added as a `nonce="..."` attribute ONLY to any `<script>` or `<style>` tags directly rendered by a component's `.razor` file during SSR (e.g., `RzThemeProvider`, `RzCodeViewer`, `RzDateEdit`).

- **Passing Data to Alpine**
  - **Pattern:** Use `data-` attributes in the `.razor` file to pass configuration or initial state calculated during SSR from Blazor to Alpine.

- **Dynamic Styling with Alpine:**
  - Use Alpine's `:class` or `x-bind:class` directive in the `.razor` file to *conditionally apply CSS classes in the browser* based on Alpine state.
  - **Functions called within `:class` (e.g., `:class="getSelectedCss()"`) must be defined within the corresponding `Alpine.data('rzComponentName', ...)` block** in `rizzyui.js`.
  - These Alpine functions should return class strings. These strings should ideally be **sourced from the C# `Theme` object** (passed down via `data-` attributes if necessary, or hardcoded in the JS if simple utilities) or be basic utility classes. Avoid redefining complex component styles purely in JS.
  - **Example (`RzQuickReference.razor`):**
    ```razor
    <a ... class="@LinkClass" data-headingid="@heading.Id"
       :class="getSelectedCss" x-on:click="handleHeadingClick">
        @heading.Title
    </a>
    ```
    *(Here, `getSelectedCss` is a method within the `rzQuickReferenceContainer` Alpine data definition in `rizzyui.js`)*.

---

## 5. Parameter Definition Standards

- **Clarity and Defaults:**
    *   Use `[EditorRequired]` for parameters essential for the component's static rendering (e.g., `For`, `Name`).
    *   Provide sensible default values for optional parameters (`Size = Size.Medium`, `Variant = ButtonVariant.Primary`). Document defaults in xmldoc.
    *   Use `[CascadingParameter]` mainly for framework (`EditContext`, `RzTheme`) or specific hierarchy state (`RzButtonGroup`, `RzTabs`).
    *   Use clear, descriptive PascalCase names.
- **`RenderFragment` vs. Simple Types:**
    *   Use `RenderFragment` (`ChildContent`, `Description`) for complex, component-containing, or arbitrary HTML content rendered during SSR.
    *   Use simple types (`string Label`, `SvgIcon Icon`) for atomic data displayed statically.
    *   Favor specific parameters (`[Parameter] SvgIcon Icon`) over generic `RenderFragment`s (`IconContent`) for clearer APIs.
- **Constants/Enums:** Use enums (`Variants.cs`) for parameter options. Prefer `private const string` over magic strings internally within `.cs` files.

---

## 6. API Consistency

- **Pattern Matching:** When creating new components, examine existing similar components in the library. Use consistent parameter names (`DisplayName`, `Placeholder`, `Variant`, `Size`), property names in style classes, and behavioral patterns where applicable to ensure a predictable and learnable API.

---

## 7. Accessibility (WCAG 2.2+)

- **Static Output:** Ensure the initial HTML rendered by the server includes all necessary ARIA roles, states, and properties for accessibility.
- **Alpine Responsibility:** Ensure Alpine interactions maintain accessibility (e.g., updating `aria-expanded` when a section opens, managing focus correctly via `x-trap`).
- **Focus Styles:** Use `:focus-visible` styles defined via the `Theme` object.
- **Skip Links:** Implement for major layout components (`RzSidebar`).

---

## 8. XML Documentation (xmldoc)

- **Mandatory:** Required for all `public`/`protected` members in component `.razor.cs` files and all `public abstract`/`public override` members in `RzStylesBase.cs` and `Default*.cs` files.
- **Content:** Explain purpose, parameters (SSR context), return values, usage, defaults, and exceptions. Use `<inheritdoc />` on overrides.

---

## 9. Blazor Lifecycle Methods (SSR Context)

- **Limited Usage:** Blazor lifecycle methods execute *only* during the server-side rendering process. They cannot react to browser events.
    *   `OnInitialized()`: Use for one-time setup dependent on injected services or basic initialization *before* parameters are set.
    *   `OnParametersSet()`: Use to react to *parameter values provided during the render*. Calculate derived state needed for the initial render based on these parameters (e.g., setting `_currentValue` from `Value` parameter in form inputs). Avoid heavy computation.
    *   **Do not** implement Blazor event handlers like `OnClick` or expect methods like `OnAfterRender` to provide browser interactivity hooks.

---

## 10. Error Handling and Robustness (SSR)

- **Validate Required Parameters/Context:** Throw `InvalidOperationException` during `OnInitialized` or `OnParametersSet` if required parameters (`For`, `Name`), cascading parameters (`EditContext`, parent component), or injected services are missing.
- **Defensive Coding:** Use null checks, `?.` operator, and range clamping (`Math.Clamp`) for data used during the initial render.

---

## 11. File-Specific Guidelines and References

- **RzComponent.cs:** Base class (provides `AdditionalAttributes`, `Nonce`, `Theme`, etc.).
- **RzTheme.cs:** Aggregates style implementations (`Theme.ComponentName`), defines core theme properties (token *values*).
- **RzStylesBase.cs:** Defines abstract style contracts.
- **Components/**/Styling/Default*.cs:** Defines **literal Tailwind class strings**, implements `RzStylesBase` contracts.
- **TwMergeExtensions.cs:** Provides `TwMerge.Merge`.
- **wwwroot/js/rizzyui.js:** Contains **all** client-side interactivity logic via `Alpine.data(...)`.
- **Variants.cs:** Common enums.
- **Colors.cs / Oklch.cs:** Base color definitions.

---

## 12. Naming Conventions for CSS Helper Methods

- **Location:** Defined `public abstract` in `RzStylesBase`, implemented `public override` in `Default*.cs`.
- **Access:** Components access *only* via the `Theme` object.
- **Naming:** `Get[Purpose]Css(parameter)`.
- **Implementation:** Methods in `Default*.cs` return **complete, literal Tailwind class strings**.
- **Documentation:** Required for abstract and override, use `<inheritdoc />`.

---

## 13. Summary of Key Points

- **Static SSR Context:** Blazor interactivity is DISABLED. All interaction via **Alpine.js**.
- **Component Files:** Two-file separation (`.razor`/`.razor.cs`), `namespace RizzyUI;`.
- **Styling Files:** Centralized **literal Tailwind strings** in `Styling/Default*.cs`, inheriting from `RzStylesBase`.
- **Base Class:** Inherit `RzComponent`.
- **Root Element:** Use `<HtmlElement>` with standard `@attributes`/`class`.
- **RootClass():** Always use `Theme.ComponentName...` properties/methods + `TwMerge.Merge(AdditionalAttributes, ...)`.
- **Styling Access:** **Strictly use the `Theme` object** in components during SSR.
- **Theme vs Styles:** `RzTheme` defines token *values*; `Default*.cs` uses corresponding Tailwind *classes*. Use `rounded-theme`.
- **Alpine.js:** **Sole source of interactivity**. External definitions (`Alpine.data`), CSP compliant, `:class` for dynamic styles (functions defined in Alpine data), data via `data-` attributes.
- **Parameters:** Use `[EditorRequired]`, provide defaults, choose `RenderFragment` vs simple types judiciously.
- **API Consistency:** Follow patterns of existing components.
- **Accessibility:** Ensure static HTML output is accessible; Alpine must maintain it.
- **XML Documentation:** Mandatory for public/protected members (components & styles).
- **Lifecycle (SSR):** Use `OnInitialized`/`OnParametersSet` only for initial render setup.
- **CSS Helpers:** Defined in `RzStylesBase` (abstract) / `Default*.cs` (override, returns *literal strings*), accessed via `Theme`.
- **Error Handling:** Validate required parameters/context during SSR.

</instruction>
