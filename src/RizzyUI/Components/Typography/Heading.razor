@namespace RizzyUI
@using RizzyUI.Utility
@inherits TypographyBase

<HtmlElement Element="@Element" @attributes="@AdditionalAttributes" id="@Id" class="@RootClass()" x-intersect.half="if (typeof setCurrentHeading === 'function') { setCurrentHeading($el.id) }">
    @if (ChildContent == null)
    {
        @QuickReferenceTitle
    }
    else
    {
        @ChildContent
    }
</HtmlElement>

@code {
    private bool _registered = false;

    [Parameter, EditorRequired] 
    public required HeadingLevel Level { get; set; } 

    /// <summary>
    /// Child content for the heading
    /// </summary>
    [Parameter]
    public RenderFragment? ChildContent { get; set; }

    /// <summary>
    /// Title to be used in the Quick Reference outline.
    /// </summary>
    [Parameter]
    public string? QuickReferenceTitle { get; set; }

    /// <summary>
    /// Reference to the QuickReferenceContainer.
    /// </summary>
    [CascadingParameter]
    private QuickReferenceContainer? QuickReferenceContainer { get; set; }

    /// <summary>
    /// The unique ID for the heading element.
    /// </summary>
    public string Id { get; set; } = IdGenerator.UniqueId("heading");

    protected override void OnParametersSet()
    {
        Element = Level switch
        {
            HeadingLevel.H1 => "h1",
            HeadingLevel.H2 => "h2",
            HeadingLevel.H3 => "h3",
            HeadingLevel.H4 => "h4",
            _ => "h1"
        };

        if (this.TextColor is null)
        {
            if (Level is HeadingLevel.H1 or HeadingLevel.H2)
                TextColor = Color.OnSurfaceStrong;
            else
                TextColor = Color.OnSurface;
        }

        if (!_registered && QuickReferenceContainer != null && !string.IsNullOrEmpty(QuickReferenceTitle))
        {
            QuickReferenceContainer.RegisterHeading(Level, QuickReferenceTitle, Id);
            _registered = true;
        }

        base.OnParametersSet();
    }

    protected override string? RootClass()
    {
        return TwMerge.Merge(AdditionalAttributes, GetHeadingStyles(Level), GetTypographyBaseCss());
    }

    /// <summary>
    /// Gets the CSS classes associated with the specified heading level.
    /// </summary>
    /// <param name="level">The <see cref="HeadingLevel"/> enum value representing the level of the heading.</param>
    /// <returns>A string containing the CSS classes for the specified heading level.</returns>
    protected static string GetHeadingStyles(HeadingLevel? level)
    {
        return level switch
        {
            HeadingLevel.H1 => "mb-4 text-xl sm:text-2xl md:text-3xl lg:text-4xl font-bold",
            HeadingLevel.H2 => "mb-2 text-lg sm:text-xl md:text-2xl lg:text-3xl font-semibold",
            HeadingLevel.H3 => "mb-2 text-lg sm:text-xl md:text-2xl lg:text-3xl font-medium",
            HeadingLevel.H4 => "mb-2 text-base sm:text-lg md:text-xl lg:text-2xl font-normal",
            _ => string.Empty
        };
    }
}
