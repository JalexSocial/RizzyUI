@namespace RizzyUI
@using System.Net.Mime
@inherits TypographyBase

<HtmlElement Element="@Element" @attributes="@AdditionalAttributes" class="@RootClass()">@ChildContent</HtmlElement>


@code {
    private static readonly string BaseStyle = "my-4 leading-relaxed";

    /// <summary>
    /// Child content for the heading
    /// </summary>
    [Parameter]
    public RenderFragment? ChildContent { get; set; }

    /// <summary>
    /// Gets or sets the maximum character width of the paragraph.
    /// Default is <see cref="ProseWidth.Full"/>, unrestricted width.
    /// </summary>
    [Parameter]
    public ProseWidth ProseWidth { get; set; } = ProseWidth.Full;

    protected override void OnInitialized()
    {
        Element = "p";
        TextColor ??= SemanticColor.OnSurface;

        base.OnInitialized();
    }

    /// <summary>
    /// Root css for paragraph
    /// </summary>
    /// <returns></returns>
    protected override string? RootClass()
    {
        return TwMerge.Merge(AdditionalAttributes, BaseStyle, GetTypographyBaseCss(), GetProseWidthCss(ProseWidth));
    }

    /// <summary>
    /// Gets the CSS classes for the paragraph
    /// </summary>
    /// <param name="size"></param>
    /// <returns></returns>
    protected static string GetProseWidthCss(ProseWidth size)
    {
        return size switch
        {
            ProseWidth.Compact => "prose-compact",
            ProseWidth.Comfortable => "prose-comfortable",
            ProseWidth.Relaxed => "prose-relaxed",
            ProseWidth.Wide => "prose-wide",
            ProseWidth.UltraWide => "prose-ultrawide",
            ProseWidth.Full => "prose-full",
            _ => ""
        };
    }

}
