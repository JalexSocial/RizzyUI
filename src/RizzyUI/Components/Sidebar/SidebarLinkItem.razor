@namespace RizzyUI

@using Blazicons
@inherits RizzyComponent

@* SidebarLinkItem Component *@
@if (Collapsible)
{
    <!-- Collapsible item -->
    <li>
        <div x-data="{ isExpanded: @((!Collapsed).ToString().ToLowerInvariant()) }" class="flex flex-col">
            <button type="button" x-on:click="isExpanded = ! isExpanded" id="@ButtonId" aria-controls="@CollapseId" x-bind:aria-expanded="isExpanded.toString()" class="@ButtonClass">
                @if (Icon != null)
                {
                    <div class="text-xl" aria-hidden="true">
                        <Blazicon Svg="@Icon"></Blazicon>
                    </div>
                }
                <span class="mr-auto text-left">@Title</span>
                @if (TrailerContent != null)
                {
                    <div class="ml-auto">
                        @TrailerContent
                    </div>
                }
                <svg xmlns="http://www.w3.org/2000/svg" fill="currentColor" class="size-5 transition-transform rotate-0 shrink-0" x-bind:class="isExpanded ? 'rotate-180' : 'rotate-0'" aria-hidden="true">
                    <!-- Arrow icon SVG -->
                    <path fill-rule="evenodd" d="M5.22 8.22a.75.75 0 0 1 1.06 0L10 11.94l3.72-3.72a.75.75 0 1 1 1.06 1.06l-4.25 4.25a.75.75 0 0 1-1.06 0L5.22 9.28a.75.75 0 0 1 0-1.06Z" clip-rule="evenodd" />
                </svg>
            </button>
            <ul x-cloak x-collapse x-show="isExpanded" aria-labelledby="@ButtonId" id="@CollapseId">
                <CascadingValue Value="this">
                    @ChildContent
                </CascadingValue>
            </ul>
        </div>
    </li>
}
else
{
    <!-- Non-collapsible item -->
    @if (Parent is { HasChildren: true, Collapsible: false })
    {
        <li class="border-l px-2 py-0.5 border-slate-300 dark:border-slate-700 transition duration-200 hover:border-l-2 hover:border-outlineStrong hover:text-onSurfaceStrong dark:hover:border-x-outlineDarkStrong dark:hover:text-onSurfaceDarkStrong">
            <a href="@Href" target="@Target" class="@LinkClass">
                @if (Icon != null)
                {
                    <div class="text-xl" aria-hidden="true">
                        <Blazicon Svg="@Icon"></Blazicon>
                    </div>
                }
                <span>@Title</span>
                @if (TrailerContent != null)
                {
                    <div class="ml-auto">
                        @TrailerContent
                    </div>
                }
            </a>
            @if (ChildContent != null)
            {
                <ul class="pl-4">
                    <CascadingValue Value="this">
                        @ChildContent
                    </CascadingValue>
                </ul>
            }
        </li>
    }
    else
    {
        <li class="px-1 py-0.5 first:mt-2">
            @if (HasChildren)
            {
                <div class="@LinkClass">
                    @if (Icon != null)
                    {
                        <div class="text-xl" aria-hidden="true">
                            <Blazicon Svg="@Icon"></Blazicon>
                        </div>
                    }
                    <span>@Title</span>
                    @if (TrailerContent != null)
                    {
                        <div class="ml-auto">
                            @TrailerContent
                        </div>
                    }
                </div>
            }
            else
            {
                <a href="@Href" target="@Target" class="@LinkClass">
                    @if (Icon != null)
                    {
                        <div class="text-xl" aria-hidden="true">
                            <Blazicon Svg="@Icon"></Blazicon>
                        </div>
                    }
                    <span>@Title</span>
                    @if (TrailerContent != null)
                    {
                        <div class="ml-auto">
                            @TrailerContent
                        </div>
                    }
                </a>
            }

            @if (ChildContent != null)
            {
                <ul class="pl-4">
                    <CascadingValue Value="this">
                        @ChildContent
                    </CascadingValue>
                </ul>
            }
        </li>
    }
}

@code {
    /// <summary>
    /// Gets or sets the icon to display for the link item.
    /// </summary>
    [Parameter]
    public SvgIcon? Icon { get; set; }

    /// <summary>
    /// Gets or sets the title text of the link item.
    /// </summary>
    [Parameter]
    public string Title { get; set; } = string.Empty;

    /// <summary>
    /// Gets or sets the URL to navigate to when the link is clicked.
    /// </summary>
    [Parameter]
    public string Href { get; set; } = "#";

    /// <summary>
    /// Gets or sets the target attribute specifying where to open the linked document.
    /// </summary>
    [Parameter]
    public string Target { get; set; } = "_self";

    /// <summary>
    /// Child content
    /// </summary>
    [Parameter]
    public RenderFragment? ChildContent { get; set; }

    /// <summary>
    /// Gets or sets additional content to display after the title, such as badges or indicators.
    /// </summary>
    [Parameter]
    public RenderFragment? TrailerContent { get; set; }

    /// <summary>
    /// Gets or sets a value indicating whether the link item is collapsible.
    /// </summary>
    [Parameter]
    public bool Collapsible { get; set; } = false;

    /// <summary>
    /// Gets or sets a value indicating whether the collapsible link item is initially collapsed.
    /// </summary>
    [Parameter]
    public bool Collapsed { get; set; } = true;

    /// <summary>
    /// Gets or sets the parent <see cref="SidebarLinkItem"/> in a hierarchy of link items.
    /// </summary>
    [CascadingParameter]
    public SidebarLinkItem? Parent { get; set; }

    private string _buttonId = string.Empty;
    private string _collapseId = string.Empty;
    private bool _hasChildren = false;

    /// <summary>
    /// Gets or sets a value indicating whether this link item has child items.
    /// </summary>
    private bool HasChildren
    {
        get { return _hasChildren; }
        set { _hasChildren = value; StateHasChanged(); }
    }

    /// <summary>
    /// Initializes the component and sets up unique IDs for collapsible items.
    /// </summary>
    protected override void OnInitialized()
    {
        if (Collapsible)
        {
            var guid = Guid.NewGuid().ToString("N");
            _buttonId = $"btn-{guid}";
            _collapseId = $"clps-{guid}";
        }

        if (Parent != null)
            Parent.HasChildren = true;

        StateHasChanged();
    }

    /// <summary>
    /// Gets the unique ID for the collapsible button element.
    /// </summary>
    private string ButtonId => _buttonId;

    /// <summary>
    /// Gets the unique ID for the collapsible content element.
    /// </summary>
    private string CollapseId => _collapseId;

    /// <summary>
    /// Gets the CSS class string for the collapsible button.
    /// </summary>
    private string ButtonClass => "flex items-center justify-between rounded gap-2 px-2 py-1.5 text-sm font-medium underline-offset-2 focus:outline-none focus-visible:underline text-onSurface hover:bg-blue-700/5 hover:text-black dark:text-onSurfaceDark dark:hover:text-white dark:hover:bg-blue-600/5";

    /// <summary>
    /// Gets the CSS class string for the link element, adjusted based on parent and children.
    /// </summary>
    private string LinkClass => Parent?.HasChildren == true
        ? "flex items-center gap-2 px-2 py-1.5 text-sm rounded text-onSurface underline-offset-2 hover:bg-blue-700/5 hover:text-black focus-visible:underline focus:outline-none dark:text-onSurfaceDark dark:hover:bg-blue-600/5 dark:hover:text-white"
        : "flex items-center gap-2 px-2 py-1.5 text-sm font-medium text-onSurface underline-offset-2 hover:bg-primary/5 hover:text-onSurfaceStrong focus-visible:underline focus:outline-none dark:text-onSurfaceDark dark:hover:bg-primaryDark/5 dark:hover:text-onSurfaceDarkStrong rounded-xl";

}
