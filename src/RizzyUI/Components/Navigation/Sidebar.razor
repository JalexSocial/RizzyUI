@namespace RizzyUI

@inherits RizzyComponent

@*
/// <summary>
/// Represents a responsive layout component with a collapsible sidebar and main content area.
/// This component includes a toggle button for small screens and handles accessibility features.
/// </summary>
*@

<div x-data="rzSidebar">
    @if (NavbarContent != null)
    {
        @NavbarContent
    }

    <div class=@GetNavbarTopCss()>
        <div class="relative flex w-full flex-col md:flex-row">
            <!-- This allows screen readers to skip the sidebar and go directly to the main content. -->
            <a class="sr-only" href="#@MainContentId">skip to the main content</a>

            <!-- Dark overlay when the sidebar is open on smaller screens -->
            <div x-cloak x-show="showSidebar" class="z-30 bg-surfaceDark/10 fixed inset-0 backdrop-blur-sm md:hidden" aria-hidden="true" x-on:click="hideSidebar" x-transition.opacity></div>

            <aside x-cloak class="fixed left-0 h-full w-60 overflow-y-auto scrollbar-hover bg-surfaceAlt border-r border-outline z-40 p-4 transition-transform duration-300 dark:bg-surfaceAltDark dark:border-outlineDark md:w-60 md:translate-x-0 @GetAsideCss()" :class="getSidebarTranslation" aria-label="sidebar navigation">
                @MenuContent
            </aside>

            <!-- Main content -->
            <section id="@MainContentId" class="md:pl-60 w-full bg-surface dark:bg-surfaceDark">
                <div class="p-4 md:p-6 lg:p-8">
                    @MainContent
                </div>
            </section>
        </div>
    </div>

    @if (NavbarContent == null)
    {
        <!-- Toggle button for small screens -->
        <button class="z-50 fixed right-4 top-4 rounded-full bg-primary p-4 text-onPrimary dark:bg-primaryDark dark:text-onPrimaryDark md:hidden" x-on:click="toggleSidebar">
            <svg x-show="showSidebar" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16" fill="currentColor" class="size-5" aria-hidden="true">
                <!-- Close icon SVG content -->
                <path d="M2.146 2.854a.5.5 0 1 1 .708-.708L8 7.293l5.146-5.147a.5.5 0 0 1 .708.708L8.707 8l5.147 5.146a.5.5 0 0 1-.708.708L8 8.707l-5.146 5.147a.5.5 0 0 1-.708-.708L7.293 8z"/>
            </svg>
            <svg x-show="isSidebarHidden" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16" fill="currentColor" class="size-5" aria-hidden="true">
                <!-- Menu icon SVG content -->
                <path d="M0 3a2 2 0 0 1 2-2h12a2 2 0 0 1 2 2v10a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2zm5-1v12h9a1 1 0 0 0 1-1V3a1 1 0 0 0-1-1zM4 2H2a1 1 0 0 0-1 1v10a1 1 0 0 0 1 1h2z"/>
            </svg>
            <span class="sr-only">sidebar toggle</span>
        </button>
    }
</div>

@code {

    /// <summary>
    /// Gets or sets the identifier for the main content area, used for navigation and accessibility.
    /// </summary>
    [Parameter]
    public string MainContentId { get; set; } = "main-content";

    /// <summary>
    /// Gets or sets the optional navbar content
    /// </summary>
    [Parameter]
    public RenderFragment? NavbarContent { get; set; }

    /// <summary>
    /// Gets or sets the content to be rendered inside the sidebar navigation area.
    /// </summary>
    [Parameter]
    public RenderFragment? MenuContent { get; set; }

    /// <summary>
    /// Gets or sets the main content to be displayed in the main content area.
    /// </summary>
    [Parameter]
    public RenderFragment? MainContent { get; set; }

    private string GetNavbarTopCss() => NavbarContent is null ? "" : "mt-16";

    private string GetAsideCss() => NavbarContent is null ? "top-0" : "top-16";
}
