@namespace RizzyUI

@inherits RizzyComponent

<HtmlElement Element="@Element" @attributes="@AdditionalAttributes" class="@RootClass()">
    <!-- Navbar Toggle Button -->
    <button type="button" class="@@xl:hidden inline-block text-onSurface dark:text-onSurfaceDark" x-on:click="showSidebar = ! showSidebar">
        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16" fill="currentColor" class="size-5" aria-hidden="true">
            <path d="M0 3a2 2 0 0 1 2-2h12a2 2 0 0 1 2 2v10a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2zm5-1v12h9a1 1 0 0 0 1-1V3a1 1 0 0 0-1-1zM4 2H2a1 1 0 0 0-1 1v10a1 1 0 0 0 1 1h2z">
            </path>
        </svg>
        <span class="sr-only">@ScreenReaderText</span>
    </button>

    <div>
        @ChildContent
    </div>
</HtmlElement>

@code {
    private const string BaseStyle = "sticky top-0 z-10 flex items-center justify-between border-outline bg-surfaceAlt px-4 py-2 dark:border-outlineDark dark:bg-surfaceDarkAlt border-b";

    /// <summary>
    /// Content inside the navbar
    /// </summary>
    [Parameter]
    public RenderFragment? ChildContent { get; set; }

    /// <summary>
    /// Optional - Screen reader text to display as option to toggle side navigation for
    /// accessibility. Defaults to "Toggle side navigation"
    /// </summary>
    [Parameter] 
    public string? ScreenReaderText { get; set; } = "Toggle side navigation";

    protected override void OnInitialized()
    {
        base.OnInitialized();
        this.Element = "navbar";
    }

    /// <summary>
    /// Generates a correctly merged root class for the navbar
    /// </summary>
    /// <returns></returns>
    protected override string? RootClass()
    {
        return TwMerge.Merge(AdditionalAttributes, BaseStyle);
    }
}
