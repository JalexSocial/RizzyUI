@namespace RizzyUI

@inherits RizzyComponent

<div x-data="rzBrowser" @attributes="@AdditionalAttributes" class="@RootClass()">
    <div class="bg-surfaceAlt dark:bg-surfaceAltDark w-full px-4 py-3 lg:py-1.5 pr-0 flex items-center justify-between border-outline dark:border-outlineDark border-b">
        <div class="flex gap-1.5">
            <div class="size-3 rounded-full bg-red-500"></div>
            <div class="size-3 rounded-full bg-yellow-500"></div>
            <div class="size-3 rounded-full bg-green-500"></div>
        </div>
        <div class="text-onSurface hidden items-center justify-center gap-4 dark:text-onSurfaceDark lg:flex">
            <div class="bg-surfaceAlt border-outline flex items-center gap-1 rounded-full px-4 dark:bg-surfaceAltDark dark:border-outlineDark">
                <button title="Desktop Screen" x-on:click="setDesktopScreenSize" class="rounded-full p-1 transition hover:bg-surfaceDark/10 focus:outline-none focus-visible:bg-surfaceDark/10 dark:hover:bg-surface/10 dark:focus-visible:bg-surface/10">
                    <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" fill="currentSemanticColor" :class="getDesktopScreenCss" viewBox="0 0 16 16" class="text-onSurfaceStrong forced-color-adjust-auto dark:text-onSurfaceStrongDark">
                        <title>Desktop</title>
                        <path d="M0 4s0-2 2-2h12s2 0 2 2v6s0 2-2 2h-4c0 .667.083 1.167.25 1.5H11a.5.5 0 0 1 0 1H5a.5.5 0 0 1 0-1h.75c.167-.333.25-.833.25-1.5H2s-2 0-2-2V4zm1.398-.855a.758.758 0 0 0-.254.302A1.46 1.46 0 0 0 1 4.01V10c0 .325.078.502.145.602.07.105.17.188.302.254a1.464 1.464 0 0 0 .538.143L2.01 11H14c.325 0 .502-.078.602-.145a.758.758 0 0 0 .254-.302 1.464 1.464 0 0 0 .143-.538L15 9.99V4c0-.325-.078-.502-.145-.602a.757.757 0 0 0-.302-.254A1.46 1.46 0 0 0 13.99 3H2c-.325 0-.502.078-.602.145z"></path>
                    </svg>
                </button>
                <button x-on:click="setTabletScreenSize" title="Tablet Screen" class="rounded-full p-1 transition hover:bg-surfaceDark/10 focus:outline-none focus-visible:bg-surfaceDark/10 dark:hover:bg-surface/10 dark:focus-visible:bg-surface/10">
                    <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" fill="currentSemanticColor" :class="getTabletScreenCss" viewBox="0 0 16 16" class="opacity-60">
                        <title>Tablet</title>
                        <path d="M12 1a1 1 0 0 1 1 1v12a1 1 0 0 1-1 1H4a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1h8zM4 0a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h8a2 2 0 0 0 2-2V2a2 2 0 0 0-2-2H4z"></path>
                        <path d="M8 14a1 1 0 1 0 0-2 1 1 0 0 0 0 2z"></path>
                    </svg>
                </button>
                <button x-on:click="setPhoneScreenSize" title="Phone Screen" class="rounded-full p-1 transition hover:bg-surfaceDark/10 focus:outline-none focus-visible:bg-surfaceDark/10 dark:hover:bg-surface/10 dark:focus-visible:bg-surface/10">
                    <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" fill="currentSemanticColor" :class="getPhoneScreenCss" viewBox="0 0 16 16" class="opacity-60">
                        <title>Phone</title>
                        <path d="M11 1a1 1 0 0 1 1 1v12a1 1 0 0 1-1 1H5a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1h6zM5 0a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h6a2 2 0 0 0 2-2V2a2 2 0 0 0-2-2H5z"></path>
                        <path d="M8 14a1 1 0 1 0 0-2 1 1 0 0 0 0 2z"></path>
                    </svg>
                </button>
            </div>
        </div>
    </div>
    <div class="grid-pattern bg-surface flex justify-center dark:bg-surfaceDark">
        <div class="container bg-surface border-outline relative w-full overflow-hidden transition-all border-none dark:bg-surfaceDark dark:border-outlineDark" :class="getBrowserBorderCss">
			
            @if (Layout != null)
            {
	            <EmbeddedPreview Layout="@Layout">
                    @ChildContent
	            </EmbeddedPreview>
            }
            else
            {
	            @ChildContent
            }

        </div>
    </div>
</div>

@code {
    private static readonly string BaseStyle = "overflow-hidden border border-outline dark:border-outlineDark rounded";

    /// <summary>
    /// Child content for the responsive browser
    /// </summary>
    [Parameter]
    public RenderFragment? ChildContent { get; set; }

    /// <summary>
    /// Optional Layout for content - If present then content will be rendered to an iframe using
    /// the layout
    /// </summary>
    [Parameter] public Type? Layout { get; set; }

    protected override string? RootClass()
    {
        return TwMerge.Merge(AdditionalAttributes, BaseStyle);
    }
}
