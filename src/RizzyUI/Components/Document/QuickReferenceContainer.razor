@using System.Collections.Generic
@using System.Text.Json
@using System.Text.Json.Serialization
@using RizzyUI.Utility.Serialization.Converters
@namespace RizzyUI
@inherits RizzyComponent

<HtmlElement Element="@Element" @attributes="@AdditionalAttributes" class="@RootClass()">
    <div x-data="{ headings: @_headingItemsSerialized, currentHeadingId: '@(_headingItems.FirstOrDefault()?.Id ?? string.Empty)', setCurrentHeading(id) { console.log(id); if (this.headings.includes(id)) { this.currentHeadingId = id; } } }">
        <CascadingValue Value="this">
            @ChildContent
        </CascadingValue>
    </div>
</HtmlElement>



@code {
    private readonly List<HeadingItem> _headingItems = new();
    private string _headingItemsSerialized = string.Empty;

    /// <summary>
    /// Lowest heading level (H1 is lowest) to include in the quick reference
    /// </summary>
    [Parameter] 
    public HeadingLevel MinimumHeadingLevel { get; set; } = HeadingLevel.H2;

    /// <summary>
    /// Greatest heading level (h4 is greatest) to include in the quick reference
    /// </summary>
    [Parameter] 
    public HeadingLevel MaximumHeadingLevel { get; set; } = HeadingLevel.H4;

    /// <summary>
    /// Child content of the QuickReferenceContainer.
    /// </summary>
    [Parameter]
    public RenderFragment? ChildContent { get; set; }

    /// <summary>
    /// Registers a heading with the QuickReferenceContainer.
    /// </summary>
    /// <param name="level">The heading level.</param>
    /// <param name="title">The title of the heading.</param>
    /// <param name="id">The unique ID of the heading element.</param>
    internal void RegisterHeading(HeadingLevel level, string title, string id)
    {
        if (level >= MinimumHeadingLevel && level <= MaximumHeadingLevel)
            _headingItems.Add(new HeadingItem(level, title, id));

        var options = new JsonSerializerOptions();
        options.Converters.Add(new SingleQuoteStringConverter());
        _headingItemsSerialized = JsonSerializer.Serialize(_headingItems?.Select(x => x.Id), options);

        StateHasChanged();
    }

    /// <summary>
    /// Gets the list of registered heading items.
    /// </summary>
    /// <returns>A read-only list of heading items.</returns>
    public IReadOnlyList<HeadingItem> GetHeadingItems()
    {
        return _headingItems.AsReadOnly();
    }
}