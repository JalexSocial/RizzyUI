@namespace RizzyUI

@using System.Web
@using RizzyUI.Utility
@using RizzyUI.Utility.Serialization.Converters
@using System.Text.Json
@using RizzyUI.Services

@inherits RizzyComponent

<div @attributes="@AdditionalAttributes" class="@RootClass()" 
data-assets="@_assets"
data-codeid="@CodeId"
data-scriptnonce="@Nonce.InlineScriptNonce"
data-stylenonce="@Nonce.InlineStyleNonce"
x-data="rzCodeViewer">
    <!-- Code Config -->
    <div class="border-b-0 border-outline bg-surfaceAlt font-inter flex flex-col items-start justify-between gap-4 rounded-xl rounded-b-none border p-4 text-sm text-slate-400 dark:border-outlineDark dark:bg-surfaceDarkAlt md:flex-row md:items-center md:gap-2" :class="[border ? 'border' : 'border-none' ]">
        <span class="text-onSurface dark:text-onSurfaceDark">@ViewerTitle</span>
    </div>
    <!-- /Code Config -->

    <div class="border-outlineDark bg-surfaceAltDark text-onSurfaceStrong w-full overflow-y-auto !rounded-b-none rounded-b-xl border" :class="[ expand ? '' : 'max-h-[400px]', border ? 'border' : 'border-none', 'rounded-b']">
        <!-- code  -->
        <div>
            <div class="border-outlineDark bg-surfaceDark/40 text-onSurfaceDark flex h-11 items-center justify-between border-b" :class="[border ? 'border-b' : '']">
                <button aria-label="copy code" role="button" :title="copied ? 'copied' : 'copy'" x-on:click="copyHTML" class="my-auto ml-auto mr-2 overflow-hidden rounded-full p-1 hover:bg-surface/10 focus:outline-none focus:outline-offset-0 focus-visible:outline-2 focus-visible:outline-onSurfaceDark active:-outline-offset-2" :class="getCopiedCss" x-on:click.away="toggleCopied" data-target="cardDefault" title="copy">
                    <svg x-show="notCopied" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="text-onSurfaceDark size-6 cursor-pointer" x-transition:enter="transition duration-200 ease-out" x-transition:enter-start="opacity-0" x-transition:enter-end="opacity-100">
                        <path stroke-linecap="round" stroke-linejoin="round" d="M15.666 3.888A2.25 2.25 0 0013.5 2.25h-3c-1.03 0-1.9.693-2.166 1.638m7.332 0c.055.194.084.4.084.612v0a.75.75 0 01-.75.75H9a.75.75 0 01-.75-.75v0c0-.212.03-.418.084-.612m7.332 0c.646.049 1.288.11 1.927.184 1.1.128 1.907 1.077 1.907 2.185V19.5a2.25 2.25 0 01-2.25 2.25H6.75A2.25 2.25 0 014.5 19.5V6.257c0-1.108.806-2.057 1.907-2.185a48.208 48.208 0 011.927-.184"></path>
                    </svg>
                    <svg x-show="copied" x-transition:enter="transition duration-200 ease-out" x-transition:enter-start="translate-y-2 opacity-0" x-transition:enter-end="translate-y-0 opacity-100" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.3" stroke="currentColor" class="size-6 text-emerald-500" style="display: none;">
                        <path stroke-linecap="round" stroke-linejoin="round" d="M11.35 3.836c-.065.21-.1.433-.1.664 0 .414.336.75.75.75h4.5a.75.75 0 00.75-.75 2.25 2.25 0 00-.1-.664m-5.8 0A2.251 2.251 0 0113.5 2.25H15c1.012 0 1.867.668 2.15 1.586m-5.8 0c-.376.023-.75.05-1.124.08C9.095 4.01 8.25 4.973 8.25 6.108V8.25m8.9-4.414c.376.023.75.05 1.124.08 1.131.094 1.976 1.057 1.976 2.192V16.5A2.25 2.25 0 0118 18.75h-2.25m-7.5-10.5H4.875c-.621 0-1.125.504-1.125 1.125v11.25c0 .621.504 1.125 1.125 1.125h9.75c.621 0 1.125-.504 1.125-1.125V18.75m-7.5-10.5h6.375c.621 0 1.125.504 1.125 1.125v9.375m-8.25-3l1.5 1.5 3-3.75"></path>
                    </svg>
                </button>
            </div>

            <div class="relative overflow-y-auto" :class="getExpandCss">
                <pre x-ref="codeBlock" class="text-white/60 overflow-x-auto text-sm" tabindex="0">
                    <code class="@CodeLanguage.GetLanguageClass(Language)" id="@CodeId">@CodeContent</code>
                </pre>
            </div>
        </div>
        <!-- /code  -->
    </div>
    <button aria-label="expand the code container" class="border-t-0 border-outline bg-surfaceAlt text-onSurface flex w-full items-center justify-center gap-2 rounded-xl rounded-t-none border p-2 focus:outline-none focus-visible:rounded-t-none focus-visible:border-2 focus-visible:border-primary dark:border-outlineDark dark:bg-surfaceDarkAlt/50 dark:text-onSurfaceDark dark:focus-visible:border-primaryDark" x-on:click="toggleExpand">
        <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="2.5" stroke="currentColor" class="rotate-0 h-5 w-5 transition" :class="getExpandButtonCss">
            <path stroke-linecap="round" stroke-linejoin="round" d="M19.5 8.25l-7.5 7.5-7.5-7.5"></path>
        </svg>
    </button>
</div>

@code {
    private const string BaseStyle = "mt-2 overflow-auto";
    private string CodeId { get; set; } = IdGenerator.UniqueId("code");
    private string CodeContent { get; set; } = string.Empty;
    private string _assets = string.Empty;

    /// <summary>
    /// Default assets loaded for CodeViewer
    /// </summary>
    public static string[] DefaultAssets =
    [
        Constants.ContentUrl("js/vendor/highlightjs/highlight.js"),
        Constants.ContentUrl("js/vendor/highlightjs-plugin/cshtml-razor.min.js"),
        Constants.ContentUrl("js/vendor/highlightjs/styles/stackoverflow-dark.css")
    ];

    /// <summary>
    /// (optional) Javascript and CSS assets that are loaded when component is instantiated.  Assets are requested
    /// in parallel but loaded sequentially
    /// </summary>
    [Parameter] 
    public string[] ComponentAssets { get; set; } = DefaultAssets;

    /// <summary>
    /// Language string for highlight.js. Uses constants defined in CodeLanguage
    /// </summary>
    [Parameter] 
    public string Language { get; set; } = "html";

    /// <summary>
    /// HTML escaped source code for the code viewer
    /// </summary>
    [Parameter]
    public RenderFragment? ChildContent { get; set; }

    /// <summary>
    /// Optional string representation of the code viewer source.  Note that if unset the code between the
    /// &lt;CodeViewer&gt; tags is used
    /// </summary>
    [Parameter]
    public string? Source { get; set; }

    /// <summary>
    /// Title for the CodeViewer card
    /// </summary>
    [Parameter] 
    public string ViewerTitle { get; set; } = "Source";

    protected override string? RootClass()
    {
        return TwMerge.Merge(AdditionalAttributes, BaseStyle);
    }

    protected override async Task OnParametersSetAsync()
    {
        if (Source != null)
        {
            CodeContent = Source.Trim();
        }
        else
        {
            CodeContent = await RenderSourceAsync();
            CodeContent = HttpUtility.HtmlDecode(CodeContent.TrimEmptyLines());
        }

        _assets = JsonSerializer.Serialize(ComponentAssets);
        Nonce = RizzyNonceProvider.GetNonceValues();
    }

    private async Task<string> RenderSourceAsync()
    {
        if (Source != null) return Source.TrimEmptyLines();

        return await ChildContent.RenderHtml();
    }

}
