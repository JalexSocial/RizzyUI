@using RizzyUI.Utility
@namespace RizzyUI

@inherits RizzyComponent

<HtmlElement class="w-full">
    <iframe x-data="rzEmbeddedPreview"
	    class="w-full"
	    srcdoc="@_content"
	    x-ref="iframe">
    </iframe>
</HtmlElement>


@code {
    private string? _content;

    /// <summary>
    /// ServiceProvider reference needed to render any components to string correctly
    /// </summary>
    [Inject] private IServiceProvider ServiceProvider { get; set; } = default!;

    /// <summary>
    /// Markup to render into an iframe
    /// </summary>
    [Parameter] public required RenderFragment ChildContent { get; set; } 

    /// <summary>
    /// Optional layout for content
    /// </summary>
    [Parameter] public Type? Layout { get; set; }

    /// <inheritdoc cref="ComponentBase"/>
    protected override void OnParametersSet()
    {
		// Wrap the ChildContent inside the Layout
		RenderFragment fragment = builder =>
		{
			if (Layout != null)
			{
				builder.OpenComponent(0, Layout);
				builder.AddAttribute(1, nameof(LayoutComponentBase.Body), ChildContent);
				builder.CloseComponent();
			}
			else
			{
				builder.AddContent(2, ChildContent);
			}
		};

		// Use the async RenderHtml extension method to render the fragment
		_content = fragment.RenderHtml(ServiceProvider).Result;
	}
}