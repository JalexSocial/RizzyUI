@inherits RizzyUI.RizzyComponent

@namespace RizzyUI

<button 
    id="@(Name.ToLowerInvariant() + "-tab")"
    data-name="@Name.ToLowerInvariant()"
    data-selectedtextcolor="@(Parent?.SelectedTabTextColor.ToTextClass() ?? "text-primary")"
    x-on:click="tabButtonClicked"
    x-on:keydown="handleKeyDown"
    type="button"
    role="tab"
    :aria-selected="tabButtonActive"
    tabindex="0"
    aria-controls="@(Name.ToLowerInvariant() + "-panel")"
    @attributes="AdditionalAttributes"
    class="@RootClass()"
    :class="selectedTabTextColor">
    @ChildContent
</button>

@code {
    private static readonly string BaseStyle = "z-10 relative inline-flex h-8 px-2 w-full cursor-pointer items-center whitespace-nowrap rounded-theme rounded-b-none font-medium transition-all mr-1";

    [CascadingParameter]
    private Tabs? Parent { get; set; }

    [CascadingParameter]
    private TabStrip? TabStrip { get; set; }

    /// <summary>
    /// The unique name of the tab.
    /// </summary>
    [Parameter, EditorRequired]
    public required string Name { get; set; } = default!;

    /// <summary>
    /// Child content to be displayed inside the tab button.
    /// </summary>
    [Parameter]
    public RenderFragment? ChildContent { get; set; }

    /// <summary>
    /// Builds the root CSS class string for the tab.
    /// </summary>
    /// <returns>A string containing the combined CSS classes.</returns>
    protected override string? RootClass()
    {
        return TwMerge.Merge(AdditionalAttributes, 
            BaseStyle, 
            Parent?.TabBackgroundColor.ToBackgroundClass() ?? string.Empty, 
            GetJustifyCss());
    }

    /// <summary>
    /// Initializes the tab component and registers it with the parent <see cref="Tabs"/> component.
    /// </summary>
    /// <exception cref="ArgumentNullException">Thrown if the tab is not placed within a <see cref="Tabs"/> component.</exception>
    protected override void OnInitialized()
    {
        if (Parent == null)
            throw new ArgumentNullException(nameof(Parent), "Tab must exist within a Tabs component");

        base.OnInitialized();

        Parent.AddTab(this);
    }

    private string GetJustifyCss()
    {
        return TabStrip?.Justify switch
        {
            Justify.Start => "justify-start",
            Justify.Center => "justify-center",
            Justify.End => "justify-end",
            _ => "justify-center"
        };
    }
}