@using System.Text.RegularExpressions
@using RizzyUI.Utility
@inherits RizzyUI.RizzyComponent

@namespace RizzyUI

<CascadingValue Value="this">
    <div 
        data-tabselected="@(ActiveTab?.Name?.ToLowerInvariant() ?? string.Empty)"
        data-buttonref="@(ButtonRefId)"
        x-data="rzTabs"
        x-on:resize.window="handleResize"
        @attributes="AdditionalAttributes"
        class="@RootClass()"
    >
        @Menu

        <div>
            @TabPanels
        </div>
    </div>
</CascadingValue>

@code {

    /// <summary>
    /// Reference ID for the tab buttons container.
    /// </summary>
    internal string ButtonRefId { get; set; } = IdGenerator.UniqueId("tabButtons");

    /// <summary>
    /// List of all tabs within the Tabs component.
    /// </summary>
    internal List<Tab> _tabs = new();

    /// <summary>
    /// Name of the initially selected tab.
    /// </summary>
    [Parameter]
    public string SelectedTabName { get; set; } = string.Empty;

    /// <summary>
    /// Text color for the tab
    /// </summary>
    [Parameter]
    public SemanticColor TabTextColor { get; set; } = SemanticColor.OnSurface;

    /// <summary>
    /// SemanticColor for both the selected tab text 
    /// </summary>
    [Parameter] 
    public SemanticColor SelectedTabTextColor { get; set; } = SemanticColor.Primary;

    /// <summary>
    /// SemanticColor for both the selected tab underline
    /// </summary>
    [Parameter]
    public SemanticColor SelectedTabUnderlineColor { get; set; } = SemanticColor.Primary;

    /// <summary>
    /// Background color for the tab
    /// </summary>
    [Parameter]
    public SemanticColor TabBackgroundColor { get; set; } = SemanticColor.Surface;

    /// <summary>
    /// Render fragment for the tab menu.
    /// </summary>
    [Parameter, EditorRequired]
    public required RenderFragment Menu { get; set; } = default!;

    /// <summary>
    /// Render fragment for the tab panels.
    /// </summary>
    [Parameter, EditorRequired]
    public required RenderFragment TabPanels { get; set; } = default!;

    /// <summary>
    /// The currently active tab.
    /// </summary>
    public Tab? ActiveTab { get; private set; }

    /// <summary>
    /// Registers a tab with the Tabs component.
    /// </summary>
    /// <param name="tab">The <see cref="Tab"/> to add.</param>
    internal void AddTab(Tab tab)
    {
        _tabs.Add(tab);

        if (_tabs.Count == 1 || (string.IsNullOrEmpty(SelectedTabName) && ActiveTab == null))
        {
            ActiveTab = tab;
        }

        if (!string.IsNullOrEmpty(SelectedTabName) && tab.Name.Equals(SelectedTabName, StringComparison.OrdinalIgnoreCase))
        {
            ActiveTab = tab;
        }

        StateHasChanged();
    }
}
