using System.Web;
using Rizzy.Utility;
using RizzyUI.Extensions;
using Microsoft.AspNetCore.Components;
using Markdig;
using Pek.Markdig.HighlightJs;
using System.Text.Json;

namespace RizzyUI;

/// <xmldoc>
/// A Markdown component that converts the provided RenderFragment markdown content into HTML.
/// The markdown content is passed as child content and converted to HTML using Markdig.
/// </xmldoc>
public partial class Markdown : RizzyComponent
{
    private string _assets = string.Empty;
    private static readonly string BaseStyle = "prose lg:prose-xl dark:prose-invert text-on-surface dark:text-on-surface-dark";

    /// <summary>
    /// Pipeline to use with Markdown components
    /// </summary>
    public static MarkdownPipeline? Pipeline { get; set; }

    /// <xmldoc>
    /// Gets or sets the html-encoded markdown content provided as child content.
    /// </xmldoc>
    [Parameter]
    public RenderFragment? ChildContent { get; set; }

    /// <xmldoc>
    /// Gets or sets the markdown content provided as child content. If provided
    /// the Markdown component will render this string only.
    /// </xmldoc>
    [Parameter] 
    public string? Content { get; set; } = string.Empty;

    /// <summary>
    /// Default assets loaded for Markdown
    /// </summary>
    public static string[] DefaultAssets =
    [
        Constants.ContentUrl("js/vendor/highlightjs/highlight.js"),
        Constants.ContentUrl("js/vendor/highlightjs-plugin/cshtml-razor.min.js"),
        Constants.ContentUrl("js/vendor/highlightjs/styles/stackoverflow-dark.css")
    ];

    /// <summary>
    /// (optional) Javascript and CSS assets that are loaded when component is instantiated.  Assets are requested
    /// in parallel but loaded sequentially
    /// </summary>
    [Parameter] 
    public string[] ComponentAssets { get; set; } = DefaultAssets;

    /// <xmldoc>
    /// Gets the HTML markup generated by converting the markdown content.
    /// </xmldoc>
    private MarkupString OutputHtml { get; set; }

    /// <xmldoc>
    /// Computes the final CSS class string for the root element by merging AdditionalAttributes with the base style.
    /// </xmldoc>
    protected override string? RootClass() => TwMerge.Merge(AdditionalAttributes, BaseStyle);

    protected override void OnInitialized()
    {
        base.OnInitialized();

        Pipeline ??= new MarkdownPipelineBuilder()
            .UseAdvancedExtensions()
            .UseRizzySyntaxHighlighting()
            .Build();
    }

    /// <xmldoc>
    /// Called when component parameters have been set. Converts the markdown content (via AsMarkupString())
    /// into HTML using Markdig and stores it in OutputHtml.
    /// </xmldoc>
    protected override void OnParametersSet()
    {
        base.OnParametersSet();

        string markdownText;

        if (!string.IsNullOrEmpty(Content))
        {
            markdownText = Content;
        }
        else
        {
            markdownText = ChildContent?.AsMarkupString().Outdent() ?? string.Empty;
            markdownText = HttpUtility.HtmlDecode(markdownText);
        }
        
        // Convert the markdown to HTML using Markdig.
        string html = Markdig.Markdown.ToHtml(markdownText, Pipeline);

        // Wrap the HTML string in a MarkupString so it renders as HTML.
        OutputHtml = new MarkupString(html);

        _assets = JsonSerializer.Serialize(ComponentAssets);
        Nonce = RizzyNonceProvider.GetNonceValues();
    }
}