@namespace RizzyUI
@using System.ComponentModel
@using System.Linq.Expressions
@using Blazicons
@inherits RzComponent

<Field class="@RootClass()">
    <FieldLabel DisplayName="@DisplayName" For="@For">
        @if (Required)
        {
            <span class="text-sm text-red-600 dark:text-red-400">*</span>
        }
    </FieldLabel>
    <TextEdit For="@For" Role="@Role" Placeholder="@Placeholder" PrependIcon="@PrependIcon" PrependText="@PrependText"
              @attributes="AdditionalAttributes"/>
    @if (FieldHelp != null)
    {
        <FieldHelp>@FieldHelp</FieldHelp>
    }
    <RzValidationMessage For="@For"/>
</Field>

@code {

    /// <summary>
    ///     Gets or sets the current edit context.
    /// </summary>
    [CascadingParameter]
    public EditContext? EditContext { get; set; }

    /// <summary>
    ///     Gets or sets the role of the text input.
    /// </summary>
    [Parameter]
    public TextRole Role { get; set; } = TextRole.Text;

    /// <summary>
    ///     Gets or sets the placeholder text for the input.
    /// </summary>
    [Parameter]
    public string Placeholder { get; set; } = string.Empty;

    /// <summary>
    ///     Gets or sets the display name for the field label.
    /// </summary>
    [Parameter]
    public string? DisplayName { get; set; }

    /// <summary>
    ///     Gets or sets a value indicating whether the field is required.
    /// </summary>
    [Parameter]
    public bool Required { get; set; } = false;

    /// <summary>
    ///     Gets or sets the render fragment for additional field help content.
    /// </summary>
    [Parameter]
    public RenderFragment? FieldHelp { get; set; }

    /// <summary>
    ///     Specifies the field for which validation messages should be displayed.
    /// </summary>
    [Parameter][EditorRequired]
    public Expression<Func<string>>? For { get; set; }

    /// <summary>
    ///     Gets or sets the text to prepend inside the input field.
    /// </summary>
    [Parameter]
    public string? PrependText { get; set; }

    /// <summary>
    ///     Gets or sets the text to prepend icon inside the input field.
    /// </summary>
    /// <remarks>Only one of PrependText or PrependIcon can be defined</remarks>
    [Parameter]
    public SvgIcon? PrependIcon { get; set; }

    /// <summary>
    ///     Called when component parameters have been set.
    /// </summary>
    protected override void OnParametersSet()
    {
        if (EditContext is null)
            throw new InvalidEnumArgumentException("This field must be part of an EditForm");

        base.OnParametersSet();
    }

}
