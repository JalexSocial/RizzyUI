@using System.Linq.Expressions
@using TailwindMerge
@typeparam TValue

@namespace RizzyUI
@inherits InputBase<TValue>

<div class="relative">
    @if (PrependText != null)
    {
        <div class="pointer-events-none absolute inset-y-0 left-0 my-px ml-px flex items-center rounded-l-lg border-r border-outline bg-surface-alt pl-3 pr-1 text-on-surface dark:border-outline-dark dark:bg-surface-dark-alt dark:text-on-surface-dark">
            @PrependText
        </div>
    }
    <RzInputNumber TValue="TValue" @ref="_elem" Value="@_value" ValueExpression="For" placeholder="@_placeholder" @attributes="AdditionalAttributes" class="@RootClass()" />
</div>

@code {
    // Base CSS classes for the input element.
    private static readonly string BaseStyle = "block w-full rounded-lg border border-outline px-3 py-2 leading-6 placeholder-on-surface dark:border-outline-dark dark:bg-surface-dark-alt dark:placeholder-on-surface-dark focus:border-primary focus:ring focus:ring-primary focus:ring-opacity-50";

    private TValue _value = default!;
    private RzInputNumber<TValue>? _elem;
    private string _placeholder = string.Empty;

    /// <summary>
    /// Gets or sets the placeholder text.
    /// </summary>
    [Parameter]
    public string Placeholder { get; set; } = string.Empty;

    /// <summary>
    /// Gets or sets any text to prepend within the input.
    /// </summary>
    [Parameter]
    public string? PrependText { get; set; }

    /// <summary>
    /// Gets the ID attribute from the underlying input, if provided.
    /// </summary>
    public string Id
    {
        get
        {
            if (_elem?.AdditionalAttributes != null && _elem.AdditionalAttributes.TryGetValue("id", out var attr))
            {
                return attr as string ?? string.Empty;
            }
            return string.Empty;
        }
    }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();

        // Determine placeholder: prefer AdditionalAttributes value if provided.
        _placeholder = Placeholder;
        if (AdditionalAttributes is not null && AdditionalAttributes.TryGetValue("placeholder", out var ph) && ph is string phStr)
        {
            _placeholder = phStr;
        }

        // Compile the field expression to get the initial value.
        _value = For.Compile().Invoke();
    }

    /// <inheritdoc/>
    protected override string? RootClass()
    {
        return TwMerge.Merge(AdditionalAttributes, BaseStyle);
    }
}
