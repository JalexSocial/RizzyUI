@using System.Linq.Expressions
@typeparam TValue
@namespace RizzyUI
@inherits RizzyComponent

<CascadingValue Value="this">
    <RzInputRadioGroup TValue="TValue" ValueExpression="@For" Value="@Value">
        <div @attributes="AdditionalAttributes" class="@RootClass() @(Orientation == Orientation.Vertical ? "grid-cols-1" : $"grid-cols-{_items.Count}") grid gap-2 border-l pl-3 pt-2">
            @ChildContent
        </div>
    </RzInputRadioGroup>
</CascadingValue>

@code {
    private List<RadioGroupItem<TValue>> _items = new();

    private static readonly string BaseStyle = ""; // Optionally add grid container base styles.

    /// <summary>
    /// Gets or sets the display name for the radio group.
    /// </summary>
    [Parameter]
    public string? DisplayName { get; set; } = string.Empty;

    /// <summary>
    /// Gets or sets the orientation of the radio items.
    /// </summary>
    [Parameter]
    public Orientation Orientation { get; set; } = Orientation.Vertical;

    /// <summary>
    /// Specifies the field for which validation messages should be displayed.
    /// </summary>
    [Parameter, EditorRequired]
    public Expression<Func<TValue>>? For { get; set; }

    /// <summary>
    /// Gets or sets the name attribute for the radio group.
    /// </summary>
    [Parameter]
    public string Name { get; set; } = string.Empty;

    /// <summary>
    /// Gets or sets the current selected value.
    /// </summary>
    [Parameter]
    public TValue? Value { get; set; } = default!;

    /// <summary>
    /// Gets or sets the child content to render inside the radio group.
    /// </summary>
    [Parameter]
    public RenderFragment? ChildContent { get; set; }

    /// <summary>
    /// Adds a radio group item to this group.
    /// </summary>
    /// <param name="item">The radio group item.</param>
    public void AddRadioItem(RadioGroupItem<TValue> item)
    {
        if (!_items.Contains(item))
        {
            _items.Add(item);
            StateHasChanged();
        }
    }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();

        if (For != null && Value == null)
        {
            Value = For.Compile().Invoke();
        }
    }

    /// <inheritdoc/>
    protected override string? RootClass()
    {
        return TwMerge.Merge(AdditionalAttributes, BaseStyle);
    }
}
