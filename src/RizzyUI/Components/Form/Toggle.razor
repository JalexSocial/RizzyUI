@namespace RizzyUI
@using System.Linq.Expressions
@inherits RzComponent

<RzInputCheckbox ValueExpression="@For"
                 Value="@(Value ?? false)"
                 @attributes="AdditionalAttributes" class="@RootClass()" role="switch" tabindex="0"
                 aria-checked="@(Value ?? false ? "true" : "false")"/>

@code {

    /// <summary>
    ///     Base CSS classes for the toggle.
    ///     Uses semantic colors: "bg-outline " represents the background color in light and dark mode, respectively.
    /// </summary>
    private static readonly string BaseStyle = "relative w-[3.25rem] h-7 p-px bg-outline border-transparent text-transparent rounded-full cursor-pointer transition-colors ease-in-out duration-200 focus:ring-primary disabled:opacity-50 disabled:pointer-events-none checked:bg-none checked:bg-primary checked:text-primary checked:border-primary focus:checked:border-primary   dark:checked:bg-primary-dark dark:checked:border-primary-dark dark:focus:ring-offset-neutral-600 before:inline-block before:size-6 before:bg-on-primary checked:before:bg-on-primary before:translate-x-0 checked:before:translate-x-full before:rounded-full before:shadow before:transform before:ring-0 before:transition before:ease-in-out before:duration-200 dark:before:bg-on-primary-dark dark:checked:before:bg-on-primary-dark";

    /// <summary>
    ///     Gets or sets the current value of the toggle.
    /// </summary>
    [Parameter]
    public bool? Value { get; set; }

    /// <summary>
    ///     Gets or sets the expression used for binding the boolean value.
    ///     This is used for validation.
    /// </summary>
    [Parameter]
    public Expression<Func<bool>>? For { get; set; }

    /// <summary>
    ///     Builds the final CSS class string for the component’s root element.
    ///     This method merges any additional classes provided by the user with the component’s base style.
    /// </summary>
    /// <returns>A string representing the merged Tailwind CSS classes.</returns>
    protected override string? RootClass()
    {
        return TwMerge.Merge(AdditionalAttributes, BaseStyle);
    }

}