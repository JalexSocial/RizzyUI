@namespace RizzyUI
@inherits RzComponent
@using System.ComponentModel
@using System.ComponentModel.DataAnnotations
@using System.Linq.Expressions
@using Microsoft.AspNetCore.Http
@using Rizzy.Htmx
@typeparam TValue

@if (DisplayName != null)
{
    <label for="@_for" @attributes="AdditionalAttributes" class="@RootClass()">
        @DisplayName
        @ChildContent
    </label>
}

@code {
    private static readonly string BaseStyle = "font-medium";
    private string _for = string.Empty;

    [CascadingParameter] private HttpContext? HttpContext { get; set; }

    [CascadingParameter] private EditContext? EditContext { get; set; } = default!;

    /// <summary>
    ///     Child content for the field label
    /// </summary>
    [Parameter]
    public RenderFragment? ChildContent { get; set; }

    /// <summary>
    ///     Specifies the field for which validation messages should be displayed.
    /// </summary>
    [Parameter]
    public Expression<Func<TValue>>? For { get; set; }

    /// <summary>
    ///     Name to display in the field label
    /// </summary>
    [Parameter]
    public string? DisplayName { get; set; }

    /// <summary>
    ///     Initialize the field label, ideally using For to detect field information
    /// </summary>
    /// <exception cref="InvalidEnumArgumentException"></exception>
    protected override void OnParametersSet()
    {
        if (EditContext is null)
            throw new InvalidEnumArgumentException("FieldLabel must be part of an EditForm");

        SetDisplayName();

        if (For != null)
        {
            var field = FieldIdentifier.Create(For);

            var fieldMap = HttpContext?.GetOrAddFieldMapping(EditContext);

            if (fieldMap != null && fieldMap.TryGetValue(field, out var map))
            {
                _for = map.Id;
            }
        }

        base.OnParametersSet();
    }

    private void SetDisplayName()
    {
        // Display name is set, nothing more to do
        if (!string.IsNullOrEmpty(DisplayName))
            return;

        if (For == null)
        {
            throw new InvalidOperationException($"{nameof(For)} is required if display name is not set.");
        }

        //FieldIdentifier _fieldIdentifier = FieldIdentifier.Create(For);

        if (For.Body is MemberExpression memberExpression)
        {
            var displayAttribute = memberExpression.Member.GetCustomAttributes(typeof(DisplayAttribute), true)
                .FirstOrDefault() as DisplayAttribute;

            // If DisplayAttribute is not present, use the field name
            DisplayName = displayAttribute?.Name ?? memberExpression.Member.Name;
        }
    }

    /// <inheritdoc cref="RzComponent.RootClass" />
    protected override string? RootClass()
    {
        return TwMerge.Merge(AdditionalAttributes, BaseStyle);
    }

}
