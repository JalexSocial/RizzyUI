@using Rizzy.Components
@namespace RizzyUI
@using System.Linq.Expressions
@inherits InputBase<string>

<div class="relative">
    @if (PrependText != null)
    {
        <div class="pointer-events-none absolute inset-y-0 left-0 my-px ml-px flex items-center rounded-l-lg border-r border-gray-200 bg-gray-100 pl-3 pr-1 text-gray-700 dark:border-gray-600 dark:bg-gray-900/50 dark:text-gray-300">
            @PrependText
        </div>
    }
    <RzInputText @ref="_elem" type="@_role" Value="@_value" ValueExpression="For" placeholder="@_placeholder" @attributes="@AdditionalAttributes" class="@RootClass()" />
</div>

@code {
    /// <summary>
    /// Base CSS classes applied to the input element.
    /// </summary>
    private static readonly string BaseStyle = "block w-full rounded border border-outline px-3 py-2 leading-6 placeholder-gray-500 focus:border-primary focus:ring focus:ring-primary focus:ring-opacity-50 dark:border-gray-600 dark:bg-gray-800 dark:placeholder-gray-400 dark:focus:border-primary";
    private RzInputText? _elem;
    private string _value = string.Empty;
    private string _role = "text";
    private string _placeholder = string.Empty;

    /// <summary>
    /// Gets or sets the current edit context.
    /// </summary>
    [CascadingParameter]
    public EditContext EditContext { get; set; } = default!;

    /// <summary>
    /// Gets or sets the associated text field.
    /// </summary>
    [CascadingParameter]
    public TextField? TextField { get; set; }

    /// <summary>
    /// Gets or sets the role of the text input, determining its behavior and appearance.
    /// </summary>
    [Parameter]
    public TextRole Role { get; set; } = TextRole.Text;

    /// <summary>
    /// Gets or sets the placeholder text for the input field.
    /// </summary>
    [Parameter]
    public string Placeholder { get; set; } = string.Empty;

    /// <summary>
    /// Gets or sets the text to prepend inside the input field.
    /// </summary>
    [Parameter]
    public string? PrependText { get; set; }

    /// <summary>
    /// Gets the ID attribute of the input element, if provided.
    /// </summary>
    public string Id
    {
        get
        {
            if (_elem?.AdditionalAttributes != null && _elem.AdditionalAttributes.TryGetValue("id", out var attribute))
            {
                return attribute as string ?? string.Empty;
            }

            return string.Empty;
        }
    }

    /// <summary>
    /// Called when component parameters have been set. Initializes internal state based on parameters.
    /// </summary>
    protected override void OnParametersSet()
    {
        base.OnParametersSet();

        _role = GetParameterValue("type", Role.ToString().ToLowerInvariant());
        _placeholder = GetParameterValue("placeholder", Placeholder);
        _value = For.Compile().Invoke();
    }

    /// <summary>
    /// Computes the root CSS classes by merging additional attributes with the base style.
    /// </summary>
    /// <returns>A string containing the merged CSS classes.</returns>
    protected override string? RootClass()
    {
        return TwMerge.Merge(AdditionalAttributes, BaseStyle);
    }
}
