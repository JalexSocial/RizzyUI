@namespace RizzyUI
@inherits RizzyUI.RizzyComponent

<HtmlElement Element="@Element" @attributes="AdditionalAttributes" class="@RootClass()">
    @ChildContent
</HtmlElement>

@code {
    private static readonly string BaseStyle = "my-8 py-3 flex items-center text-sm text-outline";

    // Used for Tailwind class discovery
#pragma warning disable CS0414 // Field is assigned but its value is never used
    private static readonly string TwDiscovery = "after:border-solid after:border-dashed after:border-dotted before:border-solid before:border-dashed before:border-dotted";
#pragma warning restore CS0414 // Field is assigned but its value is never used

    /// <summary>
    /// Style for dividing line
    /// </summary>
    [Parameter]
    public DividerStyle Style { get; set; } = DividerStyle.Solid;

    /// <summary>
    /// Text alignment for label
    /// </summary>
    [Parameter]
    public Align LabelAlignment { get; set; } = Align.Center;

    /// <summary>
    /// Child content to display in the divider
    /// </summary>
    [Parameter]
    public RenderFragment? ChildContent { get; set; }

    /// <summary>
    /// Initialize Element parameter
    /// </summary>
    protected override void OnParametersSet()
    {
	    base.OnParametersSet();

	    if (ChildContent == null)
		    Element = "hr";
    }

    /// <inheritdoc cref="RizzyComponent"/>
    protected override string? RootClass()
    {
        return TwMerge.Merge(AdditionalAttributes, BaseStyle, 
	        ChildContent is null ? GetDividerStyleCss(Style) : GetAlignmentCss(LabelAlignment, Style));
    }

    private static string GetDividerStyleCss(DividerStyle style)
    {
        return style switch
        {
            DividerStyle.Solid => "border-solid",
            DividerStyle.Dashed => "border-dashed",
            DividerStyle.Dotted => "border-dotted",
            _ => "border-solid"
        };
    }

    private static string GetAlignmentCss(Align alignment, DividerStyle style)
    {
        var styleCss = GetDividerStyleCss(style);

        return alignment switch
	    {
		    Align.Start => $"after:flex-1 after:border-t after:{styleCss} after:border-outline after:ms-6 dark:after:border-outline",
            Align.Center => $"before:flex-1 before:border-t before:{styleCss} before:border-outline before:me-6 after:flex-1 after:border-t after:border-outline after:ms-6 dark:before:border-outline dark:after:border-outline after:{styleCss}",
            Align.End => $"before:flex-1 before:border-t before:{styleCss} before:border-outline before:me-6 dark:before:border-outline",
		    _ => ""
	    };
    }
}