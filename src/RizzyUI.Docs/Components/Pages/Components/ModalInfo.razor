@page "/components/modal"
@using RizzyUI
@using Rizzy.Htmx
@implements IDisposable

<PageTitle>Modal Dialog</PageTitle>

<RzQuickReferenceContainer x-data="modalPageController">
    <RzArticle ProseWidth="ProseWidth.UltraWide">
        <SideContent>
            <RzQuickReference />
        </SideContent>
        <MainContent>
            <RzHeading Level="HeadingLevel.H1" class="scroll-mt-20">Modal Dialog</RzHeading>
            <RzParagraph>
                The RzModal component provides a flexible way to display modal dialogs. It leverages Alpine.js for client-side state management (open/closed), transitions, focus trapping, and standard closing mechanisms (Escape key, backdrop click, close button). It's designed to be pre-rendered in your Blazor markup and triggered via client-side window events. Importantly, its internal body and footer areas have stable IDs (`BodyId`, `FooterId`), allowing HTMX to dynamically load or update content within the modal after it's opened. Modals can also be closed programmatically or via HTMX response headers triggering a specific event.
            </RzParagraph>

            <RzAlert Variant="AlertVariant.Information" class="mb-6">
                <RzAlertTitle>Under the Hood</RzAlertTitle>
                <RzAlertDescription>
                    This component uses an Alpine.js component (`x-data="rzModal"`) to manage its state and interactions. It utilizes `&lt;template x-teleport="body">` to ensure the modal is rendered at the end of the document body, avoiding potential z-index issues.
                </RzAlertDescription>
            </RzAlert>

            <section class="my-8 py-2">
                <RzHeading Level="HeadingLevel.H2" QuickReferenceTitle="Basic Modal" class="scroll-mt-20">
                    Basic Modal Triggered by Event
                </RzHeading>
                <RzParagraph>
                    This example shows a standard modal pre-rendered on the page. Clicking the "Open Basic Modal" button dispatches a custom window event (`show-basic-modal`), which the `RzModal` component listens for via its `EventTriggerName` parameter.
                </RzParagraph>

                <div>
                    <div class="mx-auto p-8 mb-5 flex justify-center items-center min-h-40">
                        <RzButton x-on:click="showBasicModal">
                            Open Basic Modal
                        </RzButton>

                        <RzModal @ref="basicModalRef" EventTriggerName="show-basic-modal" Title="Basic Modal Example" Size="ModalSize.Large">
                            <ChildContent>
                                <p>This is the content of the basic modal.</p>
                                <p>You can close it using the 'X' button, pressing Escape, or clicking the backdrop.</p>
                            </ChildContent>
                            <FooterContent>
                                <div class="flex justify-end gap-2">
                                     <RzButton Variant="ButtonVariant.Alternate" x-on:click="closeModal()">Close (Alpine)</RzButton>
                                     <RzButton Variant="ButtonVariant.Primary">Okay</RzButton>
                                </div>
                            </FooterContent>
                        </RzModal>
                    </div>
                </div>

                <RzCodeViewer Language="CodeLanguage.Razor" class="mb-10">
&lt;RzButton onclick=&quot;window.dispatchEvent(new CustomEvent(&#39;show-basic-modal&#39;))&quot;&gt;
    Open Basic Modal
&lt;/RzButton&gt;

&lt;RzModal @@ref=&quot;basicModalRef&quot; EventTriggerName=&quot;show-basic-modal&quot; Title=&quot;Basic Modal Example&quot; Size=&quot;ModalSize.Large&quot;&gt;
    &lt;ChildContent&gt;
        &lt;p&gt;This is the content of the basic modal.&lt;/p&gt;
        &lt;p&gt;You can close it using the &#39;X&#39; button, pressing Escape, or clicking the backdrop.&lt;/p&gt;
    &lt;/ChildContent&gt;
    &lt;FooterContent&gt;
        &lt;div class=&quot;flex justify-end gap-2&quot;&gt;
             &lt;RzButton Variant=&quot;ButtonVariant.Alternate&quot; x-on:click=&quot;closeModal()&quot;&gt;Close (Alpine)&lt;/RzButton&gt;
             &lt;RzButton Variant=&quot;ButtonVariant.Primary&quot;&gt;Okay&lt;/RzButton&gt;
        &lt;/div&gt;
    &lt;/FooterContent&gt;
&lt;/RzModal&gt;

@@code {
    RzModal basicModalRef = default!;
}
                </RzCodeViewer>
            </section>

            <section class="my-8 py-2">
                <RzHeading Level="HeadingLevel.H2" QuickReferenceTitle="Customizing Appearance" class="scroll-mt-20">
                    Customizing Appearance
                </RzHeading>
                <RzParagraph>
                    You can customize the modal's appearance using parameters like `Size`, `ShowHeader`, `ShowCloseButton`, and providing custom `TitleContent`.
                </RzParagraph>

                <RzBrowser Layout="typeof(PreviewLayout)">
                    <div class="mx-auto p-8 mb-5 flex justify-center items-center min-h-40 space-x-4">
                         <RzButton x-on:click="showSmallModal">
                            Open Small (No Header)
                        </RzButton>
                         <RzButton x-on:click="showCustomTitleModal">
                            Open Custom Title
                        </RzButton>

                        <RzModal EventTriggerName="show-small-modal" Size="ModalSize.Small" ShowHeader="false">
                            <ChildContent>
                                <p>This modal has no header or default close button.</p>
                                <div class="mt-4 text-right">
                                     <RzButton Variant="ButtonVariant.Alternate" x-on:click="closeModal()">Close Me</RzButton>
                                </div>
                            </ChildContent>
                        </RzModal>

                         <RzModal EventTriggerName="show-custom-title-modal" Size="ModalSize.Medium">
                             <TitleContent>
                                 <div class="flex items-center gap-2 font-semibold text-primary">
                                     <span class="size-5"><Blazicon Svg="MdiIcon.Information"/></span>
                                     <span>Important Information</span>
                                 </div>
                             </TitleContent>
                            <ChildContent>
                                <p>This modal uses custom `TitleContent` for the header.</p>
                            </ChildContent>
                        </RzModal>
                    </div>
                </RzBrowser>

                <RzCodeViewer Language="CodeLanguage.Razor" class="mb-10">
&lt;!-- Button to open small modal --&gt;
&lt;RzButton onclick=&quot;window.dispatchEvent(new CustomEvent(&#39;show-small-modal&#39;))&quot;&gt;
    Open Small (No Header)
&lt;/RzButton&gt;

&lt;!-- Small Modal without Header --&gt;
&lt;RzModal EventTriggerName=&quot;show-small-modal&quot; Size=&quot;ModalSize.Small&quot; ShowHeader=&quot;false&quot;&gt;
    &lt;ChildContent&gt;
        &lt;p&gt;This modal has no header or default close button.&lt;/p&gt;
        &lt;div class=&quot;mt-4 text-right&quot;&gt;
             &lt;RzButton Variant=&quot;ButtonVariant.Alternate&quot; x-on:click=&quot;closeModal()&quot;&gt;Close Me&lt;/RzButton&gt;
        &lt;/div&gt;
    &lt;/ChildContent&gt;
&lt;/RzModal&gt;

&lt;!-- Button to open modal with custom title --&gt;
&lt;RzButton onclick=&quot;window.dispatchEvent(new CustomEvent(&#39;show-custom-title-modal&#39;))&quot;&gt;
    Open Custom Title
&lt;/RzButton&gt;

&lt;!-- Modal with Custom TitleContent --&gt;
&lt;RzModal EventTriggerName=&quot;show-custom-title-modal&quot; Size=&quot;ModalSize.Medium&quot;&gt;
    &lt;TitleContent&gt;
        &lt;div class=&quot;flex items-center gap-2 font-semibold text-primary&quot;&gt;
            &lt;Blazicons.MdiIcon Svg=&quot;Blazicons.MdiIcon.Information&quot; class=&quot;size-5&quot;/&gt;
            &lt;span&gt;Important Information&lt;/span&gt;
        &lt;/div&gt;
    &lt;/TitleContent&gt;
    &lt;ChildContent&gt;
        &lt;p&gt;This modal uses custom `TitleContent` for the header.&lt;/p&gt;
    &lt;/ChildContent&gt;
&lt;/RzModal&gt;
                </RzCodeViewer>
            </section>

            <section class="my-8 py-2">
                <RzHeading Level="HeadingLevel.H2" QuickReferenceTitle="HTMX Content Loading" class="scroll-mt-20">
                    HTMX Content Loading
                </RzHeading>
                <RzParagraph>
                    This demonstrates using HTMX to load content dynamically into the modal's body *after* the modal is opened via a client-side event. The button first triggers the modal open event, then initiates an HTMX GET request targeting the modal's specific `BodyId`. The content is loaded from a static Blazor page created for this demo.
                </RzParagraph>

                <RzBrowser Layout="typeof(PreviewLayout)">
                    <div class="mx-auto p-8 mb-5 flex justify-center items-center min-h-40">
                        <RzButton hx-get="/demo/htmx-modal-sample"
                                  hx-target="@($"#{htmxLoadModalRef?.BodyId}")"
                                  hx-swap="innerHTML"
                                  x-on:click="showHtmxLoadModal">
                            Open & Load Content via HTMX
                        </RzButton>

                        <RzModal @ref="htmxLoadModalRef" EventTriggerName="show-htmx-load-modal" Title="HTMX Loaded Content">
                            <ChildContent>
                                <div class="text-center p-4">
                                    <RzSpinner Size="Size.Large"/>
                                    <p class="mt-2">Loading content...</p>
                                </div>
                            </ChildContent>
                        </RzModal>
                    </div>
                </RzBrowser>

                <RzCodeViewer Language="CodeLanguage.Razor" class="mb-10" Title="Blazor Component">
&lt;RzButton hx-get=&quot;/demo/htmx-modal-sample&quot;
          hx-target=&quot;#@htmxLoadModalRef?.BodyId&quot; 
          hx-swap=&quot;innerHTML&quot;
          onclick=&quot;window.dispatchEvent(new CustomEvent(&#39;show-htmx-load-modal&#39;))&quot;&gt;
    Open &amp; Load Content via HTMX
&lt;/RzButton&gt;

&lt;RzModal @@ref=&quot;htmxLoadModalRef&quot; EventTriggerName=&quot;show-htmx-load-modal&quot; Title=&quot;HTMX Loaded Content&quot;&gt;
    &lt;ChildContent&gt;
        &lt;div class=&quot;text-center p-4&quot;&gt;
            &lt;RzSpinner Size=&quot;Size.Large&quot;/&gt;
            &lt;p class=&quot;mt-2&quot;&gt;Loading content...&lt;/p&gt;
        &lt;/div&gt;
    &lt;/ChildContent&gt;
&lt;/RzModal&gt;

@@code {
    RzModal htmxLoadModalRef = default!;
}
                </RzCodeViewer>
                 <RzCodeViewer Language="CodeLanguage.Razor" class="mb-10" Title="Demo Content Page (/demo/htmx-modal-sample)">
@@page &quot;/demo/htmx-modal-sample&quot;
@@layout RizzyUI.Docs.Components.Layout.EmptyLayout
@@using RizzyUI

&lt;p&gt;This content was loaded dynamically via an HTMX request!&lt;/p&gt;
&lt;RzAlert Variant=&quot;AlertVariant.Success&quot;&gt;
    &lt;RzAlertTitle&gt;Success&lt;/RzAlertTitle&gt;
    &lt;RzAlertDescription&gt;Content loaded successfully.&lt;/RzAlertDescription&gt;
&lt;/RzAlert&gt;
                </RzCodeViewer>
            </section>

             <section class="my-8 py-2">
                <RzHeading Level="HeadingLevel.H2" QuickReferenceTitle="Closing with HTMX" class="scroll-mt-20">
                    Closing with HTMX
                </RzHeading>
                <RzParagraph>
                    Modals can be closed from the server by returning an HTMX response header that triggers the event specified in the `CloseEventName` parameter (default: `rz:modal-close`). This example shows a form inside the modal; upon successful submission, the server sends back the trigger header.
                </RzParagraph>

                <RzAlert Variant="AlertVariant.Warning" class="mb-6">
                   <RzAlertTitle>Static Documentation Limitation</RzAlertTitle>
                   <RzAlertDescription>
                       This specific "Close via HTMX Header" example requires server-side processing to send the `HX-Trigger` response header. Since this documentation is rendered as static HTML, clicking the "Submit & Close" button below will not actually close the modal in this demo environment. It demonstrates the client-side setup and the expected server-side response.
                   </RzAlertDescription>
               </RzAlert>

                <RzBrowser Layout="typeof(PreviewLayout)">
                     <div class="mx-auto p-8 mb-5 flex justify-center items-center min-h-40">
                         <RzButton onclick="window.dispatchEvent(new CustomEvent('show-htmx-close-modal'))">
                             Open HTMX Close Example
                        </RzButton>

                         <RzModal EventTriggerName="show-htmx-close-modal" Title="Close via HTMX Header">
                             <ChildContent>
                                 <form hx-post="/api/modal/htmx-close-action"
                                       hx-target="this"
                                       hx-swap="outerHTML">
                                     <p>Submit this form. The server response will include an HX-Trigger header to close this modal (requires live server).</p>
                                     <div class="text-right mt-4">
                                         <RzButton type="submit" Variant="ButtonVariant.Success">Submit & Close</RzButton>
                                     </div>
                                 </form>
                             </ChildContent>
                         </RzModal>
                     </div>
                </RzBrowser>

                 <RzCodeViewer Language="CodeLanguage.Razor" class="mb-10" Title="Blazor Component">
&lt;RzButton onclick=&quot;window.dispatchEvent(new CustomEvent(&#39;show-htmx-close-modal&#39;))&quot;&gt;
    Open HTMX Close Example
&lt;/RzButton&gt;

&lt;RzModal EventTriggerName=&quot;show-htmx-close-modal&quot; Title=&quot;Close via HTMX Header&quot; CloseEventName=&quot;rz:modal-close&quot;&gt;
    &lt;ChildContent&gt;
        &lt;form hx-post=&quot;/api/modal/htmx-close-action&quot;
              hx-target=&quot;this&quot;
              hx-swap=&quot;outerHTML&quot;&gt;
            &lt;p&gt;Submit this form. The server response will include an HX-Trigger header to close this modal.&lt;/p&gt;
            &lt;div class=&quot;text-right mt-4&quot;&gt;
                &lt;RzButton type=&quot;submit&quot; Variant=&quot;ButtonVariant.Success&quot;&gt;Submit &amp; Close&lt;/RzButton&gt;
            &lt;/div&gt;
        &lt;/form&gt;
    &lt;/ChildContent&gt;
&lt;/RzModal&gt;
                 </RzCodeViewer>
                <RzCodeViewer Language="CodeLanguage.CSharp" class="mb-10" Title="Example Controller Action (using RzController)">
[HttpPost(&quot;/api/modal/htmx-close-action&quot;)]
public IResult CloseModalAction()
{
    // Process form data if needed...

    // Add the HX-Trigger header to close the modal
    // Uses the event name &#39;rz:modal-close&#39; (matches RzModal default or explicit parameter)
    HttpContext.Response.Htmx(h =&gt; h.Trigger(RizzyUI.Constants.Events.ModalClose));

    // Can return swapped content for the form, or just Ok/NoContent if only closing
    return Ok(&quot;&lt;p&gt;Form Submitted! Modal closed by server.&lt;/p&gt;&quot;); 
}
                </RzCodeViewer>
            </section>

            <section class="my-8 py-2">
                <RzHeading Level="HeadingLevel.H2" QuickReferenceTitle="Component Parameters" class="scroll-mt-20">
                    RzModal Component Parameters
                </RzHeading>
                <RzParagraph>
                    The following table summarizes the key parameters for the RzModal component.
                </RzParagraph>

                <div class="overflow-x-auto">
                    <table class="min-w-full divide-y divide-outline dark:divide-outlineDark">
                        <thead class="bg-surface-alt">
                            <tr>
                                <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-on-surface-strong uppercase tracking-wider">Parameter</th>
                                <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-on-surface-strong uppercase tracking-wider">Type</th>
                                <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-on-surface-strong uppercase tracking-wider">Default</th>
                                <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-on-surface-strong uppercase tracking-wider">Description</th>
                            </tr>
                        </thead>
                        <tbody class="bg-surface divide-y divide-outline dark:divide-outlineDark">
                             <tr>
                                <td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-on-surface-strong">Id</td>
                                <td class="px-6 py-4 whitespace-nowrap text-sm text-on-surface">string</td>
                                <td class="px-6 py-4 whitespace-nowrap text-sm text-on-surface">(Generated)</td>
                                <td class="px-6 py-4 text-sm text-on-surface">Read-only. The unique ID for the main modal `x-data` container div. Passed in event details.</td>
                            </tr>
                             <tr>
                                <td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-on-surface-strong">BodyId</td>
                                <td class="px-6 py-4 whitespace-nowrap text-sm text-on-surface">string</td>
                                <td class="px-6 py-4 whitespace-nowrap text-sm text-on-surface">(Generated)</td>
                                <td class="px-6 py-4 text-sm text-on-surface">Read-only. ID for the modal body `div`. Use this as `hx-target` for HTMX swaps into the body. Passed in `rz:modal-initialized` event detail.</td>
                            </tr>
                             <tr>
                                <td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-on-surface-strong">FooterId</td>
                                <td class="px-6 py-4 whitespace-nowrap text-sm text-on-surface">string</td>
                                <td class="px-6 py-4 whitespace-nowrap text-sm text-on-surface">(Generated)</td>
                                <td class="px-6 py-4 text-sm text-on-surface">Read-only. ID for the modal footer `div`. Use this as `hx-target` for HTMX swaps into the footer. Passed in `rz:modal-initialized` event detail.</td>
                            </tr>
                             <tr>
                                <td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-on-surface-strong">EventTriggerName</td>
                                <td class="px-6 py-4 whitespace-nowrap text-sm text-on-surface">string</td>
                                <td class="px-6 py-4 whitespace-nowrap text-sm text-on-surface">"" (Empty String)</td>
                                <td class="px-6 py-4 text-sm text-on-surface">Name of the `window` event that will trigger the modal to open.</td>
                            </tr>
                            <tr>
                                <td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-on-surface-strong">CloseEventName</td>
                                <td class="px-6 py-4 whitespace-nowrap text-sm text-on-surface">string</td>
                                <td class="px-6 py-4 whitespace-nowrap text-sm text-on-surface">@Constants.Events.ModalClose</td>
                                <td class="px-6 py-4 text-sm text-on-surface">Name of the `window` event the modal listens for to close itself (e.g., triggered by HTMX response header).</td>
                            </tr>
                            <tr>
                                <td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-on-surface-strong">Title</td>
                                <td class="px-6 py-4 whitespace-nowrap text-sm text-on-surface">string?</td>
                                <td class="px-6 py-4 whitespace-nowrap text-sm text-on-surface">null</td>
                                <td class="px-6 py-4 text-sm text-on-surface">Optional title text for the modal header. Ignored if `TitleContent` is provided.</td>
                            </tr>
                             <tr>
                                <td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-on-surface-strong">Size</td>
                                <td class="px-6 py-4 whitespace-nowrap text-sm text-on-surface">ModalSize</td>
                                <td class="px-6 py-4 whitespace-nowrap text-sm text-on-surface">ModalSize.Medium</td>
                                <td class="px-6 py-4 text-sm text-on-surface">Specifies the maximum width of the modal dialog.</td>
                            </tr>
                             <tr>
                                <td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-on-surface-strong">TitleContent</td>
                                <td class="px-6 py-4 whitespace-nowrap text-sm text-on-surface">RenderFragment?</td>
                                <td class="px-6 py-4 whitespace-nowrap text-sm text-on-surface">null</td>
                                <td class="px-6 py-4 text-sm text-on-surface">Optional custom content for the modal header title area. Overrides `Title`.</td>
                            </tr>
                             <tr>
                                <td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-on-surface-strong">ChildContent</td>
                                <td class="px-6 py-4 whitespace-nowrap text-sm text-on-surface">RenderFragment?</td>
                                <td class="px-6 py-4 whitespace-nowrap text-sm text-on-surface">null</td>
                                <td class="px-6 py-4 text-sm text-on-surface">The main content displayed in the modal body. Can be targeted by HTMX using `BodyId`.</td>
                            </tr>
                             <tr>
                                <td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-on-surface-strong">FooterContent</td>
                                <td class="px-6 py-4 whitespace-nowrap text-sm text-on-surface">RenderFragment?</td>
                                <td class="px-6 py-4 whitespace-nowrap text-sm text-on-surface">null</td>
                                <td class="px-6 py-4 text-sm text-on-surface">Optional content displayed in the modal footer. Can be targeted by HTMX using `FooterId`.</td>
                            </tr>
                            <tr>
                                <td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-on-surface-strong">CloseOnEscape</td>
                                <td class="px-6 py-4 whitespace-nowrap text-sm text-on-surface">bool</td>
                                <td class="px-6 py-4 whitespace-nowrap text-sm text-on-surface">true</td>
                                <td class="px-6 py-4 text-sm text-on-surface">If true, the modal closes when the Escape key is pressed. Configures the Alpine component.</td>
                            </tr>
                             <tr>
                                <td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-on-surface-strong">CloseOnClickOutside</td>
                                <td class="px-6 py-4 whitespace-nowrap text-sm text-on-surface">bool</td>
                                <td class="px-6 py-4 whitespace-nowrap text-sm text-on-surface">true</td>
                                <td class="px-6 py-4 text-sm text-on-surface">If true, the modal closes when clicking on the backdrop. Configures the Alpine component.</td>
                            </tr>
                              <tr>
                                <td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-on-surface-strong">ShowHeader</td>
                                <td class="px-6 py-4 whitespace-nowrap text-sm text-on-surface">bool</td>
                                <td class="px-6 py-4 whitespace-nowrap text-sm text-on-surface">true</td>
                                <td class="px-6 py-4 text-sm text-on-surface">If true, the modal header section (including title and close button container) is rendered.</td>
                            </tr>
                             <tr>
                                <td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-on-surface-strong">ShowCloseButton</td>
                                <td class="px-6 py-4 whitespace-nowrap text-sm text-on-surface">bool</td>
                                <td class="px-6 py-4 whitespace-nowrap text-sm text-on-surface">true</td>
                                <td class="px-6 py-4 text-sm text-on-surface">If true (and `ShowHeader` is true), the default 'X' close button is rendered in the header.</td>
                            </tr>
                        </tbody>
                    </table>
                </div>
            </section>

             <section class="my-8 py-2">
                <RzHeading Level="HeadingLevel.H2" QuickReferenceTitle="JavaScript & Alpine.js API" class="scroll-mt-20">
                    JavaScript & Alpine.js API
                </RzHeading>
                <RzParagraph>
                    The modal's interactivity is primarily managed by the `rzModal` Alpine.js component. You can interact with it programmatically or listen to its lifecycle events.
                </RzParagraph>

                <RzHeading Level="HeadingLevel.H3" QuickReferenceTitle="Alpine Component" class="scroll-mt-20">Alpine Component (`x-data="rzModal"`)</RzHeading>
                <RzParagraph>
                    Attached to the modal's root `div` (inside the teleport template). It reads configuration from `data-*` attributes set by the Blazor component.
                </RzParagraph>
                 <div class="overflow-x-auto mb-6">
                    <table class="min-w-full divide-y divide-outline dark:divide-outlineDark">
                        <thead class="bg-surface-alt">
                            <tr>
                                <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-on-surface-strong uppercase tracking-wider">Property/Method</th>
                                <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-on-surface-strong uppercase tracking-wider">Description</th>
                            </tr>
                        </thead>
                        <tbody class="bg-surface divide-y divide-outline dark:divide-outlineDark">
                            <tr><td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-on-surface-strong">modalOpen</td><td class="px-6 py-4 text-sm text-on-surface">Boolean state variable indicating if the modal is currently visible.</td></tr>
                            <tr><td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-on-surface-strong">openModal(event = null)</td><td class="px-6 py-4 text-sm text-on-surface">Method to programmatically open the modal. Dispatches `rz:modal-before-open` (cancelable) and `rz:modal-after-open`.</td></tr>
                            <tr><td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-on-surface-strong">closeModal()</td><td class="px-6 py-4 text-sm text-on-surface">Method to programmatically close the modal. Called internally by Escape, backdrop click, close button, and close event. Dispatches `rz:modal-before-close` (cancelable) and `rz:modal-after-close`.</td></tr>
                             <tr><td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-on-surface-strong">modalId, bodyId, footerId</td><td class="px-6 py-4 text-sm text-on-surface">Read-only properties holding the IDs passed from Blazor, available in dispatched event details.</td></tr>
                        </tbody>
                    </table>
                </div>

                <RzHeading Level="HeadingLevel.H3" QuickReferenceTitle="Custom Events" class="scroll-mt-20">Custom Events</RzHeading>
                <RzParagraph>
                    The component dispatches events on its root element (`#@@UniqueId`) during its lifecycle. You can listen for these using `window.addEventListener` or Alpine's `x-on`.
                </RzParagraph>
                <div class="overflow-x-auto">
                     <table class="min-w-full divide-y divide-outline dark:divide-outlineDark">
                        <thead class="bg-surface-alt">
                            <tr>
                                <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-on-surface-strong uppercase tracking-wider">Event Name</th>
                                <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-on-surface-strong uppercase tracking-wider">Detail Structure</th>
                                <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-on-surface-strong uppercase tracking-wider">Cancelable?</th>
                                <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-on-surface-strong uppercase tracking-wider">Description</th>
                            </tr>
                        </thead>
                        <tbody class="bg-surface divide-y divide-outline dark:divide-outlineDark">
                            <tr><td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-on-surface-strong">@Constants.Events.ModalInitialized</td><td class="px-6 py-4 text-sm text-on-surface">`{ modalId, bodyId, footerId }`</td><td class="px-6 py-4 whitespace-nowrap text-sm text-on-surface">No</td><td class="px-6 py-4 text-sm text-on-surface">Fired once during Alpine `init`.</td></tr>
                            <tr><td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-on-surface-strong">@Constants.Events.ModalBeforeOpen</td><td class="px-6 py-4 text-sm text-on-surface">`{ modalId, originalEvent }`</td><td class="px-6 py-4 whitespace-nowrap text-sm text-on-surface">Yes</td><td class="px-6 py-4 text-sm text-on-surface">Fired before opening. Call `event.preventDefault()` to stop.</td></tr>
                            <tr><td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-on-surface-strong">@Constants.Events.ModalAfterOpen</td><td class="px-6 py-4 text-sm text-on-surface">`{ modalId }`</td><td class="px-6 py-4 whitespace-nowrap text-sm text-on-surface">No</td><td class="px-6 py-4 text-sm text-on-surface">Fired after opening transitions complete.</td></tr>
                            <tr><td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-on-surface-strong">@Constants.Events.ModalBeforeClose</td><td class="px-6 py-4 text-sm text-on-surface">`{ modalId, reason }`</td><td class="px-6 py-4 whitespace-nowrap text-sm text-on-surface">Yes</td><td class="px-6 py-4 text-sm text-on-surface">Fired before closing. Call `event.preventDefault()` to stop. `reason` indicates cause ('escape', 'backdrop', 'button', 'event').</td></tr>
                             <tr><td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-on-surface-strong">@Constants.Events.ModalAfterClose</td><td class="px-6 py-4 text-sm text-on-surface">`{ modalId }`</td><td class="px-6 py-4 whitespace-nowrap text-sm text-on-surface">No</td><td class="px-6 py-4 text-sm text-on-surface">Fired after closing transitions complete.</td></tr>
                        </tbody>
                    </table>
                </div>
                <RzParagraph class="mt-4">
                    Example: `window.addEventListener('@Constants.Events.ModalAfterOpen', (e) => { console.log('Modal opened:', e.detail.modalId); });`
                </RzParagraph>

                <RzHeading Level="HeadingLevel.H3" QuickReferenceTitle="Triggering Programmatically" class="scroll-mt-20">Triggering Programmatically</RzHeading>
                 <RzParagraph>
                    You can open or close the modal from JavaScript by dispatching the window events specified in the `EventTriggerName` or `CloseEventName` parameters respectively.
                </RzParagraph>
                 <RzCodeViewer Language="CodeLanguage.JavaScript" class="mb-10">
// To open a modal listening for 'show-my-modal'
window.dispatchEvent(new CustomEvent('show-my-modal', { detail: { /* optional data */ } }));

// To close a modal listening for the default '@Constants.Events.ModalClose'
window.dispatchEvent(new CustomEvent('@Constants.Events.ModalClose'));

// To close a specific modal listening for 'close-my-modal-xyz'
// (Note: The Alpine listener currently doesn't filter by detail, but could be modified)
window.dispatchEvent(new CustomEvent('close-my-modal-xyz', { detail: { /* optional data */ } }));
                </RzCodeViewer>

            </section>

        </MainContent>
    </RzArticle>
</RzQuickReferenceContainer>

@code {
    RzModal basicModalRef = default!;
    RzModal htmxLoadModalRef = default!;

    public void Dispose() { }
}
