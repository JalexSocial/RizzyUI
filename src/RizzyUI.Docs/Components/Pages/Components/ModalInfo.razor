
@page "/components/modal"
@using RizzyUI
@using Rizzy.Htmx
@implements IDisposable

<PageTitle>Modal Dialog</PageTitle>

<RzQuickReferenceContainer x-data="modalPageController">
    <RzArticle ProseWidth="ProseWidth.UltraWide">
        <SideContent>
            <RzQuickReference />
        </SideContent>
        <MainContent>
            <RzHeading Level="HeadingLevel.H1" class="scroll-mt-20">Modal Dialog</RzHeading>
            <RzParagraph>
                The RzModal component provides a flexible way to display modal dialogs. It leverages Alpine.js for client-side state management (open/closed), transitions, focus trapping, and standard closing mechanisms (Escape key, backdrop click, close button). It's designed to be pre-rendered in your Blazor markup and triggered via client-side window events. Importantly, its internal body and footer areas have stable IDs (`BodyId`, `FooterId`), allowing HTMX to dynamically load or update content within the modal after it's opened. Modals can also be closed programmatically or via HTMX response headers triggering a specific event.
            </RzParagraph>

            <RzAlert Variant="AlertVariant.Information" class="mb-6">
                <AlertTitle>Under the Hood</AlertTitle>
                <AlertDescription>
                    This component uses an Alpine.js component (`x-data="rzModal"`) to manage its state and interactions. It utilizes `&lt;template x-teleport="body">` to ensure the modal is rendered at the end of the document body, avoiding potential z-index issues.
                </AlertDescription>
            </RzAlert>

            <section class="my-8 py-2">
                <RzHeading Level="HeadingLevel.H2" QuickReferenceTitle="Basic Modal" class="scroll-mt-20">
                    Basic Modal Triggered by Event
                </RzHeading>
                <RzParagraph>
                    This example shows a standard modal pre-rendered on the page. Clicking the "Open Basic Modal" button dispatches a custom window event (`show-basic-modal`), which the `RzModal` component listens for via its `EventTriggerName` parameter.
                </RzParagraph>

                <div>
                    <div class="mx-auto p-8 mb-5 flex justify-center items-center min-h-40">
                        <RzButton x-on:click="showBasicModal">
                            Open Basic Modal
                        </RzButton>

                        <RzModal @ref="basicModalRef" EventTriggerName="show-basic-modal" Title="Basic Modal Example" Size="ModalSize.Large">
                            <ChildContent>
                                <p>This is the content of the basic modal.</p>
                                <p>You can close it using the 'X' button, pressing Escape, or clicking the backdrop.</p>
                            </ChildContent>
                            <FooterContent>
                                <div class="flex justify-end gap-2">
                                     <RzButton Variant="ButtonVariant.Accent" x-on:click="closeModal">Close (Alpine)</RzButton>
                                     <RzButton Variant="ButtonVariant.Primary">Okay</RzButton>
                                </div>
                            </FooterContent>
                        </RzModal>
                    </div>
                </div>

                <RzCodeViewer Language="@CodeLanguage.Razor" class="mb-10">
&lt;RzButton onclick=&quot;window.dispatchEvent(new CustomEvent(&#39;show-basic-modal&#39;))&quot;&gt;
    Open Basic Modal
&lt;/RzButton&gt;

&lt;RzModal @@ref=&quot;basicModalRef&quot; EventTriggerName=&quot;show-basic-modal&quot; Title=&quot;Basic Modal Example&quot; Size=&quot;ModalSize.Large&quot;&gt;
    &lt;ChildContent&gt;
        &lt;p&gt;This is the content of the basic modal.&lt;/p&gt;
        &lt;p&gt;You can close it using the &#39;X&#39; button, pressing Escape, or clicking the backdrop.&lt;/p&gt;
    &lt;/ChildContent&gt;
    &lt;FooterContent&gt;
        &lt;div class=&quot;flex justify-end gap-2&quot;&gt;
             &lt;RzButton Variant=&quot;ButtonVariant.Alternate&quot; x-on:click=&quot;closeModal&quot;&gt;Close (Alpine)&lt;/RzButton&gt;
             &lt;RzButton Variant=&quot;ButtonVariant.Primary&quot;&gt;Okay&lt;/RzButton&gt;
        &lt;/div&gt;
    &lt;/FooterContent&gt;
&lt;/RzModal&gt;

@@code {
    RzModal basicModalRef = default!;
}
                </RzCodeViewer>
            </section>

            <section class="my-8 py-2">
                <RzHeading Level="HeadingLevel.H2" QuickReferenceTitle="Customizing Appearance" class="scroll-mt-20">
                    Customizing Appearance
                </RzHeading>
                <RzParagraph>
                    You can customize the modal's appearance using parameters like `Size`, `ShowHeader`, `ShowCloseButton`, and providing custom `TitleContent`.
                </RzParagraph>

                <div>
                    <div class="mx-auto p-8 mb-5 flex justify-center items-center min-h-40 space-x-4">
                         <RzButton x-on:click="showSmallModal">
                            Open Small (No Header)
                        </RzButton>
                         <RzButton x-on:click="showCustomTitleModal">
                            Open Custom Title
                        </RzButton>

                        <RzModal EventTriggerName="show-small-modal" Size="ModalSize.Small" ShowHeader="false">
                            <ChildContent>
                                <p>This modal has no header or default close button.</p>
                                <div class="mt-4 text-right">
                                     <RzButton Variant="ButtonVariant.Accent" x-on:click="closeModal">Close Me</RzButton>
                                </div>
                            </ChildContent>
                        </RzModal>

                         <RzModal EventTriggerName="show-custom-title-modal" Size="ModalSize.Medium">
                             <TitleContent>
                                 <div class="flex items-center gap-2 font-semibold text-primary">
                                     <span class="size-5"><Blazicon Svg="MdiIcon.Information"/></span>
                                     <span>Important Information</span>
                                 </div>
                             </TitleContent>
                            <ChildContent>
                                <p>This modal uses custom `TitleContent` for the header.</p>
                            </ChildContent>
                        </RzModal>
                    </div>
                </div>

                <RzCodeViewer Language="@CodeLanguage.Razor" class="mb-10">
&lt;!-- Button to open small modal --&gt;
&lt;RzButton onclick=&quot;window.dispatchEvent(new CustomEvent(&#39;show-small-modal&#39;))&quot;&gt;
    Open Small (No Header)
&lt;/RzButton&gt;

&lt;!-- Small Modal without Header --&gt;
&lt;RzModal EventTriggerName=&quot;show-small-modal&quot; Size=&quot;ModalSize.Small&quot; ShowHeader=&quot;false&quot;&gt;
    &lt;ChildContent&gt;
        &lt;p&gt;This modal has no header or default close button.&lt;/p&gt;
        &lt;div class=&quot;mt-4 text-right&quot;&gt;
             &lt;RzButton Variant=&quot;ButtonVariant.Alternate&quot; x-on:click=&quot;closeModal&quot;&gt;Close Me&lt;/RzButton&gt;
        &lt;/div&gt;
    &lt;/ChildContent&gt;
&lt;/RzModal&gt;

&lt;!-- Button to open modal with custom title --&gt;
&lt;RzButton onclick=&quot;window.dispatchEvent(new CustomEvent(&#39;show-custom-title-modal&#39;))&quot;&gt;
    Open Custom Title
&lt;/RzButton&gt;

&lt;!-- Modal with Custom TitleContent --&gt;
&lt;RzModal EventTriggerName=&quot;show-custom-title-modal&quot; Size=&quot;ModalSize.Medium&quot;&gt;
    &lt;TitleContent&gt;
        &lt;div class=&quot;flex items-center gap-2 font-semibold text-primary&quot;&gt;
            &lt;Blazicons.MdiIcon Svg=&quot;Blazicons.MdiIcon.Information&quot; class=&quot;size-5&quot;/&gt;
            &lt;span&gt;Important Information&lt;/span&gt;
        &lt;/div&gt;
    &lt;/TitleContent&gt;
    &lt;ChildContent&gt;
        &lt;p&gt;This modal uses custom `TitleContent` for the header.&lt;/p&gt;
    &lt;/ChildContent&gt;
&lt;/RzModal&gt;
                </RzCodeViewer>
            </section>

            <section class="my-8 py-2">
                <RzHeading Level="HeadingLevel.H2" QuickReferenceTitle="HTMX Content Loading" class="scroll-mt-20">
                    HTMX Content Loading
                </RzHeading>
                <RzParagraph>
                    This demonstrates using HTMX to load content dynamically into the modal's body *after* the modal is opened via a client-side event. The button first triggers the modal open event, then initiates an HTMX GET request targeting the modal's specific `BodyId`. The content is loaded from a static Blazor page created for this demo.
                </RzParagraph>

                <div>
                    <div class="mx-auto p-8 mb-5 flex justify-center items-center min-h-40">
                        <RzButton hx-get="/demo/htmx-modal-sample"
                                  hx-target="@($"#{htmxLoadModalRef?.BodyId}")"
                                  hx-swap="innerHTML"
                                  x-on:click="showHtmxLoadModal">
                            Open & Load Content via HTMX
                        </RzButton>

                        <RzModal @ref="htmxLoadModalRef" EventTriggerName="show-htmx-load-modal" Title="HTMX Loaded Content">
                            <ChildContent>
                                <div class="text-center p-4">
                                    <RzSpinner Size="Size.Large"/>
                                    <p class="mt-2">Loading content...</p>
                                </div>
                            </ChildContent>
                        </RzModal>
                    </div>
                </div>

                <RzCodeViewer Language="@CodeLanguage.Razor" class="mb-10" Title="Blazor Component">
&lt;RzButton hx-get=&quot;/demo/htmx-modal-sample&quot;
          hx-target=&quot;#@htmxLoadModalRef?.BodyId&quot; 
          hx-swap=&quot;innerHTML&quot;
          onclick=&quot;window.dispatchEvent(new CustomEvent(&#39;show-htmx-load-modal&#39;))&quot;&gt;
    Open &amp; Load Content via HTMX
&lt;/RzButton&gt;

&lt;RzModal @@ref=&quot;htmxLoadModalRef&quot; EventTriggerName=&quot;show-htmx-load-modal&quot; Title=&quot;HTMX Loaded Content&quot;&gt;
    &lt;ChildContent&gt;
        &lt;div class=&quot;text-center p-4&quot;&gt;
            &lt;RzSpinner Size=&quot;Size.Large&quot;/&gt;
            &lt;p class=&quot;mt-2&quot;&gt;Loading content...&lt;/p&gt;
        &lt;/div&gt;
    &lt;/ChildContent&gt;
&lt;/RzModal&gt;

@@code {
    RzModal htmxLoadModalRef = default!;
}
                </RzCodeViewer>
                 <RzCodeViewer Language="@CodeLanguage.Razor" class="mb-10" Title="Demo Content Page (/demo/htmx-modal-sample)">
@@page &quot;/demo/htmx-modal-sample&quot;
@@layout RizzyUI.Docs.Components.Layout.EmptyLayout
@@using RizzyUI

&lt;p&gt;This content was loaded dynamically via an HTMX request!&lt;/p&gt;
&lt;RzAlert Variant=&quot;AlertVariant.Success&quot;&gt;
    &lt;AlertTitle&gt;Success&lt;/AlertTitle&gt;
    &lt;AlertDescription&gt;Content loaded successfully.&lt;/AlertDescription&gt;
&lt;/RzAlert&gt;
                </RzCodeViewer>
            </section>

             <section class="my-8 py-2">
                <RzHeading Level="HeadingLevel.H2" QuickReferenceTitle="Closing with HTMX" class="scroll-mt-20">
                    Closing with HTMX
                </RzHeading>
                <RzParagraph>
                    Modals can be closed from the server by returning an HTMX response header that triggers the event specified in the `CloseEventName` parameter (default: `rz:modal-close`). This example shows a form inside the modal; upon successful submission, the server sends back the trigger header.
                </RzParagraph>

                <RzAlert Variant="AlertVariant.Warning" class="mb-6">
                   <AlertTitle>Static Documentation Limitation</AlertTitle>
                   <AlertDescription>
                       This specific "Close via HTMX Header" example requires server-side processing to send the `HX-Trigger` response header. Since this documentation is rendered as static HTML, clicking the "Submit & Close" button below will not actually close the modal in this demo environment. It demonstrates the client-side setup and the expected server-side response.
                   </AlertDescription>
               </RzAlert>

                <div>
                     <div class="mx-auto p-8 mb-5 flex justify-center items-center min-h-40">
                         <RzButton onclick="window.dispatchEvent(new CustomEvent('show-htmx-close-modal'))">
                             Open HTMX Close Example
                        </RzButton>

                         <RzModal EventTriggerName="show-htmx-close-modal" Title="Close via HTMX Header">
                             <ChildContent>
                                 <form hx-post="/api/modal/htmx-close-action"
                                       hx-target="this"
                                       hx-swap="outerHTML">
                                     <p>Submit this form. The server response will include an HX-Trigger header to close this modal (requires live server).</p>
                                     <div class="text-right mt-4">
                                         <RzButton type="submit" Variant="ButtonVariant.Success">Submit & Close</RzButton>
                                     </div>
                                 </form>
                             </ChildContent>
                         </RzModal>
                     </div>
                </div>

                 <RzCodeViewer Language="@CodeLanguage.Razor" class="mb-10" Title="Blazor Component">
&lt;RzButton onclick=&quot;window.dispatchEvent(new CustomEvent(&#39;show-htmx-close-modal&#39;))&quot;&gt;
    Open HTMX Close Example
&lt;/RzButton&gt;

&lt;RzModal EventTriggerName=&quot;show-htmx-close-modal&quot; Title=&quot;Close via HTMX Header&quot; CloseEventName=&quot;rz:modal-close&quot;&gt;
    &lt;ChildContent&gt;
        &lt;form hx-post=&quot;/api/modal/htmx-close-action&quot;
              hx-target=&quot;this&quot;
              hx-swap=&quot;outerHTML&quot;&gt;
            &lt;p&gt;Submit this form. The server response will include an HX-Trigger header to close this modal.&lt;/p&gt;
            &lt;div class=&quot;text-right mt-4&quot;&gt;
                &lt;RzButton type=&quot;submit&quot; Variant=&quot;ButtonVariant.Success&quot;&gt;Submit &amp; Close&lt;/RzButton&gt;
            &lt;/div&gt;
        &lt;/form&gt;
    &lt;/ChildContent&gt;
&lt;/RzModal&gt;
                 </RzCodeViewer>
                <RzCodeViewer Language="@CodeLanguage.CSharp" class="mb-10" Title="Example Controller Action (using RzController)">
[HttpPost(&quot;/api/modal/htmx-close-action&quot;)]
public IResult CloseModalAction()
{
    // Process form data if needed...

    // Add the HX-Trigger header to close the modal
    // Uses the event name &#39;rz:modal-close&#39; (matches RzModal default or explicit parameter)
    HttpContext.Response.Htmx(h =&gt; h.Trigger(RizzyUI.Constants.Events.ModalClose));

    // Can return swapped content for the form, or just Ok/NoContent if only closing
    return Ok(&quot;&lt;p&gt;Form Submitted! Modal closed by server.&lt;/p&gt;&quot;); 
}
                </RzCodeViewer>
            </section>

            <section class="my-8 py-2">
                <RzHeading Level="HeadingLevel.H2" QuickReferenceTitle="Component Parameters" class="scroll-mt-20">
                    RzModal Component Parameters
                </RzHeading>
                <RzParagraph>
                    The following table summarizes the key parameters for the RzModal component.
                </RzParagraph>

                <div class="not-prose mt-6 mb-10 overflow-hidden rounded-md border border-zinc-200 dark:border-zinc-800">
                    <table class="w-full text-sm">
                        <thead class="text-left bg-zinc-100/75 font-semibold text-zinc-700 dark:bg-zinc-900/50 dark:text-zinc-300">
                            <tr>
                                <th scope="col" class="w-1/5 px-4 py-3">Property</th>
                                <th scope="col" class="w-2/5 px-4 py-3">Description</th>
                                <th scope="col" class="w-1/5 px-4 py-3">Type</th>
                                <th scope="col" class="px-4 py-3">Default</th>
                            </tr>
                        </thead>
                        <tbody class="divide-y divide-zinc-200 dark:divide-zinc-800">
                             <tr class="align-top">
                                <td class="px-4 py-4"><code class="font-mono font-medium text-sky-600 dark:text-sky-400">Id</code></td>
                                <td class="px-4 py-4 text-zinc-600 dark:text-zinc-400">Read-only. The unique ID for the main modal <code class="rounded-md bg-zinc-100 px-1.5 py-0.5 font-mono text-sm font-semibold text-zinc-700 dark:bg-zinc-800 dark:text-zinc-200">x-data</code> container div. Passed in event details.</td>
                                <td class="px-4 py-4"><code class="font-mono text-violet-600 dark:text-violet-400">string</code></td>
                                <td class="px-4 py-4 text-zinc-500"><code class="font-mono">(Generated)</code></td>
                            </tr>
                             <tr class="align-top">
                                <td class="px-4 py-4"><code class="font-mono font-medium text-sky-600 dark:text-sky-400">BodyId</code></td>
                                <td class="px-4 py-4 text-zinc-600 dark:text-zinc-400">Read-only. ID for the modal body <code class="rounded-md bg-zinc-100 px-1.5 py-0.5 font-mono text-sm font-semibold text-zinc-700 dark:bg-zinc-800 dark:text-zinc-200">div</code>. Use this as <code class="rounded-md bg-zinc-100 px-1.5 py-0.5 font-mono text-sm font-semibold text-zinc-700 dark:bg-zinc-800 dark:text-zinc-200">hx-target</code> for HTMX swaps into the body. Passed in <code class="rounded-md bg-zinc-100 px-1.5 py-0.5 font-mono text-sm font-semibold text-zinc-700 dark:bg-zinc-800 dark:text-zinc-200">rz:modal-initialized</code> event detail.</td>
                                <td class="px-4 py-4"><code class="font-mono text-violet-600 dark:text-violet-400">string</code></td>
                                <td class="px-4 py-4 text-zinc-500"><code class="font-mono">(Generated)</code></td>
                            </tr>
                             <tr class="align-top">
                                <td class="px-4 py-4"><code class="font-mono font-medium text-sky-600 dark:text-sky-400">FooterId</code></td>
                                <td class="px-4 py-4 text-zinc-600 dark:text-zinc-400">Read-only. ID for the modal footer <code class="rounded-md bg-zinc-100 px-1.5 py-0.5 font-mono text-sm font-semibold text-zinc-700 dark:bg-zinc-800 dark:text-zinc-200">div</code>. Use this as <code class="rounded-md bg-zinc-100 px-1.5 py-0.5 font-mono text-sm font-semibold text-zinc-700 dark:bg-zinc-800 dark:text-zinc-200">hx-target</code> for HTMX swaps into the footer. Passed in <code class="rounded-md bg-zinc-100 px-1.5 py-0.5 font-mono text-sm font-semibold text-zinc-700 dark:bg-zinc-800 dark:text-zinc-200">rz:modal-initialized</code> event detail.</td>
                                <td class="px-4 py-4"><code class="font-mono text-violet-600 dark:text-violet-400">string</code></td>
                                <td class="px-4 py-4 text-zinc-500"><code class="font-mono">(Generated)</code></td>
                            </tr>
                             <tr class="align-top">
                                <td class="px-4 py-4"><code class="font-mono font-medium text-sky-600 dark:text-sky-400">EventTriggerName</code></td>
                                <td class="px-4 py-4 text-zinc-600 dark:text-zinc-400">Name of the <code class="rounded-md bg-zinc-100 px-1.5 py-0.5 font-mono text-sm font-semibold text-zinc-700 dark:bg-zinc-800 dark:text-zinc-200">window</code> event that will trigger the modal to open.</td>
                                <td class="px-4 py-4"><code class="font-mono text-violet-600 dark:text-violet-400">string</code></td>
                                <td class="px-4 py-4 text-zinc-500"><code class="font-mono">""</code> (Empty String)</td>
                            </tr>
                            <tr class="align-top">
                                <td class="px-4 py-4"><code class="font-mono font-medium text-sky-600 dark:text-sky-400">CloseEventName</code></td>
                                <td class="px-4 py-4 text-zinc-600 dark:text-zinc-400">Name of the <code class="rounded-md bg-zinc-100 px-1.5 py-0.5 font-mono text-sm font-semibold text-zinc-700 dark:bg-zinc-800 dark:text-zinc-200">window</code> event that will trigger this modal to close (e.g., from an HTMX response header).</td>
                                <td class="px-4 py-4"><code class="font-mono text-violet-600 dark:text-violet-400">string</code></td>
                                <td class="px-4 py-4 text-zinc-500"><code class="font-mono">@Constants.Events.ModalClose</code></td>
                            </tr>
                            <tr class="align-top">
                                <td class="px-4 py-4"><code class="font-mono font-medium text-sky-600 dark:text-sky-400">Title</code></td>
                                <td class="px-4 py-4 text-zinc-600 dark:text-zinc-400">Optional title text for the modal header. Ignored if <code class="rounded-md bg-zinc-100 px-1.5 py-0.5 font-mono text-sm font-semibold text-zinc-700 dark:bg-zinc-800 dark:text-zinc-200">TitleContent</code> is provided.</td>
                                <td class="px-4 py-4"><code class="font-mono text-violet-600 dark:text-violet-400">string?</code></td>
                                <td class="px-4 py-4 text-zinc-500"><code class="font-mono">null</code></td>
                            </tr>
                             <tr class="align-top">
                                <td class="px-4 py-4"><code class="font-mono font-medium text-sky-600 dark:text-sky-400">Size</code></td>
                                <td class="px-4 py-4 text-zinc-600 dark:text-zinc-400">Specifies the maximum width of the modal dialog.</td>
                                <td class="px-4 py-4"><code class="font-mono text-violet-600 dark:text-violet-400">ModalSize</code></td>
                                <td class="px-4 py-4 text-zinc-500"><code class="font-mono">ModalSize.Medium</code></td>
                            </tr>
                             <tr class="align-top">
                                <td class="px-4 py-4"><code class="font-mono font-medium text-sky-600 dark:text-sky-400">TitleContent</code></td>
                                <td class="px-4 py-4 text-zinc-600 dark:text-zinc-400">Optional custom content for the modal header title area. Overrides <code class="rounded-md bg-zinc-100 px-1.5 py-0.5 font-mono text-sm font-semibold text-zinc-700 dark:bg-zinc-800 dark:text-zinc-200">Title</code>.</td>
                                <td class="px-4 py-4"><code class="font-mono text-violet-600 dark:text-violet-400">RenderFragment?</code></td>
                                <td class="px-4 py-4 text-zinc-500"><code class="font-mono">null</code></td>
                            </tr>
                             <tr class="align-top">
                                <td class="px-4 py-4"><code class="font-mono font-medium text-sky-600 dark:text-sky-400">ChildContent</code></td>
                                <td class="px-4 py-4 text-zinc-600 dark:text-zinc-400">The main content displayed in the modal body. Can be targeted by HTMX using <code class="rounded-md bg-zinc-100 px-1.5 py-0.5 font-mono text-sm font-semibold text-zinc-700 dark:bg-zinc-800 dark:text-zinc-200">BodyId</code>.</td>
                                <td class="px-4 py-4"><code class="font-mono text-violet-600 dark:text-violet-400">RenderFragment?</code></td>
                                <td class="px-4 py-4 text-zinc-500"><code class="font-mono">null</code></td>
                            </tr>
                             <tr class="align-top">
                                <td class="px-4 py-4"><code class="font-mono font-medium text-sky-600 dark:text-sky-400">FooterContent</code></td>
                                <td class="px-4 py-4 text-zinc-600 dark:text-zinc-400">Optional content displayed in the modal footer. Can be targeted by HTMX using <code class="rounded-md bg-zinc-100 px-1.5 py-0.5 font-mono text-sm font-semibold text-zinc-700 dark:bg-zinc-800 dark:text-zinc-200">FooterId</code>.</td>
                                <td class="px-4 py-4"><code class="font-mono text-violet-600 dark:text-violet-400">RenderFragment?</code></td>
                                <td class="px-4 py-4 text-zinc-500"><code class="font-mono">null</code></td>
                            </tr>
                            <tr class="align-top">
                                <td class="px-4 py-4"><code class="font-mono font-medium text-sky-600 dark:text-sky-400">CloseOnEscape</code></td>
                                <td class="px-4 py-4 text-zinc-600 dark:text-zinc-400">If true, the modal closes when the Escape key is pressed. Configures the Alpine component.</td>
                                <td class="px-4 py-4"><code class="font-mono text-violet-600 dark:text-violet-400">bool</code></td>
                                <td class="px-4 py-4 text-zinc-500"><code class="font-mono">true</code></td>
                            </tr>
                             <tr class="align-top">
                                <td class="px-4 py-4"><code class="font-mono font-medium text-sky-600 dark:text-sky-400">CloseOnClickOutside</code></td>
                                <td class="px-4 py-4 text-zinc-600 dark:text-zinc-400">If true, the modal closes when clicking on the backdrop. Configures the Alpine component.</td>
                                <td class="px-4 py-4"><code class="font-mono text-violet-600 dark:text-violet-400">bool</code></td>
                                <td class="px-4 py-4 text-zinc-500"><code class="font-mono">true</code></td>
                            </tr>
                              <tr class="align-top">
                                <td class="px-4 py-4"><code class="font-mono font-medium text-sky-600 dark:text-sky-400">ShowHeader</code></td>
                                <td class="px-4 py-4 text-zinc-600 dark:text-zinc-400">If true, the modal header section (including title and close button container) is rendered.</td>
                                <td class="px-4 py-4"><code class="font-mono text-violet-600 dark:text-violet-400">bool</code></td>
                                <td class="px-4 py-4 text-zinc-500"><code class="font-mono">true</code></td>
                            </tr>
                             <tr class="align-top">
                                <td class="px-4 py-4"><code class="font-mono font-medium text-sky-600 dark:text-sky-400">ShowCloseButton</code></td>
                                <td class="px-4 py-4 text-zinc-600 dark:text-zinc-400">If true (and <code class="rounded-md bg-zinc-100 px-1.5 py-0.5 font-mono text-sm font-semibold text-zinc-700 dark:bg-zinc-800 dark:text-zinc-200">ShowHeader</code> is true), the default 'X' close button is rendered in the header.</td>
                                <td class="px-4 py-4"><code class="font-mono text-violet-600 dark:text-violet-400">bool</code></td>
                                <td class="px-4 py-4 text-zinc-500"><code class="font-mono">true</code></td>
                            </tr>
                        </tbody>
                    </table>
                </div>
            </section>

             <section class="my-8 py-2">
                <RzHeading Level="HeadingLevel.H2" QuickReferenceTitle="JavaScript & Alpine.js API" class="scroll-mt-20">
                    JavaScript & Alpine.js API
                </RzHeading>
                <RzParagraph>
                    The modal's interactivity is primarily managed by the <code class="rounded-md bg-zinc-100 px-1.5 py-0.5 font-mono text-sm font-semibold text-zinc-700 dark:bg-zinc-800 dark:text-zinc-200">rzModal</code> Alpine.js component. You can interact with it programmatically or listen to its lifecycle events.
                </RzParagraph>

                <RzHeading Level="HeadingLevel.H3" QuickReferenceTitle="Alpine Component" class="scroll-mt-20">Alpine Component (<code class="rounded-md bg-zinc-100 px-1.5 py-0.5 font-mono text-sm font-semibold text-zinc-700 dark:bg-zinc-800 dark:text-zinc-200">x-data="rzModal"</code>)</RzHeading>
                <RzParagraph>
                    Attached to the modal's root <code class="rounded-md bg-zinc-100 px-1.5 py-0.5 font-mono text-sm font-semibold text-zinc-700 dark:bg-zinc-800 dark:text-zinc-200">div</code> (inside the teleport template). It reads configuration from <code class="rounded-md bg-zinc-100 px-1.5 py-0.5 font-mono text-sm font-semibold text-zinc-700 dark:bg-zinc-800 dark:text-zinc-200">data-*</code> attributes set by the Blazor component.
                </RzParagraph>
                 <div class="not-prose mt-6 mb-6 overflow-hidden rounded-md border border-zinc-200 dark:border-zinc-800">
                    <table class="w-full text-sm">
                        <thead class="text-left bg-zinc-100/75 font-semibold text-zinc-700 dark:bg-zinc-900/50 dark:text-zinc-300">
                            <tr>
                                <th scope="col" class="w-1/5 px-4 py-3">Property/Method</th>
                                <th scope="col" class="w-4/5 px-4 py-3">Description</th>
                            </tr>
                        </thead>
                        <tbody class="divide-y divide-zinc-200 dark:divide-zinc-800">
                            <tr class="align-top"><td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-sky-600 dark:text-sky-400">modalOpen</td><td class="px-6 py-4 text-zinc-600 dark:text-zinc-400">Boolean state variable indicating if the modal is currently visible.</td></tr>
                            <tr class="align-top"><td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-sky-600 dark:text-sky-400">eventTriggerName</td><td class="px-6 py-4 text-zinc-600 dark:text-zinc-400">Name of the window event that triggers the modal to open.</td></tr>
                            <tr class="align-top"><td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-sky-600 dark:text-sky-400">closeEventName</td><td class="px-6 py-4 text-zinc-600 dark:text-zinc-400">Name of the window event that triggers the modal to close.</td></tr>
                            <tr class="align-top"><td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-sky-600 dark:text-sky-400">closeOnEscape</td><td class="px-6 py-4 text-zinc-600 dark:text-zinc-400">Boolean that controls whether the modal closes when Escape key is pressed.</td></tr>
                            <tr class="align-top"><td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-sky-600 dark:text-sky-400">closeOnClickOutside</td><td class="px-6 py-4 text-zinc-600 dark:text-zinc-400">Boolean that controls whether the modal closes when clicking outside the dialog.</td></tr>
                            <tr class="align-top"><td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-sky-600 dark:text-sky-400">modalId, bodyId, footerId</td><td class="px-6 py-4 text-zinc-600 dark:text-zinc-400">Read-only properties holding the generated IDs for the modal elements, available in dispatched event details.</td></tr>
                            <tr class="align-top"><td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-sky-600 dark:text-sky-400">openModal(event = null)</td><td class="px-6 py-4 text-zinc-600 dark:text-zinc-400">Method to programmatically open the modal. Dispatches <code class="rounded-md bg-zinc-100 px-1.5 py-0.5 font-mono text-sm font-semibold text-zinc-700 dark:bg-zinc-800 dark:text-zinc-200">rz:modal-before-open</code> (cancelable) and if not prevented, sets modalOpen to true.</td></tr>
                            <tr class="align-top"><td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-sky-600 dark:text-sky-400">closeModal()</td><td class="px-6 py-4 text-zinc-600 dark:text-zinc-400">Public method to close the modal from the close button. Internally calls closeModalInternally with reason 'button'.</td></tr>
                            <tr class="align-top"><td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-sky-600 dark:text-sky-400">closeModalInternally(reason)</td><td class="px-6 py-4 text-zinc-600 dark:text-zinc-400">Internal method that handles closing the modal with a specific reason ('button', 'escape', 'backdrop', 'event'). Dispatches <code class="rounded-md bg-zinc-100 px-1.5 py-0.5 font-mono text-sm font-semibold text-zinc-700 dark:bg-zinc-800 dark:text-zinc-200">rz:modal-before-close</code> (cancelable).</td></tr>
                            <tr class="align-top"><td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-sky-600 dark:text-sky-400">handleClickOutside()</td><td class="px-6 py-4 text-zinc-600 dark:text-zinc-400">Method called by click.outside event handler. Checks closeOnClickOutside setting before closing.</td></tr>
                            <tr class="align-top"><td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-sky-600 dark:text-sky-400">notModalOpen()</td><td class="px-6 py-4 text-zinc-600 dark:text-zinc-400">Helper method that returns !modalOpen, useful for x-show directives.</td></tr>
                        </tbody>
                    </table>
                </div>

                <RzHeading Level="HeadingLevel.H3" QuickReferenceTitle="Custom Events" class="scroll-mt-20">Custom Events</RzHeading>
                <RzParagraph>
                    The component dispatches events on its root element (<code class="rounded-md bg-zinc-100 px-1.5 py-0.5 font-mono text-sm font-semibold text-zinc-700 dark:bg-zinc-800 dark:text-zinc-200">#@@Id</code>) during its lifecycle. You can listen for these using <code class="rounded-md bg-zinc-100 px-1.5 py-0.5 font-mono text-sm font-semibold text-zinc-700 dark:bg-zinc-800 dark:text-zinc-200">window.addEventListener</code> or Alpine's <code class="rounded-md bg-zinc-100 px-1.5 py-0.5 font-mono text-sm font-semibold text-zinc-700 dark:bg-zinc-800 dark:text-zinc-200">x-on</code>.
                </RzParagraph>
                <div class="not-prose mt-6 mb-10 overflow-hidden rounded-md border border-zinc-200 dark:border-zinc-800">
                     <table class="w-full text-sm">
                        <thead class="text-left bg-zinc-100/75 font-semibold text-zinc-700 dark:bg-zinc-900/50 dark:text-zinc-300">
                            <tr>
                                <th scope="col" class="w-1/5 px-4 py-3">Event Name</th>
                                <th scope="col" class="w-2/5 px-4 py-3">Detail Structure</th>
                                <th scope="col" class="w-1/5 px-4 py-3">Cancelable?</th>
                                <th scope="col" class="px-4 py-3">Description</th>
                            </tr>
                        </thead>
                        <tbody class="divide-y divide-zinc-200 dark:divide-zinc-800">
                            <tr class="align-top"><td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-sky-600 dark:text-sky-400">@Constants.Events.ModalInitialized</td><td class="px-6 py-4 text-zinc-600 dark:text-zinc-400"><code class="rounded-md bg-zinc-100 px-1.5 py-0.5 font-mono text-sm font-semibold text-zinc-700 dark:bg-zinc-800 dark:text-zinc-200">{ modalId, bodyId, footerId }</code></td><td class="px-6 py-4 text-zinc-600 dark:text-zinc-400">No</td><td class="px-6 py-4 text-zinc-600 dark:text-zinc-400">Fired once during Alpine <code class="rounded-md bg-zinc-100 px-1.5 py-0.5 font-mono text-sm font-semibold text-zinc-700 dark:bg-zinc-800 dark:text-zinc-200">init</code>.</td></tr>
                            <tr class="align-top"><td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-sky-600 dark:text-sky-400">@Constants.Events.ModalBeforeOpen</td><td class="px-6 py-4 text-zinc-600 dark:text-zinc-400"><code class="rounded-md bg-zinc-100 px-1.5 py-0.5 font-mono text-sm font-semibold text-zinc-700 dark:bg-zinc-800 dark:text-zinc-200">{ modalId, originalEvent }</code></td><td class="px-6 py-4 text-zinc-600 dark:text-zinc-400">Yes</td><td class="px-6 py-4 text-zinc-600 dark:text-zinc-400">Fired before opening. Call <code class="rounded-md bg-zinc-100 px-1.5 py-0.5 font-mono text-sm font-semibold text-zinc-700 dark:bg-zinc-800 dark:text-zinc-200">event.preventDefault()</code> to stop.</td></tr>
                            <tr class="align-top"><td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-sky-600 dark:text-sky-400">@Constants.Events.ModalAfterOpen</td><td class="px-6 py-4 text-zinc-600 dark:text-zinc-400"><code class="rounded-md bg-zinc-100 px-1.5 py-0.5 font-mono text-sm font-semibold text-zinc-700 dark:bg-zinc-800 dark:text-zinc-200">{ modalId }</code></td><td class="px-6 py-4 text-zinc-600 dark:text-zinc-400">No</td><td class="px-6 py-4 text-zinc-600 dark:text-zinc-400">Fired after opening transitions complete.</td></tr>
                            <tr class="align-top"><td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-sky-600 dark:text-sky-400">@Constants.Events.ModalBeforeClose</td><td class="px-6 py-4 text-zinc-600 dark:text-zinc-400"><code class="rounded-md bg-zinc-100 px-1.5 py-0.5 font-mono text-sm font-semibold text-zinc-700 dark:bg-zinc-800 dark:text-zinc-200">{ modalId, reason }</code></td><td class="px-6 py-4 text-zinc-600 dark:text-zinc-400">Yes</td><td class="px-6 py-4 text-zinc-600 dark:text-zinc-400">Fired before closing. Call <code class="rounded-md bg-zinc-100 px-1.5 py-0.5 font-mono text-sm font-semibold text-zinc-700 dark:bg-zinc-800 dark:text-zinc-200">event.preventDefault()</code> to stop. <code class="rounded-md bg-zinc-100 px-1.5 py-0.5 font-mono text-sm font-semibold text-zinc-700 dark:bg-zinc-800 dark:text-zinc-200">reason</code> indicates cause ('escape', 'backdrop', 'button', 'event').</td></tr>
                            <tr class="align-top"><td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-sky-600 dark:text-sky-400">@Constants.Events.ModalAfterClose</td><td class="px-6 py-4 text-zinc-600 dark:text-zinc-400"><code class="rounded-md bg-zinc-100 px-1.5 py-0.5 font-mono text-sm font-semibold text-zinc-700 dark:bg-zinc-800 dark:text-zinc-200">{ modalId }</code></td><td class="px-6 py-4 text-zinc-600 dark:text-zinc-400">No</td><td class="px-6 py-4 text-zinc-600 dark:text-zinc-400">Fired after closing transitions complete.</td></tr>
                        </tbody>
                    </table>
                </div>
                <RzParagraph class="mt-4">
                    Example: <code class="rounded-md bg-zinc-100 px-1.5 py-0.5 font-mono text-sm font-semibold text-zinc-700 dark:bg-zinc-800 dark:text-zinc-200">window.addEventListener('@Constants.Events.ModalAfterOpen', (e) => { console.log('Modal opened:', e.detail.modalId); });</code>
                </RzParagraph>

                <RzHeading Level="HeadingLevel.H3" QuickReferenceTitle="Triggering Programmatically" class="scroll-mt-20">Triggering Programmatically</RzHeading>
                 <RzParagraph>
                    You can open or close the modal from JavaScript by dispatching the window events specified in the <code class="rounded-md bg-zinc-100 px-1.5 py-0.5 font-mono text-sm font-semibold text-zinc-700 dark:bg-zinc-800 dark:text-zinc-200">EventTriggerName</code> or <code class="rounded-md bg-zinc-100 px-1.5 py-0.5 font-mono text-sm font-semibold text-zinc-700 dark:bg-zinc-800 dark:text-zinc-200">CloseEventName</code> parameters respectively.
                </RzParagraph>
                 <RzCodeViewer Language="@CodeLanguage.JavaScript" class="mb-10">
// To open a modal listening for 'show-my-modal'
window.dispatchEvent(new CustomEvent('show-my-modal', { detail: { /* optional data */ } }));

// To close a modal listening for the default '@Constants.Events.ModalClose'
window.dispatchEvent(new CustomEvent('@Constants.Events.ModalClose'));

// To close a specific modal listening for 'close-my-modal-xyz'
window.dispatchEvent(new CustomEvent('close-my-modal-xyz', { detail: { /* optional data */ } }));
                </RzCodeViewer>

                <RzHeading Level="HeadingLevel.H3" QuickReferenceTitle="Alpine.js Access" class="scroll-mt-20">Alpine.js Direct Access</RzHeading>
                <RzParagraph>
                    You can directly interact with the modal from other Alpine.js components or event handlers:
                </RzParagraph>
                <RzCodeViewer Language="@CodeLanguage.JavaScript" class="mb-10">
// In an event handler or another Alpine component
// Get the modal's Alpine data context
const modalElement = document.getElementById('my-modal-id');
const modalData = Alpine.$data(modalElement);

// Open or close programmatically
modalData.openModal();
modalData.closeModal();

// Check if modal is open
const isOpen = modalData.modalOpen;
                </RzCodeViewer>
            </section>

        </MainContent>
    </RzArticle>
</RzQuickReferenceContainer>

@code {
    RzModal basicModalRef = default!;
    RzModal htmxLoadModalRef = default!;

    public void Dispose() { }
}