@page "/components/textedit"
@namespace RizzyUI.Pages
@using Rizzy.Components
@using RizzyUI
@using RizzyUI.Extensions
@using Blazicons
@using RizzyUI.Docs.Models
@inherits RzComponent

<PageTitle>RzTextEdit</PageTitle>

<RzQuickReferenceContainer>
    <RzArticle ProseWidth="ProseWidth.UltraWide">
        <SideContent>
            <RzQuickReference />
        </SideContent>
        <MainContent>
            <!-- Page Title and Overview -->
            <RzHeading Level="HeadingLevel.H1" class="scroll-mt-20">
                RzTextEdit and RzTextField
            </RzHeading>
            <RzParagraph>
                The <code>RzTextEdit</code> component provides basic text input functionality with support for prepend text or icons.
                It is intended as a low‑level input element for use within our form field components.
                The <code>RzTextField</code> component wraps <code>RzTextEdit</code> along with a label, help text, and validation messages,
                creating a complete form field experience. Both components are used within an <code>EditForm</code> to enable model binding and validation.
            </RzParagraph>
            
            <RzAlert Variant="AlertVariant.Information" Pulse>
                <AlertTitle>Special Note</AlertTitle>
                <AlertDescription>RizzyUI form controls depend on the Rizzy library for form control support. RizzyUI form controls provide client-side data annotations validation. <RzLink Href="https://jalexsocial.github.io/rizzy.docs/docs/forms/overview/" target="_blank">Click here for specific Rizzy form control documentation.</RzLink></AlertDescription>
            </RzAlert>

            <!-- Example 1: RzTextEdit Usage -->
            <section class="my-8 py-2">
                <RzHeading Level="HeadingLevel.H2" QuickReferenceTitle="RzTextEdit Example" class="scroll-mt-20">
                    RzTextEdit Example
                </RzHeading>
                <RzParagraph>
                    In the example below an <code>EditForm</code> is used with a single field that demonstrates the <code>RzTextEdit</code> component.
                    A prepend text of <code>@@</code> is applied to indicate that the field expects an email address.
                </RzParagraph>

                <RzBrowser Layout="typeof(PreviewLayout)">
	                <div class="mx-auto p-5">
		                <EditForm Model="Model" class="form-children-spacing">
                            <DataAnnotationsValidator/>
                            <RzInitialValidator/>
                            <RzValidationSummary/>

			                <RzField>
				                <RzFieldLabel DisplayName="Name" For="@(() => Model.Name)"></RzFieldLabel>
				                <RzTextEdit For="@(() => Model.Name)"/>
				                <RzValidationMessage For="@(() => Model.Name)"/>
			                </RzField>

			                <RzField>
				                <RzFieldLabel DisplayName="Email" For="@(() => Model.Email)"></RzFieldLabel>
				                <RzTextEdit For="@(() => Model.Email)" PrependText="@("@")"/>
				                <RzValidationMessage For="@(() => Model.Email)"/>
			                </RzField>

		                </EditForm>
	                </div>
                </RzBrowser>

                <RzCodeViewer Language="@CodeLanguage.Razor" class="mb-10">
&lt;EditForm Model="Model" class="form-children-spacing"&gt;
    &lt;RzValidationSummary /&gt;

    &lt;RzField&gt;
        &lt;RzFieldLabel DisplayName="Name" For="@@(() =&gt; Model.Name)"&gt;&lt;/RzFieldLabel&gt;
        &lt;RzTextEdit For="@@(() =&gt; Model.Name)"/&gt;
        &lt;RzValidationMessage For="@@(() =&gt; Model.Name)" /&gt;
    &lt;/RzField&gt;
	
    &lt;RzField&gt;
        &lt;RzFieldLabel DisplayName="Email" For="@@(() =&gt; Model.Email)"&gt;&lt;/RzFieldLabel&gt;
        &lt;RzTextEdit For="@@(() =&gt; Model.Email)" PrependText="@@("@@")" /&gt;
        &lt;RzValidationMessage For="@@(() =&gt; Model.Email)" /&gt;
    &lt;/RzField&gt;

&lt;/EditForm&gt;
                </RzCodeViewer>
            </section>

            <!-- Example 2: RzTextField Usage -->
            <section class="my-8 py-2">
                <RzHeading Level="HeadingLevel.H2" QuickReferenceTitle="RzTextField Example" class="scroll-mt-20">
                    RzTextField Example
                </RzHeading>
                <RzParagraph>
                    The <code>RzTextField</code> component encapsulates a complete form field experience by combining a label, an input (via <code>RzTextEdit</code>),
                    optional help content, and validation messages. The example below shows how to use it inside an <code>EditForm</code>.
                </RzParagraph>

                <RzBrowser Layout="typeof(PreviewLayout)">
	                <div class="mx-auto p-5">
		                <EditForm Model="Model" class="form-children-spacing">
			                <RzValidationSummary/>

			                <RzTextField For="@(() => Model.PhoneNumber)" DisplayName="Phone Number" Role="@TextRole.Tel"
			                           Placeholder="Enter your phone number.." PrependIcon="@MdiIcon.Phone">
				                <RzFieldHelp>This is a helpful description</RzFieldHelp>
			                </RzTextField>

		                </EditForm>
                    </div>
                </RzBrowser>

                <RzCodeViewer Language="@CodeLanguage.Razor" class="mb-10">
&lt;EditForm Model="Model" class="form-children-spacing"&gt;
    &lt;RzValidationSummary /&gt;

    &lt;RzTextField For="@@(() =&gt; Model.PhoneNumber)" DisplayName="Phone Number" Role="@@TextRole.Tel"
               Placeholder="Enter your phone number.." PrependIcon="@MdiIcon.Phone"&gt;
        &lt;FieldHelp&gt;This is a helpful description&lt;/FieldHelp&gt;
    &lt;/RzTextField&gt;

    &lt;RzButton type="submit" Variant="ButtonVariant.Primary" Size="Size.Medium"&gt;
        &lt;span&gt;Save&lt;/span&gt;
    &lt;/RzButton&gt;
&lt;/EditForm&gt;
                </RzCodeViewer>
            </section>

            <!-- Customer Model Reference -->
            <section class="my-8 py-2">
                <RzHeading Level="HeadingLevel.H2" QuickReferenceTitle="Customer Model" class="scroll-mt-20">
                    Customer Model Reference
                </RzHeading>
                <RzParagraph>
                    The following code defines a sample <code>Customer</code> model that is used in these examples:
                </RzParagraph>
                <RzCodeViewer Language="@CodeLanguage.CSharp" class="mb-10">
&lt;!-- Customer.cs --&gt;
&lt;summary&gt;
Represents a customer with personal and contact information.
&lt;/summary&gt;
public class Customer
{
    &lt;summary&gt;
    Gets or sets the unique identifier for the customer.
    &lt;/summary&gt;
    public int CustomerId { get; set; } = 1234;

    &lt;summary&gt;
    Gets or sets the full name of the customer.
    &lt;/summary&gt;
    [MaxLength(10)]
    public string Name { get; set; } = "Jane Johnson";

    &lt;summary&gt;
    Gets or sets the email address of the customer.
    &lt;/summary&gt;
    public string Email { get; set; } = "johnsonj@gmail.com";

    &lt;summary&gt;
    Gets or sets the phone number of the customer.
    &lt;/summary&gt;
    public string PhoneNumber { get; set; } = "555-555-5555";

    &lt;summary&gt;
    Gets or sets the age of the customer.
    &lt;/summary&gt;
    public int Age { get; set; } = 29;

    &lt;summary&gt;
    Gets or sets a value indicating whether the customer is active.
    &lt;/summary&gt;
    public bool IsActive { get; set; } = true;

    &lt;summary&gt;
    Gets or sets the gender of the customer.
    &lt;/summary&gt;
    public string Gender { get; set; } = "female";

    &lt;summary&gt;
    Gets or sets the preferred method of contact for the customer.
    &lt;/summary&gt;
    public string PreferredContactMethod { get; set; } = "email";

    &lt;summary&gt;
    Gets or sets the birth date of the customer.
    &lt;/summary&gt;
    public DateTime BirthDate { get; set; } = DateTime.Now.AddYears(-29).AddMonths(3).AddDays(9);

    &lt;summary&gt;
    Gets or sets the interests of the customer.
    This property is used to demonstrate the checkbox group components.
    &lt;/summary&gt;
    public List&lt;string&gt; Interests { get; set; } = new List&lt;string&gt; { "Sports" };
}
                </RzCodeViewer>
            </section>

        </MainContent>
    </RzArticle>
</RzQuickReferenceContainer>

@code
{
	private Customer Model;

	protected override void OnInitialized()
	{
		base.OnInitialized();

		Model = new();
	}
   
}
